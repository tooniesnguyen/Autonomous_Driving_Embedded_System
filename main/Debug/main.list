
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007330  08007330  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007338  08007338  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007338  08007338  00017338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800733c  0800733c  0001733c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000080  080073bc  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080073bc  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115e0  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002344  00000000  00000000  0003168c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000339d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00034a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d07  00000000  00000000  00035a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ebc  00000000  00000000  0004d777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000925a4  00000000  00000000  00060633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2bd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e4  00000000  00000000  000f2c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007024 	.word	0x08007024

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007024 	.word	0x08007024

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2007      	movs	r0, #7
 8000d70:	f000 fa02 	bl	8001178 <bno055_writeData>
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	203d      	movs	r0, #61	; 0x3d
 8000d8c:	f000 f9f4 	bl	8001178 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d103      	bne.n	8000d9e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000d96:	2013      	movs	r0, #19
 8000d98:	f000 f9e2 	bl	8001160 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000d9c:	e002      	b.n	8000da4 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000d9e:	2007      	movs	r0, #7
 8000da0:	f000 f9de 	bl	8001160 <bno055_delay>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff ffe3 	bl	8000d7c <bno055_setOperationMode>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}

08000dba <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000dbe:	200c      	movs	r0, #12
 8000dc0:	f7ff ffdc 	bl	8000d7c <bno055_setOperationMode>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000dcc:	2120      	movs	r1, #32
 8000dce:	203f      	movs	r0, #63	; 0x3f
 8000dd0:	f000 f9d2 	bl	8001178 <bno055_writeData>
  bno055_delay(700);
 8000dd4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000dd8:	f000 f9c2 	bl	8001160 <bno055_delay>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  bno055_reset();
 8000de6:	f7ff ffef 	bl	8000dc8 <bno055_reset>

  uint8_t id = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	2201      	movs	r2, #1
 8000df2:	4619      	mov	r1, r3
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 faab 	bl	8001350 <bno055_readData>
  if (id != BNO055_ID) {
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2ba0      	cmp	r3, #160	; 0xa0
 8000dfe:	d004      	beq.n	8000e0a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <bno055_setup+0x4c>)
 8000e06:	f005 f909 	bl	800601c <iprintf>
  }
  bno055_setPage(0);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ffa8 	bl	8000d60 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000e10:	2100      	movs	r1, #0
 8000e12:	203f      	movs	r0, #63	; 0x3f
 8000e14:	f000 f9b0 	bl	8001178 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000e18:	f7ff ffc8 	bl	8000dac <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f000 f99f 	bl	8001160 <bno055_delay>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	0800703c 	.word	0x0800703c

08000e30 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000e30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e34:	b09e      	sub	sp, #120	; 0x78
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff ff8e 	bl	8000d60 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e48:	2b20      	cmp	r3, #32
 8000e4a:	d108      	bne.n	8000e5e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000e4c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e54:	2208      	movs	r2, #8
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 fa7a 	bl	8001350 <bno055_readData>
 8000e5c:	e007      	b.n	8000e6e <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000e5e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e66:	2206      	movs	r2, #6
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fa71 	bl	8001350 <bno055_readData>

  double scale = 1;
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b8b      	ldr	r3, [pc, #556]	; (80010a0 <bno055_getVector+0x270>)
 8000e74:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e7c:	2b0e      	cmp	r3, #14
 8000e7e:	d109      	bne.n	8000e94 <bno055_getVector+0x64>
    scale = magScale;
 8000e80:	4b88      	ldr	r3, [pc, #544]	; (80010a4 <bno055_getVector+0x274>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fb3d 	bl	8000504 <__aeabi_ui2d>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000e92:	e03e      	b.n	8000f12 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d007      	beq.n	8000eac <bno055_getVector+0x7c>
 8000e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea0:	2b28      	cmp	r3, #40	; 0x28
 8000ea2:	d003      	beq.n	8000eac <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8000eaa:	d109      	bne.n	8000ec0 <bno055_getVector+0x90>
    scale = accelScale;
 8000eac:	4b7e      	ldr	r3, [pc, #504]	; (80010a8 <bno055_getVector+0x278>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fb27 	bl	8000504 <__aeabi_ui2d>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000ebe:	e028      	b.n	8000f12 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	d109      	bne.n	8000edc <bno055_getVector+0xac>
    scale = angularRateScale;
 8000ec8:	4b78      	ldr	r3, [pc, #480]	; (80010ac <bno055_getVector+0x27c>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fb19 	bl	8000504 <__aeabi_ui2d>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000eda:	e01a      	b.n	8000f12 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ee0:	2b1a      	cmp	r3, #26
 8000ee2:	d109      	bne.n	8000ef8 <bno055_getVector+0xc8>
    scale = eulerScale;
 8000ee4:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <bno055_getVector+0x280>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fb0b 	bl	8000504 <__aeabi_ui2d>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000ef6:	e00c      	b.n	8000f12 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d108      	bne.n	8000f12 <bno055_getVector+0xe2>
    scale = quaScale;
 8000f00:	4b6c      	ldr	r3, [pc, #432]	; (80010b4 <bno055_getVector+0x284>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fafd 	bl	8000504 <__aeabi_ui2d>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	2220      	movs	r2, #32
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 f876 	bl	800600c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	d150      	bne.n	8000fca <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000f28:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff faf2 	bl	8000524 <__aeabi_i2d>
 8000f40:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f44:	f7ff fc82 	bl	800084c <__aeabi_ddiv>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000f50:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fade 	bl	8000524 <__aeabi_i2d>
 8000f68:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f6c:	f7ff fc6e 	bl	800084c <__aeabi_ddiv>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000f78:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff faca 	bl	8000524 <__aeabi_i2d>
 8000f90:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f94:	f7ff fc5a 	bl	800084c <__aeabi_ddiv>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000fa0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fab6 	bl	8000524 <__aeabi_i2d>
 8000fb8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000fbc:	f7ff fc46 	bl	800084c <__aeabi_ddiv>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000fc8:	e03b      	b.n	8001042 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000fca:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff faa1 	bl	8000524 <__aeabi_i2d>
 8000fe2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000fe6:	f7ff fc31 	bl	800084c <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000ff2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21b      	sxth	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fa8d 	bl	8000524 <__aeabi_i2d>
 800100a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800100e:	f7ff fc1d 	bl	800084c <__aeabi_ddiv>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800101a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21b      	sxth	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa79 	bl	8000524 <__aeabi_i2d>
 8001032:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001036:	f7ff fc09 	bl	800084c <__aeabi_ddiv>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001042:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001046:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001052:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001056:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800105a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800105e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001062:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001066:	ec49 8b14 	vmov	d4, r8, r9
 800106a:	ec45 4b15 	vmov	d5, r4, r5
 800106e:	ec41 0b16 	vmov	d6, r0, r1
 8001072:	ec43 2b17 	vmov	d7, r2, r3
}
 8001076:	eeb0 0a44 	vmov.f32	s0, s8
 800107a:	eef0 0a64 	vmov.f32	s1, s9
 800107e:	eeb0 1a45 	vmov.f32	s2, s10
 8001082:	eef0 1a65 	vmov.f32	s3, s11
 8001086:	eeb0 2a46 	vmov.f32	s4, s12
 800108a:	eef0 2a66 	vmov.f32	s5, s13
 800108e:	eeb0 3a47 	vmov.f32	s6, s14
 8001092:	eef0 3a67 	vmov.f32	s7, s15
 8001096:	3778      	adds	r7, #120	; 0x78
 8001098:	46bd      	mov	sp, r7
 800109a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800109e:	bf00      	nop
 80010a0:	3ff00000 	.word	0x3ff00000
 80010a4:	20000006 	.word	0x20000006
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000002 	.word	0x20000002
 80010b0:	20000004 	.word	0x20000004
 80010b4:	20000008 	.word	0x20000008

080010b8 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80010b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010bc:	b090      	sub	sp, #64	; 0x40
 80010be:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80010c0:	201a      	movs	r0, #26
 80010c2:	f7ff feb5 	bl	8000e30 <bno055_getVector>
 80010c6:	eeb0 4a40 	vmov.f32	s8, s0
 80010ca:	eef0 4a60 	vmov.f32	s9, s1
 80010ce:	eeb0 5a41 	vmov.f32	s10, s2
 80010d2:	eef0 5a61 	vmov.f32	s11, s3
 80010d6:	eeb0 6a42 	vmov.f32	s12, s4
 80010da:	eef0 6a62 	vmov.f32	s13, s5
 80010de:	eeb0 7a43 	vmov.f32	s14, s6
 80010e2:	eef0 7a63 	vmov.f32	s15, s7
 80010e6:	ed87 4b08 	vstr	d4, [r7, #32]
 80010ea:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80010ee:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80010f2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80010f6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80010fa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80010fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001102:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001106:	ec49 8b14 	vmov	d4, r8, r9
 800110a:	ec45 4b15 	vmov	d5, r4, r5
 800110e:	ec41 0b16 	vmov	d6, r0, r1
 8001112:	ec43 2b17 	vmov	d7, r2, r3
}
 8001116:	eeb0 0a44 	vmov.f32	s0, s8
 800111a:	eef0 0a64 	vmov.f32	s1, s9
 800111e:	eeb0 1a45 	vmov.f32	s2, s10
 8001122:	eef0 1a65 	vmov.f32	s3, s11
 8001126:	eeb0 2a46 	vmov.f32	s4, s12
 800112a:	eef0 2a66 	vmov.f32	s5, s13
 800112e:	eeb0 3a47 	vmov.f32	s6, s14
 8001132:	eef0 3a67 	vmov.f32	s7, s15
 8001136:	3740      	adds	r7, #64	; 0x40
 8001138:	46bd      	mov	sp, r7
 800113a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001140 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <bno055_assignI2C+0x1c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000009c 	.word	0x2000009c

08001160 <bno055_delay>:

void bno055_delay(int time) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fdd8 	bl	8001d20 <HAL_Delay>
#endif
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af02      	add	r7, sp, #8
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	733b      	strb	r3, [r7, #12]
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001190:	4b5a      	ldr	r3, [pc, #360]	; (80012fc <bno055_writeData+0x184>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	230a      	movs	r3, #10
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2302      	movs	r3, #2
 800119e:	2152      	movs	r1, #82	; 0x52
 80011a0:	f001 fdbe 	bl	8002d20 <HAL_I2C_Master_Transmit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80a0 	beq.w	80012f0 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d103      	bne.n	80011be <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80011b6:	4852      	ldr	r0, [pc, #328]	; (8001300 <bno055_writeData+0x188>)
 80011b8:	f004 ffb6 	bl	8006128 <puts>
 80011bc:	e012      	b.n	80011e4 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d103      	bne.n	80011cc <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80011c4:	484f      	ldr	r0, [pc, #316]	; (8001304 <bno055_writeData+0x18c>)
 80011c6:	f004 ffaf 	bl	8006128 <puts>
 80011ca:	e00b      	b.n	80011e4 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d103      	bne.n	80011da <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80011d2:	484d      	ldr	r0, [pc, #308]	; (8001308 <bno055_writeData+0x190>)
 80011d4:	f004 ffa8 	bl	8006128 <puts>
 80011d8:	e004      	b.n	80011e4 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	4619      	mov	r1, r3
 80011de:	484b      	ldr	r0, [pc, #300]	; (800130c <bno055_writeData+0x194>)
 80011e0:	f004 ff1c 	bl	800601c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80011e4:	4b45      	ldr	r3, [pc, #276]	; (80012fc <bno055_writeData+0x184>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 f8cb 	bl	8003384 <HAL_I2C_GetError>
 80011ee:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d07e      	beq.n	80012f4 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d103      	bne.n	8001204 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80011fc:	4844      	ldr	r0, [pc, #272]	; (8001310 <bno055_writeData+0x198>)
 80011fe:	f004 ff93 	bl	8006128 <puts>
 8001202:	e021      	b.n	8001248 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d103      	bne.n	8001212 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800120a:	4842      	ldr	r0, [pc, #264]	; (8001314 <bno055_writeData+0x19c>)
 800120c:	f004 ff8c 	bl	8006128 <puts>
 8001210:	e01a      	b.n	8001248 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d103      	bne.n	8001220 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001218:	483f      	ldr	r0, [pc, #252]	; (8001318 <bno055_writeData+0x1a0>)
 800121a:	f004 ff85 	bl	8006128 <puts>
 800121e:	e013      	b.n	8001248 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	2b08      	cmp	r3, #8
 8001224:	d103      	bne.n	800122e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001226:	483d      	ldr	r0, [pc, #244]	; (800131c <bno055_writeData+0x1a4>)
 8001228:	f004 ff7e 	bl	8006128 <puts>
 800122c:	e00c      	b.n	8001248 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	2b10      	cmp	r3, #16
 8001232:	d103      	bne.n	800123c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001234:	483a      	ldr	r0, [pc, #232]	; (8001320 <bno055_writeData+0x1a8>)
 8001236:	f004 ff77 	bl	8006128 <puts>
 800123a:	e005      	b.n	8001248 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b20      	cmp	r3, #32
 8001240:	d102      	bne.n	8001248 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001242:	4838      	ldr	r0, [pc, #224]	; (8001324 <bno055_writeData+0x1ac>)
 8001244:	f004 ff70 	bl	8006128 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <bno055_writeData+0x184>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f002 f88b 	bl	8003368 <HAL_I2C_GetState>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d103      	bne.n	8001264 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 800125c:	4832      	ldr	r0, [pc, #200]	; (8001328 <bno055_writeData+0x1b0>)
 800125e:	f004 ff63 	bl	8006128 <puts>
 8001262:	e048      	b.n	80012f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	2b20      	cmp	r3, #32
 8001268:	d103      	bne.n	8001272 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800126a:	482f      	ldr	r0, [pc, #188]	; (8001328 <bno055_writeData+0x1b0>)
 800126c:	f004 ff5c 	bl	8006128 <puts>
 8001270:	e041      	b.n	80012f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b24      	cmp	r3, #36	; 0x24
 8001276:	d103      	bne.n	8001280 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001278:	482c      	ldr	r0, [pc, #176]	; (800132c <bno055_writeData+0x1b4>)
 800127a:	f004 ff55 	bl	8006128 <puts>
 800127e:	e03a      	b.n	80012f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b21      	cmp	r3, #33	; 0x21
 8001284:	d103      	bne.n	800128e <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001286:	482a      	ldr	r0, [pc, #168]	; (8001330 <bno055_writeData+0x1b8>)
 8001288:	f004 ff4e 	bl	8006128 <puts>
 800128c:	e033      	b.n	80012f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b22      	cmp	r3, #34	; 0x22
 8001292:	d103      	bne.n	800129c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001294:	4827      	ldr	r0, [pc, #156]	; (8001334 <bno055_writeData+0x1bc>)
 8001296:	f004 ff47 	bl	8006128 <puts>
 800129a:	e02c      	b.n	80012f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	2b28      	cmp	r3, #40	; 0x28
 80012a0:	d103      	bne.n	80012aa <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80012a2:	4825      	ldr	r0, [pc, #148]	; (8001338 <bno055_writeData+0x1c0>)
 80012a4:	f004 ff40 	bl	8006128 <puts>
 80012a8:	e025      	b.n	80012f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b29      	cmp	r3, #41	; 0x29
 80012ae:	d103      	bne.n	80012b8 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80012b0:	4822      	ldr	r0, [pc, #136]	; (800133c <bno055_writeData+0x1c4>)
 80012b2:	f004 ff39 	bl	8006128 <puts>
 80012b6:	e01e      	b.n	80012f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2b2a      	cmp	r3, #42	; 0x2a
 80012bc:	d103      	bne.n	80012c6 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80012be:	4820      	ldr	r0, [pc, #128]	; (8001340 <bno055_writeData+0x1c8>)
 80012c0:	f004 ff32 	bl	8006128 <puts>
 80012c4:	e017      	b.n	80012f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b60      	cmp	r3, #96	; 0x60
 80012ca:	d103      	bne.n	80012d4 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80012cc:	481d      	ldr	r0, [pc, #116]	; (8001344 <bno055_writeData+0x1cc>)
 80012ce:	f004 ff2b 	bl	8006128 <puts>
 80012d2:	e010      	b.n	80012f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2ba0      	cmp	r3, #160	; 0xa0
 80012d8:	d103      	bne.n	80012e2 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80012da:	481b      	ldr	r0, [pc, #108]	; (8001348 <bno055_writeData+0x1d0>)
 80012dc:	f004 ff24 	bl	8006128 <puts>
 80012e0:	e009      	b.n	80012f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2be0      	cmp	r3, #224	; 0xe0
 80012e6:	d106      	bne.n	80012f6 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <bno055_writeData+0x1d4>)
 80012ea:	f004 ff1d 	bl	8006128 <puts>
 80012ee:	e002      	b.n	80012f6 <bno055_writeData+0x17e>
    return;
 80012f0:	bf00      	nop
 80012f2:	e000      	b.n	80012f6 <bno055_writeData+0x17e>
    return;
 80012f4:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000009c 	.word	0x2000009c
 8001300:	08007078 	.word	0x08007078
 8001304:	0800709c 	.word	0x0800709c
 8001308:	080070c4 	.word	0x080070c4
 800130c:	080070e8 	.word	0x080070e8
 8001310:	08007100 	.word	0x08007100
 8001314:	08007114 	.word	0x08007114
 8001318:	08007128 	.word	0x08007128
 800131c:	0800713c 	.word	0x0800713c
 8001320:	08007150 	.word	0x08007150
 8001324:	08007164 	.word	0x08007164
 8001328:	0800717c 	.word	0x0800717c
 800132c:	08007194 	.word	0x08007194
 8001330:	080071a8 	.word	0x080071a8
 8001334:	080071c0 	.word	0x080071c0
 8001338:	080071d8 	.word	0x080071d8
 800133c:	080071f0 	.word	0x080071f0
 8001340:	08007210 	.word	0x08007210
 8001344:	08007230 	.word	0x08007230
 8001348:	08007248 	.word	0x08007248
 800134c:	08007260 	.word	0x08007260

08001350 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af02      	add	r7, sp, #8
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <bno055_readData+0x40>)
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	1dfa      	adds	r2, r7, #7
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	2152      	movs	r1, #82	; 0x52
 800136e:	f001 fcd7 	bl	8002d20 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <bno055_readData+0x40>)
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	b29b      	uxth	r3, r3
 800137a:	2264      	movs	r2, #100	; 0x64
 800137c:	9200      	str	r2, [sp, #0]
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	2152      	movs	r1, #82	; 0x52
 8001382:	f001 fdcb 	bl	8002f1c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000009c 	.word	0x2000009c

08001394 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_UARTEx_RxEventCallback+0x34>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10a      	bne.n	80013c0 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		memcpy(MainBuf, RxBuf, Size);
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4907      	ldr	r1, [pc, #28]	; (80013cc <HAL_UARTEx_RxEventCallback+0x38>)
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80013b2:	f004 fe1d 	bl	8005ff0 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 80013b6:	220a      	movs	r2, #10
 80013b8:	4904      	ldr	r1, [pc, #16]	; (80013cc <HAL_UARTEx_RxEventCallback+0x38>)
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <HAL_UARTEx_RxEventCallback+0x40>)
 80013bc:	f003 fc99 	bl	8004cf2 <HAL_UARTEx_ReceiveToIdle_DMA>
//		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
	}



}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40004400 	.word	0x40004400
 80013cc:	20000200 	.word	0x20000200
 80013d0:	2000020c 	.word	0x2000020c
 80013d4:	2000013c 	.word	0x2000013c

080013d8 <HAL_TIM_PeriodElapsedCallback>:

uint8_t data[3];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]


    // Assign values to the elements of the data array

}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f0:	f000 fc24 	bl	8001c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f4:	f000 f874 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f8:	f000 f9a2 	bl	8001740 <MX_GPIO_Init>
  MX_DMA_Init();
 80013fc:	f000 f980 	bl	8001700 <MX_DMA_Init>
  MX_TIM4_Init();
 8001400:	f000 f906 	bl	8001610 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001404:	f000 f952 	bl	80016ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001408:	f000 f8d4 	bl	80015b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 800140c:	482d      	ldr	r0, [pc, #180]	; (80014c4 <main+0xd8>)
 800140e:	f7ff fe97 	bl	8001140 <bno055_assignI2C>
  bno055_setup();
 8001412:	f7ff fce5 	bl	8000de0 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001416:	f7ff fcd0 	bl	8000dba <bno055_setOperationModeNDOF>

  HAL_TIM_Base_Start_IT(&htim4);
 800141a:	482b      	ldr	r0, [pc, #172]	; (80014c8 <main+0xdc>)
 800141c:	f002 ff94 	bl	8004348 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001420:	220a      	movs	r2, #10
 8001422:	492a      	ldr	r1, [pc, #168]	; (80014cc <main+0xe0>)
 8001424:	482a      	ldr	r0, [pc, #168]	; (80014d0 <main+0xe4>)
 8001426:	f003 fc64 	bl	8004cf2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <main+0xe8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <main+0xe8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0208 	bic.w	r2, r2, #8
 8001438:	601a      	str	r2, [r3, #0]
  while (1)
  {



	  v = bno055_getVectorEuler();
 800143a:	f7ff fe3d 	bl	80010b8 <bno055_getVectorEuler>
 800143e:	eeb0 4a40 	vmov.f32	s8, s0
 8001442:	eef0 4a60 	vmov.f32	s9, s1
 8001446:	eeb0 5a41 	vmov.f32	s10, s2
 800144a:	eef0 5a61 	vmov.f32	s11, s3
 800144e:	eeb0 6a42 	vmov.f32	s12, s4
 8001452:	eef0 6a62 	vmov.f32	s13, s5
 8001456:	eeb0 7a43 	vmov.f32	s14, s6
 800145a:	eef0 7a63 	vmov.f32	s15, s7
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <main+0xec>)
 8001460:	ed83 4b00 	vstr	d4, [r3]
 8001464:	ed83 5b02 	vstr	d5, [r3, #8]
 8001468:	ed83 6b04 	vstr	d6, [r3, #16]
 800146c:	ed83 7b06 	vstr	d7, [r3, #24]
	    data[0] = (uint8_t)v.x;
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <main+0xec>)
 8001472:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff facf 	bl	8000a1c <__aeabi_d2uiz>
 800147e:	4603      	mov	r3, r0
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <main+0xf0>)
 8001484:	701a      	strb	r2, [r3, #0]
	    data[1] = (uint8_t)v.y;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <main+0xec>)
 8001488:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fac4 	bl	8000a1c <__aeabi_d2uiz>
 8001494:	4603      	mov	r3, r0
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <main+0xf0>)
 800149a:	705a      	strb	r2, [r3, #1]
	    data[2] = (uint8_t)v.z;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <main+0xec>)
 800149e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff fab9 	bl	8000a1c <__aeabi_d2uiz>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <main+0xf0>)
 80014b0:	709a      	strb	r2, [r3, #2]
	    HAL_UART_Transmit(&huart2, data, 50, 1000);
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	2232      	movs	r2, #50	; 0x32
 80014b8:	4908      	ldr	r1, [pc, #32]	; (80014dc <main+0xf0>)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <main+0xe4>)
 80014bc:	f003 fb87 	bl	8004bce <HAL_UART_Transmit>
	  v = bno055_getVectorEuler();
 80014c0:	e7bb      	b.n	800143a <main+0x4e>
 80014c2:	bf00      	nop
 80014c4:	200000a0 	.word	0x200000a0
 80014c8:	200000f4 	.word	0x200000f4
 80014cc:	20000200 	.word	0x20000200
 80014d0:	2000013c 	.word	0x2000013c
 80014d4:	20000180 	.word	0x20000180
 80014d8:	200001e0 	.word	0x200001e0
 80014dc:	20000220 	.word	0x20000220

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	; 0x50
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	2230      	movs	r2, #48	; 0x30
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 fd8c 	bl	800600c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <SystemClock_Config+0xcc>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a27      	ldr	r2, [pc, #156]	; (80015ac <SystemClock_Config+0xcc>)
 800150e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <SystemClock_Config+0xcc>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <SystemClock_Config+0xd0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800152c:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <SystemClock_Config+0xd0>)
 800152e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <SystemClock_Config+0xd0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001540:	2302      	movs	r3, #2
 8001542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001544:	2301      	movs	r3, #1
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001548:	2310      	movs	r3, #16
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154c:	2302      	movs	r3, #2
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001550:	2300      	movs	r3, #0
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001554:	2308      	movs	r3, #8
 8001556:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001558:	2354      	movs	r3, #84	; 0x54
 800155a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800155c:	2302      	movs	r3, #2
 800155e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001560:	2304      	movs	r3, #4
 8001562:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fa45 	bl	80039f8 <HAL_RCC_OscConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001574:	f000 f91a 	bl	80017ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001578:	230f      	movs	r3, #15
 800157a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157c:	2302      	movs	r3, #2
 800157e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	2102      	movs	r1, #2
 8001594:	4618      	mov	r0, r3
 8001596:	f002 fca7 	bl	8003ee8 <HAL_RCC_ClockConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015a0:	f000 f904 	bl	80017ac <Error_Handler>
  }
}
 80015a4:	bf00      	nop
 80015a6:	3750      	adds	r7, #80	; 0x50
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40007000 	.word	0x40007000

080015b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_I2C1_Init+0x50>)
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <MX_I2C1_Init+0x54>)
 80015bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_I2C1_Init+0x50>)
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_I2C1_Init+0x58>)
 80015c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_I2C1_Init+0x50>)
 80015d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <MX_I2C1_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_I2C1_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_I2C1_Init+0x50>)
 80015f2:	f001 fa51 	bl	8002a98 <HAL_I2C_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015fc:	f000 f8d6 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200000a0 	.word	0x200000a0
 8001608:	40005400 	.word	0x40005400
 800160c:	00061a80 	.word	0x00061a80

08001610 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_TIM4_Init+0x94>)
 800162e:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <MX_TIM4_Init+0x98>)
 8001630:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001634:	2253      	movs	r2, #83	; 0x53
 8001636:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM4_Init+0x94>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001640:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001644:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_TIM4_Init+0x94>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001654:	f002 fe28 	bl	80042a8 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800165e:	f000 f8a5 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001670:	f002 ffd4 	bl	800461c <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800167a:	f000 f897 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_TIM4_Init+0x94>)
 800168c:	f003 f9d0 	bl	8004a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001696:	f000 f889 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200000f4 	.word	0x200000f4
 80016a8:	40000800 	.word	0x40000800

080016ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <MX_USART2_UART_Init+0x50>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016e4:	f003 fa26 	bl	8004b34 <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ee:	f000 f85d 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000013c 	.word	0x2000013c
 80016fc:	40004400 	.word	0x40004400

08001700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_DMA_Init+0x3c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <MX_DMA_Init+0x3c>)
 8001710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_DMA_Init+0x3c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2010      	movs	r0, #16
 8001728:	f000 fbf9 	bl	8001f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800172c:	2010      	movs	r0, #16
 800172e:	f000 fc12 	bl	8001f56 <HAL_NVIC_EnableIRQ>

}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_GPIO_Init+0x68>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <MX_GPIO_Init+0x68>)
 8001750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_GPIO_Init+0x68>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_GPIO_Init+0x68>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <MX_GPIO_Init+0x68>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <MX_GPIO_Init+0x68>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_GPIO_Init+0x68>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <MX_GPIO_Init+0x68>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_GPIO_Init+0x68>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_MspInit+0x4c>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_MspInit+0x4c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_MspInit+0x4c>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_MspInit+0x4c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_I2C_MspInit+0x84>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d12c      	bne.n	8001884 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_I2C_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a17      	ldr	r2, [pc, #92]	; (8001890 <HAL_I2C_MspInit+0x88>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_I2C_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001846:	f44f 7340 	mov.w	r3, #768	; 0x300
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184c:	2312      	movs	r3, #18
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001858:	2304      	movs	r3, #4
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	480c      	ldr	r0, [pc, #48]	; (8001894 <HAL_I2C_MspInit+0x8c>)
 8001864:	f000 ff94 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_I2C_MspInit+0x88>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_I2C_MspInit+0x88>)
 8001872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001876:	6413      	str	r3, [r2, #64]	; 0x40
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_I2C_MspInit+0x88>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40005400 	.word	0x40005400
 8001890:	40023800 	.word	0x40023800
 8001894:	40020400 	.word	0x40020400

08001898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_TIM_Base_MspInit+0x48>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d115      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_TIM_Base_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <HAL_TIM_Base_MspInit+0x4c>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_TIM_Base_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	201e      	movs	r0, #30
 80018cc:	f000 fb27 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018d0:	201e      	movs	r0, #30
 80018d2:	f000 fb40 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40000800 	.word	0x40000800
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <HAL_UART_MspInit+0xf0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d161      	bne.n	80019ce <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b33      	ldr	r3, [pc, #204]	; (80019dc <HAL_UART_MspInit+0xf4>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a32      	ldr	r2, [pc, #200]	; (80019dc <HAL_UART_MspInit+0xf4>)
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_UART_MspInit+0xf4>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <HAL_UART_MspInit+0xf4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a2b      	ldr	r2, [pc, #172]	; (80019dc <HAL_UART_MspInit+0xf4>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_UART_MspInit+0xf4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001942:	230c      	movs	r3, #12
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001952:	2307      	movs	r3, #7
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4820      	ldr	r0, [pc, #128]	; (80019e0 <HAL_UART_MspInit+0xf8>)
 800195e:	f000 ff17 	bl	8002790 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 8001964:	4a20      	ldr	r2, [pc, #128]	; (80019e8 <HAL_UART_MspInit+0x100>)
 8001966:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001968:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 800196a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 800197e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001982:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019a2:	4810      	ldr	r0, [pc, #64]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 80019a4:	f000 faf2 	bl	8001f8c <HAL_DMA_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80019ae:	f7ff fefd 	bl	80017ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_UART_MspInit+0xfc>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2026      	movs	r0, #38	; 0x26
 80019c4:	f000 faab 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019c8:	2026      	movs	r0, #38	; 0x26
 80019ca:	f000 fac4 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	20000180 	.word	0x20000180
 80019e8:	40026088 	.word	0x40026088

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <NMI_Handler+0x4>

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a38:	f000 f952 	bl	8001ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <DMA1_Stream5_IRQHandler+0x10>)
 8001a46:	f000 fc39 	bl	80022bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000180 	.word	0x20000180

08001a54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM4_IRQHandler+0x10>)
 8001a5a:	f002 fcd7 	bl	800440c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200000f4 	.word	0x200000f4

08001a68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <USART2_IRQHandler+0x10>)
 8001a6e:	f003 f9a5 	bl	8004dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000013c 	.word	0x2000013c

08001a7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e00a      	b.n	8001aa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8e:	f3af 8000 	nop.w
 8001a92:	4601      	mov	r1, r0
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	60ba      	str	r2, [r7, #8]
 8001a9a:	b2ca      	uxtb	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbf0      	blt.n	8001a8e <_read+0x12>
  }

  return len;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e009      	b.n	8001adc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	60ba      	str	r2, [r7, #8]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf1      	blt.n	8001ac8 <_write+0x12>
  }
  return len;
 8001ae4:	687b      	ldr	r3, [r7, #4]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_close>:

int _close(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b16:	605a      	str	r2, [r3, #4]
  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_isatty>:

int _isatty(int file)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f004 fa08 	bl	8005f9c <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20018000 	.word	0x20018000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	20000224 	.word	0x20000224
 8001bc0:	20000240 	.word	0x20000240

08001bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <SystemInit+0x20>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <SystemInit+0x20>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bec:	480d      	ldr	r0, [pc, #52]	; (8001c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bee:	490e      	ldr	r1, [pc, #56]	; (8001c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c04:	4c0b      	ldr	r4, [pc, #44]	; (8001c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c12:	f7ff ffd7 	bl	8001bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c16:	f004 f9c7 	bl	8005fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1a:	f7ff fbe7 	bl	80013ec <main>
  bx  lr    
 8001c1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c2c:	08007340 	.word	0x08007340
  ldr r2, =_sbss
 8001c30:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c34:	2000023c 	.word	0x2000023c

08001c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC_IRQHandler>
	...

08001c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <HAL_Init+0x40>)
 8001c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_Init+0x40>)
 8001c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_Init+0x40>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f000 f94f 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6a:	200f      	movs	r0, #15
 8001c6c:	f000 f808 	bl	8001c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c70:	f7ff fda2 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00

08001c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_InitTick+0x54>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_InitTick+0x58>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4619      	mov	r1, r3
 8001c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f967 	bl	8001f72 <HAL_SYSTICK_Config>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00e      	b.n	8001ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b0f      	cmp	r3, #15
 8001cb2:	d80a      	bhi.n	8001cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f000 f92f 	bl	8001f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <HAL_InitTick+0x5c>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	2000000c 	.word	0x2000000c
 8001cd8:	20000014 	.word	0x20000014
 8001cdc:	20000010 	.word	0x20000010

08001ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x20>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_IncTick+0x24>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <HAL_IncTick+0x24>)
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000014 	.word	0x20000014
 8001d04:	20000228 	.word	0x20000228

08001d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <HAL_GetTick+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000228 	.word	0x20000228

08001d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff ffee 	bl	8001d08 <HAL_GetTick>
 8001d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d005      	beq.n	8001d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_Delay+0x44>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d46:	bf00      	nop
 8001d48:	f7ff ffde 	bl	8001d08 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d8f7      	bhi.n	8001d48 <HAL_Delay+0x28>
  {
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000014 	.word	0x20000014

08001d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d84:	4013      	ands	r3, r2
 8001d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	f003 0307 	and.w	r3, r3, #7
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	db0b      	blt.n	8001df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	f003 021f 	and.w	r2, r3, #31
 8001de4:	4907      	ldr	r1, [pc, #28]	; (8001e04 <__NVIC_EnableIRQ+0x38>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2001      	movs	r0, #1
 8001dee:	fa00 f202 	lsl.w	r2, r0, r2
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e100 	.word	0xe000e100

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	; (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	; (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ff8e 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff29 	bl	8001d68 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff3e 	bl	8001db0 <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff8e 	bl	8001e5c <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5d 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff31 	bl	8001dcc <__NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffa2 	bl	8001ec4 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff feb6 	bl	8001d08 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e099      	b.n	80020dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc8:	e00f      	b.n	8001fea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fca:	f7ff fe9d 	bl	8001d08 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d908      	bls.n	8001fea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e078      	b.n	80020dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1e8      	bne.n	8001fca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <HAL_DMA_Init+0x158>)
 8002004:	4013      	ands	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002016:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	2b04      	cmp	r3, #4
 8002042:	d107      	bne.n	8002054 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4313      	orrs	r3, r2
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f023 0307 	bic.w	r3, r3, #7
 800206a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4313      	orrs	r3, r2
 8002074:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b04      	cmp	r3, #4
 800207c:	d117      	bne.n	80020ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00e      	beq.n	80020ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fb01 	bl	8002698 <DMA_CheckFifoParam>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2240      	movs	r2, #64	; 0x40
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020aa:	2301      	movs	r3, #1
 80020ac:	e016      	b.n	80020dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fab8 	bl	800262c <DMA_CalcBaseAndBitshift>
 80020bc:	4603      	mov	r3, r0
 80020be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	223f      	movs	r2, #63	; 0x3f
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	f010803f 	.word	0xf010803f

080020e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_DMA_Start_IT+0x26>
 800210a:	2302      	movs	r3, #2
 800210c:	e040      	b.n	8002190 <HAL_DMA_Start_IT+0xa8>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d12f      	bne.n	8002182 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2202      	movs	r2, #2
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fa4a 	bl	80025d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	223f      	movs	r2, #63	; 0x3f
 8002142:	409a      	lsls	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0216 	orr.w	r2, r2, #22
 8002156:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0208 	orr.w	r2, r2, #8
 800216e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	e005      	b.n	800218e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800218e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021a6:	f7ff fdaf 	bl	8001d08 <HAL_GetTick>
 80021aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d008      	beq.n	80021ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e052      	b.n	8002270 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0216 	bic.w	r2, r2, #22
 80021d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_DMA_Abort+0x62>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0208 	bic.w	r2, r2, #8
 8002208:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221a:	e013      	b.n	8002244 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800221c:	f7ff fd74 	bl	8001d08 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b05      	cmp	r3, #5
 8002228:	d90c      	bls.n	8002244 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e015      	b.n	8002270 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1e4      	bne.n	800221c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	223f      	movs	r2, #63	; 0x3f
 8002258:	409a      	lsls	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d004      	beq.n	8002296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e00c      	b.n	80022b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2205      	movs	r2, #5
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c8:	4b8e      	ldr	r3, [pc, #568]	; (8002504 <HAL_DMA_IRQHandler+0x248>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a8e      	ldr	r2, [pc, #568]	; (8002508 <HAL_DMA_IRQHandler+0x24c>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a9b      	lsrs	r3, r3, #10
 80022d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	2208      	movs	r2, #8
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01a      	beq.n	8002328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0204 	bic.w	r2, r2, #4
 800230e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	2208      	movs	r2, #8
 8002316:	409a      	lsls	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d012      	beq.n	800235e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	2201      	movs	r2, #1
 800234c:	409a      	lsls	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f043 0202 	orr.w	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2204      	movs	r2, #4
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d012      	beq.n	8002394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	2204      	movs	r2, #4
 8002382:	409a      	lsls	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f043 0204 	orr.w	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2210      	movs	r2, #16
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d043      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03c      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2210      	movs	r2, #16
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d018      	beq.n	80023fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d024      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
 80023ea:	e01f      	b.n	800242c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
 80023fc:	e016      	b.n	800242c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0208 	bic.w	r2, r2, #8
 800241a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2220      	movs	r2, #32
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 808f 	beq.w	800255c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8087 	beq.w	800255c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2220      	movs	r2, #32
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b05      	cmp	r3, #5
 8002464:	d136      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0216 	bic.w	r2, r2, #22
 8002474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_DMA_IRQHandler+0x1da>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0208 	bic.w	r2, r2, #8
 80024a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	223f      	movs	r2, #63	; 0x3f
 80024ac:	409a      	lsls	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d07e      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
        }
        return;
 80024d2:	e079      	b.n	80025c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01d      	beq.n	800251e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10d      	bne.n	800250c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d031      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
 8002500:	e02c      	b.n	800255c <HAL_DMA_IRQHandler+0x2a0>
 8002502:	bf00      	nop
 8002504:	2000000c 	.word	0x2000000c
 8002508:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d023      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e01e      	b.n	800255c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10f      	bne.n	800254c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0210 	bic.w	r2, r2, #16
 800253a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	2b00      	cmp	r3, #0
 8002562:	d032      	beq.n	80025ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d022      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2205      	movs	r2, #5
 8002574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	d307      	bcc.n	80025a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f2      	bne.n	8002588 <HAL_DMA_IRQHandler+0x2cc>
 80025a2:	e000      	b.n	80025a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
 80025c6:	e000      	b.n	80025ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80025c8:	bf00      	nop
    }
  }
}
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d108      	bne.n	8002610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800260e:	e007      	b.n	8002620 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	3b10      	subs	r3, #16
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <DMA_CalcBaseAndBitshift+0x64>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <DMA_CalcBaseAndBitshift+0x68>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d909      	bls.n	800266e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	1d1a      	adds	r2, r3, #4
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	; 0x58
 800266c:	e007      	b.n	800267e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	aaaaaaab 	.word	0xaaaaaaab
 8002694:	08007290 	.word	0x08007290

08002698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11f      	bne.n	80026f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d856      	bhi.n	8002766 <DMA_CheckFifoParam+0xce>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <DMA_CheckFifoParam+0x28>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026e3 	.word	0x080026e3
 80026c8:	080026d1 	.word	0x080026d1
 80026cc:	08002767 	.word	0x08002767
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d046      	beq.n	800276a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e0:	e043      	b.n	800276a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026ea:	d140      	bne.n	800276e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f0:	e03d      	b.n	800276e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fa:	d121      	bne.n	8002740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d837      	bhi.n	8002772 <DMA_CheckFifoParam+0xda>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <DMA_CheckFifoParam+0x70>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002719 	.word	0x08002719
 800270c:	0800271f 	.word	0x0800271f
 8002710:	08002719 	.word	0x08002719
 8002714:	08002731 	.word	0x08002731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e030      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d025      	beq.n	8002776 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272e:	e022      	b.n	8002776 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002738:	d11f      	bne.n	800277a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800273e:	e01c      	b.n	800277a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d903      	bls.n	800274e <DMA_CheckFifoParam+0xb6>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d003      	beq.n	8002754 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800274c:	e018      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
      break;
 8002752:	e015      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00e      	beq.n	800277e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      break;
 8002764:	e00b      	b.n	800277e <DMA_CheckFifoParam+0xe6>
      break;
 8002766:	bf00      	nop
 8002768:	e00a      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
 800276c:	e008      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800276e:	bf00      	nop
 8002770:	e006      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 8002772:	bf00      	nop
 8002774:	e004      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;   
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800277e:	bf00      	nop
    }
  } 
  
  return status; 
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e159      	b.n	8002a60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8148 	bne.w	8002a5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a2 	beq.w	8002a5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b57      	ldr	r3, [pc, #348]	; (8002a78 <HAL_GPIO_Init+0x2e8>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a56      	ldr	r2, [pc, #344]	; (8002a78 <HAL_GPIO_Init+0x2e8>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <HAL_GPIO_Init+0x2e8>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_GPIO_Init+0x2ec>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a49      	ldr	r2, [pc, #292]	; (8002a80 <HAL_GPIO_Init+0x2f0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d019      	beq.n	8002992 <HAL_GPIO_Init+0x202>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a48      	ldr	r2, [pc, #288]	; (8002a84 <HAL_GPIO_Init+0x2f4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_GPIO_Init+0x1fe>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a47      	ldr	r2, [pc, #284]	; (8002a88 <HAL_GPIO_Init+0x2f8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00d      	beq.n	800298a <HAL_GPIO_Init+0x1fa>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a46      	ldr	r2, [pc, #280]	; (8002a8c <HAL_GPIO_Init+0x2fc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <HAL_GPIO_Init+0x1f6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a45      	ldr	r2, [pc, #276]	; (8002a90 <HAL_GPIO_Init+0x300>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_GPIO_Init+0x1f2>
 800297e:	2304      	movs	r3, #4
 8002980:	e008      	b.n	8002994 <HAL_GPIO_Init+0x204>
 8002982:	2307      	movs	r3, #7
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x204>
 8002986:	2303      	movs	r3, #3
 8002988:	e004      	b.n	8002994 <HAL_GPIO_Init+0x204>
 800298a:	2302      	movs	r3, #2
 800298c:	e002      	b.n	8002994 <HAL_GPIO_Init+0x204>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_GPIO_Init+0x204>
 8002992:	2300      	movs	r3, #0
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f002 0203 	and.w	r2, r2, #3
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	4093      	lsls	r3, r2
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a4:	4935      	ldr	r1, [pc, #212]	; (8002a7c <HAL_GPIO_Init+0x2ec>)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b2:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <HAL_GPIO_Init+0x304>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029d6:	4a2f      	ldr	r2, [pc, #188]	; (8002a94 <HAL_GPIO_Init+0x304>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029dc:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <HAL_GPIO_Init+0x304>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a00:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a2a:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a54:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	f67f aea2 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40013c00 	.word	0x40013c00

08002a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e12b      	b.n	8002d02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fea2 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	; 0x24
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002afa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002afc:	f001 fbac 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8002b00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a81      	ldr	r2, [pc, #516]	; (8002d0c <HAL_I2C_Init+0x274>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d807      	bhi.n	8002b1c <HAL_I2C_Init+0x84>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a80      	ldr	r2, [pc, #512]	; (8002d10 <HAL_I2C_Init+0x278>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	bf94      	ite	ls
 8002b14:	2301      	movls	r3, #1
 8002b16:	2300      	movhi	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e006      	b.n	8002b2a <HAL_I2C_Init+0x92>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a7d      	ldr	r2, [pc, #500]	; (8002d14 <HAL_I2C_Init+0x27c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	bf94      	ite	ls
 8002b24:	2301      	movls	r3, #1
 8002b26:	2300      	movhi	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0e7      	b.n	8002d02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a78      	ldr	r2, [pc, #480]	; (8002d18 <HAL_I2C_Init+0x280>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4a6a      	ldr	r2, [pc, #424]	; (8002d0c <HAL_I2C_Init+0x274>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d802      	bhi.n	8002b6c <HAL_I2C_Init+0xd4>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	e009      	b.n	8002b80 <HAL_I2C_Init+0xe8>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	4a69      	ldr	r2, [pc, #420]	; (8002d1c <HAL_I2C_Init+0x284>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	3301      	adds	r3, #1
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	495c      	ldr	r1, [pc, #368]	; (8002d0c <HAL_I2C_Init+0x274>)
 8002b9c:	428b      	cmp	r3, r1
 8002b9e:	d819      	bhi.n	8002bd4 <HAL_I2C_Init+0x13c>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e59      	subs	r1, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bae:	1c59      	adds	r1, r3, #1
 8002bb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_I2C_Init+0x138>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1e59      	subs	r1, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bce:	e051      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	e04f      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d111      	bne.n	8002c00 <HAL_I2C_Init+0x168>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1e58      	subs	r0, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	440b      	add	r3, r1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e012      	b.n	8002c26 <HAL_I2C_Init+0x18e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1e58      	subs	r0, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	0099      	lsls	r1, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Init+0x196>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e022      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10e      	bne.n	8002c54 <HAL_I2C_Init+0x1bc>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1e58      	subs	r0, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	440b      	add	r3, r1
 8002c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c52:	e00f      	b.n	8002c74 <HAL_I2C_Init+0x1dc>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1e58      	subs	r0, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	0099      	lsls	r1, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	6809      	ldr	r1, [r1, #0]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6911      	ldr	r1, [r2, #16]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	000186a0 	.word	0x000186a0
 8002d10:	001e847f 	.word	0x001e847f
 8002d14:	003d08ff 	.word	0x003d08ff
 8002d18:	431bde83 	.word	0x431bde83
 8002d1c:	10624dd3 	.word	0x10624dd3

08002d20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	817b      	strh	r3, [r7, #10]
 8002d30:	4613      	mov	r3, r2
 8002d32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7fe ffe8 	bl	8001d08 <HAL_GetTick>
 8002d38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	f040 80e0 	bne.w	8002f08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2319      	movs	r3, #25
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4970      	ldr	r1, [pc, #448]	; (8002f14 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fc72 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e0d3      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_I2C_Master_Transmit+0x50>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e0cc      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d007      	beq.n	8002d96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2221      	movs	r2, #33	; 0x21
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2210      	movs	r2, #16
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	893a      	ldrh	r2, [r7, #8]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a50      	ldr	r2, [pc, #320]	; (8002f18 <HAL_I2C_Master_Transmit+0x1f8>)
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	6a3a      	ldr	r2, [r7, #32]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fadc 	bl	800339c <I2C_MasterRequestWrite>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e08d      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e04:	e066      	b.n	8002ed4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fcec 	bl	80037e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d107      	bne.n	8002e2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06b      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_I2C_Master_Transmit+0x188>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d017      	beq.n	8002ea8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	6a39      	ldr	r1, [r7, #32]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fcdc 	bl	800386a <I2C_WaitOnBTFFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d107      	bne.n	8002ed0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ece:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e01a      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d194      	bne.n	8002e06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	00100002 	.word	0x00100002
 8002f18:	ffff0000 	.word	0xffff0000

08002f1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	461a      	mov	r2, r3
 8002f28:	460b      	mov	r3, r1
 8002f2a:	817b      	strh	r3, [r7, #10]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f30:	f7fe feea 	bl	8001d08 <HAL_GetTick>
 8002f34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	f040 820b 	bne.w	800335a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2319      	movs	r3, #25
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	497c      	ldr	r1, [pc, #496]	; (8003140 <HAL_I2C_Master_Receive+0x224>)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fb74 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e1fe      	b.n	800335c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_I2C_Master_Receive+0x50>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e1f7      	b.n	800335c <HAL_I2C_Master_Receive+0x440>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d007      	beq.n	8002f92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2222      	movs	r2, #34	; 0x22
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2210      	movs	r2, #16
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	893a      	ldrh	r2, [r7, #8]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a5c      	ldr	r2, [pc, #368]	; (8003144 <HAL_I2C_Master_Receive+0x228>)
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fd4:	8979      	ldrh	r1, [r7, #10]
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa60 	bl	80034a0 <I2C_MasterRequestRead>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1b8      	b.n	800335c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d113      	bne.n	800301a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	623b      	str	r3, [r7, #32]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	623b      	str	r3, [r7, #32]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e18c      	b.n	8003334 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	2b01      	cmp	r3, #1
 8003020:	d11b      	bne.n	800305a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e16c      	b.n	8003334 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	2b02      	cmp	r3, #2
 8003060:	d11b      	bne.n	800309a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003070:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	e14c      	b.n	8003334 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030c0:	e138      	b.n	8003334 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	f200 80f1 	bhi.w	80032ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d123      	bne.n	800311c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fc07 	bl	80038ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e139      	b.n	800335c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
 800311a:	e10b      	b.n	8003334 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	2b02      	cmp	r3, #2
 8003122:	d14e      	bne.n	80031c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	2200      	movs	r2, #0
 800312c:	4906      	ldr	r1, [pc, #24]	; (8003148 <HAL_I2C_Master_Receive+0x22c>)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fa84 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e10e      	b.n	800335c <HAL_I2C_Master_Receive+0x440>
 800313e:	bf00      	nop
 8003140:	00100002 	.word	0x00100002
 8003144:	ffff0000 	.word	0xffff0000
 8003148:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c0:	e0b8      	b.n	8003334 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	2200      	movs	r2, #0
 80031ca:	4966      	ldr	r1, [pc, #408]	; (8003364 <HAL_I2C_Master_Receive+0x448>)
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 fa35 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0bf      	b.n	800335c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	2200      	movs	r2, #0
 8003226:	494f      	ldr	r1, [pc, #316]	; (8003364 <HAL_I2C_Master_Receive+0x448>)
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fa07 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e091      	b.n	800335c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ac:	e042      	b.n	8003334 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fb1a 	bl	80038ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e04c      	b.n	800335c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d118      	bne.n	8003334 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	f47f aec2 	bne.w	80030c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3728      	adds	r7, #40	; 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	00010004 	.word	0x00010004

08003368 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003376:	b2db      	uxtb	r3, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	460b      	mov	r3, r1
 80033aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d006      	beq.n	80033c6 <I2C_MasterRequestWrite+0x2a>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <I2C_MasterRequestWrite+0x2a>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c4:	d108      	bne.n	80033d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e00b      	b.n	80033f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	2b12      	cmp	r3, #18
 80033de:	d107      	bne.n	80033f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f91d 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003416:	d103      	bne.n	8003420 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e035      	b.n	8003490 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800342c:	d108      	bne.n	8003440 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800343c:	611a      	str	r2, [r3, #16]
 800343e:	e01b      	b.n	8003478 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003440:	897b      	ldrh	r3, [r7, #10]
 8003442:	11db      	asrs	r3, r3, #7
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0306 	and.w	r3, r3, #6
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f063 030f 	orn	r3, r3, #15
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	490e      	ldr	r1, [pc, #56]	; (8003498 <I2C_MasterRequestWrite+0xfc>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f943 	bl	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e010      	b.n	8003490 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4907      	ldr	r1, [pc, #28]	; (800349c <I2C_MasterRequestWrite+0x100>)
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f933 	bl	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	00010008 	.word	0x00010008
 800349c:	00010002 	.word	0x00010002

080034a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	460b      	mov	r3, r1
 80034ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d006      	beq.n	80034da <I2C_MasterRequestRead+0x3a>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d003      	beq.n	80034da <I2C_MasterRequestRead+0x3a>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034d8:	d108      	bne.n	80034ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e00b      	b.n	8003504 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	2b11      	cmp	r3, #17
 80034f2:	d107      	bne.n	8003504 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f893 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352a:	d103      	bne.n	8003534 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e079      	b.n	800362c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003540:	d108      	bne.n	8003554 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	611a      	str	r2, [r3, #16]
 8003552:	e05f      	b.n	8003614 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003554:	897b      	ldrh	r3, [r7, #10]
 8003556:	11db      	asrs	r3, r3, #7
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0306 	and.w	r3, r3, #6
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f063 030f 	orn	r3, r3, #15
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4930      	ldr	r1, [pc, #192]	; (8003634 <I2C_MasterRequestRead+0x194>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f8b9 	bl	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e054      	b.n	800362c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4929      	ldr	r1, [pc, #164]	; (8003638 <I2C_MasterRequestRead+0x198>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f8a9 	bl	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e044      	b.n	800362c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f831 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ee:	d103      	bne.n	80035f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e017      	b.n	800362c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035fc:	897b      	ldrh	r3, [r7, #10]
 80035fe:	11db      	asrs	r3, r3, #7
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 0306 	and.w	r3, r3, #6
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f063 030e 	orn	r3, r3, #14
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4907      	ldr	r1, [pc, #28]	; (8003638 <I2C_MasterRequestRead+0x198>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f865 	bl	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	00010008 	.word	0x00010008
 8003638:	00010002 	.word	0x00010002

0800363c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364c:	e025      	b.n	800369a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d021      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fe fb57 	bl	8001d08 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d116      	bne.n	800369a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e023      	b.n	80036e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10d      	bne.n	80036c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	43da      	mvns	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	e00c      	b.n	80036da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d0b6      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036f8:	e051      	b.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003708:	d123      	bne.n	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003718:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003722:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e046      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d021      	beq.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fe fad5 	bl	8001d08 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d116      	bne.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e020      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10c      	bne.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e00b      	b.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	43da      	mvns	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d18d      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f4:	e02d      	b.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f8ce 	bl	8003998 <I2C_IsAcknowledgeFailed>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e02d      	b.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d021      	beq.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fa7b 	bl	8001d08 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d116      	bne.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e007      	b.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d1ca      	bne.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003876:	e02d      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f88d 	bl	8003998 <I2C_IsAcknowledgeFailed>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e02d      	b.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d021      	beq.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003890:	f7fe fa3a 	bl	8001d08 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	429a      	cmp	r2, r3
 800389e:	d302      	bcc.n	80038a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d116      	bne.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e007      	b.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d1ca      	bne.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038f8:	e042      	b.n	8003980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b10      	cmp	r3, #16
 8003906:	d119      	bne.n	800393c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0210 	mvn.w	r2, #16
 8003910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e029      	b.n	8003990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393c:	f7fe f9e4 	bl	8001d08 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d116      	bne.n	8003980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e007      	b.n	8003990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d1b5      	bne.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ae:	d11b      	bne.n	80039e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f043 0204 	orr.w	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e267      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d075      	beq.n	8003b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a16:	4b88      	ldr	r3, [pc, #544]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d00c      	beq.n	8003a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4b85      	ldr	r3, [pc, #532]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d112      	bne.n	8003a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2e:	4b82      	ldr	r3, [pc, #520]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3a:	d10b      	bne.n	8003a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	4b7e      	ldr	r3, [pc, #504]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05b      	beq.n	8003b00 <HAL_RCC_OscConfig+0x108>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d157      	bne.n	8003b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e242      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCC_OscConfig+0x74>
 8003a5e:	4b76      	ldr	r3, [pc, #472]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a75      	ldr	r2, [pc, #468]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e01d      	b.n	8003aa8 <HAL_RCC_OscConfig+0xb0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x98>
 8003a76:	4b70      	ldr	r3, [pc, #448]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6f      	ldr	r2, [pc, #444]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b6d      	ldr	r3, [pc, #436]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a6c      	ldr	r2, [pc, #432]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e00b      	b.n	8003aa8 <HAL_RCC_OscConfig+0xb0>
 8003a90:	4b69      	ldr	r3, [pc, #420]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a68      	ldr	r2, [pc, #416]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b66      	ldr	r3, [pc, #408]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a65      	ldr	r2, [pc, #404]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fe f92a 	bl	8001d08 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fe f926 	bl	8001d08 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e207      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	4b5b      	ldr	r3, [pc, #364]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xc0>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fe f916 	bl	8001d08 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fe f912 	bl	8001d08 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e1f3      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	4b51      	ldr	r3, [pc, #324]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xe8>
 8003afe:	e000      	b.n	8003b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d063      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d11c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b26:	4b44      	ldr	r3, [pc, #272]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d116      	bne.n	8003b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	4b41      	ldr	r3, [pc, #260]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_RCC_OscConfig+0x152>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e1c7      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4937      	ldr	r1, [pc, #220]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5e:	e03a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d020      	beq.n	8003baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b68:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <HAL_RCC_OscConfig+0x244>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fe f8cb 	bl	8001d08 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b76:	f7fe f8c7 	bl	8001d08 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e1a8      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b94:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4925      	ldr	r1, [pc, #148]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]
 8003ba8:	e015      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003baa:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <HAL_RCC_OscConfig+0x244>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe f8aa 	bl	8001d08 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb8:	f7fe f8a6 	bl	8001d08 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e187      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d036      	beq.n	8003c50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bea:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <HAL_RCC_OscConfig+0x248>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fe f88a 	bl	8001d08 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf8:	f7fe f886 	bl	8001d08 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e167      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x200>
 8003c16:	e01b      	b.n	8003c50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c18:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <HAL_RCC_OscConfig+0x248>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe f873 	bl	8001d08 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	e00e      	b.n	8003c44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fe f86f 	bl	8001d08 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d907      	bls.n	8003c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e150      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	42470000 	.word	0x42470000
 8003c40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c44:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1ea      	bne.n	8003c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8097 	beq.w	8003d8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c62:	4b81      	ldr	r3, [pc, #516]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10f      	bne.n	8003c8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	4b7d      	ldr	r3, [pc, #500]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	4a7c      	ldr	r2, [pc, #496]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7e:	4b7a      	ldr	r3, [pc, #488]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8e:	4b77      	ldr	r3, [pc, #476]	; (8003e6c <HAL_RCC_OscConfig+0x474>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d118      	bne.n	8003ccc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9a:	4b74      	ldr	r3, [pc, #464]	; (8003e6c <HAL_RCC_OscConfig+0x474>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a73      	ldr	r2, [pc, #460]	; (8003e6c <HAL_RCC_OscConfig+0x474>)
 8003ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca6:	f7fe f82f 	bl	8001d08 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cae:	f7fe f82b 	bl	8001d08 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e10c      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc0:	4b6a      	ldr	r3, [pc, #424]	; (8003e6c <HAL_RCC_OscConfig+0x474>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x2ea>
 8003cd4:	4b64      	ldr	r3, [pc, #400]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	4a63      	ldr	r2, [pc, #396]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce0:	e01c      	b.n	8003d1c <HAL_RCC_OscConfig+0x324>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x30c>
 8003cea:	4b5f      	ldr	r3, [pc, #380]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	4a5e      	ldr	r2, [pc, #376]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	f043 0304 	orr.w	r3, r3, #4
 8003cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf6:	4b5c      	ldr	r3, [pc, #368]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	4a5b      	ldr	r2, [pc, #364]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	6713      	str	r3, [r2, #112]	; 0x70
 8003d02:	e00b      	b.n	8003d1c <HAL_RCC_OscConfig+0x324>
 8003d04:	4b58      	ldr	r3, [pc, #352]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	4a57      	ldr	r2, [pc, #348]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d10:	4b55      	ldr	r3, [pc, #340]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	4a54      	ldr	r2, [pc, #336]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003d16:	f023 0304 	bic.w	r3, r3, #4
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fd fff0 	bl	8001d08 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2c:	f7fd ffec 	bl	8001d08 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e0cb      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d42:	4b49      	ldr	r3, [pc, #292]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0ee      	beq.n	8003d2c <HAL_RCC_OscConfig+0x334>
 8003d4e:	e014      	b.n	8003d7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d50:	f7fd ffda 	bl	8001d08 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d56:	e00a      	b.n	8003d6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fd ffd6 	bl	8001d08 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e0b5      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6e:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1ee      	bne.n	8003d58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d80:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80a1 	beq.w	8003ed8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d96:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d05c      	beq.n	8003e5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d141      	bne.n	8003e2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <HAL_RCC_OscConfig+0x478>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fd ffaa 	bl	8001d08 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fd ffa6 	bl	8001d08 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e087      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69da      	ldr	r2, [r3, #28]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	019b      	lsls	r3, r3, #6
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	3b01      	subs	r3, #1
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	491b      	ldr	r1, [pc, #108]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_RCC_OscConfig+0x478>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e06:	f7fd ff7f 	bl	8001d08 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fd ff7b 	bl	8001d08 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e05c      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x416>
 8003e2c:	e054      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_RCC_OscConfig+0x478>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fd ff68 	bl	8001d08 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd ff64 	bl	8001d08 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e045      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_RCC_OscConfig+0x470>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x444>
 8003e5a:	e03d      	b.n	8003ed8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e038      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e74:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_RCC_OscConfig+0x4ec>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d028      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d121      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d11a      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d111      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800

08003ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0cc      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003efc:	4b68      	ldr	r3, [pc, #416]	; (80040a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d90c      	bls.n	8003f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b65      	ldr	r3, [pc, #404]	; (80040a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0b8      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f3c:	4b59      	ldr	r3, [pc, #356]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a58      	ldr	r2, [pc, #352]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f54:	4b53      	ldr	r3, [pc, #332]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a52      	ldr	r2, [pc, #328]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f60:	4b50      	ldr	r3, [pc, #320]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	494d      	ldr	r1, [pc, #308]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d044      	beq.n	8004008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d107      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f86:	4b47      	ldr	r3, [pc, #284]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d119      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e07f      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d107      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e06f      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb6:	4b3b      	ldr	r3, [pc, #236]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e067      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc6:	4b37      	ldr	r3, [pc, #220]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f023 0203 	bic.w	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4934      	ldr	r1, [pc, #208]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fd8:	f7fd fe96 	bl	8001d08 <HAL_GetTick>
 8003fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe0:	f7fd fe92 	bl	8001d08 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e04f      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	4b2b      	ldr	r3, [pc, #172]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 020c 	and.w	r2, r3, #12
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	429a      	cmp	r2, r3
 8004006:	d1eb      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004008:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <HAL_RCC_ClockConfig+0x1b8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d20c      	bcs.n	8004030 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e032      	b.n	8004096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800403c:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4916      	ldr	r1, [pc, #88]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	490e      	ldr	r1, [pc, #56]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800406e:	f000 f821 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 8004072:	4602      	mov	r2, r0
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	490a      	ldr	r1, [pc, #40]	; (80040a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004080:	5ccb      	ldrb	r3, [r1, r3]
 8004082:	fa22 f303 	lsr.w	r3, r2, r3
 8004086:	4a09      	ldr	r2, [pc, #36]	; (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd fdf6 	bl	8001c80 <HAL_InitTick>

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023c00 	.word	0x40023c00
 80040a4:	40023800 	.word	0x40023800
 80040a8:	08007278 	.word	0x08007278
 80040ac:	2000000c 	.word	0x2000000c
 80040b0:	20000010 	.word	0x20000010

080040b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b8:	b090      	sub	sp, #64	; 0x40
 80040ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
 80040c0:	2300      	movs	r3, #0
 80040c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c4:	2300      	movs	r3, #0
 80040c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040cc:	4b59      	ldr	r3, [pc, #356]	; (8004234 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d00d      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0x40>
 80040d8:	2b08      	cmp	r3, #8
 80040da:	f200 80a1 	bhi.w	8004220 <HAL_RCC_GetSysClockFreq+0x16c>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x34>
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d003      	beq.n	80040ee <HAL_RCC_GetSysClockFreq+0x3a>
 80040e6:	e09b      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040e8:	4b53      	ldr	r3, [pc, #332]	; (8004238 <HAL_RCC_GetSysClockFreq+0x184>)
 80040ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040ec:	e09b      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ee:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_GetSysClockFreq+0x188>)
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040f2:	e098      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f4:	4b4f      	ldr	r3, [pc, #316]	; (8004234 <HAL_RCC_GetSysClockFreq+0x180>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040fe:	4b4d      	ldr	r3, [pc, #308]	; (8004234 <HAL_RCC_GetSysClockFreq+0x180>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d028      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410a:	4b4a      	ldr	r3, [pc, #296]	; (8004234 <HAL_RCC_GetSysClockFreq+0x180>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	2200      	movs	r2, #0
 8004112:	623b      	str	r3, [r7, #32]
 8004114:	627a      	str	r2, [r7, #36]	; 0x24
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800411c:	2100      	movs	r1, #0
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCC_GetSysClockFreq+0x188>)
 8004120:	fb03 f201 	mul.w	r2, r3, r1
 8004124:	2300      	movs	r3, #0
 8004126:	fb00 f303 	mul.w	r3, r0, r3
 800412a:	4413      	add	r3, r2
 800412c:	4a43      	ldr	r2, [pc, #268]	; (800423c <HAL_RCC_GetSysClockFreq+0x188>)
 800412e:	fba0 1202 	umull	r1, r2, r0, r2
 8004132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004134:	460a      	mov	r2, r1
 8004136:	62ba      	str	r2, [r7, #40]	; 0x28
 8004138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800413a:	4413      	add	r3, r2
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004140:	2200      	movs	r2, #0
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	61fa      	str	r2, [r7, #28]
 8004146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800414a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800414e:	f7fc fc85 	bl	8000a5c <__aeabi_uldivmod>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4613      	mov	r3, r2
 8004158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800415a:	e053      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415c:	4b35      	ldr	r3, [pc, #212]	; (8004234 <HAL_RCC_GetSysClockFreq+0x180>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	099b      	lsrs	r3, r3, #6
 8004162:	2200      	movs	r2, #0
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	617a      	str	r2, [r7, #20]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800416e:	f04f 0b00 	mov.w	fp, #0
 8004172:	4652      	mov	r2, sl
 8004174:	465b      	mov	r3, fp
 8004176:	f04f 0000 	mov.w	r0, #0
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	0159      	lsls	r1, r3, #5
 8004180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004184:	0150      	lsls	r0, r2, #5
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	ebb2 080a 	subs.w	r8, r2, sl
 800418e:	eb63 090b 	sbc.w	r9, r3, fp
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800419e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041a6:	ebb2 0408 	subs.w	r4, r2, r8
 80041aa:	eb63 0509 	sbc.w	r5, r3, r9
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	00eb      	lsls	r3, r5, #3
 80041b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041bc:	00e2      	lsls	r2, r4, #3
 80041be:	4614      	mov	r4, r2
 80041c0:	461d      	mov	r5, r3
 80041c2:	eb14 030a 	adds.w	r3, r4, sl
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	eb45 030b 	adc.w	r3, r5, fp
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041da:	4629      	mov	r1, r5
 80041dc:	028b      	lsls	r3, r1, #10
 80041de:	4621      	mov	r1, r4
 80041e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041e4:	4621      	mov	r1, r4
 80041e6:	028a      	lsls	r2, r1, #10
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ee:	2200      	movs	r2, #0
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	60fa      	str	r2, [r7, #12]
 80041f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041f8:	f7fc fc30 	bl	8000a5c <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4613      	mov	r3, r2
 8004202:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_GetSysClockFreq+0x180>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	3301      	adds	r3, #1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800421e:	e002      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCC_GetSysClockFreq+0x184>)
 8004222:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004228:	4618      	mov	r0, r3
 800422a:	3740      	adds	r7, #64	; 0x40
 800422c:	46bd      	mov	sp, r7
 800422e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	00f42400 	.word	0x00f42400
 800423c:	017d7840 	.word	0x017d7840

08004240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <HAL_RCC_GetHCLKFreq+0x14>)
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	2000000c 	.word	0x2000000c

08004258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800425c:	f7ff fff0 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	0a9b      	lsrs	r3, r3, #10
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4903      	ldr	r1, [pc, #12]	; (800427c <HAL_RCC_GetPCLK1Freq+0x24>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40023800 	.word	0x40023800
 800427c:	08007288 	.word	0x08007288

08004280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004284:	f7ff ffdc 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0b5b      	lsrs	r3, r3, #13
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	08007288 	.word	0x08007288

080042a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e041      	b.n	800433e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fd fae2 	bl	8001898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f000 fa88 	bl	80047fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d001      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e044      	b.n	80043ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d018      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x6c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438a:	d013      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x6c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1a      	ldr	r2, [pc, #104]	; (80043fc <HAL_TIM_Base_Start_IT+0xb4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00e      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x6c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a19      	ldr	r2, [pc, #100]	; (8004400 <HAL_TIM_Base_Start_IT+0xb8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d009      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x6c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a17      	ldr	r2, [pc, #92]	; (8004404 <HAL_TIM_Base_Start_IT+0xbc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x6c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a16      	ldr	r2, [pc, #88]	; (8004408 <HAL_TIM_Base_Start_IT+0xc0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d111      	bne.n	80043d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d010      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d6:	e007      	b.n	80043e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40014000 	.word	0x40014000

0800440c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d122      	bne.n	8004468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b02      	cmp	r3, #2
 800442e:	d11b      	bne.n	8004468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0202 	mvn.w	r2, #2
 8004438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f9b5 	bl	80047be <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f9a7 	bl	80047aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f9b8 	bl	80047d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b04      	cmp	r3, #4
 8004474:	d122      	bne.n	80044bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b04      	cmp	r3, #4
 8004482:	d11b      	bne.n	80044bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0204 	mvn.w	r2, #4
 800448c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f98b 	bl	80047be <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f97d 	bl	80047aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f98e 	bl	80047d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d122      	bne.n	8004510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d11b      	bne.n	8004510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0208 	mvn.w	r2, #8
 80044e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2204      	movs	r2, #4
 80044e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f961 	bl	80047be <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f953 	bl	80047aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f964 	bl	80047d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b10      	cmp	r3, #16
 800451c:	d122      	bne.n	8004564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b10      	cmp	r3, #16
 800452a:	d11b      	bne.n	8004564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0210 	mvn.w	r2, #16
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2208      	movs	r2, #8
 800453a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f937 	bl	80047be <HAL_TIM_IC_CaptureCallback>
 8004550:	e005      	b.n	800455e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f929 	bl	80047aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f93a 	bl	80047d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d10e      	bne.n	8004590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d107      	bne.n	8004590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0201 	mvn.w	r2, #1
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fc ff24 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b80      	cmp	r3, #128	; 0x80
 800459c:	d10e      	bne.n	80045bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a8:	2b80      	cmp	r3, #128	; 0x80
 80045aa:	d107      	bne.n	80045bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fab2 	bl	8004b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d10e      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d107      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8ff 	bl	80047e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d10e      	bne.n	8004614 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b20      	cmp	r3, #32
 8004602:	d107      	bne.n	8004614 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0220 	mvn.w	r2, #32
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa7c 	bl	8004b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_TIM_ConfigClockSource+0x1c>
 8004634:	2302      	movs	r3, #2
 8004636:	e0b4      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x186>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004670:	d03e      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004676:	f200 8087 	bhi.w	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	f000 8086 	beq.w	800478e <HAL_TIM_ConfigClockSource+0x172>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	d87f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b70      	cmp	r3, #112	; 0x70
 800468a:	d01a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0xa6>
 800468c:	2b70      	cmp	r3, #112	; 0x70
 800468e:	d87b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b60      	cmp	r3, #96	; 0x60
 8004692:	d050      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x11a>
 8004694:	2b60      	cmp	r3, #96	; 0x60
 8004696:	d877      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b50      	cmp	r3, #80	; 0x50
 800469a:	d03c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0xfa>
 800469c:	2b50      	cmp	r3, #80	; 0x50
 800469e:	d873      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d058      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x13a>
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d86f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b30      	cmp	r3, #48	; 0x30
 80046aa:	d064      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x15a>
 80046ac:	2b30      	cmp	r3, #48	; 0x30
 80046ae:	d86b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d060      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x15a>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d867      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d05a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x15a>
 80046c0:	e062      	b.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6899      	ldr	r1, [r3, #8]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f000 f98d 	bl	80049f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	609a      	str	r2, [r3, #8]
      break;
 80046ee:	e04f      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6899      	ldr	r1, [r3, #8]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f000 f976 	bl	80049f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004712:	609a      	str	r2, [r3, #8]
      break;
 8004714:	e03c      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 f8ea 	bl	80048fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2150      	movs	r1, #80	; 0x50
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f943 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 8004734:	e02c      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 f909 	bl	800495a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2160      	movs	r1, #96	; 0x60
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f933 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 8004754:	e01c      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	f000 f8ca 	bl	80048fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f923 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 8004774:	e00c      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f000 f91a 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 8004786:	e003      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
      break;
 800478c:	e000      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800478e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a34      	ldr	r2, [pc, #208]	; (80048e0 <TIM_Base_SetConfig+0xe4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00f      	beq.n	8004834 <TIM_Base_SetConfig+0x38>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481a:	d00b      	beq.n	8004834 <TIM_Base_SetConfig+0x38>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a31      	ldr	r2, [pc, #196]	; (80048e4 <TIM_Base_SetConfig+0xe8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_Base_SetConfig+0x38>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a30      	ldr	r2, [pc, #192]	; (80048e8 <TIM_Base_SetConfig+0xec>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_Base_SetConfig+0x38>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a2f      	ldr	r2, [pc, #188]	; (80048ec <TIM_Base_SetConfig+0xf0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d108      	bne.n	8004846 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a25      	ldr	r2, [pc, #148]	; (80048e0 <TIM_Base_SetConfig+0xe4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01b      	beq.n	8004886 <TIM_Base_SetConfig+0x8a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004854:	d017      	beq.n	8004886 <TIM_Base_SetConfig+0x8a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a22      	ldr	r2, [pc, #136]	; (80048e4 <TIM_Base_SetConfig+0xe8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <TIM_Base_SetConfig+0x8a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <TIM_Base_SetConfig+0xec>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00f      	beq.n	8004886 <TIM_Base_SetConfig+0x8a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a20      	ldr	r2, [pc, #128]	; (80048ec <TIM_Base_SetConfig+0xf0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00b      	beq.n	8004886 <TIM_Base_SetConfig+0x8a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1f      	ldr	r2, [pc, #124]	; (80048f0 <TIM_Base_SetConfig+0xf4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d007      	beq.n	8004886 <TIM_Base_SetConfig+0x8a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1e      	ldr	r2, [pc, #120]	; (80048f4 <TIM_Base_SetConfig+0xf8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d003      	beq.n	8004886 <TIM_Base_SetConfig+0x8a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <TIM_Base_SetConfig+0xfc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d108      	bne.n	8004898 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <TIM_Base_SetConfig+0xe4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d103      	bne.n	80048cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	615a      	str	r2, [r3, #20]
}
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800

080048fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f023 030a 	bic.w	r3, r3, #10
 8004938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	621a      	str	r2, [r3, #32]
}
 800494e:	bf00      	nop
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800495a:	b480      	push	{r7}
 800495c:	b087      	sub	sp, #28
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f023 0210 	bic.w	r2, r3, #16
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	031b      	lsls	r3, r3, #12
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004996:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f043 0307 	orr.w	r3, r3, #7
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	609a      	str	r2, [r3, #8]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	021a      	lsls	r2, r3, #8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	609a      	str	r2, [r3, #8]
}
 8004a24:	bf00      	nop
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e050      	b.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d018      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a94:	d013      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a18      	ldr	r2, [pc, #96]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10c      	bne.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40014000 	.word	0x40014000

08004b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e03f      	b.n	8004bc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fc fec4 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2224      	movs	r2, #36	; 0x24
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 ff9b 	bl	8005ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b08a      	sub	sp, #40	; 0x28
 8004bd2:	af02      	add	r7, sp, #8
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	603b      	str	r3, [r7, #0]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d17c      	bne.n	8004ce8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_UART_Transmit+0x2c>
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e075      	b.n	8004cea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_UART_Transmit+0x3e>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e06e      	b.n	8004cea <HAL_UART_Transmit+0x11c>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2221      	movs	r2, #33	; 0x21
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c22:	f7fd f871 	bl	8001d08 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3c:	d108      	bne.n	8004c50 <HAL_UART_Transmit+0x82>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	e003      	b.n	8004c58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c60:	e02a      	b.n	8004cb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2180      	movs	r1, #128	; 0x80
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fc53 	bl	8005518 <UART_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e036      	b.n	8004cea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3302      	adds	r3, #2
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	e007      	b.n	8004caa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1cf      	bne.n	8004c62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2140      	movs	r1, #64	; 0x40
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fc23 	bl	8005518 <UART_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e006      	b.n	8004cea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b08c      	sub	sp, #48	; 0x30
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d152      	bne.n	8004db2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e04b      	b.n	8004db4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e044      	b.n	8004db4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fc58 	bl	80055f4 <UART_Start_Receive_DMA>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d12c      	bne.n	8004dac <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d125      	bne.n	8004da6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f043 0310 	orr.w	r3, r3, #16
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d90:	627a      	str	r2, [r7, #36]	; 0x24
 8004d92:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6a39      	ldr	r1, [r7, #32]
 8004d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e5      	bne.n	8004d70 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004da4:	e002      	b.n	8004dac <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004dac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004db0:	e000      	b.n	8004db4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
  }
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3730      	adds	r7, #48	; 0x30
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b0ba      	sub	sp, #232	; 0xe8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_UART_IRQHandler+0x66>
 8004e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fd8f 	bl	800593e <UART_Receive_IT>
      return;
 8004e20:	e256      	b.n	80052d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80de 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x22c>
 8004e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80d1 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00b      	beq.n	8004e6a <HAL_UART_IRQHandler+0xae>
 8004e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f043 0201 	orr.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <HAL_UART_IRQHandler+0xd2>
 8004e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f043 0202 	orr.w	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xf6>
 8004e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f043 0204 	orr.w	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d011      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x126>
 8004ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d105      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f043 0208 	orr.w	r2, r3, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 81ed 	beq.w	80052c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_UART_IRQHandler+0x14e>
 8004ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fd1a 	bl	800593e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <HAL_UART_IRQHandler+0x17a>
 8004f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d04f      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fc22 	bl	8005780 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d141      	bne.n	8004fce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3314      	adds	r3, #20
 8004f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3314      	adds	r3, #20
 8004f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1d9      	bne.n	8004f4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d013      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	4a7d      	ldr	r2, [pc, #500]	; (8005198 <HAL_UART_IRQHandler+0x3dc>)
 8004fa4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd f964 	bl	8002278 <HAL_DMA_Abort_IT>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	e00e      	b.n	8004fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f9a4 	bl	8005314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fcc:	e00a      	b.n	8004fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f9a0 	bl	8005314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	e006      	b.n	8004fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f99c 	bl	8005314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004fe2:	e170      	b.n	80052c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	bf00      	nop
    return;
 8004fe6:	e16e      	b.n	80052c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f040 814a 	bne.w	8005286 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 8143 	beq.w	8005286 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 813c 	beq.w	8005286 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	f040 80b4 	bne.w	800519c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8140 	beq.w	80052ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800504e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005052:	429a      	cmp	r2, r3
 8005054:	f080 8139 	bcs.w	80052ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800505e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506a:	f000 8088 	beq.w	800517e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800508c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	330c      	adds	r3, #12
 8005096:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800509a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800509e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1d9      	bne.n	800506e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3314      	adds	r3, #20
 80050da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e1      	bne.n	80050ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3314      	adds	r3, #20
 80050fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3314      	adds	r3, #20
 8005116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800511a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800511c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005120:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e3      	bne.n	80050f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800514c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514e:	f023 0310 	bic.w	r3, r3, #16
 8005152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	330c      	adds	r3, #12
 800515c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005160:	65ba      	str	r2, [r7, #88]	; 0x58
 8005162:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800516e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e3      	bne.n	800513c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	4618      	mov	r0, r3
 800517a:	f7fd f80d 	bl	8002198 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005186:	b29b      	uxth	r3, r3
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	b29b      	uxth	r3, r3
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc f900 	bl	8001394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005194:	e099      	b.n	80052ca <HAL_UART_IRQHandler+0x50e>
 8005196:	bf00      	nop
 8005198:	08005847 	.word	0x08005847
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 808b 	beq.w	80052ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80051b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8086 	beq.w	80052ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	330c      	adds	r3, #12
 80051e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80051e6:	647a      	str	r2, [r7, #68]	; 0x44
 80051e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e3      	bne.n	80051c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3314      	adds	r3, #20
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	623b      	str	r3, [r7, #32]
   return(result);
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3314      	adds	r3, #20
 800521a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800521e:	633a      	str	r2, [r7, #48]	; 0x30
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e3      	bne.n	80051fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0310 	bic.w	r3, r3, #16
 8005256:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	330c      	adds	r3, #12
 8005260:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005264:	61fa      	str	r2, [r7, #28]
 8005266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	69b9      	ldr	r1, [r7, #24]
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	617b      	str	r3, [r7, #20]
   return(result);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e3      	bne.n	8005240 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800527c:	4619      	mov	r1, r3
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fc f888 	bl	8001394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005284:	e023      	b.n	80052ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <HAL_UART_IRQHandler+0x4ea>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fae5 	bl	800586e <UART_Transmit_IT>
    return;
 80052a4:	e014      	b.n	80052d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00e      	beq.n	80052d0 <HAL_UART_IRQHandler+0x514>
 80052b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fb25 	bl	800590e <UART_EndTransmit_IT>
    return;
 80052c4:	e004      	b.n	80052d0 <HAL_UART_IRQHandler+0x514>
    return;
 80052c6:	bf00      	nop
 80052c8:	e002      	b.n	80052d0 <HAL_UART_IRQHandler+0x514>
      return;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <HAL_UART_IRQHandler+0x514>
      return;
 80052ce:	bf00      	nop
  }
}
 80052d0:	37e8      	adds	r7, #232	; 0xe8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop

080052d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b09c      	sub	sp, #112	; 0x70
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d172      	bne.n	800542a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	2200      	movs	r2, #0
 8005348:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800534a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800535a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005360:	66bb      	str	r3, [r7, #104]	; 0x68
 8005362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800536a:	65ba      	str	r2, [r7, #88]	; 0x58
 800536c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3314      	adds	r3, #20
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800538e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	667b      	str	r3, [r7, #100]	; 0x64
 8005396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800539e:	647a      	str	r2, [r7, #68]	; 0x44
 80053a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e5      	bne.n	800537e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3314      	adds	r3, #20
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	623b      	str	r3, [r7, #32]
   return(result);
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053d2:	633a      	str	r2, [r7, #48]	; 0x30
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d119      	bne.n	800542a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	60fb      	str	r3, [r7, #12]
   return(result);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f023 0310 	bic.w	r3, r3, #16
 800540c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800540e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005416:	61fa      	str	r2, [r7, #28]
 8005418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	69b9      	ldr	r1, [r7, #24]
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	617b      	str	r3, [r7, #20]
   return(result);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e5      	bne.n	80053f6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	2b01      	cmp	r3, #1
 8005430:	d106      	bne.n	8005440 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005434:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005436:	4619      	mov	r1, r3
 8005438:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800543a:	f7fb ffab 	bl	8001394 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800543e:	e002      	b.n	8005446 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005440:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005442:	f7ff ff53 	bl	80052ec <HAL_UART_RxCpltCallback>
}
 8005446:	bf00      	nop
 8005448:	3770      	adds	r7, #112	; 0x70
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	2b01      	cmp	r3, #1
 8005462:	d108      	bne.n	8005476 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	b29b      	uxth	r3, r3
 800546c:	4619      	mov	r1, r3
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7fb ff90 	bl	8001394 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005474:	e002      	b.n	800547c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff ff42 	bl	8005300 <HAL_UART_RxHalfCpltCallback>
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	bf0c      	ite	eq
 80054a4:	2301      	moveq	r3, #1
 80054a6:	2300      	movne	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b21      	cmp	r3, #33	; 0x21
 80054b6:	d108      	bne.n	80054ca <UART_DMAError+0x46>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2200      	movs	r2, #0
 80054c2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80054c4:	68b8      	ldr	r0, [r7, #8]
 80054c6:	f000 f933 	bl	8005730 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b22      	cmp	r3, #34	; 0x22
 80054ea:	d108      	bne.n	80054fe <UART_DMAError+0x7a>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2200      	movs	r2, #0
 80054f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80054f8:	68b8      	ldr	r0, [r7, #8]
 80054fa:	f000 f941 	bl	8005780 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f043 0210 	orr.w	r2, r3, #16
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800550a:	68b8      	ldr	r0, [r7, #8]
 800550c:	f7ff ff02 	bl	8005314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005510:	bf00      	nop
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b090      	sub	sp, #64	; 0x40
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	4613      	mov	r3, r2
 8005526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005528:	e050      	b.n	80055cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d04c      	beq.n	80055cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <UART_WaitOnFlagUntilTimeout+0x30>
 8005538:	f7fc fbe6 	bl	8001d08 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005544:	429a      	cmp	r2, r3
 8005546:	d241      	bcs.n	80055cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005568:	637a      	str	r2, [r7, #52]	; 0x34
 800556a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800556e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e5      	bne.n	8005548 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3314      	adds	r3, #20
 8005582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	613b      	str	r3, [r7, #16]
   return(result);
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800559c:	623a      	str	r2, [r7, #32]
 800559e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	69f9      	ldr	r1, [r7, #28]
 80055a2:	6a3a      	ldr	r2, [r7, #32]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e00f      	b.n	80055ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d09f      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3740      	adds	r7, #64	; 0x40
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b098      	sub	sp, #96	; 0x60
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2222      	movs	r2, #34	; 0x22
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	4a40      	ldr	r2, [pc, #256]	; (8005724 <UART_Start_Receive_DMA+0x130>)
 8005622:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	4a3f      	ldr	r2, [pc, #252]	; (8005728 <UART_Start_Receive_DMA+0x134>)
 800562a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	4a3e      	ldr	r2, [pc, #248]	; (800572c <UART_Start_Receive_DMA+0x138>)
 8005632:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	2200      	movs	r2, #0
 800563a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800563c:	f107 0308 	add.w	r3, r7, #8
 8005640:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	f7fc fd48 	bl	80020e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d019      	beq.n	80056b2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	330c      	adds	r3, #12
 8005684:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800568e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005694:	65bb      	str	r3, [r7, #88]	; 0x58
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800569e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80056a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80056a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80056ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e5      	bne.n	800567e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3314      	adds	r3, #20
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	657b      	str	r3, [r7, #84]	; 0x54
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3314      	adds	r3, #20
 80056d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e5      	bne.n	80056b2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3314      	adds	r3, #20
 80056ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	617b      	str	r3, [r7, #20]
   return(result);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056fc:	653b      	str	r3, [r7, #80]	; 0x50
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3314      	adds	r3, #20
 8005704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005706:	627a      	str	r2, [r7, #36]	; 0x24
 8005708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6a39      	ldr	r1, [r7, #32]
 800570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	61fb      	str	r3, [r7, #28]
   return(result);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e5      	bne.n	80056e6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3760      	adds	r7, #96	; 0x60
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	08005329 	.word	0x08005329
 8005728:	0800544f 	.word	0x0800544f
 800572c:	08005485 	.word	0x08005485

08005730 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	; 0x24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	60bb      	str	r3, [r7, #8]
   return(result);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	61ba      	str	r2, [r7, #24]
 800575a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	613b      	str	r3, [r7, #16]
   return(result);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005774:	bf00      	nop
 8005776:	3724      	adds	r7, #36	; 0x24
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b095      	sub	sp, #84	; 0x54
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800579e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057a8:	643a      	str	r2, [r7, #64]	; 0x40
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3314      	adds	r3, #20
 80057da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e5      	bne.n	80057bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d119      	bne.n	800582c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	60bb      	str	r3, [r7, #8]
   return(result);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f023 0310 	bic.w	r3, r3, #16
 800580e:	647b      	str	r3, [r7, #68]	; 0x44
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005818:	61ba      	str	r2, [r7, #24]
 800581a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6979      	ldr	r1, [r7, #20]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	613b      	str	r3, [r7, #16]
   return(result);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e5      	bne.n	80057f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
}
 800583a:	bf00      	nop
 800583c:	3754      	adds	r7, #84	; 0x54
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff fd57 	bl	8005314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b21      	cmp	r3, #33	; 0x21
 8005880:	d13e      	bne.n	8005900 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588a:	d114      	bne.n	80058b6 <UART_Transmit_IT+0x48>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d110      	bne.n	80058b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	1c9a      	adds	r2, r3, #2
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	621a      	str	r2, [r3, #32]
 80058b4:	e008      	b.n	80058c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6211      	str	r1, [r2, #32]
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	4619      	mov	r1, r3
 80058d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10f      	bne.n	80058fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	e000      	b.n	8005902 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
  }
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005924:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fcd2 	bl	80052d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b08c      	sub	sp, #48	; 0x30
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b22      	cmp	r3, #34	; 0x22
 8005950:	f040 80ab 	bne.w	8005aaa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595c:	d117      	bne.n	800598e <UART_Receive_IT+0x50>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d113      	bne.n	800598e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597c:	b29a      	uxth	r2, r3
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	1c9a      	adds	r2, r3, #2
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	629a      	str	r2, [r3, #40]	; 0x28
 800598c:	e026      	b.n	80059dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005994:	2300      	movs	r3, #0
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a0:	d007      	beq.n	80059b2 <UART_Receive_IT+0x74>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <UART_Receive_IT+0x82>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	e008      	b.n	80059d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4619      	mov	r1, r3
 80059ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d15a      	bne.n	8005aa6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0220 	bic.w	r2, r2, #32
 80059fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d135      	bne.n	8005a9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	613b      	str	r3, [r7, #16]
   return(result);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f023 0310 	bic.w	r3, r3, #16
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a56:	623a      	str	r2, [r7, #32]
 8005a58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	69f9      	ldr	r1, [r7, #28]
 8005a5c:	6a3a      	ldr	r2, [r7, #32]
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e5      	bne.n	8005a36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d10a      	bne.n	8005a8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7fb fc7d 	bl	8001394 <HAL_UARTEx_RxEventCallback>
 8005a9a:	e002      	b.n	8005aa2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fc25 	bl	80052ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e002      	b.n	8005aac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e000      	b.n	8005aac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005aaa:	2302      	movs	r3, #2
  }
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3730      	adds	r7, #48	; 0x30
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab8:	b0c0      	sub	sp, #256	; 0x100
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	68d9      	ldr	r1, [r3, #12]
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	ea40 0301 	orr.w	r3, r0, r1
 8005adc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b0c:	f021 010c 	bic.w	r1, r1, #12
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2e:	6999      	ldr	r1, [r3, #24]
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	ea40 0301 	orr.w	r3, r0, r1
 8005b3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b8f      	ldr	r3, [pc, #572]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d005      	beq.n	8005b54 <UART_SetConfig+0xa0>
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b8d      	ldr	r3, [pc, #564]	; (8005d84 <UART_SetConfig+0x2d0>)
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d104      	bne.n	8005b5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b54:	f7fe fb94 	bl	8004280 <HAL_RCC_GetPCLK2Freq>
 8005b58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b5c:	e003      	b.n	8005b66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b5e:	f7fe fb7b 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8005b62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b70:	f040 810c 	bne.w	8005d8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b86:	4622      	mov	r2, r4
 8005b88:	462b      	mov	r3, r5
 8005b8a:	1891      	adds	r1, r2, r2
 8005b8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b8e:	415b      	adcs	r3, r3
 8005b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b96:	4621      	mov	r1, r4
 8005b98:	eb12 0801 	adds.w	r8, r2, r1
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	eb43 0901 	adc.w	r9, r3, r1
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bb6:	4690      	mov	r8, r2
 8005bb8:	4699      	mov	r9, r3
 8005bba:	4623      	mov	r3, r4
 8005bbc:	eb18 0303 	adds.w	r3, r8, r3
 8005bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bc4:	462b      	mov	r3, r5
 8005bc6:	eb49 0303 	adc.w	r3, r9, r3
 8005bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005be2:	460b      	mov	r3, r1
 8005be4:	18db      	adds	r3, r3, r3
 8005be6:	653b      	str	r3, [r7, #80]	; 0x50
 8005be8:	4613      	mov	r3, r2
 8005bea:	eb42 0303 	adc.w	r3, r2, r3
 8005bee:	657b      	str	r3, [r7, #84]	; 0x54
 8005bf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bf8:	f7fa ff30 	bl	8000a5c <__aeabi_uldivmod>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4b61      	ldr	r3, [pc, #388]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005c02:	fba3 2302 	umull	r2, r3, r3, r2
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	011c      	lsls	r4, r3, #4
 8005c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	464b      	mov	r3, r9
 8005c20:	1891      	adds	r1, r2, r2
 8005c22:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c24:	415b      	adcs	r3, r3
 8005c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c2c:	4641      	mov	r1, r8
 8005c2e:	eb12 0a01 	adds.w	sl, r2, r1
 8005c32:	4649      	mov	r1, r9
 8005c34:	eb43 0b01 	adc.w	fp, r3, r1
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c4c:	4692      	mov	sl, r2
 8005c4e:	469b      	mov	fp, r3
 8005c50:	4643      	mov	r3, r8
 8005c52:	eb1a 0303 	adds.w	r3, sl, r3
 8005c56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	18db      	adds	r3, r3, r3
 8005c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7e:	4613      	mov	r3, r2
 8005c80:	eb42 0303 	adc.w	r3, r2, r3
 8005c84:	647b      	str	r3, [r7, #68]	; 0x44
 8005c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c8e:	f7fa fee5 	bl	8000a5c <__aeabi_uldivmod>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4611      	mov	r1, r2
 8005c98:	4b3b      	ldr	r3, [pc, #236]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	2264      	movs	r2, #100	; 0x64
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	1acb      	subs	r3, r1, r3
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cae:	4b36      	ldr	r3, [pc, #216]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cbc:	441c      	add	r4, r3
 8005cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ccc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	1891      	adds	r1, r2, r2
 8005cd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cd8:	415b      	adcs	r3, r3
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	1851      	adds	r1, r2, r1
 8005ce4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	414b      	adcs	r3, r1
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	00cb      	lsls	r3, r1, #3
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d02:	4651      	mov	r1, sl
 8005d04:	00ca      	lsls	r2, r1, #3
 8005d06:	4610      	mov	r0, r2
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	189b      	adds	r3, r3, r2
 8005d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d14:	464b      	mov	r3, r9
 8005d16:	460a      	mov	r2, r1
 8005d18:	eb42 0303 	adc.w	r3, r2, r3
 8005d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d34:	460b      	mov	r3, r1
 8005d36:	18db      	adds	r3, r3, r3
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	eb42 0303 	adc.w	r3, r2, r3
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d4a:	f7fa fe87 	bl	8000a5c <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005d54:	fba3 1302 	umull	r1, r3, r3, r2
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	2164      	movs	r1, #100	; 0x64
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	3332      	adds	r3, #50	; 0x32
 8005d66:	4a08      	ldr	r2, [pc, #32]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005d68:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6c:	095b      	lsrs	r3, r3, #5
 8005d6e:	f003 0207 	and.w	r2, r3, #7
 8005d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4422      	add	r2, r4
 8005d7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d7c:	e105      	b.n	8005f8a <UART_SetConfig+0x4d6>
 8005d7e:	bf00      	nop
 8005d80:	40011000 	.word	0x40011000
 8005d84:	40011400 	.word	0x40011400
 8005d88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d9e:	4642      	mov	r2, r8
 8005da0:	464b      	mov	r3, r9
 8005da2:	1891      	adds	r1, r2, r2
 8005da4:	6239      	str	r1, [r7, #32]
 8005da6:	415b      	adcs	r3, r3
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
 8005daa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dae:	4641      	mov	r1, r8
 8005db0:	1854      	adds	r4, r2, r1
 8005db2:	4649      	mov	r1, r9
 8005db4:	eb43 0501 	adc.w	r5, r3, r1
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	00eb      	lsls	r3, r5, #3
 8005dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dc6:	00e2      	lsls	r2, r4, #3
 8005dc8:	4614      	mov	r4, r2
 8005dca:	461d      	mov	r5, r3
 8005dcc:	4643      	mov	r3, r8
 8005dce:	18e3      	adds	r3, r4, r3
 8005dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	eb45 0303 	adc.w	r3, r5, r3
 8005dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	008b      	lsls	r3, r1, #2
 8005dfe:	4621      	mov	r1, r4
 8005e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e04:	4621      	mov	r1, r4
 8005e06:	008a      	lsls	r2, r1, #2
 8005e08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e0c:	f7fa fe26 	bl	8000a5c <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4b60      	ldr	r3, [pc, #384]	; (8005f98 <UART_SetConfig+0x4e4>)
 8005e16:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	011c      	lsls	r4, r3, #4
 8005e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	1891      	adds	r1, r2, r2
 8005e36:	61b9      	str	r1, [r7, #24]
 8005e38:	415b      	adcs	r3, r3
 8005e3a:	61fb      	str	r3, [r7, #28]
 8005e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e40:	4641      	mov	r1, r8
 8005e42:	1851      	adds	r1, r2, r1
 8005e44:	6139      	str	r1, [r7, #16]
 8005e46:	4649      	mov	r1, r9
 8005e48:	414b      	adcs	r3, r1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e58:	4659      	mov	r1, fp
 8005e5a:	00cb      	lsls	r3, r1, #3
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e62:	4651      	mov	r1, sl
 8005e64:	00ca      	lsls	r2, r1, #3
 8005e66:	4610      	mov	r0, r2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	189b      	adds	r3, r3, r2
 8005e70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e74:	464b      	mov	r3, r9
 8005e76:	460a      	mov	r2, r1
 8005e78:	eb42 0303 	adc.w	r3, r2, r3
 8005e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e98:	4649      	mov	r1, r9
 8005e9a:	008b      	lsls	r3, r1, #2
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ea2:	4641      	mov	r1, r8
 8005ea4:	008a      	lsls	r2, r1, #2
 8005ea6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005eaa:	f7fa fdd7 	bl	8000a5c <__aeabi_uldivmod>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4b39      	ldr	r3, [pc, #228]	; (8005f98 <UART_SetConfig+0x4e4>)
 8005eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	2164      	movs	r1, #100	; 0x64
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	3332      	adds	r3, #50	; 0x32
 8005ec6:	4a34      	ldr	r2, [pc, #208]	; (8005f98 <UART_SetConfig+0x4e4>)
 8005ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed2:	441c      	add	r4, r3
 8005ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed8:	2200      	movs	r2, #0
 8005eda:	673b      	str	r3, [r7, #112]	; 0x70
 8005edc:	677a      	str	r2, [r7, #116]	; 0x74
 8005ede:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	464b      	mov	r3, r9
 8005ee6:	1891      	adds	r1, r2, r2
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	415b      	adcs	r3, r3
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	1851      	adds	r1, r2, r1
 8005ef6:	6039      	str	r1, [r7, #0]
 8005ef8:	4649      	mov	r1, r9
 8005efa:	414b      	adcs	r3, r1
 8005efc:	607b      	str	r3, [r7, #4]
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	00cb      	lsls	r3, r1, #3
 8005f0e:	4651      	mov	r1, sl
 8005f10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f14:	4651      	mov	r1, sl
 8005f16:	00ca      	lsls	r2, r1, #3
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	4642      	mov	r2, r8
 8005f20:	189b      	adds	r3, r3, r2
 8005f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f24:	464b      	mov	r3, r9
 8005f26:	460a      	mov	r2, r1
 8005f28:	eb42 0303 	adc.w	r3, r2, r3
 8005f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	663b      	str	r3, [r7, #96]	; 0x60
 8005f38:	667a      	str	r2, [r7, #100]	; 0x64
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f46:	4649      	mov	r1, r9
 8005f48:	008b      	lsls	r3, r1, #2
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f50:	4641      	mov	r1, r8
 8005f52:	008a      	lsls	r2, r1, #2
 8005f54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f58:	f7fa fd80 	bl	8000a5c <__aeabi_uldivmod>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <UART_SetConfig+0x4e4>)
 8005f62:	fba3 1302 	umull	r1, r3, r3, r2
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	2164      	movs	r1, #100	; 0x64
 8005f6a:	fb01 f303 	mul.w	r3, r1, r3
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	3332      	adds	r3, #50	; 0x32
 8005f74:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <UART_SetConfig+0x4e4>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	f003 020f 	and.w	r2, r3, #15
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4422      	add	r2, r4
 8005f88:	609a      	str	r2, [r3, #8]
}
 8005f8a:	bf00      	nop
 8005f8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f90:	46bd      	mov	sp, r7
 8005f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f96:	bf00      	nop
 8005f98:	51eb851f 	.word	0x51eb851f

08005f9c <__errno>:
 8005f9c:	4b01      	ldr	r3, [pc, #4]	; (8005fa4 <__errno+0x8>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000018 	.word	0x20000018

08005fa8 <__libc_init_array>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	4d0d      	ldr	r5, [pc, #52]	; (8005fe0 <__libc_init_array+0x38>)
 8005fac:	4c0d      	ldr	r4, [pc, #52]	; (8005fe4 <__libc_init_array+0x3c>)
 8005fae:	1b64      	subs	r4, r4, r5
 8005fb0:	10a4      	asrs	r4, r4, #2
 8005fb2:	2600      	movs	r6, #0
 8005fb4:	42a6      	cmp	r6, r4
 8005fb6:	d109      	bne.n	8005fcc <__libc_init_array+0x24>
 8005fb8:	4d0b      	ldr	r5, [pc, #44]	; (8005fe8 <__libc_init_array+0x40>)
 8005fba:	4c0c      	ldr	r4, [pc, #48]	; (8005fec <__libc_init_array+0x44>)
 8005fbc:	f001 f832 	bl	8007024 <_init>
 8005fc0:	1b64      	subs	r4, r4, r5
 8005fc2:	10a4      	asrs	r4, r4, #2
 8005fc4:	2600      	movs	r6, #0
 8005fc6:	42a6      	cmp	r6, r4
 8005fc8:	d105      	bne.n	8005fd6 <__libc_init_array+0x2e>
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd0:	4798      	blx	r3
 8005fd2:	3601      	adds	r6, #1
 8005fd4:	e7ee      	b.n	8005fb4 <__libc_init_array+0xc>
 8005fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fda:	4798      	blx	r3
 8005fdc:	3601      	adds	r6, #1
 8005fde:	e7f2      	b.n	8005fc6 <__libc_init_array+0x1e>
 8005fe0:	08007338 	.word	0x08007338
 8005fe4:	08007338 	.word	0x08007338
 8005fe8:	08007338 	.word	0x08007338
 8005fec:	0800733c 	.word	0x0800733c

08005ff0 <memcpy>:
 8005ff0:	440a      	add	r2, r1
 8005ff2:	4291      	cmp	r1, r2
 8005ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ff8:	d100      	bne.n	8005ffc <memcpy+0xc>
 8005ffa:	4770      	bx	lr
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006006:	4291      	cmp	r1, r2
 8006008:	d1f9      	bne.n	8005ffe <memcpy+0xe>
 800600a:	bd10      	pop	{r4, pc}

0800600c <memset>:
 800600c:	4402      	add	r2, r0
 800600e:	4603      	mov	r3, r0
 8006010:	4293      	cmp	r3, r2
 8006012:	d100      	bne.n	8006016 <memset+0xa>
 8006014:	4770      	bx	lr
 8006016:	f803 1b01 	strb.w	r1, [r3], #1
 800601a:	e7f9      	b.n	8006010 <memset+0x4>

0800601c <iprintf>:
 800601c:	b40f      	push	{r0, r1, r2, r3}
 800601e:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <iprintf+0x2c>)
 8006020:	b513      	push	{r0, r1, r4, lr}
 8006022:	681c      	ldr	r4, [r3, #0]
 8006024:	b124      	cbz	r4, 8006030 <iprintf+0x14>
 8006026:	69a3      	ldr	r3, [r4, #24]
 8006028:	b913      	cbnz	r3, 8006030 <iprintf+0x14>
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fa5e 	bl	80064ec <__sinit>
 8006030:	ab05      	add	r3, sp, #20
 8006032:	9a04      	ldr	r2, [sp, #16]
 8006034:	68a1      	ldr	r1, [r4, #8]
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	4620      	mov	r0, r4
 800603a:	f000 fc67 	bl	800690c <_vfiprintf_r>
 800603e:	b002      	add	sp, #8
 8006040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006044:	b004      	add	sp, #16
 8006046:	4770      	bx	lr
 8006048:	20000018 	.word	0x20000018

0800604c <_puts_r>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	460e      	mov	r6, r1
 8006050:	4605      	mov	r5, r0
 8006052:	b118      	cbz	r0, 800605c <_puts_r+0x10>
 8006054:	6983      	ldr	r3, [r0, #24]
 8006056:	b90b      	cbnz	r3, 800605c <_puts_r+0x10>
 8006058:	f000 fa48 	bl	80064ec <__sinit>
 800605c:	69ab      	ldr	r3, [r5, #24]
 800605e:	68ac      	ldr	r4, [r5, #8]
 8006060:	b913      	cbnz	r3, 8006068 <_puts_r+0x1c>
 8006062:	4628      	mov	r0, r5
 8006064:	f000 fa42 	bl	80064ec <__sinit>
 8006068:	4b2c      	ldr	r3, [pc, #176]	; (800611c <_puts_r+0xd0>)
 800606a:	429c      	cmp	r4, r3
 800606c:	d120      	bne.n	80060b0 <_puts_r+0x64>
 800606e:	686c      	ldr	r4, [r5, #4]
 8006070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006072:	07db      	lsls	r3, r3, #31
 8006074:	d405      	bmi.n	8006082 <_puts_r+0x36>
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	0598      	lsls	r0, r3, #22
 800607a:	d402      	bmi.n	8006082 <_puts_r+0x36>
 800607c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800607e:	f000 fad3 	bl	8006628 <__retarget_lock_acquire_recursive>
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	0719      	lsls	r1, r3, #28
 8006086:	d51d      	bpl.n	80060c4 <_puts_r+0x78>
 8006088:	6923      	ldr	r3, [r4, #16]
 800608a:	b1db      	cbz	r3, 80060c4 <_puts_r+0x78>
 800608c:	3e01      	subs	r6, #1
 800608e:	68a3      	ldr	r3, [r4, #8]
 8006090:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006094:	3b01      	subs	r3, #1
 8006096:	60a3      	str	r3, [r4, #8]
 8006098:	bb39      	cbnz	r1, 80060ea <_puts_r+0x9e>
 800609a:	2b00      	cmp	r3, #0
 800609c:	da38      	bge.n	8006110 <_puts_r+0xc4>
 800609e:	4622      	mov	r2, r4
 80060a0:	210a      	movs	r1, #10
 80060a2:	4628      	mov	r0, r5
 80060a4:	f000 f848 	bl	8006138 <__swbuf_r>
 80060a8:	3001      	adds	r0, #1
 80060aa:	d011      	beq.n	80060d0 <_puts_r+0x84>
 80060ac:	250a      	movs	r5, #10
 80060ae:	e011      	b.n	80060d4 <_puts_r+0x88>
 80060b0:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <_puts_r+0xd4>)
 80060b2:	429c      	cmp	r4, r3
 80060b4:	d101      	bne.n	80060ba <_puts_r+0x6e>
 80060b6:	68ac      	ldr	r4, [r5, #8]
 80060b8:	e7da      	b.n	8006070 <_puts_r+0x24>
 80060ba:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <_puts_r+0xd8>)
 80060bc:	429c      	cmp	r4, r3
 80060be:	bf08      	it	eq
 80060c0:	68ec      	ldreq	r4, [r5, #12]
 80060c2:	e7d5      	b.n	8006070 <_puts_r+0x24>
 80060c4:	4621      	mov	r1, r4
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 f888 	bl	80061dc <__swsetup_r>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d0dd      	beq.n	800608c <_puts_r+0x40>
 80060d0:	f04f 35ff 	mov.w	r5, #4294967295
 80060d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060d6:	07da      	lsls	r2, r3, #31
 80060d8:	d405      	bmi.n	80060e6 <_puts_r+0x9a>
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	059b      	lsls	r3, r3, #22
 80060de:	d402      	bmi.n	80060e6 <_puts_r+0x9a>
 80060e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060e2:	f000 faa2 	bl	800662a <__retarget_lock_release_recursive>
 80060e6:	4628      	mov	r0, r5
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da04      	bge.n	80060f8 <_puts_r+0xac>
 80060ee:	69a2      	ldr	r2, [r4, #24]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	dc06      	bgt.n	8006102 <_puts_r+0xb6>
 80060f4:	290a      	cmp	r1, #10
 80060f6:	d004      	beq.n	8006102 <_puts_r+0xb6>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	6022      	str	r2, [r4, #0]
 80060fe:	7019      	strb	r1, [r3, #0]
 8006100:	e7c5      	b.n	800608e <_puts_r+0x42>
 8006102:	4622      	mov	r2, r4
 8006104:	4628      	mov	r0, r5
 8006106:	f000 f817 	bl	8006138 <__swbuf_r>
 800610a:	3001      	adds	r0, #1
 800610c:	d1bf      	bne.n	800608e <_puts_r+0x42>
 800610e:	e7df      	b.n	80060d0 <_puts_r+0x84>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	250a      	movs	r5, #10
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	6022      	str	r2, [r4, #0]
 8006118:	701d      	strb	r5, [r3, #0]
 800611a:	e7db      	b.n	80060d4 <_puts_r+0x88>
 800611c:	080072bc 	.word	0x080072bc
 8006120:	080072dc 	.word	0x080072dc
 8006124:	0800729c 	.word	0x0800729c

08006128 <puts>:
 8006128:	4b02      	ldr	r3, [pc, #8]	; (8006134 <puts+0xc>)
 800612a:	4601      	mov	r1, r0
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	f7ff bf8d 	b.w	800604c <_puts_r>
 8006132:	bf00      	nop
 8006134:	20000018 	.word	0x20000018

08006138 <__swbuf_r>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	460e      	mov	r6, r1
 800613c:	4614      	mov	r4, r2
 800613e:	4605      	mov	r5, r0
 8006140:	b118      	cbz	r0, 800614a <__swbuf_r+0x12>
 8006142:	6983      	ldr	r3, [r0, #24]
 8006144:	b90b      	cbnz	r3, 800614a <__swbuf_r+0x12>
 8006146:	f000 f9d1 	bl	80064ec <__sinit>
 800614a:	4b21      	ldr	r3, [pc, #132]	; (80061d0 <__swbuf_r+0x98>)
 800614c:	429c      	cmp	r4, r3
 800614e:	d12b      	bne.n	80061a8 <__swbuf_r+0x70>
 8006150:	686c      	ldr	r4, [r5, #4]
 8006152:	69a3      	ldr	r3, [r4, #24]
 8006154:	60a3      	str	r3, [r4, #8]
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	071a      	lsls	r2, r3, #28
 800615a:	d52f      	bpl.n	80061bc <__swbuf_r+0x84>
 800615c:	6923      	ldr	r3, [r4, #16]
 800615e:	b36b      	cbz	r3, 80061bc <__swbuf_r+0x84>
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	6820      	ldr	r0, [r4, #0]
 8006164:	1ac0      	subs	r0, r0, r3
 8006166:	6963      	ldr	r3, [r4, #20]
 8006168:	b2f6      	uxtb	r6, r6
 800616a:	4283      	cmp	r3, r0
 800616c:	4637      	mov	r7, r6
 800616e:	dc04      	bgt.n	800617a <__swbuf_r+0x42>
 8006170:	4621      	mov	r1, r4
 8006172:	4628      	mov	r0, r5
 8006174:	f000 f926 	bl	80063c4 <_fflush_r>
 8006178:	bb30      	cbnz	r0, 80061c8 <__swbuf_r+0x90>
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	3b01      	subs	r3, #1
 800617e:	60a3      	str	r3, [r4, #8]
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	6022      	str	r2, [r4, #0]
 8006186:	701e      	strb	r6, [r3, #0]
 8006188:	6963      	ldr	r3, [r4, #20]
 800618a:	3001      	adds	r0, #1
 800618c:	4283      	cmp	r3, r0
 800618e:	d004      	beq.n	800619a <__swbuf_r+0x62>
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	07db      	lsls	r3, r3, #31
 8006194:	d506      	bpl.n	80061a4 <__swbuf_r+0x6c>
 8006196:	2e0a      	cmp	r6, #10
 8006198:	d104      	bne.n	80061a4 <__swbuf_r+0x6c>
 800619a:	4621      	mov	r1, r4
 800619c:	4628      	mov	r0, r5
 800619e:	f000 f911 	bl	80063c4 <_fflush_r>
 80061a2:	b988      	cbnz	r0, 80061c8 <__swbuf_r+0x90>
 80061a4:	4638      	mov	r0, r7
 80061a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <__swbuf_r+0x9c>)
 80061aa:	429c      	cmp	r4, r3
 80061ac:	d101      	bne.n	80061b2 <__swbuf_r+0x7a>
 80061ae:	68ac      	ldr	r4, [r5, #8]
 80061b0:	e7cf      	b.n	8006152 <__swbuf_r+0x1a>
 80061b2:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <__swbuf_r+0xa0>)
 80061b4:	429c      	cmp	r4, r3
 80061b6:	bf08      	it	eq
 80061b8:	68ec      	ldreq	r4, [r5, #12]
 80061ba:	e7ca      	b.n	8006152 <__swbuf_r+0x1a>
 80061bc:	4621      	mov	r1, r4
 80061be:	4628      	mov	r0, r5
 80061c0:	f000 f80c 	bl	80061dc <__swsetup_r>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d0cb      	beq.n	8006160 <__swbuf_r+0x28>
 80061c8:	f04f 37ff 	mov.w	r7, #4294967295
 80061cc:	e7ea      	b.n	80061a4 <__swbuf_r+0x6c>
 80061ce:	bf00      	nop
 80061d0:	080072bc 	.word	0x080072bc
 80061d4:	080072dc 	.word	0x080072dc
 80061d8:	0800729c 	.word	0x0800729c

080061dc <__swsetup_r>:
 80061dc:	4b32      	ldr	r3, [pc, #200]	; (80062a8 <__swsetup_r+0xcc>)
 80061de:	b570      	push	{r4, r5, r6, lr}
 80061e0:	681d      	ldr	r5, [r3, #0]
 80061e2:	4606      	mov	r6, r0
 80061e4:	460c      	mov	r4, r1
 80061e6:	b125      	cbz	r5, 80061f2 <__swsetup_r+0x16>
 80061e8:	69ab      	ldr	r3, [r5, #24]
 80061ea:	b913      	cbnz	r3, 80061f2 <__swsetup_r+0x16>
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 f97d 	bl	80064ec <__sinit>
 80061f2:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <__swsetup_r+0xd0>)
 80061f4:	429c      	cmp	r4, r3
 80061f6:	d10f      	bne.n	8006218 <__swsetup_r+0x3c>
 80061f8:	686c      	ldr	r4, [r5, #4]
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006200:	0719      	lsls	r1, r3, #28
 8006202:	d42c      	bmi.n	800625e <__swsetup_r+0x82>
 8006204:	06dd      	lsls	r5, r3, #27
 8006206:	d411      	bmi.n	800622c <__swsetup_r+0x50>
 8006208:	2309      	movs	r3, #9
 800620a:	6033      	str	r3, [r6, #0]
 800620c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	f04f 30ff 	mov.w	r0, #4294967295
 8006216:	e03e      	b.n	8006296 <__swsetup_r+0xba>
 8006218:	4b25      	ldr	r3, [pc, #148]	; (80062b0 <__swsetup_r+0xd4>)
 800621a:	429c      	cmp	r4, r3
 800621c:	d101      	bne.n	8006222 <__swsetup_r+0x46>
 800621e:	68ac      	ldr	r4, [r5, #8]
 8006220:	e7eb      	b.n	80061fa <__swsetup_r+0x1e>
 8006222:	4b24      	ldr	r3, [pc, #144]	; (80062b4 <__swsetup_r+0xd8>)
 8006224:	429c      	cmp	r4, r3
 8006226:	bf08      	it	eq
 8006228:	68ec      	ldreq	r4, [r5, #12]
 800622a:	e7e6      	b.n	80061fa <__swsetup_r+0x1e>
 800622c:	0758      	lsls	r0, r3, #29
 800622e:	d512      	bpl.n	8006256 <__swsetup_r+0x7a>
 8006230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006232:	b141      	cbz	r1, 8006246 <__swsetup_r+0x6a>
 8006234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006238:	4299      	cmp	r1, r3
 800623a:	d002      	beq.n	8006242 <__swsetup_r+0x66>
 800623c:	4630      	mov	r0, r6
 800623e:	f000 fa5b 	bl	80066f8 <_free_r>
 8006242:	2300      	movs	r3, #0
 8006244:	6363      	str	r3, [r4, #52]	; 0x34
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800624c:	81a3      	strh	r3, [r4, #12]
 800624e:	2300      	movs	r3, #0
 8006250:	6063      	str	r3, [r4, #4]
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	f043 0308 	orr.w	r3, r3, #8
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	b94b      	cbnz	r3, 8006276 <__swsetup_r+0x9a>
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800626c:	d003      	beq.n	8006276 <__swsetup_r+0x9a>
 800626e:	4621      	mov	r1, r4
 8006270:	4630      	mov	r0, r6
 8006272:	f000 fa01 	bl	8006678 <__smakebuf_r>
 8006276:	89a0      	ldrh	r0, [r4, #12]
 8006278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800627c:	f010 0301 	ands.w	r3, r0, #1
 8006280:	d00a      	beq.n	8006298 <__swsetup_r+0xbc>
 8006282:	2300      	movs	r3, #0
 8006284:	60a3      	str	r3, [r4, #8]
 8006286:	6963      	ldr	r3, [r4, #20]
 8006288:	425b      	negs	r3, r3
 800628a:	61a3      	str	r3, [r4, #24]
 800628c:	6923      	ldr	r3, [r4, #16]
 800628e:	b943      	cbnz	r3, 80062a2 <__swsetup_r+0xc6>
 8006290:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006294:	d1ba      	bne.n	800620c <__swsetup_r+0x30>
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	0781      	lsls	r1, r0, #30
 800629a:	bf58      	it	pl
 800629c:	6963      	ldrpl	r3, [r4, #20]
 800629e:	60a3      	str	r3, [r4, #8]
 80062a0:	e7f4      	b.n	800628c <__swsetup_r+0xb0>
 80062a2:	2000      	movs	r0, #0
 80062a4:	e7f7      	b.n	8006296 <__swsetup_r+0xba>
 80062a6:	bf00      	nop
 80062a8:	20000018 	.word	0x20000018
 80062ac:	080072bc 	.word	0x080072bc
 80062b0:	080072dc 	.word	0x080072dc
 80062b4:	0800729c 	.word	0x0800729c

080062b8 <__sflush_r>:
 80062b8:	898a      	ldrh	r2, [r1, #12]
 80062ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062be:	4605      	mov	r5, r0
 80062c0:	0710      	lsls	r0, r2, #28
 80062c2:	460c      	mov	r4, r1
 80062c4:	d458      	bmi.n	8006378 <__sflush_r+0xc0>
 80062c6:	684b      	ldr	r3, [r1, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dc05      	bgt.n	80062d8 <__sflush_r+0x20>
 80062cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dc02      	bgt.n	80062d8 <__sflush_r+0x20>
 80062d2:	2000      	movs	r0, #0
 80062d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062da:	2e00      	cmp	r6, #0
 80062dc:	d0f9      	beq.n	80062d2 <__sflush_r+0x1a>
 80062de:	2300      	movs	r3, #0
 80062e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062e4:	682f      	ldr	r7, [r5, #0]
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	d032      	beq.n	8006350 <__sflush_r+0x98>
 80062ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062ec:	89a3      	ldrh	r3, [r4, #12]
 80062ee:	075a      	lsls	r2, r3, #29
 80062f0:	d505      	bpl.n	80062fe <__sflush_r+0x46>
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	1ac0      	subs	r0, r0, r3
 80062f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062f8:	b10b      	cbz	r3, 80062fe <__sflush_r+0x46>
 80062fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062fc:	1ac0      	subs	r0, r0, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	4602      	mov	r2, r0
 8006302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006304:	6a21      	ldr	r1, [r4, #32]
 8006306:	4628      	mov	r0, r5
 8006308:	47b0      	blx	r6
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	d106      	bne.n	800631e <__sflush_r+0x66>
 8006310:	6829      	ldr	r1, [r5, #0]
 8006312:	291d      	cmp	r1, #29
 8006314:	d82c      	bhi.n	8006370 <__sflush_r+0xb8>
 8006316:	4a2a      	ldr	r2, [pc, #168]	; (80063c0 <__sflush_r+0x108>)
 8006318:	40ca      	lsrs	r2, r1
 800631a:	07d6      	lsls	r6, r2, #31
 800631c:	d528      	bpl.n	8006370 <__sflush_r+0xb8>
 800631e:	2200      	movs	r2, #0
 8006320:	6062      	str	r2, [r4, #4]
 8006322:	04d9      	lsls	r1, r3, #19
 8006324:	6922      	ldr	r2, [r4, #16]
 8006326:	6022      	str	r2, [r4, #0]
 8006328:	d504      	bpl.n	8006334 <__sflush_r+0x7c>
 800632a:	1c42      	adds	r2, r0, #1
 800632c:	d101      	bne.n	8006332 <__sflush_r+0x7a>
 800632e:	682b      	ldr	r3, [r5, #0]
 8006330:	b903      	cbnz	r3, 8006334 <__sflush_r+0x7c>
 8006332:	6560      	str	r0, [r4, #84]	; 0x54
 8006334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006336:	602f      	str	r7, [r5, #0]
 8006338:	2900      	cmp	r1, #0
 800633a:	d0ca      	beq.n	80062d2 <__sflush_r+0x1a>
 800633c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006340:	4299      	cmp	r1, r3
 8006342:	d002      	beq.n	800634a <__sflush_r+0x92>
 8006344:	4628      	mov	r0, r5
 8006346:	f000 f9d7 	bl	80066f8 <_free_r>
 800634a:	2000      	movs	r0, #0
 800634c:	6360      	str	r0, [r4, #52]	; 0x34
 800634e:	e7c1      	b.n	80062d4 <__sflush_r+0x1c>
 8006350:	6a21      	ldr	r1, [r4, #32]
 8006352:	2301      	movs	r3, #1
 8006354:	4628      	mov	r0, r5
 8006356:	47b0      	blx	r6
 8006358:	1c41      	adds	r1, r0, #1
 800635a:	d1c7      	bne.n	80062ec <__sflush_r+0x34>
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0c4      	beq.n	80062ec <__sflush_r+0x34>
 8006362:	2b1d      	cmp	r3, #29
 8006364:	d001      	beq.n	800636a <__sflush_r+0xb2>
 8006366:	2b16      	cmp	r3, #22
 8006368:	d101      	bne.n	800636e <__sflush_r+0xb6>
 800636a:	602f      	str	r7, [r5, #0]
 800636c:	e7b1      	b.n	80062d2 <__sflush_r+0x1a>
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006374:	81a3      	strh	r3, [r4, #12]
 8006376:	e7ad      	b.n	80062d4 <__sflush_r+0x1c>
 8006378:	690f      	ldr	r7, [r1, #16]
 800637a:	2f00      	cmp	r7, #0
 800637c:	d0a9      	beq.n	80062d2 <__sflush_r+0x1a>
 800637e:	0793      	lsls	r3, r2, #30
 8006380:	680e      	ldr	r6, [r1, #0]
 8006382:	bf08      	it	eq
 8006384:	694b      	ldreq	r3, [r1, #20]
 8006386:	600f      	str	r7, [r1, #0]
 8006388:	bf18      	it	ne
 800638a:	2300      	movne	r3, #0
 800638c:	eba6 0807 	sub.w	r8, r6, r7
 8006390:	608b      	str	r3, [r1, #8]
 8006392:	f1b8 0f00 	cmp.w	r8, #0
 8006396:	dd9c      	ble.n	80062d2 <__sflush_r+0x1a>
 8006398:	6a21      	ldr	r1, [r4, #32]
 800639a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800639c:	4643      	mov	r3, r8
 800639e:	463a      	mov	r2, r7
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b0      	blx	r6
 80063a4:	2800      	cmp	r0, #0
 80063a6:	dc06      	bgt.n	80063b6 <__sflush_r+0xfe>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	e78e      	b.n	80062d4 <__sflush_r+0x1c>
 80063b6:	4407      	add	r7, r0
 80063b8:	eba8 0800 	sub.w	r8, r8, r0
 80063bc:	e7e9      	b.n	8006392 <__sflush_r+0xda>
 80063be:	bf00      	nop
 80063c0:	20400001 	.word	0x20400001

080063c4 <_fflush_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	690b      	ldr	r3, [r1, #16]
 80063c8:	4605      	mov	r5, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	b913      	cbnz	r3, 80063d4 <_fflush_r+0x10>
 80063ce:	2500      	movs	r5, #0
 80063d0:	4628      	mov	r0, r5
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	b118      	cbz	r0, 80063de <_fflush_r+0x1a>
 80063d6:	6983      	ldr	r3, [r0, #24]
 80063d8:	b90b      	cbnz	r3, 80063de <_fflush_r+0x1a>
 80063da:	f000 f887 	bl	80064ec <__sinit>
 80063de:	4b14      	ldr	r3, [pc, #80]	; (8006430 <_fflush_r+0x6c>)
 80063e0:	429c      	cmp	r4, r3
 80063e2:	d11b      	bne.n	800641c <_fflush_r+0x58>
 80063e4:	686c      	ldr	r4, [r5, #4]
 80063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0ef      	beq.n	80063ce <_fflush_r+0xa>
 80063ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063f0:	07d0      	lsls	r0, r2, #31
 80063f2:	d404      	bmi.n	80063fe <_fflush_r+0x3a>
 80063f4:	0599      	lsls	r1, r3, #22
 80063f6:	d402      	bmi.n	80063fe <_fflush_r+0x3a>
 80063f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063fa:	f000 f915 	bl	8006628 <__retarget_lock_acquire_recursive>
 80063fe:	4628      	mov	r0, r5
 8006400:	4621      	mov	r1, r4
 8006402:	f7ff ff59 	bl	80062b8 <__sflush_r>
 8006406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006408:	07da      	lsls	r2, r3, #31
 800640a:	4605      	mov	r5, r0
 800640c:	d4e0      	bmi.n	80063d0 <_fflush_r+0xc>
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	059b      	lsls	r3, r3, #22
 8006412:	d4dd      	bmi.n	80063d0 <_fflush_r+0xc>
 8006414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006416:	f000 f908 	bl	800662a <__retarget_lock_release_recursive>
 800641a:	e7d9      	b.n	80063d0 <_fflush_r+0xc>
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <_fflush_r+0x70>)
 800641e:	429c      	cmp	r4, r3
 8006420:	d101      	bne.n	8006426 <_fflush_r+0x62>
 8006422:	68ac      	ldr	r4, [r5, #8]
 8006424:	e7df      	b.n	80063e6 <_fflush_r+0x22>
 8006426:	4b04      	ldr	r3, [pc, #16]	; (8006438 <_fflush_r+0x74>)
 8006428:	429c      	cmp	r4, r3
 800642a:	bf08      	it	eq
 800642c:	68ec      	ldreq	r4, [r5, #12]
 800642e:	e7da      	b.n	80063e6 <_fflush_r+0x22>
 8006430:	080072bc 	.word	0x080072bc
 8006434:	080072dc 	.word	0x080072dc
 8006438:	0800729c 	.word	0x0800729c

0800643c <std>:
 800643c:	2300      	movs	r3, #0
 800643e:	b510      	push	{r4, lr}
 8006440:	4604      	mov	r4, r0
 8006442:	e9c0 3300 	strd	r3, r3, [r0]
 8006446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800644a:	6083      	str	r3, [r0, #8]
 800644c:	8181      	strh	r1, [r0, #12]
 800644e:	6643      	str	r3, [r0, #100]	; 0x64
 8006450:	81c2      	strh	r2, [r0, #14]
 8006452:	6183      	str	r3, [r0, #24]
 8006454:	4619      	mov	r1, r3
 8006456:	2208      	movs	r2, #8
 8006458:	305c      	adds	r0, #92	; 0x5c
 800645a:	f7ff fdd7 	bl	800600c <memset>
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <std+0x38>)
 8006460:	6263      	str	r3, [r4, #36]	; 0x24
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <std+0x3c>)
 8006464:	62a3      	str	r3, [r4, #40]	; 0x28
 8006466:	4b05      	ldr	r3, [pc, #20]	; (800647c <std+0x40>)
 8006468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <std+0x44>)
 800646c:	6224      	str	r4, [r4, #32]
 800646e:	6323      	str	r3, [r4, #48]	; 0x30
 8006470:	bd10      	pop	{r4, pc}
 8006472:	bf00      	nop
 8006474:	08006eb5 	.word	0x08006eb5
 8006478:	08006ed7 	.word	0x08006ed7
 800647c:	08006f0f 	.word	0x08006f0f
 8006480:	08006f33 	.word	0x08006f33

08006484 <_cleanup_r>:
 8006484:	4901      	ldr	r1, [pc, #4]	; (800648c <_cleanup_r+0x8>)
 8006486:	f000 b8af 	b.w	80065e8 <_fwalk_reent>
 800648a:	bf00      	nop
 800648c:	080063c5 	.word	0x080063c5

08006490 <__sfmoreglue>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	2268      	movs	r2, #104	; 0x68
 8006494:	1e4d      	subs	r5, r1, #1
 8006496:	4355      	muls	r5, r2
 8006498:	460e      	mov	r6, r1
 800649a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800649e:	f000 f997 	bl	80067d0 <_malloc_r>
 80064a2:	4604      	mov	r4, r0
 80064a4:	b140      	cbz	r0, 80064b8 <__sfmoreglue+0x28>
 80064a6:	2100      	movs	r1, #0
 80064a8:	e9c0 1600 	strd	r1, r6, [r0]
 80064ac:	300c      	adds	r0, #12
 80064ae:	60a0      	str	r0, [r4, #8]
 80064b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064b4:	f7ff fdaa 	bl	800600c <memset>
 80064b8:	4620      	mov	r0, r4
 80064ba:	bd70      	pop	{r4, r5, r6, pc}

080064bc <__sfp_lock_acquire>:
 80064bc:	4801      	ldr	r0, [pc, #4]	; (80064c4 <__sfp_lock_acquire+0x8>)
 80064be:	f000 b8b3 	b.w	8006628 <__retarget_lock_acquire_recursive>
 80064c2:	bf00      	nop
 80064c4:	2000022d 	.word	0x2000022d

080064c8 <__sfp_lock_release>:
 80064c8:	4801      	ldr	r0, [pc, #4]	; (80064d0 <__sfp_lock_release+0x8>)
 80064ca:	f000 b8ae 	b.w	800662a <__retarget_lock_release_recursive>
 80064ce:	bf00      	nop
 80064d0:	2000022d 	.word	0x2000022d

080064d4 <__sinit_lock_acquire>:
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <__sinit_lock_acquire+0x8>)
 80064d6:	f000 b8a7 	b.w	8006628 <__retarget_lock_acquire_recursive>
 80064da:	bf00      	nop
 80064dc:	2000022e 	.word	0x2000022e

080064e0 <__sinit_lock_release>:
 80064e0:	4801      	ldr	r0, [pc, #4]	; (80064e8 <__sinit_lock_release+0x8>)
 80064e2:	f000 b8a2 	b.w	800662a <__retarget_lock_release_recursive>
 80064e6:	bf00      	nop
 80064e8:	2000022e 	.word	0x2000022e

080064ec <__sinit>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	4604      	mov	r4, r0
 80064f0:	f7ff fff0 	bl	80064d4 <__sinit_lock_acquire>
 80064f4:	69a3      	ldr	r3, [r4, #24]
 80064f6:	b11b      	cbz	r3, 8006500 <__sinit+0x14>
 80064f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fc:	f7ff bff0 	b.w	80064e0 <__sinit_lock_release>
 8006500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006504:	6523      	str	r3, [r4, #80]	; 0x50
 8006506:	4b13      	ldr	r3, [pc, #76]	; (8006554 <__sinit+0x68>)
 8006508:	4a13      	ldr	r2, [pc, #76]	; (8006558 <__sinit+0x6c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	62a2      	str	r2, [r4, #40]	; 0x28
 800650e:	42a3      	cmp	r3, r4
 8006510:	bf04      	itt	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	61a3      	streq	r3, [r4, #24]
 8006516:	4620      	mov	r0, r4
 8006518:	f000 f820 	bl	800655c <__sfp>
 800651c:	6060      	str	r0, [r4, #4]
 800651e:	4620      	mov	r0, r4
 8006520:	f000 f81c 	bl	800655c <__sfp>
 8006524:	60a0      	str	r0, [r4, #8]
 8006526:	4620      	mov	r0, r4
 8006528:	f000 f818 	bl	800655c <__sfp>
 800652c:	2200      	movs	r2, #0
 800652e:	60e0      	str	r0, [r4, #12]
 8006530:	2104      	movs	r1, #4
 8006532:	6860      	ldr	r0, [r4, #4]
 8006534:	f7ff ff82 	bl	800643c <std>
 8006538:	68a0      	ldr	r0, [r4, #8]
 800653a:	2201      	movs	r2, #1
 800653c:	2109      	movs	r1, #9
 800653e:	f7ff ff7d 	bl	800643c <std>
 8006542:	68e0      	ldr	r0, [r4, #12]
 8006544:	2202      	movs	r2, #2
 8006546:	2112      	movs	r1, #18
 8006548:	f7ff ff78 	bl	800643c <std>
 800654c:	2301      	movs	r3, #1
 800654e:	61a3      	str	r3, [r4, #24]
 8006550:	e7d2      	b.n	80064f8 <__sinit+0xc>
 8006552:	bf00      	nop
 8006554:	08007298 	.word	0x08007298
 8006558:	08006485 	.word	0x08006485

0800655c <__sfp>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	4607      	mov	r7, r0
 8006560:	f7ff ffac 	bl	80064bc <__sfp_lock_acquire>
 8006564:	4b1e      	ldr	r3, [pc, #120]	; (80065e0 <__sfp+0x84>)
 8006566:	681e      	ldr	r6, [r3, #0]
 8006568:	69b3      	ldr	r3, [r6, #24]
 800656a:	b913      	cbnz	r3, 8006572 <__sfp+0x16>
 800656c:	4630      	mov	r0, r6
 800656e:	f7ff ffbd 	bl	80064ec <__sinit>
 8006572:	3648      	adds	r6, #72	; 0x48
 8006574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006578:	3b01      	subs	r3, #1
 800657a:	d503      	bpl.n	8006584 <__sfp+0x28>
 800657c:	6833      	ldr	r3, [r6, #0]
 800657e:	b30b      	cbz	r3, 80065c4 <__sfp+0x68>
 8006580:	6836      	ldr	r6, [r6, #0]
 8006582:	e7f7      	b.n	8006574 <__sfp+0x18>
 8006584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006588:	b9d5      	cbnz	r5, 80065c0 <__sfp+0x64>
 800658a:	4b16      	ldr	r3, [pc, #88]	; (80065e4 <__sfp+0x88>)
 800658c:	60e3      	str	r3, [r4, #12]
 800658e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006592:	6665      	str	r5, [r4, #100]	; 0x64
 8006594:	f000 f847 	bl	8006626 <__retarget_lock_init_recursive>
 8006598:	f7ff ff96 	bl	80064c8 <__sfp_lock_release>
 800659c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065a4:	6025      	str	r5, [r4, #0]
 80065a6:	61a5      	str	r5, [r4, #24]
 80065a8:	2208      	movs	r2, #8
 80065aa:	4629      	mov	r1, r5
 80065ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065b0:	f7ff fd2c 	bl	800600c <memset>
 80065b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065bc:	4620      	mov	r0, r4
 80065be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c0:	3468      	adds	r4, #104	; 0x68
 80065c2:	e7d9      	b.n	8006578 <__sfp+0x1c>
 80065c4:	2104      	movs	r1, #4
 80065c6:	4638      	mov	r0, r7
 80065c8:	f7ff ff62 	bl	8006490 <__sfmoreglue>
 80065cc:	4604      	mov	r4, r0
 80065ce:	6030      	str	r0, [r6, #0]
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d1d5      	bne.n	8006580 <__sfp+0x24>
 80065d4:	f7ff ff78 	bl	80064c8 <__sfp_lock_release>
 80065d8:	230c      	movs	r3, #12
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	e7ee      	b.n	80065bc <__sfp+0x60>
 80065de:	bf00      	nop
 80065e0:	08007298 	.word	0x08007298
 80065e4:	ffff0001 	.word	0xffff0001

080065e8 <_fwalk_reent>:
 80065e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ec:	4606      	mov	r6, r0
 80065ee:	4688      	mov	r8, r1
 80065f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065f4:	2700      	movs	r7, #0
 80065f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065fa:	f1b9 0901 	subs.w	r9, r9, #1
 80065fe:	d505      	bpl.n	800660c <_fwalk_reent+0x24>
 8006600:	6824      	ldr	r4, [r4, #0]
 8006602:	2c00      	cmp	r4, #0
 8006604:	d1f7      	bne.n	80065f6 <_fwalk_reent+0xe>
 8006606:	4638      	mov	r0, r7
 8006608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800660c:	89ab      	ldrh	r3, [r5, #12]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d907      	bls.n	8006622 <_fwalk_reent+0x3a>
 8006612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006616:	3301      	adds	r3, #1
 8006618:	d003      	beq.n	8006622 <_fwalk_reent+0x3a>
 800661a:	4629      	mov	r1, r5
 800661c:	4630      	mov	r0, r6
 800661e:	47c0      	blx	r8
 8006620:	4307      	orrs	r7, r0
 8006622:	3568      	adds	r5, #104	; 0x68
 8006624:	e7e9      	b.n	80065fa <_fwalk_reent+0x12>

08006626 <__retarget_lock_init_recursive>:
 8006626:	4770      	bx	lr

08006628 <__retarget_lock_acquire_recursive>:
 8006628:	4770      	bx	lr

0800662a <__retarget_lock_release_recursive>:
 800662a:	4770      	bx	lr

0800662c <__swhatbuf_r>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	460e      	mov	r6, r1
 8006630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006634:	2900      	cmp	r1, #0
 8006636:	b096      	sub	sp, #88	; 0x58
 8006638:	4614      	mov	r4, r2
 800663a:	461d      	mov	r5, r3
 800663c:	da08      	bge.n	8006650 <__swhatbuf_r+0x24>
 800663e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	602a      	str	r2, [r5, #0]
 8006646:	061a      	lsls	r2, r3, #24
 8006648:	d410      	bmi.n	800666c <__swhatbuf_r+0x40>
 800664a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800664e:	e00e      	b.n	800666e <__swhatbuf_r+0x42>
 8006650:	466a      	mov	r2, sp
 8006652:	f000 fc95 	bl	8006f80 <_fstat_r>
 8006656:	2800      	cmp	r0, #0
 8006658:	dbf1      	blt.n	800663e <__swhatbuf_r+0x12>
 800665a:	9a01      	ldr	r2, [sp, #4]
 800665c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006660:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006664:	425a      	negs	r2, r3
 8006666:	415a      	adcs	r2, r3
 8006668:	602a      	str	r2, [r5, #0]
 800666a:	e7ee      	b.n	800664a <__swhatbuf_r+0x1e>
 800666c:	2340      	movs	r3, #64	; 0x40
 800666e:	2000      	movs	r0, #0
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	b016      	add	sp, #88	; 0x58
 8006674:	bd70      	pop	{r4, r5, r6, pc}
	...

08006678 <__smakebuf_r>:
 8006678:	898b      	ldrh	r3, [r1, #12]
 800667a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800667c:	079d      	lsls	r5, r3, #30
 800667e:	4606      	mov	r6, r0
 8006680:	460c      	mov	r4, r1
 8006682:	d507      	bpl.n	8006694 <__smakebuf_r+0x1c>
 8006684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	2301      	movs	r3, #1
 800668e:	6163      	str	r3, [r4, #20]
 8006690:	b002      	add	sp, #8
 8006692:	bd70      	pop	{r4, r5, r6, pc}
 8006694:	ab01      	add	r3, sp, #4
 8006696:	466a      	mov	r2, sp
 8006698:	f7ff ffc8 	bl	800662c <__swhatbuf_r>
 800669c:	9900      	ldr	r1, [sp, #0]
 800669e:	4605      	mov	r5, r0
 80066a0:	4630      	mov	r0, r6
 80066a2:	f000 f895 	bl	80067d0 <_malloc_r>
 80066a6:	b948      	cbnz	r0, 80066bc <__smakebuf_r+0x44>
 80066a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ac:	059a      	lsls	r2, r3, #22
 80066ae:	d4ef      	bmi.n	8006690 <__smakebuf_r+0x18>
 80066b0:	f023 0303 	bic.w	r3, r3, #3
 80066b4:	f043 0302 	orr.w	r3, r3, #2
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	e7e3      	b.n	8006684 <__smakebuf_r+0xc>
 80066bc:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <__smakebuf_r+0x7c>)
 80066be:	62b3      	str	r3, [r6, #40]	; 0x28
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	6020      	str	r0, [r4, #0]
 80066c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	9b00      	ldr	r3, [sp, #0]
 80066cc:	6163      	str	r3, [r4, #20]
 80066ce:	9b01      	ldr	r3, [sp, #4]
 80066d0:	6120      	str	r0, [r4, #16]
 80066d2:	b15b      	cbz	r3, 80066ec <__smakebuf_r+0x74>
 80066d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066d8:	4630      	mov	r0, r6
 80066da:	f000 fc63 	bl	8006fa4 <_isatty_r>
 80066de:	b128      	cbz	r0, 80066ec <__smakebuf_r+0x74>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	89a0      	ldrh	r0, [r4, #12]
 80066ee:	4305      	orrs	r5, r0
 80066f0:	81a5      	strh	r5, [r4, #12]
 80066f2:	e7cd      	b.n	8006690 <__smakebuf_r+0x18>
 80066f4:	08006485 	.word	0x08006485

080066f8 <_free_r>:
 80066f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066fa:	2900      	cmp	r1, #0
 80066fc:	d044      	beq.n	8006788 <_free_r+0x90>
 80066fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006702:	9001      	str	r0, [sp, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f1a1 0404 	sub.w	r4, r1, #4
 800670a:	bfb8      	it	lt
 800670c:	18e4      	addlt	r4, r4, r3
 800670e:	f000 fc6b 	bl	8006fe8 <__malloc_lock>
 8006712:	4a1e      	ldr	r2, [pc, #120]	; (800678c <_free_r+0x94>)
 8006714:	9801      	ldr	r0, [sp, #4]
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	b933      	cbnz	r3, 8006728 <_free_r+0x30>
 800671a:	6063      	str	r3, [r4, #4]
 800671c:	6014      	str	r4, [r2, #0]
 800671e:	b003      	add	sp, #12
 8006720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006724:	f000 bc66 	b.w	8006ff4 <__malloc_unlock>
 8006728:	42a3      	cmp	r3, r4
 800672a:	d908      	bls.n	800673e <_free_r+0x46>
 800672c:	6825      	ldr	r5, [r4, #0]
 800672e:	1961      	adds	r1, r4, r5
 8006730:	428b      	cmp	r3, r1
 8006732:	bf01      	itttt	eq
 8006734:	6819      	ldreq	r1, [r3, #0]
 8006736:	685b      	ldreq	r3, [r3, #4]
 8006738:	1949      	addeq	r1, r1, r5
 800673a:	6021      	streq	r1, [r4, #0]
 800673c:	e7ed      	b.n	800671a <_free_r+0x22>
 800673e:	461a      	mov	r2, r3
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	b10b      	cbz	r3, 8006748 <_free_r+0x50>
 8006744:	42a3      	cmp	r3, r4
 8006746:	d9fa      	bls.n	800673e <_free_r+0x46>
 8006748:	6811      	ldr	r1, [r2, #0]
 800674a:	1855      	adds	r5, r2, r1
 800674c:	42a5      	cmp	r5, r4
 800674e:	d10b      	bne.n	8006768 <_free_r+0x70>
 8006750:	6824      	ldr	r4, [r4, #0]
 8006752:	4421      	add	r1, r4
 8006754:	1854      	adds	r4, r2, r1
 8006756:	42a3      	cmp	r3, r4
 8006758:	6011      	str	r1, [r2, #0]
 800675a:	d1e0      	bne.n	800671e <_free_r+0x26>
 800675c:	681c      	ldr	r4, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	6053      	str	r3, [r2, #4]
 8006762:	4421      	add	r1, r4
 8006764:	6011      	str	r1, [r2, #0]
 8006766:	e7da      	b.n	800671e <_free_r+0x26>
 8006768:	d902      	bls.n	8006770 <_free_r+0x78>
 800676a:	230c      	movs	r3, #12
 800676c:	6003      	str	r3, [r0, #0]
 800676e:	e7d6      	b.n	800671e <_free_r+0x26>
 8006770:	6825      	ldr	r5, [r4, #0]
 8006772:	1961      	adds	r1, r4, r5
 8006774:	428b      	cmp	r3, r1
 8006776:	bf04      	itt	eq
 8006778:	6819      	ldreq	r1, [r3, #0]
 800677a:	685b      	ldreq	r3, [r3, #4]
 800677c:	6063      	str	r3, [r4, #4]
 800677e:	bf04      	itt	eq
 8006780:	1949      	addeq	r1, r1, r5
 8006782:	6021      	streq	r1, [r4, #0]
 8006784:	6054      	str	r4, [r2, #4]
 8006786:	e7ca      	b.n	800671e <_free_r+0x26>
 8006788:	b003      	add	sp, #12
 800678a:	bd30      	pop	{r4, r5, pc}
 800678c:	20000230 	.word	0x20000230

08006790 <sbrk_aligned>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	4e0e      	ldr	r6, [pc, #56]	; (80067cc <sbrk_aligned+0x3c>)
 8006794:	460c      	mov	r4, r1
 8006796:	6831      	ldr	r1, [r6, #0]
 8006798:	4605      	mov	r5, r0
 800679a:	b911      	cbnz	r1, 80067a2 <sbrk_aligned+0x12>
 800679c:	f000 fb7a 	bl	8006e94 <_sbrk_r>
 80067a0:	6030      	str	r0, [r6, #0]
 80067a2:	4621      	mov	r1, r4
 80067a4:	4628      	mov	r0, r5
 80067a6:	f000 fb75 	bl	8006e94 <_sbrk_r>
 80067aa:	1c43      	adds	r3, r0, #1
 80067ac:	d00a      	beq.n	80067c4 <sbrk_aligned+0x34>
 80067ae:	1cc4      	adds	r4, r0, #3
 80067b0:	f024 0403 	bic.w	r4, r4, #3
 80067b4:	42a0      	cmp	r0, r4
 80067b6:	d007      	beq.n	80067c8 <sbrk_aligned+0x38>
 80067b8:	1a21      	subs	r1, r4, r0
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 fb6a 	bl	8006e94 <_sbrk_r>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d101      	bne.n	80067c8 <sbrk_aligned+0x38>
 80067c4:	f04f 34ff 	mov.w	r4, #4294967295
 80067c8:	4620      	mov	r0, r4
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	20000234 	.word	0x20000234

080067d0 <_malloc_r>:
 80067d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d4:	1ccd      	adds	r5, r1, #3
 80067d6:	f025 0503 	bic.w	r5, r5, #3
 80067da:	3508      	adds	r5, #8
 80067dc:	2d0c      	cmp	r5, #12
 80067de:	bf38      	it	cc
 80067e0:	250c      	movcc	r5, #12
 80067e2:	2d00      	cmp	r5, #0
 80067e4:	4607      	mov	r7, r0
 80067e6:	db01      	blt.n	80067ec <_malloc_r+0x1c>
 80067e8:	42a9      	cmp	r1, r5
 80067ea:	d905      	bls.n	80067f8 <_malloc_r+0x28>
 80067ec:	230c      	movs	r3, #12
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	2600      	movs	r6, #0
 80067f2:	4630      	mov	r0, r6
 80067f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f8:	4e2e      	ldr	r6, [pc, #184]	; (80068b4 <_malloc_r+0xe4>)
 80067fa:	f000 fbf5 	bl	8006fe8 <__malloc_lock>
 80067fe:	6833      	ldr	r3, [r6, #0]
 8006800:	461c      	mov	r4, r3
 8006802:	bb34      	cbnz	r4, 8006852 <_malloc_r+0x82>
 8006804:	4629      	mov	r1, r5
 8006806:	4638      	mov	r0, r7
 8006808:	f7ff ffc2 	bl	8006790 <sbrk_aligned>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	4604      	mov	r4, r0
 8006810:	d14d      	bne.n	80068ae <_malloc_r+0xde>
 8006812:	6834      	ldr	r4, [r6, #0]
 8006814:	4626      	mov	r6, r4
 8006816:	2e00      	cmp	r6, #0
 8006818:	d140      	bne.n	800689c <_malloc_r+0xcc>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	4631      	mov	r1, r6
 800681e:	4638      	mov	r0, r7
 8006820:	eb04 0803 	add.w	r8, r4, r3
 8006824:	f000 fb36 	bl	8006e94 <_sbrk_r>
 8006828:	4580      	cmp	r8, r0
 800682a:	d13a      	bne.n	80068a2 <_malloc_r+0xd2>
 800682c:	6821      	ldr	r1, [r4, #0]
 800682e:	3503      	adds	r5, #3
 8006830:	1a6d      	subs	r5, r5, r1
 8006832:	f025 0503 	bic.w	r5, r5, #3
 8006836:	3508      	adds	r5, #8
 8006838:	2d0c      	cmp	r5, #12
 800683a:	bf38      	it	cc
 800683c:	250c      	movcc	r5, #12
 800683e:	4629      	mov	r1, r5
 8006840:	4638      	mov	r0, r7
 8006842:	f7ff ffa5 	bl	8006790 <sbrk_aligned>
 8006846:	3001      	adds	r0, #1
 8006848:	d02b      	beq.n	80068a2 <_malloc_r+0xd2>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	442b      	add	r3, r5
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	e00e      	b.n	8006870 <_malloc_r+0xa0>
 8006852:	6822      	ldr	r2, [r4, #0]
 8006854:	1b52      	subs	r2, r2, r5
 8006856:	d41e      	bmi.n	8006896 <_malloc_r+0xc6>
 8006858:	2a0b      	cmp	r2, #11
 800685a:	d916      	bls.n	800688a <_malloc_r+0xba>
 800685c:	1961      	adds	r1, r4, r5
 800685e:	42a3      	cmp	r3, r4
 8006860:	6025      	str	r5, [r4, #0]
 8006862:	bf18      	it	ne
 8006864:	6059      	strne	r1, [r3, #4]
 8006866:	6863      	ldr	r3, [r4, #4]
 8006868:	bf08      	it	eq
 800686a:	6031      	streq	r1, [r6, #0]
 800686c:	5162      	str	r2, [r4, r5]
 800686e:	604b      	str	r3, [r1, #4]
 8006870:	4638      	mov	r0, r7
 8006872:	f104 060b 	add.w	r6, r4, #11
 8006876:	f000 fbbd 	bl	8006ff4 <__malloc_unlock>
 800687a:	f026 0607 	bic.w	r6, r6, #7
 800687e:	1d23      	adds	r3, r4, #4
 8006880:	1af2      	subs	r2, r6, r3
 8006882:	d0b6      	beq.n	80067f2 <_malloc_r+0x22>
 8006884:	1b9b      	subs	r3, r3, r6
 8006886:	50a3      	str	r3, [r4, r2]
 8006888:	e7b3      	b.n	80067f2 <_malloc_r+0x22>
 800688a:	6862      	ldr	r2, [r4, #4]
 800688c:	42a3      	cmp	r3, r4
 800688e:	bf0c      	ite	eq
 8006890:	6032      	streq	r2, [r6, #0]
 8006892:	605a      	strne	r2, [r3, #4]
 8006894:	e7ec      	b.n	8006870 <_malloc_r+0xa0>
 8006896:	4623      	mov	r3, r4
 8006898:	6864      	ldr	r4, [r4, #4]
 800689a:	e7b2      	b.n	8006802 <_malloc_r+0x32>
 800689c:	4634      	mov	r4, r6
 800689e:	6876      	ldr	r6, [r6, #4]
 80068a0:	e7b9      	b.n	8006816 <_malloc_r+0x46>
 80068a2:	230c      	movs	r3, #12
 80068a4:	603b      	str	r3, [r7, #0]
 80068a6:	4638      	mov	r0, r7
 80068a8:	f000 fba4 	bl	8006ff4 <__malloc_unlock>
 80068ac:	e7a1      	b.n	80067f2 <_malloc_r+0x22>
 80068ae:	6025      	str	r5, [r4, #0]
 80068b0:	e7de      	b.n	8006870 <_malloc_r+0xa0>
 80068b2:	bf00      	nop
 80068b4:	20000230 	.word	0x20000230

080068b8 <__sfputc_r>:
 80068b8:	6893      	ldr	r3, [r2, #8]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	b410      	push	{r4}
 80068c0:	6093      	str	r3, [r2, #8]
 80068c2:	da08      	bge.n	80068d6 <__sfputc_r+0x1e>
 80068c4:	6994      	ldr	r4, [r2, #24]
 80068c6:	42a3      	cmp	r3, r4
 80068c8:	db01      	blt.n	80068ce <__sfputc_r+0x16>
 80068ca:	290a      	cmp	r1, #10
 80068cc:	d103      	bne.n	80068d6 <__sfputc_r+0x1e>
 80068ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068d2:	f7ff bc31 	b.w	8006138 <__swbuf_r>
 80068d6:	6813      	ldr	r3, [r2, #0]
 80068d8:	1c58      	adds	r0, r3, #1
 80068da:	6010      	str	r0, [r2, #0]
 80068dc:	7019      	strb	r1, [r3, #0]
 80068de:	4608      	mov	r0, r1
 80068e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <__sfputs_r>:
 80068e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e8:	4606      	mov	r6, r0
 80068ea:	460f      	mov	r7, r1
 80068ec:	4614      	mov	r4, r2
 80068ee:	18d5      	adds	r5, r2, r3
 80068f0:	42ac      	cmp	r4, r5
 80068f2:	d101      	bne.n	80068f8 <__sfputs_r+0x12>
 80068f4:	2000      	movs	r0, #0
 80068f6:	e007      	b.n	8006908 <__sfputs_r+0x22>
 80068f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068fc:	463a      	mov	r2, r7
 80068fe:	4630      	mov	r0, r6
 8006900:	f7ff ffda 	bl	80068b8 <__sfputc_r>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d1f3      	bne.n	80068f0 <__sfputs_r+0xa>
 8006908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800690c <_vfiprintf_r>:
 800690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006910:	460d      	mov	r5, r1
 8006912:	b09d      	sub	sp, #116	; 0x74
 8006914:	4614      	mov	r4, r2
 8006916:	4698      	mov	r8, r3
 8006918:	4606      	mov	r6, r0
 800691a:	b118      	cbz	r0, 8006924 <_vfiprintf_r+0x18>
 800691c:	6983      	ldr	r3, [r0, #24]
 800691e:	b90b      	cbnz	r3, 8006924 <_vfiprintf_r+0x18>
 8006920:	f7ff fde4 	bl	80064ec <__sinit>
 8006924:	4b89      	ldr	r3, [pc, #548]	; (8006b4c <_vfiprintf_r+0x240>)
 8006926:	429d      	cmp	r5, r3
 8006928:	d11b      	bne.n	8006962 <_vfiprintf_r+0x56>
 800692a:	6875      	ldr	r5, [r6, #4]
 800692c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800692e:	07d9      	lsls	r1, r3, #31
 8006930:	d405      	bmi.n	800693e <_vfiprintf_r+0x32>
 8006932:	89ab      	ldrh	r3, [r5, #12]
 8006934:	059a      	lsls	r2, r3, #22
 8006936:	d402      	bmi.n	800693e <_vfiprintf_r+0x32>
 8006938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800693a:	f7ff fe75 	bl	8006628 <__retarget_lock_acquire_recursive>
 800693e:	89ab      	ldrh	r3, [r5, #12]
 8006940:	071b      	lsls	r3, r3, #28
 8006942:	d501      	bpl.n	8006948 <_vfiprintf_r+0x3c>
 8006944:	692b      	ldr	r3, [r5, #16]
 8006946:	b9eb      	cbnz	r3, 8006984 <_vfiprintf_r+0x78>
 8006948:	4629      	mov	r1, r5
 800694a:	4630      	mov	r0, r6
 800694c:	f7ff fc46 	bl	80061dc <__swsetup_r>
 8006950:	b1c0      	cbz	r0, 8006984 <_vfiprintf_r+0x78>
 8006952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006954:	07dc      	lsls	r4, r3, #31
 8006956:	d50e      	bpl.n	8006976 <_vfiprintf_r+0x6a>
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	b01d      	add	sp, #116	; 0x74
 800695e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006962:	4b7b      	ldr	r3, [pc, #492]	; (8006b50 <_vfiprintf_r+0x244>)
 8006964:	429d      	cmp	r5, r3
 8006966:	d101      	bne.n	800696c <_vfiprintf_r+0x60>
 8006968:	68b5      	ldr	r5, [r6, #8]
 800696a:	e7df      	b.n	800692c <_vfiprintf_r+0x20>
 800696c:	4b79      	ldr	r3, [pc, #484]	; (8006b54 <_vfiprintf_r+0x248>)
 800696e:	429d      	cmp	r5, r3
 8006970:	bf08      	it	eq
 8006972:	68f5      	ldreq	r5, [r6, #12]
 8006974:	e7da      	b.n	800692c <_vfiprintf_r+0x20>
 8006976:	89ab      	ldrh	r3, [r5, #12]
 8006978:	0598      	lsls	r0, r3, #22
 800697a:	d4ed      	bmi.n	8006958 <_vfiprintf_r+0x4c>
 800697c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800697e:	f7ff fe54 	bl	800662a <__retarget_lock_release_recursive>
 8006982:	e7e9      	b.n	8006958 <_vfiprintf_r+0x4c>
 8006984:	2300      	movs	r3, #0
 8006986:	9309      	str	r3, [sp, #36]	; 0x24
 8006988:	2320      	movs	r3, #32
 800698a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800698e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006992:	2330      	movs	r3, #48	; 0x30
 8006994:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b58 <_vfiprintf_r+0x24c>
 8006998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800699c:	f04f 0901 	mov.w	r9, #1
 80069a0:	4623      	mov	r3, r4
 80069a2:	469a      	mov	sl, r3
 80069a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069a8:	b10a      	cbz	r2, 80069ae <_vfiprintf_r+0xa2>
 80069aa:	2a25      	cmp	r2, #37	; 0x25
 80069ac:	d1f9      	bne.n	80069a2 <_vfiprintf_r+0x96>
 80069ae:	ebba 0b04 	subs.w	fp, sl, r4
 80069b2:	d00b      	beq.n	80069cc <_vfiprintf_r+0xc0>
 80069b4:	465b      	mov	r3, fp
 80069b6:	4622      	mov	r2, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7ff ff93 	bl	80068e6 <__sfputs_r>
 80069c0:	3001      	adds	r0, #1
 80069c2:	f000 80aa 	beq.w	8006b1a <_vfiprintf_r+0x20e>
 80069c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069c8:	445a      	add	r2, fp
 80069ca:	9209      	str	r2, [sp, #36]	; 0x24
 80069cc:	f89a 3000 	ldrb.w	r3, [sl]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80a2 	beq.w	8006b1a <_vfiprintf_r+0x20e>
 80069d6:	2300      	movs	r3, #0
 80069d8:	f04f 32ff 	mov.w	r2, #4294967295
 80069dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069e0:	f10a 0a01 	add.w	sl, sl, #1
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069ec:	931a      	str	r3, [sp, #104]	; 0x68
 80069ee:	4654      	mov	r4, sl
 80069f0:	2205      	movs	r2, #5
 80069f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f6:	4858      	ldr	r0, [pc, #352]	; (8006b58 <_vfiprintf_r+0x24c>)
 80069f8:	f7f9 fbf2 	bl	80001e0 <memchr>
 80069fc:	9a04      	ldr	r2, [sp, #16]
 80069fe:	b9d8      	cbnz	r0, 8006a38 <_vfiprintf_r+0x12c>
 8006a00:	06d1      	lsls	r1, r2, #27
 8006a02:	bf44      	itt	mi
 8006a04:	2320      	movmi	r3, #32
 8006a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a0a:	0713      	lsls	r3, r2, #28
 8006a0c:	bf44      	itt	mi
 8006a0e:	232b      	movmi	r3, #43	; 0x2b
 8006a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a14:	f89a 3000 	ldrb.w	r3, [sl]
 8006a18:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1a:	d015      	beq.n	8006a48 <_vfiprintf_r+0x13c>
 8006a1c:	9a07      	ldr	r2, [sp, #28]
 8006a1e:	4654      	mov	r4, sl
 8006a20:	2000      	movs	r0, #0
 8006a22:	f04f 0c0a 	mov.w	ip, #10
 8006a26:	4621      	mov	r1, r4
 8006a28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a2c:	3b30      	subs	r3, #48	; 0x30
 8006a2e:	2b09      	cmp	r3, #9
 8006a30:	d94e      	bls.n	8006ad0 <_vfiprintf_r+0x1c4>
 8006a32:	b1b0      	cbz	r0, 8006a62 <_vfiprintf_r+0x156>
 8006a34:	9207      	str	r2, [sp, #28]
 8006a36:	e014      	b.n	8006a62 <_vfiprintf_r+0x156>
 8006a38:	eba0 0308 	sub.w	r3, r0, r8
 8006a3c:	fa09 f303 	lsl.w	r3, r9, r3
 8006a40:	4313      	orrs	r3, r2
 8006a42:	9304      	str	r3, [sp, #16]
 8006a44:	46a2      	mov	sl, r4
 8006a46:	e7d2      	b.n	80069ee <_vfiprintf_r+0xe2>
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	1d19      	adds	r1, r3, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	9103      	str	r1, [sp, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bfbb      	ittet	lt
 8006a54:	425b      	neglt	r3, r3
 8006a56:	f042 0202 	orrlt.w	r2, r2, #2
 8006a5a:	9307      	strge	r3, [sp, #28]
 8006a5c:	9307      	strlt	r3, [sp, #28]
 8006a5e:	bfb8      	it	lt
 8006a60:	9204      	strlt	r2, [sp, #16]
 8006a62:	7823      	ldrb	r3, [r4, #0]
 8006a64:	2b2e      	cmp	r3, #46	; 0x2e
 8006a66:	d10c      	bne.n	8006a82 <_vfiprintf_r+0x176>
 8006a68:	7863      	ldrb	r3, [r4, #1]
 8006a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a6c:	d135      	bne.n	8006ada <_vfiprintf_r+0x1ce>
 8006a6e:	9b03      	ldr	r3, [sp, #12]
 8006a70:	1d1a      	adds	r2, r3, #4
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	9203      	str	r2, [sp, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	bfb8      	it	lt
 8006a7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a7e:	3402      	adds	r4, #2
 8006a80:	9305      	str	r3, [sp, #20]
 8006a82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b68 <_vfiprintf_r+0x25c>
 8006a86:	7821      	ldrb	r1, [r4, #0]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	f7f9 fba8 	bl	80001e0 <memchr>
 8006a90:	b140      	cbz	r0, 8006aa4 <_vfiprintf_r+0x198>
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	eba0 000a 	sub.w	r0, r0, sl
 8006a98:	fa03 f000 	lsl.w	r0, r3, r0
 8006a9c:	9b04      	ldr	r3, [sp, #16]
 8006a9e:	4303      	orrs	r3, r0
 8006aa0:	3401      	adds	r4, #1
 8006aa2:	9304      	str	r3, [sp, #16]
 8006aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aa8:	482c      	ldr	r0, [pc, #176]	; (8006b5c <_vfiprintf_r+0x250>)
 8006aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006aae:	2206      	movs	r2, #6
 8006ab0:	f7f9 fb96 	bl	80001e0 <memchr>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d03f      	beq.n	8006b38 <_vfiprintf_r+0x22c>
 8006ab8:	4b29      	ldr	r3, [pc, #164]	; (8006b60 <_vfiprintf_r+0x254>)
 8006aba:	bb1b      	cbnz	r3, 8006b04 <_vfiprintf_r+0x1f8>
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	3307      	adds	r3, #7
 8006ac0:	f023 0307 	bic.w	r3, r3, #7
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	9303      	str	r3, [sp, #12]
 8006ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aca:	443b      	add	r3, r7
 8006acc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ace:	e767      	b.n	80069a0 <_vfiprintf_r+0x94>
 8006ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	e7a5      	b.n	8006a26 <_vfiprintf_r+0x11a>
 8006ada:	2300      	movs	r3, #0
 8006adc:	3401      	adds	r4, #1
 8006ade:	9305      	str	r3, [sp, #20]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	f04f 0c0a 	mov.w	ip, #10
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aec:	3a30      	subs	r2, #48	; 0x30
 8006aee:	2a09      	cmp	r2, #9
 8006af0:	d903      	bls.n	8006afa <_vfiprintf_r+0x1ee>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0c5      	beq.n	8006a82 <_vfiprintf_r+0x176>
 8006af6:	9105      	str	r1, [sp, #20]
 8006af8:	e7c3      	b.n	8006a82 <_vfiprintf_r+0x176>
 8006afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006afe:	4604      	mov	r4, r0
 8006b00:	2301      	movs	r3, #1
 8006b02:	e7f0      	b.n	8006ae6 <_vfiprintf_r+0x1da>
 8006b04:	ab03      	add	r3, sp, #12
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	462a      	mov	r2, r5
 8006b0a:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <_vfiprintf_r+0x258>)
 8006b0c:	a904      	add	r1, sp, #16
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f3af 8000 	nop.w
 8006b14:	4607      	mov	r7, r0
 8006b16:	1c78      	adds	r0, r7, #1
 8006b18:	d1d6      	bne.n	8006ac8 <_vfiprintf_r+0x1bc>
 8006b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b1c:	07d9      	lsls	r1, r3, #31
 8006b1e:	d405      	bmi.n	8006b2c <_vfiprintf_r+0x220>
 8006b20:	89ab      	ldrh	r3, [r5, #12]
 8006b22:	059a      	lsls	r2, r3, #22
 8006b24:	d402      	bmi.n	8006b2c <_vfiprintf_r+0x220>
 8006b26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b28:	f7ff fd7f 	bl	800662a <__retarget_lock_release_recursive>
 8006b2c:	89ab      	ldrh	r3, [r5, #12]
 8006b2e:	065b      	lsls	r3, r3, #25
 8006b30:	f53f af12 	bmi.w	8006958 <_vfiprintf_r+0x4c>
 8006b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b36:	e711      	b.n	800695c <_vfiprintf_r+0x50>
 8006b38:	ab03      	add	r3, sp, #12
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	462a      	mov	r2, r5
 8006b3e:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <_vfiprintf_r+0x258>)
 8006b40:	a904      	add	r1, sp, #16
 8006b42:	4630      	mov	r0, r6
 8006b44:	f000 f880 	bl	8006c48 <_printf_i>
 8006b48:	e7e4      	b.n	8006b14 <_vfiprintf_r+0x208>
 8006b4a:	bf00      	nop
 8006b4c:	080072bc 	.word	0x080072bc
 8006b50:	080072dc 	.word	0x080072dc
 8006b54:	0800729c 	.word	0x0800729c
 8006b58:	080072fc 	.word	0x080072fc
 8006b5c:	08007306 	.word	0x08007306
 8006b60:	00000000 	.word	0x00000000
 8006b64:	080068e7 	.word	0x080068e7
 8006b68:	08007302 	.word	0x08007302

08006b6c <_printf_common>:
 8006b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b70:	4616      	mov	r6, r2
 8006b72:	4699      	mov	r9, r3
 8006b74:	688a      	ldr	r2, [r1, #8]
 8006b76:	690b      	ldr	r3, [r1, #16]
 8006b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	bfb8      	it	lt
 8006b80:	4613      	movlt	r3, r2
 8006b82:	6033      	str	r3, [r6, #0]
 8006b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b88:	4607      	mov	r7, r0
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	b10a      	cbz	r2, 8006b92 <_printf_common+0x26>
 8006b8e:	3301      	adds	r3, #1
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	0699      	lsls	r1, r3, #26
 8006b96:	bf42      	ittt	mi
 8006b98:	6833      	ldrmi	r3, [r6, #0]
 8006b9a:	3302      	addmi	r3, #2
 8006b9c:	6033      	strmi	r3, [r6, #0]
 8006b9e:	6825      	ldr	r5, [r4, #0]
 8006ba0:	f015 0506 	ands.w	r5, r5, #6
 8006ba4:	d106      	bne.n	8006bb4 <_printf_common+0x48>
 8006ba6:	f104 0a19 	add.w	sl, r4, #25
 8006baa:	68e3      	ldr	r3, [r4, #12]
 8006bac:	6832      	ldr	r2, [r6, #0]
 8006bae:	1a9b      	subs	r3, r3, r2
 8006bb0:	42ab      	cmp	r3, r5
 8006bb2:	dc26      	bgt.n	8006c02 <_printf_common+0x96>
 8006bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bb8:	1e13      	subs	r3, r2, #0
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	bf18      	it	ne
 8006bbe:	2301      	movne	r3, #1
 8006bc0:	0692      	lsls	r2, r2, #26
 8006bc2:	d42b      	bmi.n	8006c1c <_printf_common+0xb0>
 8006bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bc8:	4649      	mov	r1, r9
 8006bca:	4638      	mov	r0, r7
 8006bcc:	47c0      	blx	r8
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d01e      	beq.n	8006c10 <_printf_common+0xa4>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	68e5      	ldr	r5, [r4, #12]
 8006bd6:	6832      	ldr	r2, [r6, #0]
 8006bd8:	f003 0306 	and.w	r3, r3, #6
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	bf08      	it	eq
 8006be0:	1aad      	subeq	r5, r5, r2
 8006be2:	68a3      	ldr	r3, [r4, #8]
 8006be4:	6922      	ldr	r2, [r4, #16]
 8006be6:	bf0c      	ite	eq
 8006be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bec:	2500      	movne	r5, #0
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	bfc4      	itt	gt
 8006bf2:	1a9b      	subgt	r3, r3, r2
 8006bf4:	18ed      	addgt	r5, r5, r3
 8006bf6:	2600      	movs	r6, #0
 8006bf8:	341a      	adds	r4, #26
 8006bfa:	42b5      	cmp	r5, r6
 8006bfc:	d11a      	bne.n	8006c34 <_printf_common+0xc8>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	e008      	b.n	8006c14 <_printf_common+0xa8>
 8006c02:	2301      	movs	r3, #1
 8006c04:	4652      	mov	r2, sl
 8006c06:	4649      	mov	r1, r9
 8006c08:	4638      	mov	r0, r7
 8006c0a:	47c0      	blx	r8
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d103      	bne.n	8006c18 <_printf_common+0xac>
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c18:	3501      	adds	r5, #1
 8006c1a:	e7c6      	b.n	8006baa <_printf_common+0x3e>
 8006c1c:	18e1      	adds	r1, r4, r3
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	2030      	movs	r0, #48	; 0x30
 8006c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c26:	4422      	add	r2, r4
 8006c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c30:	3302      	adds	r3, #2
 8006c32:	e7c7      	b.n	8006bc4 <_printf_common+0x58>
 8006c34:	2301      	movs	r3, #1
 8006c36:	4622      	mov	r2, r4
 8006c38:	4649      	mov	r1, r9
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	47c0      	blx	r8
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d0e6      	beq.n	8006c10 <_printf_common+0xa4>
 8006c42:	3601      	adds	r6, #1
 8006c44:	e7d9      	b.n	8006bfa <_printf_common+0x8e>
	...

08006c48 <_printf_i>:
 8006c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c4c:	7e0f      	ldrb	r7, [r1, #24]
 8006c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c50:	2f78      	cmp	r7, #120	; 0x78
 8006c52:	4691      	mov	r9, r2
 8006c54:	4680      	mov	r8, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	469a      	mov	sl, r3
 8006c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c5e:	d807      	bhi.n	8006c70 <_printf_i+0x28>
 8006c60:	2f62      	cmp	r7, #98	; 0x62
 8006c62:	d80a      	bhi.n	8006c7a <_printf_i+0x32>
 8006c64:	2f00      	cmp	r7, #0
 8006c66:	f000 80d8 	beq.w	8006e1a <_printf_i+0x1d2>
 8006c6a:	2f58      	cmp	r7, #88	; 0x58
 8006c6c:	f000 80a3 	beq.w	8006db6 <_printf_i+0x16e>
 8006c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c78:	e03a      	b.n	8006cf0 <_printf_i+0xa8>
 8006c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c7e:	2b15      	cmp	r3, #21
 8006c80:	d8f6      	bhi.n	8006c70 <_printf_i+0x28>
 8006c82:	a101      	add	r1, pc, #4	; (adr r1, 8006c88 <_printf_i+0x40>)
 8006c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c88:	08006ce1 	.word	0x08006ce1
 8006c8c:	08006cf5 	.word	0x08006cf5
 8006c90:	08006c71 	.word	0x08006c71
 8006c94:	08006c71 	.word	0x08006c71
 8006c98:	08006c71 	.word	0x08006c71
 8006c9c:	08006c71 	.word	0x08006c71
 8006ca0:	08006cf5 	.word	0x08006cf5
 8006ca4:	08006c71 	.word	0x08006c71
 8006ca8:	08006c71 	.word	0x08006c71
 8006cac:	08006c71 	.word	0x08006c71
 8006cb0:	08006c71 	.word	0x08006c71
 8006cb4:	08006e01 	.word	0x08006e01
 8006cb8:	08006d25 	.word	0x08006d25
 8006cbc:	08006de3 	.word	0x08006de3
 8006cc0:	08006c71 	.word	0x08006c71
 8006cc4:	08006c71 	.word	0x08006c71
 8006cc8:	08006e23 	.word	0x08006e23
 8006ccc:	08006c71 	.word	0x08006c71
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006c71 	.word	0x08006c71
 8006cd8:	08006c71 	.word	0x08006c71
 8006cdc:	08006deb 	.word	0x08006deb
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	1d1a      	adds	r2, r3, #4
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	602a      	str	r2, [r5, #0]
 8006ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0a3      	b.n	8006e3c <_printf_i+0x1f4>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	6829      	ldr	r1, [r5, #0]
 8006cf8:	0606      	lsls	r6, r0, #24
 8006cfa:	f101 0304 	add.w	r3, r1, #4
 8006cfe:	d50a      	bpl.n	8006d16 <_printf_i+0xce>
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	2e00      	cmp	r6, #0
 8006d06:	da03      	bge.n	8006d10 <_printf_i+0xc8>
 8006d08:	232d      	movs	r3, #45	; 0x2d
 8006d0a:	4276      	negs	r6, r6
 8006d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d10:	485e      	ldr	r0, [pc, #376]	; (8006e8c <_printf_i+0x244>)
 8006d12:	230a      	movs	r3, #10
 8006d14:	e019      	b.n	8006d4a <_printf_i+0x102>
 8006d16:	680e      	ldr	r6, [r1, #0]
 8006d18:	602b      	str	r3, [r5, #0]
 8006d1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d1e:	bf18      	it	ne
 8006d20:	b236      	sxthne	r6, r6
 8006d22:	e7ef      	b.n	8006d04 <_printf_i+0xbc>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	6820      	ldr	r0, [r4, #0]
 8006d28:	1d19      	adds	r1, r3, #4
 8006d2a:	6029      	str	r1, [r5, #0]
 8006d2c:	0601      	lsls	r1, r0, #24
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0xec>
 8006d30:	681e      	ldr	r6, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <_printf_i+0xf2>
 8006d34:	0646      	lsls	r6, r0, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0xe8>
 8006d38:	881e      	ldrh	r6, [r3, #0]
 8006d3a:	4854      	ldr	r0, [pc, #336]	; (8006e8c <_printf_i+0x244>)
 8006d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d3e:	bf0c      	ite	eq
 8006d40:	2308      	moveq	r3, #8
 8006d42:	230a      	movne	r3, #10
 8006d44:	2100      	movs	r1, #0
 8006d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d4a:	6865      	ldr	r5, [r4, #4]
 8006d4c:	60a5      	str	r5, [r4, #8]
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	bfa2      	ittt	ge
 8006d52:	6821      	ldrge	r1, [r4, #0]
 8006d54:	f021 0104 	bicge.w	r1, r1, #4
 8006d58:	6021      	strge	r1, [r4, #0]
 8006d5a:	b90e      	cbnz	r6, 8006d60 <_printf_i+0x118>
 8006d5c:	2d00      	cmp	r5, #0
 8006d5e:	d04d      	beq.n	8006dfc <_printf_i+0x1b4>
 8006d60:	4615      	mov	r5, r2
 8006d62:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d66:	fb03 6711 	mls	r7, r3, r1, r6
 8006d6a:	5dc7      	ldrb	r7, [r0, r7]
 8006d6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d70:	4637      	mov	r7, r6
 8006d72:	42bb      	cmp	r3, r7
 8006d74:	460e      	mov	r6, r1
 8006d76:	d9f4      	bls.n	8006d62 <_printf_i+0x11a>
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d10b      	bne.n	8006d94 <_printf_i+0x14c>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	07de      	lsls	r6, r3, #31
 8006d80:	d508      	bpl.n	8006d94 <_printf_i+0x14c>
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	6861      	ldr	r1, [r4, #4]
 8006d86:	4299      	cmp	r1, r3
 8006d88:	bfde      	ittt	le
 8006d8a:	2330      	movle	r3, #48	; 0x30
 8006d8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d94:	1b52      	subs	r2, r2, r5
 8006d96:	6122      	str	r2, [r4, #16]
 8006d98:	f8cd a000 	str.w	sl, [sp]
 8006d9c:	464b      	mov	r3, r9
 8006d9e:	aa03      	add	r2, sp, #12
 8006da0:	4621      	mov	r1, r4
 8006da2:	4640      	mov	r0, r8
 8006da4:	f7ff fee2 	bl	8006b6c <_printf_common>
 8006da8:	3001      	adds	r0, #1
 8006daa:	d14c      	bne.n	8006e46 <_printf_i+0x1fe>
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	b004      	add	sp, #16
 8006db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db6:	4835      	ldr	r0, [pc, #212]	; (8006e8c <_printf_i+0x244>)
 8006db8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006dbc:	6829      	ldr	r1, [r5, #0]
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dc4:	6029      	str	r1, [r5, #0]
 8006dc6:	061d      	lsls	r5, r3, #24
 8006dc8:	d514      	bpl.n	8006df4 <_printf_i+0x1ac>
 8006dca:	07df      	lsls	r7, r3, #31
 8006dcc:	bf44      	itt	mi
 8006dce:	f043 0320 	orrmi.w	r3, r3, #32
 8006dd2:	6023      	strmi	r3, [r4, #0]
 8006dd4:	b91e      	cbnz	r6, 8006dde <_printf_i+0x196>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	f023 0320 	bic.w	r3, r3, #32
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	2310      	movs	r3, #16
 8006de0:	e7b0      	b.n	8006d44 <_printf_i+0xfc>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	f043 0320 	orr.w	r3, r3, #32
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	2378      	movs	r3, #120	; 0x78
 8006dec:	4828      	ldr	r0, [pc, #160]	; (8006e90 <_printf_i+0x248>)
 8006dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006df2:	e7e3      	b.n	8006dbc <_printf_i+0x174>
 8006df4:	0659      	lsls	r1, r3, #25
 8006df6:	bf48      	it	mi
 8006df8:	b2b6      	uxthmi	r6, r6
 8006dfa:	e7e6      	b.n	8006dca <_printf_i+0x182>
 8006dfc:	4615      	mov	r5, r2
 8006dfe:	e7bb      	b.n	8006d78 <_printf_i+0x130>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	6826      	ldr	r6, [r4, #0]
 8006e04:	6961      	ldr	r1, [r4, #20]
 8006e06:	1d18      	adds	r0, r3, #4
 8006e08:	6028      	str	r0, [r5, #0]
 8006e0a:	0635      	lsls	r5, r6, #24
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	d501      	bpl.n	8006e14 <_printf_i+0x1cc>
 8006e10:	6019      	str	r1, [r3, #0]
 8006e12:	e002      	b.n	8006e1a <_printf_i+0x1d2>
 8006e14:	0670      	lsls	r0, r6, #25
 8006e16:	d5fb      	bpl.n	8006e10 <_printf_i+0x1c8>
 8006e18:	8019      	strh	r1, [r3, #0]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6123      	str	r3, [r4, #16]
 8006e1e:	4615      	mov	r5, r2
 8006e20:	e7ba      	b.n	8006d98 <_printf_i+0x150>
 8006e22:	682b      	ldr	r3, [r5, #0]
 8006e24:	1d1a      	adds	r2, r3, #4
 8006e26:	602a      	str	r2, [r5, #0]
 8006e28:	681d      	ldr	r5, [r3, #0]
 8006e2a:	6862      	ldr	r2, [r4, #4]
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7f9 f9d6 	bl	80001e0 <memchr>
 8006e34:	b108      	cbz	r0, 8006e3a <_printf_i+0x1f2>
 8006e36:	1b40      	subs	r0, r0, r5
 8006e38:	6060      	str	r0, [r4, #4]
 8006e3a:	6863      	ldr	r3, [r4, #4]
 8006e3c:	6123      	str	r3, [r4, #16]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e44:	e7a8      	b.n	8006d98 <_printf_i+0x150>
 8006e46:	6923      	ldr	r3, [r4, #16]
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	47d0      	blx	sl
 8006e50:	3001      	adds	r0, #1
 8006e52:	d0ab      	beq.n	8006dac <_printf_i+0x164>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	079b      	lsls	r3, r3, #30
 8006e58:	d413      	bmi.n	8006e82 <_printf_i+0x23a>
 8006e5a:	68e0      	ldr	r0, [r4, #12]
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	4298      	cmp	r0, r3
 8006e60:	bfb8      	it	lt
 8006e62:	4618      	movlt	r0, r3
 8006e64:	e7a4      	b.n	8006db0 <_printf_i+0x168>
 8006e66:	2301      	movs	r3, #1
 8006e68:	4632      	mov	r2, r6
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	47d0      	blx	sl
 8006e70:	3001      	adds	r0, #1
 8006e72:	d09b      	beq.n	8006dac <_printf_i+0x164>
 8006e74:	3501      	adds	r5, #1
 8006e76:	68e3      	ldr	r3, [r4, #12]
 8006e78:	9903      	ldr	r1, [sp, #12]
 8006e7a:	1a5b      	subs	r3, r3, r1
 8006e7c:	42ab      	cmp	r3, r5
 8006e7e:	dcf2      	bgt.n	8006e66 <_printf_i+0x21e>
 8006e80:	e7eb      	b.n	8006e5a <_printf_i+0x212>
 8006e82:	2500      	movs	r5, #0
 8006e84:	f104 0619 	add.w	r6, r4, #25
 8006e88:	e7f5      	b.n	8006e76 <_printf_i+0x22e>
 8006e8a:	bf00      	nop
 8006e8c:	0800730d 	.word	0x0800730d
 8006e90:	0800731e 	.word	0x0800731e

08006e94 <_sbrk_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d06      	ldr	r5, [pc, #24]	; (8006eb0 <_sbrk_r+0x1c>)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	f7fa fe5a 	bl	8001b58 <_sbrk>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_sbrk_r+0x1a>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_sbrk_r+0x1a>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20000238 	.word	0x20000238

08006eb4 <__sread>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebc:	f000 f8a0 	bl	8007000 <_read_r>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	bfab      	itete	ge
 8006ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ec8:	181b      	addge	r3, r3, r0
 8006eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ece:	bfac      	ite	ge
 8006ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ed2:	81a3      	strhlt	r3, [r4, #12]
 8006ed4:	bd10      	pop	{r4, pc}

08006ed6 <__swrite>:
 8006ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	461f      	mov	r7, r3
 8006edc:	898b      	ldrh	r3, [r1, #12]
 8006ede:	05db      	lsls	r3, r3, #23
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	d505      	bpl.n	8006ef4 <__swrite+0x1e>
 8006ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eec:	2302      	movs	r3, #2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f000 f868 	bl	8006fc4 <_lseek_r>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	4632      	mov	r2, r6
 8006f02:	463b      	mov	r3, r7
 8006f04:	4628      	mov	r0, r5
 8006f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0a:	f000 b817 	b.w	8006f3c <_write_r>

08006f0e <__sseek>:
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	460c      	mov	r4, r1
 8006f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f16:	f000 f855 	bl	8006fc4 <_lseek_r>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	bf15      	itete	ne
 8006f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f2a:	81a3      	strheq	r3, [r4, #12]
 8006f2c:	bf18      	it	ne
 8006f2e:	81a3      	strhne	r3, [r4, #12]
 8006f30:	bd10      	pop	{r4, pc}

08006f32 <__sclose>:
 8006f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f36:	f000 b813 	b.w	8006f60 <_close_r>
	...

08006f3c <_write_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d07      	ldr	r5, [pc, #28]	; (8006f5c <_write_r+0x20>)
 8006f40:	4604      	mov	r4, r0
 8006f42:	4608      	mov	r0, r1
 8006f44:	4611      	mov	r1, r2
 8006f46:	2200      	movs	r2, #0
 8006f48:	602a      	str	r2, [r5, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f7fa fdb3 	bl	8001ab6 <_write>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_write_r+0x1e>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_write_r+0x1e>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	20000238 	.word	0x20000238

08006f60 <_close_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d06      	ldr	r5, [pc, #24]	; (8006f7c <_close_r+0x1c>)
 8006f64:	2300      	movs	r3, #0
 8006f66:	4604      	mov	r4, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	602b      	str	r3, [r5, #0]
 8006f6c:	f7fa fdbf 	bl	8001aee <_close>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_close_r+0x1a>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_close_r+0x1a>
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	20000238 	.word	0x20000238

08006f80 <_fstat_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4d07      	ldr	r5, [pc, #28]	; (8006fa0 <_fstat_r+0x20>)
 8006f84:	2300      	movs	r3, #0
 8006f86:	4604      	mov	r4, r0
 8006f88:	4608      	mov	r0, r1
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	f7fa fdba 	bl	8001b06 <_fstat>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	d102      	bne.n	8006f9c <_fstat_r+0x1c>
 8006f96:	682b      	ldr	r3, [r5, #0]
 8006f98:	b103      	cbz	r3, 8006f9c <_fstat_r+0x1c>
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	bd38      	pop	{r3, r4, r5, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000238 	.word	0x20000238

08006fa4 <_isatty_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4d06      	ldr	r5, [pc, #24]	; (8006fc0 <_isatty_r+0x1c>)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4604      	mov	r4, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	602b      	str	r3, [r5, #0]
 8006fb0:	f7fa fdb9 	bl	8001b26 <_isatty>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_isatty_r+0x1a>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_isatty_r+0x1a>
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	20000238 	.word	0x20000238

08006fc4 <_lseek_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d07      	ldr	r5, [pc, #28]	; (8006fe4 <_lseek_r+0x20>)
 8006fc8:	4604      	mov	r4, r0
 8006fca:	4608      	mov	r0, r1
 8006fcc:	4611      	mov	r1, r2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	602a      	str	r2, [r5, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f7fa fdb2 	bl	8001b3c <_lseek>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_lseek_r+0x1e>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_lseek_r+0x1e>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	20000238 	.word	0x20000238

08006fe8 <__malloc_lock>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	; (8006ff0 <__malloc_lock+0x8>)
 8006fea:	f7ff bb1d 	b.w	8006628 <__retarget_lock_acquire_recursive>
 8006fee:	bf00      	nop
 8006ff0:	2000022c 	.word	0x2000022c

08006ff4 <__malloc_unlock>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	; (8006ffc <__malloc_unlock+0x8>)
 8006ff6:	f7ff bb18 	b.w	800662a <__retarget_lock_release_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	2000022c 	.word	0x2000022c

08007000 <_read_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d07      	ldr	r5, [pc, #28]	; (8007020 <_read_r+0x20>)
 8007004:	4604      	mov	r4, r0
 8007006:	4608      	mov	r0, r1
 8007008:	4611      	mov	r1, r2
 800700a:	2200      	movs	r2, #0
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7fa fd34 	bl	8001a7c <_read>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_read_r+0x1e>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_read_r+0x1e>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	20000238 	.word	0x20000238

08007024 <_init>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	bf00      	nop
 8007028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702a:	bc08      	pop	{r3}
 800702c:	469e      	mov	lr, r3
 800702e:	4770      	bx	lr

08007030 <_fini>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	bf00      	nop
 8007034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007036:	bc08      	pop	{r3}
 8007038:	469e      	mov	lr, r3
 800703a:	4770      	bx	lr
