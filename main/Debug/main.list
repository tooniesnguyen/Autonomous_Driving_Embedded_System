
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000818c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800832c  0800832c  0001832c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008620  08008620  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008628  08008628  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008628  08008628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008630  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000088  080086b8  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080086b8  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148de  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f54  00000000  00000000  00034996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000378f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00038ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019724  00000000  00000000  00039b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017026  00000000  00000000  000532b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f21  00000000  00000000  0006a2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe1fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005428  00000000  00000000  000fe24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008314 	.word	0x08008314

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08008314 	.word	0x08008314

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b974 	b.w	8000ecc <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468e      	mov	lr, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d14d      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	d969      	bls.n	8000ce4 <__udivmoddi4+0xe8>
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b152      	cbz	r2, 8000c2c <__udivmoddi4+0x30>
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	f1c2 0120 	rsb	r1, r2, #32
 8000c1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c26:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2a:	4094      	lsls	r4, r2
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	0c21      	lsrs	r1, r4, #16
 8000c32:	fbbe f6f8 	udiv	r6, lr, r8
 8000c36:	fa1f f78c 	uxth.w	r7, ip
 8000c3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c42:	fb06 f107 	mul.w	r1, r6, r7
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c52:	f080 811f 	bcs.w	8000e94 <__udivmoddi4+0x298>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 811c 	bls.w	8000e94 <__udivmoddi4+0x298>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 f707 	mul.w	r7, r0, r7
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x92>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c80:	f080 810a 	bcs.w	8000e98 <__udivmoddi4+0x29c>
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	f240 8107 	bls.w	8000e98 <__udivmoddi4+0x29c>
 8000c8a:	4464      	add	r4, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	1be4      	subs	r4, r4, r7
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa4>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0xc2>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	f000 80ef 	beq.w	8000e8e <__udivmoddi4+0x292>
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f683 	clz	r6, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d14a      	bne.n	8000d5c <__udivmoddi4+0x160>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xd4>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80f9 	bhi.w	8000ec2 <__udivmoddi4+0x2c6>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	469e      	mov	lr, r3
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <__udivmoddi4+0xa4>
 8000cde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce2:	e7dd      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000ce4:	b902      	cbnz	r2, 8000ce8 <__udivmoddi4+0xec>
 8000ce6:	deff      	udf	#255	; 0xff
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	f040 8092 	bne.w	8000e16 <__udivmoddi4+0x21a>
 8000cf2:	eba1 010c 	sub.w	r1, r1, ip
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	2601      	movs	r6, #1
 8000d00:	0c20      	lsrs	r0, r4, #16
 8000d02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d06:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0e:	fb0e f003 	mul.w	r0, lr, r3
 8000d12:	4288      	cmp	r0, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x12c>
 8000d16:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x12a>
 8000d20:	4288      	cmp	r0, r1
 8000d22:	f200 80cb 	bhi.w	8000ebc <__udivmoddi4+0x2c0>
 8000d26:	4643      	mov	r3, r8
 8000d28:	1a09      	subs	r1, r1, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d30:	fb07 1110 	mls	r1, r7, r0, r1
 8000d34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d38:	fb0e fe00 	mul.w	lr, lr, r0
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x156>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d48:	d202      	bcs.n	8000d50 <__udivmoddi4+0x154>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f200 80bb 	bhi.w	8000ec6 <__udivmoddi4+0x2ca>
 8000d50:	4608      	mov	r0, r1
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x9a>
 8000d5c:	f1c6 0720 	rsb	r7, r6, #32
 8000d60:	40b3      	lsls	r3, r6
 8000d62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d72:	431c      	orrs	r4, r3
 8000d74:	40f9      	lsrs	r1, r7
 8000d76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d82:	0c20      	lsrs	r0, r4, #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fb09 1118 	mls	r1, r9, r8, r1
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	fb08 f00e 	mul.w	r0, r8, lr
 8000d94:	4288      	cmp	r0, r1
 8000d96:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9a:	d90b      	bls.n	8000db4 <__udivmoddi4+0x1b8>
 8000d9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000da0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da4:	f080 8088 	bcs.w	8000eb8 <__udivmoddi4+0x2bc>
 8000da8:	4288      	cmp	r0, r1
 8000daa:	f240 8085 	bls.w	8000eb8 <__udivmoddi4+0x2bc>
 8000dae:	f1a8 0802 	sub.w	r8, r8, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	458e      	cmp	lr, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x1e2>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd4:	d26c      	bcs.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dd6:	458e      	cmp	lr, r1
 8000dd8:	d96a      	bls.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de2:	fba0 9402 	umull	r9, r4, r0, r2
 8000de6:	eba1 010e 	sub.w	r1, r1, lr
 8000dea:	42a1      	cmp	r1, r4
 8000dec:	46c8      	mov	r8, r9
 8000dee:	46a6      	mov	lr, r4
 8000df0:	d356      	bcc.n	8000ea0 <__udivmoddi4+0x2a4>
 8000df2:	d053      	beq.n	8000e9c <__udivmoddi4+0x2a0>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x212>
 8000df6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000e02:	fa22 f306 	lsr.w	r3, r2, r6
 8000e06:	40f1      	lsrs	r1, r6
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	f1c2 0320 	rsb	r3, r2, #32
 8000e1a:	40d8      	lsrs	r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa21 f303 	lsr.w	r3, r1, r3
 8000e24:	4091      	lsls	r1, r2
 8000e26:	4301      	orrs	r1, r0
 8000e28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2c:	fa1f fe8c 	uxth.w	lr, ip
 8000e30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e34:	fb07 3610 	mls	r6, r7, r0, r3
 8000e38:	0c0b      	lsrs	r3, r1, #16
 8000e3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e42:	429e      	cmp	r6, r3
 8000e44:	fa04 f402 	lsl.w	r4, r4, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x260>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e52:	d22f      	bcs.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e54:	429e      	cmp	r6, r3
 8000e56:	d92d      	bls.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1b9b      	subs	r3, r3, r6
 8000e5e:	b289      	uxth	r1, r1
 8000e60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e64:	fb07 3316 	mls	r3, r7, r6, r3
 8000e68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x28a>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e7c:	d216      	bcs.n	8000eac <__udivmoddi4+0x2b0>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d914      	bls.n	8000eac <__udivmoddi4+0x2b0>
 8000e82:	3e02      	subs	r6, #2
 8000e84:	4461      	add	r1, ip
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e8c:	e738      	b.n	8000d00 <__udivmoddi4+0x104>
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e705      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000e94:	4606      	mov	r6, r0
 8000e96:	e6e3      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6f8      	b.n	8000c8e <__udivmoddi4+0x92>
 8000e9c:	454b      	cmp	r3, r9
 8000e9e:	d2a9      	bcs.n	8000df4 <__udivmoddi4+0x1f8>
 8000ea0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e7a3      	b.n	8000df4 <__udivmoddi4+0x1f8>
 8000eac:	4646      	mov	r6, r8
 8000eae:	e7ea      	b.n	8000e86 <__udivmoddi4+0x28a>
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	e794      	b.n	8000dde <__udivmoddi4+0x1e2>
 8000eb4:	4640      	mov	r0, r8
 8000eb6:	e7d1      	b.n	8000e5c <__udivmoddi4+0x260>
 8000eb8:	46d0      	mov	r8, sl
 8000eba:	e77b      	b.n	8000db4 <__udivmoddi4+0x1b8>
 8000ebc:	3b02      	subs	r3, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	e732      	b.n	8000d28 <__udivmoddi4+0x12c>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e709      	b.n	8000cda <__udivmoddi4+0xde>
 8000ec6:	4464      	add	r4, ip
 8000ec8:	3802      	subs	r0, #2
 8000eca:	e742      	b.n	8000d52 <__udivmoddi4+0x156>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_DMA_Init+0x3c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <MX_DMA_Init+0x3c>)
 8000ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_DMA_Init+0x3c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2010      	movs	r0, #16
 8000ef8:	f001 fe17 	bl	8002b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000efc:	2010      	movs	r0, #16
 8000efe:	f001 fe30 	bl	8002b62 <HAL_NVIC_EnableIRQ>

}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800

08000f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b39      	ldr	r3, [pc, #228]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a38      	ldr	r2, [pc, #224]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b36      	ldr	r3, [pc, #216]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a31      	ldr	r2, [pc, #196]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	4825      	ldr	r0, [pc, #148]	; (8001014 <MX_GPIO_Init+0x104>)
 8000f80:	f002 fb90 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f84:	2320      	movs	r3, #32
 8000f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481e      	ldr	r0, [pc, #120]	; (8001014 <MX_GPIO_Init+0x104>)
 8000f9c:	f002 f9fe 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FUNC_Button_Pin|START_Button_Pin;
 8000fa0:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4818      	ldr	r0, [pc, #96]	; (8001018 <MX_GPIO_Init+0x108>)
 8000fb8:	f002 f9f0 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STOP_Button_Pin;
 8000fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STOP_Button_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <MX_GPIO_Init+0x104>)
 8000fd4:	f002 f9e2 	bl	800339c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f001 fda4 	bl	8002b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f001 fdbd 	bl	8002b62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2017      	movs	r0, #23
 8000fee:	f001 fd9c 	bl	8002b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ff2:	2017      	movs	r0, #23
 8000ff4:	f001 fdb5 	bl	8002b62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2028      	movs	r0, #40	; 0x28
 8000ffe:	f001 fd94 	bl	8002b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001002:	2028      	movs	r0, #40	; 0x28
 8001004:	f001 fdad 	bl	8002b62 <HAL_NVIC_EnableIRQ>

}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400

0800101c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_I2C1_Init+0x50>)
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <MX_I2C1_Init+0x54>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_I2C1_Init+0x50>)
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <MX_I2C1_Init+0x58>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_I2C1_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_I2C1_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_I2C1_Init+0x50>)
 800103a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800103e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_I2C1_Init+0x50>)
 800105a:	f002 fb6f 	bl	800373c <HAL_I2C_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001064:	f000 fb22 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000a4 	.word	0x200000a4
 8001070:	40005400 	.word	0x40005400
 8001074:	00061a80 	.word	0x00061a80

08001078 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_I2C_MspInit+0x84>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12c      	bne.n	80010f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_I2C_MspInit+0x88>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_I2C_MspInit+0x88>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_I2C_MspInit+0x88>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80010b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010bc:	2312      	movs	r3, #18
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c8:	2304      	movs	r3, #4
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <HAL_I2C_MspInit+0x8c>)
 80010d4:	f002 f962 	bl	800339c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0x88>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_I2C_MspInit+0x88>)
 80010e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_I2C_MspInit+0x88>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40005400 	.word	0x40005400
 8001100:	40023800 	.word	0x40023800
 8001104:	40020400 	.word	0x40020400

08001108 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <bno055_assignI2C+0x1c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200000f8 	.word	0x200000f8

08001128 <bno055_delay>:

void bno055_delay(int time) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fbfa 	bl	800292c <HAL_Delay>
#endif
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af02      	add	r7, sp, #8
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	733b      	strb	r3, [r7, #12]
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001158:	4b5a      	ldr	r3, [pc, #360]	; (80012c4 <bno055_writeData+0x184>)
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	230a      	movs	r3, #10
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2302      	movs	r3, #2
 8001166:	2150      	movs	r1, #80	; 0x50
 8001168:	f002 fc2c 	bl	80039c4 <HAL_I2C_Master_Transmit>
 800116c:	4603      	mov	r3, r0
 800116e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80a0 	beq.w	80012b8 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d103      	bne.n	8001186 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800117e:	4852      	ldr	r0, [pc, #328]	; (80012c8 <bno055_writeData+0x188>)
 8001180:	f006 f94a 	bl	8007418 <puts>
 8001184:	e012      	b.n	80011ac <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d103      	bne.n	8001194 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800118c:	484f      	ldr	r0, [pc, #316]	; (80012cc <bno055_writeData+0x18c>)
 800118e:	f006 f943 	bl	8007418 <puts>
 8001192:	e00b      	b.n	80011ac <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d103      	bne.n	80011a2 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800119a:	484d      	ldr	r0, [pc, #308]	; (80012d0 <bno055_writeData+0x190>)
 800119c:	f006 f93c 	bl	8007418 <puts>
 80011a0:	e004      	b.n	80011ac <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	4619      	mov	r1, r3
 80011a6:	484b      	ldr	r0, [pc, #300]	; (80012d4 <bno055_writeData+0x194>)
 80011a8:	f006 f8b0 	bl	800730c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80011ac:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <bno055_writeData+0x184>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 ff39 	bl	8004028 <HAL_I2C_GetError>
 80011b6:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d07e      	beq.n	80012bc <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d103      	bne.n	80011cc <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80011c4:	4844      	ldr	r0, [pc, #272]	; (80012d8 <bno055_writeData+0x198>)
 80011c6:	f006 f927 	bl	8007418 <puts>
 80011ca:	e021      	b.n	8001210 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d103      	bne.n	80011da <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80011d2:	4842      	ldr	r0, [pc, #264]	; (80012dc <bno055_writeData+0x19c>)
 80011d4:	f006 f920 	bl	8007418 <puts>
 80011d8:	e01a      	b.n	8001210 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d103      	bne.n	80011e8 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80011e0:	483f      	ldr	r0, [pc, #252]	; (80012e0 <bno055_writeData+0x1a0>)
 80011e2:	f006 f919 	bl	8007418 <puts>
 80011e6:	e013      	b.n	8001210 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d103      	bne.n	80011f6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80011ee:	483d      	ldr	r0, [pc, #244]	; (80012e4 <bno055_writeData+0x1a4>)
 80011f0:	f006 f912 	bl	8007418 <puts>
 80011f4:	e00c      	b.n	8001210 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b10      	cmp	r3, #16
 80011fa:	d103      	bne.n	8001204 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80011fc:	483a      	ldr	r0, [pc, #232]	; (80012e8 <bno055_writeData+0x1a8>)
 80011fe:	f006 f90b 	bl	8007418 <puts>
 8001202:	e005      	b.n	8001210 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2b20      	cmp	r3, #32
 8001208:	d102      	bne.n	8001210 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800120a:	4838      	ldr	r0, [pc, #224]	; (80012ec <bno055_writeData+0x1ac>)
 800120c:	f006 f904 	bl	8007418 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <bno055_writeData+0x184>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fef9 	bl	800400c <HAL_I2C_GetState>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001224:	4832      	ldr	r0, [pc, #200]	; (80012f0 <bno055_writeData+0x1b0>)
 8001226:	f006 f8f7 	bl	8007418 <puts>
 800122a:	e048      	b.n	80012be <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b20      	cmp	r3, #32
 8001230:	d103      	bne.n	800123a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001232:	482f      	ldr	r0, [pc, #188]	; (80012f0 <bno055_writeData+0x1b0>)
 8001234:	f006 f8f0 	bl	8007418 <puts>
 8001238:	e041      	b.n	80012be <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	2b24      	cmp	r3, #36	; 0x24
 800123e:	d103      	bne.n	8001248 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001240:	482c      	ldr	r0, [pc, #176]	; (80012f4 <bno055_writeData+0x1b4>)
 8001242:	f006 f8e9 	bl	8007418 <puts>
 8001246:	e03a      	b.n	80012be <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b21      	cmp	r3, #33	; 0x21
 800124c:	d103      	bne.n	8001256 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800124e:	482a      	ldr	r0, [pc, #168]	; (80012f8 <bno055_writeData+0x1b8>)
 8001250:	f006 f8e2 	bl	8007418 <puts>
 8001254:	e033      	b.n	80012be <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b22      	cmp	r3, #34	; 0x22
 800125a:	d103      	bne.n	8001264 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800125c:	4827      	ldr	r0, [pc, #156]	; (80012fc <bno055_writeData+0x1bc>)
 800125e:	f006 f8db 	bl	8007418 <puts>
 8001262:	e02c      	b.n	80012be <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	2b28      	cmp	r3, #40	; 0x28
 8001268:	d103      	bne.n	8001272 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800126a:	4825      	ldr	r0, [pc, #148]	; (8001300 <bno055_writeData+0x1c0>)
 800126c:	f006 f8d4 	bl	8007418 <puts>
 8001270:	e025      	b.n	80012be <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b29      	cmp	r3, #41	; 0x29
 8001276:	d103      	bne.n	8001280 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001278:	4822      	ldr	r0, [pc, #136]	; (8001304 <bno055_writeData+0x1c4>)
 800127a:	f006 f8cd 	bl	8007418 <puts>
 800127e:	e01e      	b.n	80012be <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b2a      	cmp	r3, #42	; 0x2a
 8001284:	d103      	bne.n	800128e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001286:	4820      	ldr	r0, [pc, #128]	; (8001308 <bno055_writeData+0x1c8>)
 8001288:	f006 f8c6 	bl	8007418 <puts>
 800128c:	e017      	b.n	80012be <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b60      	cmp	r3, #96	; 0x60
 8001292:	d103      	bne.n	800129c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001294:	481d      	ldr	r0, [pc, #116]	; (800130c <bno055_writeData+0x1cc>)
 8001296:	f006 f8bf 	bl	8007418 <puts>
 800129a:	e010      	b.n	80012be <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	2ba0      	cmp	r3, #160	; 0xa0
 80012a0:	d103      	bne.n	80012aa <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80012a2:	481b      	ldr	r0, [pc, #108]	; (8001310 <bno055_writeData+0x1d0>)
 80012a4:	f006 f8b8 	bl	8007418 <puts>
 80012a8:	e009      	b.n	80012be <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2be0      	cmp	r3, #224	; 0xe0
 80012ae:	d106      	bne.n	80012be <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80012b0:	4818      	ldr	r0, [pc, #96]	; (8001314 <bno055_writeData+0x1d4>)
 80012b2:	f006 f8b1 	bl	8007418 <puts>
 80012b6:	e002      	b.n	80012be <bno055_writeData+0x17e>
    return;
 80012b8:	bf00      	nop
 80012ba:	e000      	b.n	80012be <bno055_writeData+0x17e>
    return;
 80012bc:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200000f8 	.word	0x200000f8
 80012c8:	0800832c 	.word	0x0800832c
 80012cc:	08008350 	.word	0x08008350
 80012d0:	08008378 	.word	0x08008378
 80012d4:	0800839c 	.word	0x0800839c
 80012d8:	080083b4 	.word	0x080083b4
 80012dc:	080083c8 	.word	0x080083c8
 80012e0:	080083dc 	.word	0x080083dc
 80012e4:	080083f0 	.word	0x080083f0
 80012e8:	08008404 	.word	0x08008404
 80012ec:	08008418 	.word	0x08008418
 80012f0:	08008430 	.word	0x08008430
 80012f4:	08008448 	.word	0x08008448
 80012f8:	0800845c 	.word	0x0800845c
 80012fc:	08008474 	.word	0x08008474
 8001300:	0800848c 	.word	0x0800848c
 8001304:	080084a4 	.word	0x080084a4
 8001308:	080084c4 	.word	0x080084c4
 800130c:	080084e4 	.word	0x080084e4
 8001310:	080084fc 	.word	0x080084fc
 8001314:	08008514 	.word	0x08008514

08001318 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af02      	add	r7, sp, #8
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <bno055_readData+0x40>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	1dfa      	adds	r2, r7, #7
 800132e:	2364      	movs	r3, #100	; 0x64
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	2150      	movs	r1, #80	; 0x50
 8001336:	f002 fb45 	bl	80039c4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <bno055_readData+0x40>)
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	79bb      	ldrb	r3, [r7, #6]
 8001340:	b29b      	uxth	r3, r3
 8001342:	2264      	movs	r2, #100	; 0x64
 8001344:	9200      	str	r2, [sp, #0]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	2150      	movs	r1, #80	; 0x50
 800134a:	f002 fc39 	bl	8003bc0 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000f8 	.word	0x200000f8

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001360:	f001 fa72 	bl	8002848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001364:	f000 f86a 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001368:	f7ff fdd2 	bl	8000f10 <MX_GPIO_Init>
  MX_DMA_Init();
 800136c:	f7ff fdb0 	bl	8000ed0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001370:	f000 fae0 	bl	8001934 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001374:	f000 fb30 	bl	80019d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001378:	f000 fba4 	bl	8001ac4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800137c:	f000 fcca 	bl	8001d14 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001380:	f7ff fe4c 	bl	800101c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	/*************** ESC ***************/
	ESC_Init(&Esc, 100, -10, 25);
 8001384:	2319      	movs	r3, #25
 8001386:	f06f 0209 	mvn.w	r2, #9
 800138a:	2164      	movs	r1, #100	; 0x64
 800138c:	4823      	ldr	r0, [pc, #140]	; (800141c <main+0xc0>)
 800138e:	f000 fda9 	bl	8001ee4 <ESC_Init>
//	TIM3->CCR2 = 100;

	/************** SERVO **************/
	SERVO_Init(&Servo, 75, -25, 25);
 8001392:	2319      	movs	r3, #25
 8001394:	f06f 0218 	mvn.w	r2, #24
 8001398:	214b      	movs	r1, #75	; 0x4b
 800139a:	4821      	ldr	r0, [pc, #132]	; (8001420 <main+0xc4>)
 800139c:	f001 f93a 	bl	8002614 <SERVO_Init>
//	TIM2->CCR2 = 90;

	/*************** IMU ***************/
	  bno055_assignI2C(&hi2c1);
 80013a0:	4820      	ldr	r0, [pc, #128]	; (8001424 <main+0xc8>)
 80013a2:	f7ff feb1 	bl	8001108 <bno055_assignI2C>
	  bno055_setup();
 80013a6:	f000 ff85 	bl	80022b4 <bno055_setup>
	  bno055_setOperationModeNDOF();
 80013aa:	f000 ff70 	bl	800228e <bno055_setOperationModeNDOF>

	/************** TIMER **************/
	HAL_TIM_Base_Start_IT(&htim1);
 80013ae:	481e      	ldr	r0, [pc, #120]	; (8001428 <main+0xcc>)
 80013b0:	f003 fe5c 	bl	800506c <HAL_TIM_Base_Start_IT>

	/************** COMMUNICATION **************/
	while (HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 4) != HAL_OK) HAL_UART_DMAStop(&huart2);
 80013b4:	e002      	b.n	80013bc <main+0x60>
 80013b6:	481d      	ldr	r0, [pc, #116]	; (800142c <main+0xd0>)
 80013b8:	f004 fe19 	bl	8005fee <HAL_UART_DMAStop>
 80013bc:	2204      	movs	r2, #4
 80013be:	491c      	ldr	r1, [pc, #112]	; (8001430 <main+0xd4>)
 80013c0:	481a      	ldr	r0, [pc, #104]	; (800142c <main+0xd0>)
 80013c2:	f004 fe93 	bl	80060ec <HAL_UARTEx_ReceiveToIdle_DMA>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f4      	bne.n	80013b6 <main+0x5a>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <main+0xd8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <main+0xd8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0208 	bic.w	r2, r2, #8
 80013da:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    v = bno055_getVectorQuaternion();
 80013dc:	f001 f8d6 	bl	800258c <bno055_getVectorQuaternion>
 80013e0:	eeb0 4a40 	vmov.f32	s8, s0
 80013e4:	eef0 4a60 	vmov.f32	s9, s1
 80013e8:	eeb0 5a41 	vmov.f32	s10, s2
 80013ec:	eef0 5a61 	vmov.f32	s11, s3
 80013f0:	eeb0 6a42 	vmov.f32	s12, s4
 80013f4:	eef0 6a62 	vmov.f32	s13, s5
 80013f8:	eeb0 7a43 	vmov.f32	s14, s6
 80013fc:	eef0 7a63 	vmov.f32	s15, s7
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <main+0xdc>)
 8001402:	ed83 4b00 	vstr	d4, [r3]
 8001406:	ed83 5b02 	vstr	d5, [r3, #8]
 800140a:	ed83 6b04 	vstr	d6, [r3, #16]
 800140e:	ed83 7b06 	vstr	d7, [r3, #24]
	    HAL_Delay(100);
 8001412:	2064      	movs	r0, #100	; 0x64
 8001414:	f001 fa8a 	bl	800292c <HAL_Delay>
	    v = bno055_getVectorQuaternion();
 8001418:	e7e0      	b.n	80013dc <main+0x80>
 800141a:	bf00      	nop
 800141c:	200000fc 	.word	0x200000fc
 8001420:	20000108 	.word	0x20000108
 8001424:	200000a4 	.word	0x200000a4
 8001428:	2000013c 	.word	0x2000013c
 800142c:	20000214 	.word	0x20000214
 8001430:	20000110 	.word	0x20000110
 8001434:	20000258 	.word	0x20000258
 8001438:	20000118 	.word	0x20000118

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b094      	sub	sp, #80	; 0x50
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	2230      	movs	r2, #48	; 0x30
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f005 ff56 	bl	80072fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <SystemClock_Config+0xc8>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a26      	ldr	r2, [pc, #152]	; (8001504 <SystemClock_Config+0xc8>)
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <SystemClock_Config+0xc8>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <SystemClock_Config+0xcc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a20      	ldr	r2, [pc, #128]	; (8001508 <SystemClock_Config+0xcc>)
 8001486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <SystemClock_Config+0xcc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001498:	2301      	movs	r3, #1
 800149a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800149c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a2:	2302      	movs	r3, #2
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014ac:	2304      	movs	r3, #4
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014b0:	2364      	movs	r3, #100	; 0x64
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014b8:	2304      	movs	r3, #4
 80014ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 f8eb 	bl	800469c <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014cc:	f000 f8ee 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	230f      	movs	r3, #15
 80014d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2302      	movs	r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2103      	movs	r1, #3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 fb4d 	bl	8004b8c <HAL_RCC_ClockConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014f8:	f000 f8d8 	bl	80016ac <Error_Handler>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3750      	adds	r7, #80	; 0x50
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40007000 	.word	0x40007000

0800150c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
uint16_t i = 100;

/*********************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d118      	bne.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800151e:	2120      	movs	r1, #32
 8001520:	480e      	ldr	r0, [pc, #56]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001522:	f002 f8d8 	bl	80036d6 <HAL_GPIO_TogglePin>
//		if (i>=100) i-=1;
		/*************************************/

		/************* Control *************/
//		Run(&Esc, &Servo, -10, 0);
		if (flag_button == 0) Run(&Esc, &Servo, 0, 0); // Speed, Angle
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0x30>
 800152e:	2300      	movs	r3, #0
 8001530:	2200      	movs	r2, #0
 8001532:	490c      	ldr	r1, [pc, #48]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001536:	f001 f8fb 	bl	8002730 <Run>
		else Run(&Esc, &Servo, receive_speed, receive_angle);  // Run(&Esc, &Servo, -10, 0); // Speed, Angle
		}
}
 800153a:	e009      	b.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x44>
		else Run(&Esc, &Servo, receive_speed, receive_angle);  // Run(&Esc, &Servo, -10, 0); // Speed, Angle
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800153e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001544:	f993 3000 	ldrsb.w	r3, [r3]
 8001548:	4906      	ldr	r1, [pc, #24]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800154a:	4807      	ldr	r0, [pc, #28]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800154c:	f001 f8f0 	bl	8002730 <Run>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40010000 	.word	0x40010000
 800155c:	40020000 	.word	0x40020000
 8001560:	20000117 	.word	0x20000117
 8001564:	20000108 	.word	0x20000108
 8001568:	200000fc 	.word	0x200000fc
 800156c:	20000114 	.word	0x20000114
 8001570:	20000116 	.word	0x20000116

08001574 <HAL_UARTEx_RxEventCallback>:

/*********************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART2) {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <HAL_UARTEx_RxEventCallback+0x84>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d131      	bne.n	80015ee <HAL_UARTEx_RxEventCallback+0x7a>
	  while (HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 4) != HAL_OK) HAL_UART_DMAStop(&huart2);
 800158a:	e002      	b.n	8001592 <HAL_UARTEx_RxEventCallback+0x1e>
 800158c:	481b      	ldr	r0, [pc, #108]	; (80015fc <HAL_UARTEx_RxEventCallback+0x88>)
 800158e:	f004 fd2e 	bl	8005fee <HAL_UART_DMAStop>
 8001592:	2204      	movs	r2, #4
 8001594:	491a      	ldr	r1, [pc, #104]	; (8001600 <HAL_UARTEx_RxEventCallback+0x8c>)
 8001596:	4819      	ldr	r0, [pc, #100]	; (80015fc <HAL_UARTEx_RxEventCallback+0x88>)
 8001598:	f004 fda8 	bl	80060ec <HAL_UARTEx_ReceiveToIdle_DMA>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f4      	bne.n	800158c <HAL_UARTEx_RxEventCallback+0x18>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_UARTEx_RxEventCallback+0x90>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_UARTEx_RxEventCallback+0x90>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0208 	bic.w	r2, r2, #8
 80015b0:	601a      	str	r2, [r3, #0]
		if (Size == 4) {
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d11a      	bne.n	80015ee <HAL_UARTEx_RxEventCallback+0x7a>
			if (rxdata[3] == 25) {
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_UARTEx_RxEventCallback+0x8c>)
 80015ba:	78db      	ldrb	r3, [r3, #3]
 80015bc:	2b19      	cmp	r3, #25
 80015be:	d110      	bne.n	80015e2 <HAL_UARTEx_RxEventCallback+0x6e>
				receive_speed = ((int16_t)rxdata[1]<<8)|rxdata[0];
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_UARTEx_RxEventCallback+0x8c>)
 80015c2:	785b      	ldrb	r3, [r3, #1]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_UARTEx_RxEventCallback+0x8c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_UARTEx_RxEventCallback+0x94>)
 80015d4:	801a      	strh	r2, [r3, #0]
				receive_angle = rxdata[2];
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_UARTEx_RxEventCallback+0x8c>)
 80015d8:	789b      	ldrb	r3, [r3, #2]
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_UARTEx_RxEventCallback+0x98>)
 80015de:	701a      	strb	r2, [r3, #0]
			/**** CHECK DATA ****/
//			if (receive_speed == 100 && receive_angle == 0) HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
//			else HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
		}
  }
}
 80015e0:	e005      	b.n	80015ee <HAL_UARTEx_RxEventCallback+0x7a>
				receive_speed = 0;
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_UARTEx_RxEventCallback+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	801a      	strh	r2, [r3, #0]
				receive_angle = 0;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_UARTEx_RxEventCallback+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40004400 	.word	0x40004400
 80015fc:	20000214 	.word	0x20000214
 8001600:	20000110 	.word	0x20000110
 8001604:	20000258 	.word	0x20000258
 8001608:	20000114 	.word	0x20000114
 800160c:	20000116 	.word	0x20000116

08001610 <HAL_UART_ErrorCallback>:

/*********************************************************/
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <HAL_UART_ErrorCallback+0x44>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d113      	bne.n	800164a <HAL_UART_ErrorCallback+0x3a>
		while (HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 4) != HAL_OK) HAL_UART_DMAStop(&huart2);
 8001622:	e002      	b.n	800162a <HAL_UART_ErrorCallback+0x1a>
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <HAL_UART_ErrorCallback+0x48>)
 8001626:	f004 fce2 	bl	8005fee <HAL_UART_DMAStop>
 800162a:	2204      	movs	r2, #4
 800162c:	490b      	ldr	r1, [pc, #44]	; (800165c <HAL_UART_ErrorCallback+0x4c>)
 800162e:	480a      	ldr	r0, [pc, #40]	; (8001658 <HAL_UART_ErrorCallback+0x48>)
 8001630:	f004 fd5c 	bl	80060ec <HAL_UARTEx_ReceiveToIdle_DMA>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f4      	bne.n	8001624 <HAL_UART_ErrorCallback+0x14>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_UART_ErrorCallback+0x50>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_UART_ErrorCallback+0x50>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0208 	bic.w	r2, r2, #8
 8001648:	601a      	str	r2, [r3, #0]
	}
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40004400 	.word	0x40004400
 8001658:	20000214 	.word	0x20000214
 800165c:	20000110 	.word	0x20000110
 8001660:	20000258 	.word	0x20000258

08001664 <HAL_GPIO_EXTI_Callback>:

/************************SETUP ESC************************/
uint16_t setup_pwm;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == STOP_Button_Pin) {
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001674:	d103      	bne.n	800167e <HAL_GPIO_EXTI_Callback+0x1a>
		flag_button=0;
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
	else if (GPIO_Pin == START_Button_Pin) {
		flag_button=2;
//		setup_pwm = 235; // 235 (100Hz) - 115 (50Hz)
//		TIM3->CCR2 = setup_pwm;
	}
}
 800167c:	e00d      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x36>
	else if (GPIO_Pin == FUNC_Button_Pin) {
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001684:	d103      	bne.n	800168e <HAL_GPIO_EXTI_Callback+0x2a>
		flag_button=1;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
}
 800168c:	e005      	b.n	800169a <HAL_GPIO_EXTI_Callback+0x36>
	else if (GPIO_Pin == START_Button_Pin) {
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	2b10      	cmp	r3, #16
 8001692:	d102      	bne.n	800169a <HAL_GPIO_EXTI_Callback+0x36>
		flag_button=2;
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001696:	2202      	movs	r2, #2
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000117 	.word	0x20000117

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <HAL_MspInit+0x4c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_MspInit+0x4c>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f001 f8ca 	bl	80028ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Button_Pin);
 8001760:	2010      	movs	r0, #16
 8001762:	f001 ffd3 	bl	800370c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <DMA1_Stream5_IRQHandler+0x10>)
 8001772:	f001 fba9 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000258 	.word	0x20000258

08001780 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STOP_Button_Pin);
 8001784:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001788:	f001 ffc0 	bl	800370c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001796:	f003 fdd5 	bl	8005344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000013c 	.word	0x2000013c

080017a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <USART2_IRQHandler+0x10>)
 80017aa:	f004 fd05 	bl	80061b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000214 	.word	0x20000214

080017b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FUNC_Button_Pin);
 80017bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017c0:	f001 ffa4 	bl	800370c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e00a      	b.n	80017f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017da:	f3af 8000 	nop.w
 80017de:	4601      	mov	r1, r0
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60ba      	str	r2, [r7, #8]
 80017e6:	b2ca      	uxtb	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf0      	blt.n	80017da <_read+0x12>
  }

  return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	e009      	b.n	8001828 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	dbf1      	blt.n	8001814 <_write+0x12>
  }
  return len;
 8001830:	687b      	ldr	r3, [r7, #4]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_close>:

int _close(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001862:	605a      	str	r2, [r3, #4]
  return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <_isatty>:

int _isatty(int file)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ac:	4a14      	ldr	r2, [pc, #80]	; (8001900 <_sbrk+0x5c>)
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <_sbrk+0x60>)
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <_sbrk+0x64>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <_sbrk+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d207      	bcs.n	80018e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d4:	f005 fce8 	bl	80072a8 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	e009      	b.n	80018f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <_sbrk+0x64>)
 80018f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20020000 	.word	0x20020000
 8001904:	00000400 	.word	0x00000400
 8001908:	20000138 	.word	0x20000138
 800190c:	200002d8 	.word	0x200002d8

08001910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <SystemInit+0x20>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <SystemInit+0x20>)
 800191c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	463b      	mov	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MX_TIM1_Init+0x9c>)
 8001952:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <MX_TIM1_Init+0xa0>)
 8001954:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <MX_TIM1_Init+0x9c>)
 8001958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800195c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <MX_TIM1_Init+0x9c>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_TIM1_Init+0x9c>)
 8001966:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800196a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_TIM1_Init+0x9c>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_TIM1_Init+0x9c>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_TIM1_Init+0x9c>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800197e:	4814      	ldr	r0, [pc, #80]	; (80019d0 <MX_TIM1_Init+0x9c>)
 8001980:	f003 fb24 	bl	8004fcc <HAL_TIM_Base_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800198a:	f7ff fe8f 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001992:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	4619      	mov	r1, r3
 800199a:	480d      	ldr	r0, [pc, #52]	; (80019d0 <MX_TIM1_Init+0x9c>)
 800199c:	f003 fe9c 	bl	80056d8 <HAL_TIM_ConfigClockSource>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80019a6:	f7ff fe81 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b2:	463b      	mov	r3, r7
 80019b4:	4619      	mov	r1, r3
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <MX_TIM1_Init+0x9c>)
 80019b8:	f004 fa4a 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80019c2:	f7ff fe73 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000013c 	.word	0x2000013c
 80019d4:	40010000 	.word	0x40010000

080019d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	f107 0320 	add.w	r3, r7, #32
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000-1;
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001a12:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001a1e:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001a20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a32:	4823      	ldr	r0, [pc, #140]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001a34:	f003 faca 	bl	8004fcc <HAL_TIM_Base_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a3e:	f7ff fe35 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481c      	ldr	r0, [pc, #112]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001a50:	f003 fe42 	bl	80056d8 <HAL_TIM_ConfigClockSource>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a5a:	f7ff fe27 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a5e:	4818      	ldr	r0, [pc, #96]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001a60:	f003 fb66 	bl	8005130 <HAL_TIM_PWM_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a6a:	f7ff fe1f 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a76:	f107 0320 	add.w	r3, r7, #32
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4810      	ldr	r0, [pc, #64]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001a7e:	f004 f9e7 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a88:	f7ff fe10 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8c:	2360      	movs	r3, #96	; 0x60
 8001a8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001aa4:	f003 fd56 	bl	8005554 <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001aae:	f7ff fdfd 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ab2:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <MX_TIM2_Init+0xe8>)
 8001ab4:	f000 f8d0 	bl	8001c58 <HAL_TIM_MspPostInit>

}
 8001ab8:	bf00      	nop
 8001aba:	3738      	adds	r7, #56	; 0x38
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000184 	.word	0x20000184

08001ac4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08e      	sub	sp, #56	; 0x38
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	f107 0320 	add.w	r3, r7, #32
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	615a      	str	r2, [r3, #20]
 8001af2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001af6:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <MX_TIM3_Init+0xec>)
 8001af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001afa:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001afc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001b0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	4b26      	ldr	r3, [pc, #152]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b1c:	4823      	ldr	r0, [pc, #140]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001b1e:	f003 fa55 	bl	8004fcc <HAL_TIM_Base_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b28:	f7ff fdc0 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b36:	4619      	mov	r1, r3
 8001b38:	481c      	ldr	r0, [pc, #112]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001b3a:	f003 fdcd 	bl	80056d8 <HAL_TIM_ConfigClockSource>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b44:	f7ff fdb2 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b48:	4818      	ldr	r0, [pc, #96]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001b4a:	f003 faf1 	bl	8005130 <HAL_TIM_PWM_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b54:	f7ff fdaa 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	4619      	mov	r1, r3
 8001b66:	4811      	ldr	r0, [pc, #68]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001b68:	f004 f972 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b72:	f7ff fd9b 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b76:	2360      	movs	r3, #96	; 0x60
 8001b78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2204      	movs	r2, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4807      	ldr	r0, [pc, #28]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001b8e:	f003 fce1 	bl	8005554 <HAL_TIM_PWM_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b98:	f7ff fd88 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b9c:	4803      	ldr	r0, [pc, #12]	; (8001bac <MX_TIM3_Init+0xe8>)
 8001b9e:	f000 f85b 	bl	8001c58 <HAL_TIM_MspPostInit>

}
 8001ba2:	bf00      	nop
 8001ba4:	3738      	adds	r7, #56	; 0x38
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200001cc 	.word	0x200001cc
 8001bb0:	40000400 	.word	0x40000400

08001bb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <HAL_TIM_Base_MspInit+0x98>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d116      	bne.n	8001bf4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_TIM_Base_MspInit+0x9c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a20      	ldr	r2, [pc, #128]	; (8001c50 <HAL_TIM_Base_MspInit+0x9c>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_TIM_Base_MspInit+0x9c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	2019      	movs	r0, #25
 8001be8:	f000 ff9f 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bec:	2019      	movs	r0, #25
 8001bee:	f000 ffb8 	bl	8002b62 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bf2:	e026      	b.n	8001c42 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d10e      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_TIM_Base_MspInit+0x9c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <HAL_TIM_Base_MspInit+0x9c>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_TIM_Base_MspInit+0x9c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
}
 8001c1a:	e012      	b.n	8001c42 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <HAL_TIM_Base_MspInit+0xa0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10d      	bne.n	8001c42 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_TIM_Base_MspInit+0x9c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_TIM_Base_MspInit+0x9c>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_TIM_Base_MspInit+0x9c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40000400 	.word	0x40000400

08001c58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c78:	d11e      	bne.n	8001cb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <HAL_TIM_MspPostInit+0xb0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <HAL_TIM_MspPostInit+0xb0>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_TIM_MspPostInit+0xb0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001c96:	2308      	movs	r3, #8
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4816      	ldr	r0, [pc, #88]	; (8001d0c <HAL_TIM_MspPostInit+0xb4>)
 8001cb2:	f001 fb73 	bl	800339c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cb6:	e022      	b.n	8001cfe <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <HAL_TIM_MspPostInit+0xb8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d11d      	bne.n	8001cfe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_TIM_MspPostInit+0xb0>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_TIM_MspPostInit+0xb0>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_TIM_MspPostInit+0xb0>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Pin;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <HAL_TIM_MspPostInit+0xb4>)
 8001cfa:	f001 fb4f 	bl	800339c <HAL_GPIO_Init>
}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	40000400 	.word	0x40000400

08001d14 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_USART2_UART_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d4c:	f004 f902 	bl	8005f54 <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d56:	f7ff fca9 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000214 	.word	0x20000214
 8001d64:	40004400 	.word	0x40004400

08001d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a3d      	ldr	r2, [pc, #244]	; (8001e7c <HAL_UART_MspInit+0x114>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d173      	bne.n	8001e72 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <HAL_UART_MspInit+0x118>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a3b      	ldr	r2, [pc, #236]	; (8001e80 <HAL_UART_MspInit+0x118>)
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_UART_MspInit+0x118>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <HAL_UART_MspInit+0x118>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <HAL_UART_MspInit+0x118>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_UART_MspInit+0x118>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4829      	ldr	r0, [pc, #164]	; (8001e84 <HAL_UART_MspInit+0x11c>)
 8001dde:	f001 fadd 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8001de2:	2308      	movs	r3, #8
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df2:	2307      	movs	r3, #7
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4821      	ldr	r0, [pc, #132]	; (8001e84 <HAL_UART_MspInit+0x11c>)
 8001dfe:	f001 facd 	bl	800339c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e04:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <HAL_UART_MspInit+0x124>)
 8001e06:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e22:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e36:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e3e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e46:	4810      	ldr	r0, [pc, #64]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e48:	f000 fea6 	bl	8002b98 <HAL_DMA_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001e52:	f7ff fc2b 	bl	80016ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e5a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_UART_MspInit+0x120>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	2026      	movs	r0, #38	; 0x26
 8001e68:	f000 fe5f 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e6c:	2026      	movs	r0, #38	; 0x26
 8001e6e:	f000 fe78 	bl	8002b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	20000258 	.word	0x20000258
 8001e8c:	40026088 	.word	0x40026088

08001e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e96:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e98:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eac:	4c0b      	ldr	r4, [pc, #44]	; (8001edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eba:	f7ff fd29 	bl	8001910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f005 f9f9 	bl	80072b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec2:	f7ff fa4b 	bl	800135c <main>
  bx  lr    
 8001ec6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001ed4:	08008630 	.word	0x08008630
  ldr r2, =_sbss
 8001ed8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001edc:	200002d4 	.word	0x200002d4

08001ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC_IRQHandler>
	...

08001ee4 <ESC_Init>:

/*******************************/
double T=0.1;

/*******************************/
void ESC_Init(esc *Esc, uint16_t home, int16_t OutMin, int16_t OutMax) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	817b      	strh	r3, [r7, #10]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	813b      	strh	r3, [r7, #8]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001efe:	2104      	movs	r1, #4
 8001f00:	480b      	ldr	r0, [pc, #44]	; (8001f30 <ESC_Init+0x4c>)
 8001f02:	f003 f96f 	bl	80051e4 <HAL_TIM_PWM_Start>

	Esc->Min = OutMin;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	893a      	ldrh	r2, [r7, #8]
 8001f0a:	805a      	strh	r2, [r3, #2]
  Esc->Max = OutMax;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	88fa      	ldrh	r2, [r7, #6]
 8001f10:	801a      	strh	r2, [r3, #0]

	/******* SET HOME *******/
	Esc->Output = home;
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	edc3 7a02 	vstr	s15, [r3, #8]
	TIM3->CCR2 = home;
 8001f22:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <ESC_Init+0x50>)
 8001f24:	897b      	ldrh	r3, [r7, #10]
 8001f26:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200001cc 	.word	0x200001cc
 8001f34:	40000400 	.word	0x40000400

08001f38 <Acceleration>:

/************************/
void Acceleration(float V_want, float *vout, float _acc, float _dcc) {
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f42:	60b8      	str	r0, [r7, #8]
 8001f44:	edc7 0a01 	vstr	s1, [r7, #4]
 8001f48:	ed87 1a00 	vstr	s2, [r7]
	if(fabs(*vout) < fabs(V_want)) {
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	eeb0 7ae7 	vabs.f32	s14, s15
 8001f56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f5a:	eef0 7ae7 	vabs.f32	s15, s15
 8001f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	d52e      	bpl.n	8001fc6 <Acceleration+0x8e>
    *vout += _acc*T;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe faeb 	bl	8000548 <__aeabi_f2d>
 8001f72:	4604      	mov	r4, r0
 8001f74:	460d      	mov	r5, r1
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fae6 	bl	8000548 <__aeabi_f2d>
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	; (8002070 <Acceleration+0x138>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fb39 	bl	80005f8 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe f97d 	bl	800028c <__adddf3>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fdc7 	bl	8000b2c <__aeabi_d2f>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	601a      	str	r2, [r3, #0]
		if(fabs(*vout) >= fabs(V_want)) *vout = V_want;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	eeb0 7ae7 	vabs.f32	s14, s15
 8001fae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fb2:	eef0 7ae7 	vabs.f32	s15, s15
 8001fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbe:	db02      	blt.n	8001fc6 <Acceleration+0x8e>
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]
   }
  if(fabs(*vout) > fabs(V_want)) {
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	eeb0 7ae7 	vabs.f32	s14, s15
 8001fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd4:	eef0 7ae7 	vabs.f32	s15, s15
 8001fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe0:	dc00      	bgt.n	8001fe4 <Acceleration+0xac>
		if (_dcc >= 0) {
			if(*vout <= V_want) *vout = V_want;
		}
		else if(*vout >= V_want) *vout = V_want;
  }
}
 8001fe2:	e041      	b.n	8002068 <Acceleration+0x130>
     *vout -= _dcc*T;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe faad 	bl	8000548 <__aeabi_f2d>
 8001fee:	4604      	mov	r4, r0
 8001ff0:	460d      	mov	r5, r1
 8001ff2:	6838      	ldr	r0, [r7, #0]
 8001ff4:	f7fe faa8 	bl	8000548 <__aeabi_f2d>
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <Acceleration+0x138>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f7fe fafb 	bl	80005f8 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4620      	mov	r0, r4
 8002008:	4629      	mov	r1, r5
 800200a:	f7fe f93d 	bl	8000288 <__aeabi_dsub>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	f7fe fd89 	bl	8000b2c <__aeabi_d2f>
 800201a:	4602      	mov	r2, r0
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	601a      	str	r2, [r3, #0]
		if (_dcc >= 0) {
 8002020:	edd7 7a00 	vldr	s15, [r7]
 8002024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	db0e      	blt.n	800204c <Acceleration+0x114>
			if(*vout <= V_want) *vout = V_want;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	ed97 7a03 	vldr	s14, [r7, #12]
 8002038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002040:	da00      	bge.n	8002044 <Acceleration+0x10c>
}
 8002042:	e011      	b.n	8002068 <Acceleration+0x130>
			if(*vout <= V_want) *vout = V_want;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	601a      	str	r2, [r3, #0]
}
 800204a:	e00d      	b.n	8002068 <Acceleration+0x130>
		else if(*vout >= V_want) *vout = V_want;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	ed97 7a03 	vldr	s14, [r7, #12]
 8002056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	d900      	bls.n	8002062 <Acceleration+0x12a>
}
 8002060:	e002      	b.n	8002068 <Acceleration+0x130>
		else if(*vout >= V_want) *vout = V_want;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}
 8002070:	20000008 	.word	0x20000008

08002074 <ESC_Caliration>:

float ESC_Caliration(float speed) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	ed87 0a01 	vstr	s0, [r7, #4]
	float esc_speed;

	esc_speed =  0.5 * (double)speed + 100; // 65 (reverse) - 100 (stop) - 235 (drive)
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fa62 	bl	8000548 <__aeabi_f2d>
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <ESC_Caliration+0x4c>)
 800208a:	f7fe fab5 	bl	80005f8 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <ESC_Caliration+0x50>)
 800209c:	f7fe f8f6 	bl	800028c <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fd40 	bl	8000b2c <__aeabi_d2f>
 80020ac:	4603      	mov	r3, r0
 80020ae:	60fb      	str	r3, [r7, #12]

	return esc_speed;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	ee07 3a90 	vmov	s15, r3
}
 80020b6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	3fe00000 	.word	0x3fe00000
 80020c4:	40590000 	.word	0x40590000

080020c8 <ESC_Run>:

/************************/
void ESC_Run(esc *Esc, float speed) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	ed87 0a00 	vstr	s0, [r7]
	float acc = 10, dcc = 10;
 80020d4:	4b55      	ldr	r3, [pc, #340]	; (800222c <ESC_Run+0x164>)
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	4b54      	ldr	r3, [pc, #336]	; (800222c <ESC_Run+0x164>)
 80020da:	60bb      	str	r3, [r7, #8]

	/******* Saturation *******/
	if (speed >= Esc->Max) speed=Esc->Max;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ea:	ed97 7a00 	vldr	s14, [r7]
 80020ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	db09      	blt.n	800210c <ESC_Run+0x44>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	edc7 7a00 	vstr	s15, [r7]
 800210a:	e016      	b.n	800213a <ESC_Run+0x72>
	else if (speed <= Esc->Min) speed=Esc->Min;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211a:	ed97 7a00 	vldr	s14, [r7]
 800211e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002126:	d808      	bhi.n	800213a <ESC_Run+0x72>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002136:	edc7 7a00 	vstr	s15, [r7]

	/******* Calibration *******/
	Esc->Set = ESC_Caliration(speed);
 800213a:	ed97 0a00 	vldr	s0, [r7]
 800213e:	f7ff ff99 	bl	8002074 <ESC_Caliration>
 8002142:	eef0 7a40 	vmov.f32	s15, s0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	edc3 7a01 	vstr	s15, [r3, #4]

	/******* Processing *******/
	if (Esc->Set > 0) Acceleration(Esc->Set, &Esc->Output, acc, dcc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002152:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215a:	dd0e      	ble.n	800217a <ESC_Run+0xb2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3308      	adds	r3, #8
 8002166:	ed97 1a02 	vldr	s2, [r7, #8]
 800216a:	edd7 0a03 	vldr	s1, [r7, #12]
 800216e:	4618      	mov	r0, r3
 8002170:	eeb0 0a67 	vmov.f32	s0, s15
 8002174:	f7ff fee0 	bl	8001f38 <Acceleration>
 8002178:	e04b      	b.n	8002212 <ESC_Run+0x14a>
	else if (Esc->Set < 0) Acceleration(Esc->Set, &Esc->Output, -acc, -dcc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002180:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	d516      	bpl.n	80021b8 <ESC_Run+0xf0>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3308      	adds	r3, #8
 8002194:	edd7 7a03 	vldr	s15, [r7, #12]
 8002198:	eef1 6a67 	vneg.f32	s13, s15
 800219c:	edd7 7a02 	vldr	s15, [r7, #8]
 80021a0:	eef1 7a67 	vneg.f32	s15, s15
 80021a4:	eeb0 1a67 	vmov.f32	s2, s15
 80021a8:	eef0 0a66 	vmov.f32	s1, s13
 80021ac:	4618      	mov	r0, r3
 80021ae:	eeb0 0a47 	vmov.f32	s0, s14
 80021b2:	f7ff fec1 	bl	8001f38 <Acceleration>
 80021b6:	e02c      	b.n	8002212 <ESC_Run+0x14a>
	else {
		if (Esc->Output < 0) Acceleration(Esc->Set, &Esc->Output, -acc, -dcc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80021be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	d516      	bpl.n	80021f6 <ESC_Run+0x12e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3308      	adds	r3, #8
 80021d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d6:	eef1 6a67 	vneg.f32	s13, s15
 80021da:	edd7 7a02 	vldr	s15, [r7, #8]
 80021de:	eef1 7a67 	vneg.f32	s15, s15
 80021e2:	eeb0 1a67 	vmov.f32	s2, s15
 80021e6:	eef0 0a66 	vmov.f32	s1, s13
 80021ea:	4618      	mov	r0, r3
 80021ec:	eeb0 0a47 	vmov.f32	s0, s14
 80021f0:	f7ff fea2 	bl	8001f38 <Acceleration>
 80021f4:	e00d      	b.n	8002212 <ESC_Run+0x14a>
		else Acceleration(Esc->Set, &Esc->Output, acc, dcc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3308      	adds	r3, #8
 8002200:	ed97 1a02 	vldr	s2, [r7, #8]
 8002204:	edd7 0a03 	vldr	s1, [r7, #12]
 8002208:	4618      	mov	r0, r3
 800220a:	eeb0 0a67 	vmov.f32	s0, s15
 800220e:	f7ff fe93 	bl	8001f38 <Acceleration>
	}

	/******* PWM *******/
	TIM3->CCR2 = (int)Esc->Output;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	edd3 7a02 	vldr	s15, [r3, #8]
 8002218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <ESC_Run+0x168>)
 800221e:	ee17 2a90 	vmov	r2, s15
 8002222:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	41200000 	.word	0x41200000
 8002230:	40000400 	.word	0x40000400

08002234 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	4619      	mov	r1, r3
 8002242:	2007      	movs	r0, #7
 8002244:	f7fe ff7c 	bl	8001140 <bno055_writeData>
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	4619      	mov	r1, r3
 800225e:	203d      	movs	r0, #61	; 0x3d
 8002260:	f7fe ff6e 	bl	8001140 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800226a:	2013      	movs	r0, #19
 800226c:	f7fe ff5c 	bl	8001128 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8002270:	e002      	b.n	8002278 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8002272:	2007      	movs	r0, #7
 8002274:	f7fe ff58 	bl	8001128 <bno055_delay>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff ffe3 	bl	8002250 <bno055_setOperationMode>
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}

0800228e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800228e:	b580      	push	{r7, lr}
 8002290:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8002292:	200c      	movs	r0, #12
 8002294:	f7ff ffdc 	bl	8002250 <bno055_setOperationMode>
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}

0800229c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80022a0:	2120      	movs	r1, #32
 80022a2:	203f      	movs	r0, #63	; 0x3f
 80022a4:	f7fe ff4c 	bl	8001140 <bno055_writeData>
  bno055_delay(700);
 80022a8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80022ac:	f7fe ff3c 	bl	8001128 <bno055_delay>
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
  bno055_reset();
 80022ba:	f7ff ffef 	bl	800229c <bno055_reset>

  uint8_t id = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	2201      	movs	r2, #1
 80022c6:	4619      	mov	r1, r3
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff f825 	bl	8001318 <bno055_readData>
  if (id != BNO055_ID) {
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2ba0      	cmp	r3, #160	; 0xa0
 80022d2:	d004      	beq.n	80022de <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	4619      	mov	r1, r3
 80022d8:	4809      	ldr	r0, [pc, #36]	; (8002300 <bno055_setup+0x4c>)
 80022da:	f005 f817 	bl	800730c <iprintf>
  }
  bno055_setPage(0);
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff ffa8 	bl	8002234 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80022e4:	2100      	movs	r1, #0
 80022e6:	203f      	movs	r0, #63	; 0x3f
 80022e8:	f7fe ff2a 	bl	8001140 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80022ec:	f7ff ffc8 	bl	8002280 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80022f0:	200a      	movs	r0, #10
 80022f2:	f7fe ff19 	bl	8001128 <bno055_delay>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800852c 	.word	0x0800852c

08002304 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8002304:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002308:	b09e      	sub	sp, #120	; 0x78
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff ff8e 	bl	8002234 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8002318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800231c:	2b20      	cmp	r3, #32
 800231e:	d108      	bne.n	8002332 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8002320:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002328:	2208      	movs	r2, #8
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fff4 	bl	8001318 <bno055_readData>
 8002330:	e007      	b.n	8002342 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8002332:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800233a:	2206      	movs	r2, #6
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe ffeb 	bl	8001318 <bno055_readData>

  double scale = 1;
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	4b8b      	ldr	r3, [pc, #556]	; (8002574 <bno055_getVector+0x270>)
 8002348:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800234c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002350:	2b0e      	cmp	r3, #14
 8002352:	d109      	bne.n	8002368 <bno055_getVector+0x64>
    scale = magScale;
 8002354:	4b88      	ldr	r3, [pc, #544]	; (8002578 <bno055_getVector+0x274>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe f8d3 	bl	8000504 <__aeabi_ui2d>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8002366:	e03e      	b.n	80023e6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8002368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800236c:	2b08      	cmp	r3, #8
 800236e:	d007      	beq.n	8002380 <bno055_getVector+0x7c>
 8002370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002374:	2b28      	cmp	r3, #40	; 0x28
 8002376:	d003      	beq.n	8002380 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8002378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800237c:	2b2e      	cmp	r3, #46	; 0x2e
 800237e:	d109      	bne.n	8002394 <bno055_getVector+0x90>
    scale = accelScale;
 8002380:	4b7e      	ldr	r3, [pc, #504]	; (800257c <bno055_getVector+0x278>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f8bd 	bl	8000504 <__aeabi_ui2d>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8002392:	e028      	b.n	80023e6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8002394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002398:	2b14      	cmp	r3, #20
 800239a:	d109      	bne.n	80023b0 <bno055_getVector+0xac>
    scale = angularRateScale;
 800239c:	4b78      	ldr	r3, [pc, #480]	; (8002580 <bno055_getVector+0x27c>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8af 	bl	8000504 <__aeabi_ui2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80023ae:	e01a      	b.n	80023e6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80023b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023b4:	2b1a      	cmp	r3, #26
 80023b6:	d109      	bne.n	80023cc <bno055_getVector+0xc8>
    scale = eulerScale;
 80023b8:	4b72      	ldr	r3, [pc, #456]	; (8002584 <bno055_getVector+0x280>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f8a1 	bl	8000504 <__aeabi_ui2d>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80023ca:	e00c      	b.n	80023e6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80023cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d108      	bne.n	80023e6 <bno055_getVector+0xe2>
    scale = quaScale;
 80023d4:	4b6c      	ldr	r3, [pc, #432]	; (8002588 <bno055_getVector+0x284>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f893 	bl	8000504 <__aeabi_ui2d>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80023e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ea:	2220      	movs	r2, #32
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f004 ff84 	bl	80072fc <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80023f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d150      	bne.n	800249e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80023fc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	b21a      	sxth	r2, r3
 8002404:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002408:	b21b      	sxth	r3, r3
 800240a:	4313      	orrs	r3, r2
 800240c:	b21b      	sxth	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f888 	bl	8000524 <__aeabi_i2d>
 8002414:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002418:	f7fe fa18 	bl	800084c <__aeabi_ddiv>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002424:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	b21a      	sxth	r2, r3
 800242c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002430:	b21b      	sxth	r3, r3
 8002432:	4313      	orrs	r3, r2
 8002434:	b21b      	sxth	r3, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f874 	bl	8000524 <__aeabi_i2d>
 800243c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002440:	f7fe fa04 	bl	800084c <__aeabi_ddiv>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800244c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b21a      	sxth	r2, r3
 8002454:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002458:	b21b      	sxth	r3, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	b21b      	sxth	r3, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f860 	bl	8000524 <__aeabi_i2d>
 8002464:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002468:	f7fe f9f0 	bl	800084c <__aeabi_ddiv>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8002474:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	b21a      	sxth	r2, r3
 800247c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002480:	b21b      	sxth	r3, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	b21b      	sxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f84c 	bl	8000524 <__aeabi_i2d>
 800248c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002490:	f7fe f9dc 	bl	800084c <__aeabi_ddiv>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800249c:	e03b      	b.n	8002516 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800249e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f837 	bl	8000524 <__aeabi_i2d>
 80024b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80024ba:	f7fe f9c7 	bl	800084c <__aeabi_ddiv>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80024c6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	b21a      	sxth	r2, r3
 80024ce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f823 	bl	8000524 <__aeabi_i2d>
 80024de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80024e2:	f7fe f9b3 	bl	800084c <__aeabi_ddiv>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80024ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b21b      	sxth	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f80f 	bl	8000524 <__aeabi_i2d>
 8002506:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800250a:	f7fe f99f 	bl	800084c <__aeabi_ddiv>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8002516:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800251a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800251e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002522:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800252a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800252e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002532:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002536:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800253a:	ec49 8b14 	vmov	d4, r8, r9
 800253e:	ec45 4b15 	vmov	d5, r4, r5
 8002542:	ec41 0b16 	vmov	d6, r0, r1
 8002546:	ec43 2b17 	vmov	d7, r2, r3
}
 800254a:	eeb0 0a44 	vmov.f32	s0, s8
 800254e:	eef0 0a64 	vmov.f32	s1, s9
 8002552:	eeb0 1a45 	vmov.f32	s2, s10
 8002556:	eef0 1a65 	vmov.f32	s3, s11
 800255a:	eeb0 2a46 	vmov.f32	s4, s12
 800255e:	eef0 2a66 	vmov.f32	s5, s13
 8002562:	eeb0 3a47 	vmov.f32	s6, s14
 8002566:	eef0 3a67 	vmov.f32	s7, s15
 800256a:	3778      	adds	r7, #120	; 0x78
 800256c:	46bd      	mov	sp, r7
 800256e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002572:	bf00      	nop
 8002574:	3ff00000 	.word	0x3ff00000
 8002578:	20000016 	.word	0x20000016
 800257c:	20000010 	.word	0x20000010
 8002580:	20000012 	.word	0x20000012
 8002584:	20000014 	.word	0x20000014
 8002588:	20000018 	.word	0x20000018

0800258c <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 800258c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002590:	b090      	sub	sp, #64	; 0x40
 8002592:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8002594:	2020      	movs	r0, #32
 8002596:	f7ff feb5 	bl	8002304 <bno055_getVector>
 800259a:	eeb0 4a40 	vmov.f32	s8, s0
 800259e:	eef0 4a60 	vmov.f32	s9, s1
 80025a2:	eeb0 5a41 	vmov.f32	s10, s2
 80025a6:	eef0 5a61 	vmov.f32	s11, s3
 80025aa:	eeb0 6a42 	vmov.f32	s12, s4
 80025ae:	eef0 6a62 	vmov.f32	s13, s5
 80025b2:	eeb0 7a43 	vmov.f32	s14, s6
 80025b6:	eef0 7a63 	vmov.f32	s15, s7
 80025ba:	ed87 4b08 	vstr	d4, [r7, #32]
 80025be:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80025c2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80025c6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80025ca:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025ce:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80025d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80025d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025da:	ec49 8b14 	vmov	d4, r8, r9
 80025de:	ec45 4b15 	vmov	d5, r4, r5
 80025e2:	ec41 0b16 	vmov	d6, r0, r1
 80025e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80025ea:	eeb0 0a44 	vmov.f32	s0, s8
 80025ee:	eef0 0a64 	vmov.f32	s1, s9
 80025f2:	eeb0 1a45 	vmov.f32	s2, s10
 80025f6:	eef0 1a65 	vmov.f32	s3, s11
 80025fa:	eeb0 2a46 	vmov.f32	s4, s12
 80025fe:	eef0 2a66 	vmov.f32	s5, s13
 8002602:	eeb0 3a47 	vmov.f32	s6, s14
 8002606:	eef0 3a67 	vmov.f32	s7, s15
 800260a:	3740      	adds	r7, #64	; 0x40
 800260c:	46bd      	mov	sp, r7
 800260e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002614 <SERVO_Init>:
#include "servo.h"

/*******************************/
void SERVO_Init(servo *Servo, uint16_t home, int8_t OutMin, int8_t OutMax) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4603      	mov	r3, r0
 8002624:	807b      	strh	r3, [r7, #2]
 8002626:	460b      	mov	r3, r1
 8002628:	707b      	strb	r3, [r7, #1]
 800262a:	4613      	mov	r3, r2
 800262c:	703b      	strb	r3, [r7, #0]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800262e:	2104      	movs	r1, #4
 8002630:	4808      	ldr	r0, [pc, #32]	; (8002654 <SERVO_Init+0x40>)
 8002632:	f002 fdd7 	bl	80051e4 <HAL_TIM_PWM_Start>

	Servo->Min = OutMin;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	787a      	ldrb	r2, [r7, #1]
 800263a:	705a      	strb	r2, [r3, #1]
  Servo->Max = OutMax;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	783a      	ldrb	r2, [r7, #0]
 8002640:	701a      	strb	r2, [r3, #0]

	/******* SET HOME *******/
	TIM2->CCR2 = home; // from 45 to 115
 8002642:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	6393      	str	r3, [r2, #56]	; 0x38
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000184 	.word	0x20000184

08002658 <SERVO_Caliration>:

/*******************************/
float SERVO_Caliration(float angle) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	ed87 0a01 	vstr	s0, [r7, #4]
	float angle_pwm=0;
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]

	// 0 do: 75
	// 25 do: 90 -> phai
	// -25 do: 60 -> trai
	angle_pwm =  0.6 * (double)angle + 75; //from 45 to 250
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7fd ff6d 	bl	8000548 <__aeabi_f2d>
 800266e:	a310      	add	r3, pc, #64	; (adr r3, 80026b0 <SERVO_Caliration+0x58>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	f7fd ffc0 	bl	80005f8 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	a30d      	add	r3, pc, #52	; (adr r3, 80026b8 <SERVO_Caliration+0x60>)
 8002682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002686:	f7fd fe01 	bl	800028c <__adddf3>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f7fe fa4b 	bl	8000b2c <__aeabi_d2f>
 8002696:	4603      	mov	r3, r0
 8002698:	60fb      	str	r3, [r7, #12]

	return angle_pwm;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	ee07 3a90 	vmov	s15, r3
}
 80026a0:	eeb0 0a67 	vmov.f32	s0, s15
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	33333333 	.word	0x33333333
 80026b4:	3fe33333 	.word	0x3fe33333
 80026b8:	00000000 	.word	0x00000000
 80026bc:	4052c000 	.word	0x4052c000

080026c0 <SERVO_Run>:

/*******************************/
void SERVO_Run(servo *Servo, int8_t angle) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
	/******* Saturation *******/
	if (angle >= Servo->Max) angle=Servo->Max;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f993 3000 	ldrsb.w	r3, [r3]
 80026d2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	db03      	blt.n	80026e2 <SERVO_Run+0x22>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	70fb      	strb	r3, [r7, #3]
 80026e0:	e009      	b.n	80026f6 <SERVO_Run+0x36>
	else if (angle <= Servo->Min) angle=Servo->Min;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80026e8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	dc02      	bgt.n	80026f6 <SERVO_Run+0x36>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	785b      	ldrb	r3, [r3, #1]
 80026f4:	70fb      	strb	r3, [r7, #3]

	/******* Calibration *******/
	Servo->PWM = SERVO_Caliration(angle);
 80026f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002702:	eeb0 0a67 	vmov.f32	s0, s15
 8002706:	f7ff ffa7 	bl	8002658 <SERVO_Caliration>
 800270a:	eef0 7a40 	vmov.f32	s15, s0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	edc3 7a01 	vstr	s15, [r3, #4]

	/******* PWM *******/
	TIM2->CCR2 = (int)Servo->PWM;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	edd3 7a01 	vldr	s15, [r3, #4]
 800271a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800271e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002722:	ee17 2a90 	vmov	r2, s15
 8002726:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <Run>:
/*********************/
uint8_t status=0;
double count = 0;

/*********************/
void Run(esc *Esc, servo *Servo, int16_t speed, int8_t angle) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	460b      	mov	r3, r1
 8002740:	80fb      	strh	r3, [r7, #6]
 8002742:	4613      	mov	r3, r2
 8002744:	717b      	strb	r3, [r7, #5]
	/*********** Reverse Mode ***********/
	if (speed < 0 && count<=500) {
 8002746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274a:	2b00      	cmp	r3, #0
 800274c:	da4f      	bge.n	80027ee <Run+0xbe>
 800274e:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <Run+0x108>)
 8002750:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	4b38      	ldr	r3, [pc, #224]	; (800283c <Run+0x10c>)
 800275a:	f7fe f9c9 	bl	8000af0 <__aeabi_dcmple>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d044      	beq.n	80027ee <Run+0xbe>
		while (count <= 80) {
 8002764:	e00f      	b.n	8002786 <Run+0x56>
			TIM3->CCR2 = 80;
 8002766:	4b36      	ldr	r3, [pc, #216]	; (8002840 <Run+0x110>)
 8002768:	2250      	movs	r2, #80	; 0x50
 800276a:	639a      	str	r2, [r3, #56]	; 0x38
			count += 0.001;
 800276c:	4b32      	ldr	r3, [pc, #200]	; (8002838 <Run+0x108>)
 800276e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002772:	a32f      	add	r3, pc, #188	; (adr r3, 8002830 <Run+0x100>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fd fd88 	bl	800028c <__adddf3>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	492d      	ldr	r1, [pc, #180]	; (8002838 <Run+0x108>)
 8002782:	e9c1 2300 	strd	r2, r3, [r1]
		while (count <= 80) {
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <Run+0x108>)
 8002788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <Run+0x114>)
 8002792:	f7fe f9ad 	bl	8000af0 <__aeabi_dcmple>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e4      	bne.n	8002766 <Run+0x36>
		}

		while (count >= 80 && count <= 500) {
 800279c:	e00f      	b.n	80027be <Run+0x8e>
			TIM3->CCR2 = 100;
 800279e:	4b28      	ldr	r3, [pc, #160]	; (8002840 <Run+0x110>)
 80027a0:	2264      	movs	r2, #100	; 0x64
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
			count += 0.001;
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <Run+0x108>)
 80027a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027aa:	a321      	add	r3, pc, #132	; (adr r3, 8002830 <Run+0x100>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd fd6c 	bl	800028c <__adddf3>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	491f      	ldr	r1, [pc, #124]	; (8002838 <Run+0x108>)
 80027ba:	e9c1 2300 	strd	r2, r3, [r1]
		while (count >= 80 && count <= 500) {
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <Run+0x108>)
 80027c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <Run+0x114>)
 80027ca:	f7fe f99b 	bl	8000b04 <__aeabi_dcmpge>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d100      	bne.n	80027d6 <Run+0xa6>
	if (speed < 0 && count<=500) {
 80027d4:	e016      	b.n	8002804 <Run+0xd4>
		while (count >= 80 && count <= 500) {
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <Run+0x108>)
 80027d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <Run+0x10c>)
 80027e2:	f7fe f985 	bl	8000af0 <__aeabi_dcmple>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1d8      	bne.n	800279e <Run+0x6e>
	if (speed < 0 && count<=500) {
 80027ec:	e00a      	b.n	8002804 <Run+0xd4>
		}
	}
	else if (speed > 0) count=0;
 80027ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	dd06      	ble.n	8002804 <Run+0xd4>
 80027f6:	4910      	ldr	r1, [pc, #64]	; (8002838 <Run+0x108>)
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9c1 2300 	strd	r2, r3, [r1]

	/*********** Controller ***********/
	ESC_Run(Esc, speed);
 8002804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002810:	eeb0 0a67 	vmov.f32	s0, s15
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff fc57 	bl	80020c8 <ESC_Run>
	SERVO_Run(Servo, angle);
 800281a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800281e:	4619      	mov	r1, r3
 8002820:	68b8      	ldr	r0, [r7, #8]
 8002822:	f7ff ff4d 	bl	80026c0 <SERVO_Run>
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	d2f1a9fc 	.word	0xd2f1a9fc
 8002834:	3f50624d 	.word	0x3f50624d
 8002838:	200002b8 	.word	0x200002b8
 800283c:	407f4000 	.word	0x407f4000
 8002840:	40000400 	.word	0x40000400
 8002844:	40540000 	.word	0x40540000

08002848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_Init+0x40>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <HAL_Init+0x40>)
 8002852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_Init+0x40>)
 800285e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <HAL_Init+0x40>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002870:	2003      	movs	r0, #3
 8002872:	f000 f94f 	bl	8002b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002876:	200f      	movs	r0, #15
 8002878:	f000 f808 	bl	800288c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800287c:	f7fe ff1c 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00

0800288c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_InitTick+0x54>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_InitTick+0x58>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f967 	bl	8002b7e <HAL_SYSTICK_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00e      	b.n	80028d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d80a      	bhi.n	80028d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c0:	2200      	movs	r2, #0
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	f000 f92f 	bl	8002b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028cc:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <HAL_InitTick+0x5c>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000020 	.word	0x20000020
 80028e8:	2000001c 	.word	0x2000001c

080028ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_IncTick+0x20>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_IncTick+0x24>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_IncTick+0x24>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000020 	.word	0x20000020
 8002910:	200002c0 	.word	0x200002c0

08002914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return uwTick;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_GetTick+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	200002c0 	.word	0x200002c0

0800292c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff ffee 	bl	8002914 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d005      	beq.n	8002952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_Delay+0x44>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002952:	bf00      	nop
 8002954:	f7ff ffde 	bl	8002914 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	d8f7      	bhi.n	8002954 <HAL_Delay+0x28>
  {
  }
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000020 	.word	0x20000020

08002974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002990:	4013      	ands	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800299c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a6:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	60d3      	str	r3, [r2, #12]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <__NVIC_GetPriorityGrouping+0x18>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	f003 0307 	and.w	r3, r3, #7
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	db0b      	blt.n	8002a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	4907      	ldr	r1, [pc, #28]	; (8002a10 <__NVIC_EnableIRQ+0x38>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2001      	movs	r0, #1
 80029fa:	fa00 f202 	lsl.w	r2, r0, r2
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000e100 	.word	0xe000e100

08002a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	db0a      	blt.n	8002a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	490c      	ldr	r1, [pc, #48]	; (8002a60 <__NVIC_SetPriority+0x4c>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	440b      	add	r3, r1
 8002a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a3c:	e00a      	b.n	8002a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4908      	ldr	r1, [pc, #32]	; (8002a64 <__NVIC_SetPriority+0x50>)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	440b      	add	r3, r1
 8002a52:	761a      	strb	r2, [r3, #24]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000e100 	.word	0xe000e100
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f1c3 0307 	rsb	r3, r3, #7
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	bf28      	it	cs
 8002a86:	2304      	movcs	r3, #4
 8002a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d902      	bls.n	8002a98 <NVIC_EncodePriority+0x30>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3b03      	subs	r3, #3
 8002a96:	e000      	b.n	8002a9a <NVIC_EncodePriority+0x32>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	401a      	ands	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43d9      	mvns	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	4313      	orrs	r3, r2
         );
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	; 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae0:	d301      	bcc.n	8002ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00f      	b.n	8002b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <SysTick_Config+0x40>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aee:	210f      	movs	r1, #15
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f7ff ff8e 	bl	8002a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <SysTick_Config+0x40>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <SysTick_Config+0x40>)
 8002b00:	2207      	movs	r2, #7
 8002b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	e000e010 	.word	0xe000e010

08002b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff ff29 	bl	8002974 <__NVIC_SetPriorityGrouping>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b3c:	f7ff ff3e 	bl	80029bc <__NVIC_GetPriorityGrouping>
 8002b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	6978      	ldr	r0, [r7, #20]
 8002b48:	f7ff ff8e 	bl	8002a68 <NVIC_EncodePriority>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff5d 	bl	8002a14 <__NVIC_SetPriority>
}
 8002b5a:	bf00      	nop
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff31 	bl	80029d8 <__NVIC_EnableIRQ>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff ffa2 	bl	8002ad0 <SysTick_Config>
 8002b8c:	4603      	mov	r3, r0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7ff feb6 	bl	8002914 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e099      	b.n	8002ce8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bd4:	e00f      	b.n	8002bf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bd6:	f7ff fe9d 	bl	8002914 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b05      	cmp	r3, #5
 8002be2:	d908      	bls.n	8002bf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2203      	movs	r2, #3
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e078      	b.n	8002ce8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e8      	bne.n	8002bd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4b38      	ldr	r3, [pc, #224]	; (8002cf0 <HAL_DMA_Init+0x158>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d107      	bne.n	8002c60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0307 	bic.w	r3, r3, #7
 8002c76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d117      	bne.n	8002cba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fb01 	bl	80032a4 <DMA_CheckFifoParam>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2240      	movs	r2, #64	; 0x40
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e016      	b.n	8002ce8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fab8 	bl	8003238 <DMA_CalcBaseAndBitshift>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	223f      	movs	r2, #63	; 0x3f
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	f010803f 	.word	0xf010803f

08002cf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_DMA_Start_IT+0x26>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e040      	b.n	8002d9c <HAL_DMA_Start_IT+0xa8>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d12f      	bne.n	8002d8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fa4a 	bl	80031dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	223f      	movs	r2, #63	; 0x3f
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0216 	orr.w	r2, r2, #22
 8002d62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0208 	orr.w	r2, r2, #8
 8002d7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e005      	b.n	8002d9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
 8002d98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002db2:	f7ff fdaf 	bl	8002914 <HAL_GetTick>
 8002db6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d008      	beq.n	8002dd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e052      	b.n	8002e7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0216 	bic.w	r2, r2, #22
 8002de4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <HAL_DMA_Abort+0x62>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0208 	bic.w	r2, r2, #8
 8002e14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e26:	e013      	b.n	8002e50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e28:	f7ff fd74 	bl	8002914 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d90c      	bls.n	8002e50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2203      	movs	r2, #3
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e015      	b.n	8002e7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e4      	bne.n	8002e28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	223f      	movs	r2, #63	; 0x3f
 8002e64:	409a      	lsls	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d004      	beq.n	8002ea2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00c      	b.n	8002ebc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2205      	movs	r2, #5
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ed4:	4b8e      	ldr	r3, [pc, #568]	; (8003110 <HAL_DMA_IRQHandler+0x248>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a8e      	ldr	r2, [pc, #568]	; (8003114 <HAL_DMA_IRQHandler+0x24c>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01a      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0204 	bic.w	r2, r2, #4
 8002f1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	2208      	movs	r2, #8
 8002f22:	409a      	lsls	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	2201      	movs	r2, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d012      	beq.n	8002f6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	2201      	movs	r2, #1
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	f043 0202 	orr.w	r2, r3, #2
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	2204      	movs	r2, #4
 8002f70:	409a      	lsls	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d012      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f043 0204 	orr.w	r2, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d043      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d03c      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d018      	beq.n	800300a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d108      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d024      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	e01f      	b.n	8003038 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01b      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
 8003008:	e016      	b.n	8003038 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0208 	bic.w	r2, r2, #8
 8003026:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303c:	2220      	movs	r2, #32
 800303e:	409a      	lsls	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 808f 	beq.w	8003168 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8087 	beq.w	8003168 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	2220      	movs	r2, #32
 8003060:	409a      	lsls	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b05      	cmp	r3, #5
 8003070:	d136      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0216 	bic.w	r2, r2, #22
 8003080:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003090:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <HAL_DMA_IRQHandler+0x1da>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0208 	bic.w	r2, r2, #8
 80030b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	223f      	movs	r2, #63	; 0x3f
 80030b8:	409a      	lsls	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d07e      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
        }
        return;
 80030de:	e079      	b.n	80031d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01d      	beq.n	800312a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	2b00      	cmp	r3, #0
 8003102:	d031      	beq.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
 800310c:	e02c      	b.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
 800310e:	bf00      	nop
 8003110:	20000000 	.word	0x20000000
 8003114:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d023      	beq.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e01e      	b.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10f      	bne.n	8003158 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0210 	bic.w	r2, r2, #16
 8003146:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	2b00      	cmp	r3, #0
 800316e:	d032      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d022      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2205      	movs	r2, #5
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	3301      	adds	r3, #1
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	d307      	bcc.n	80031b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f2      	bne.n	8003194 <HAL_DMA_IRQHandler+0x2cc>
 80031ae:	e000      	b.n	80031b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
 80031d2:	e000      	b.n	80031d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80031d4:	bf00      	nop
    }
  }
}
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d108      	bne.n	800321c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800321a:	e007      	b.n	800322c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3b10      	subs	r3, #16
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <DMA_CalcBaseAndBitshift+0x64>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003252:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d909      	bls.n	800327a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	1d1a      	adds	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	659a      	str	r2, [r3, #88]	; 0x58
 8003278:	e007      	b.n	800328a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	aaaaaaab 	.word	0xaaaaaaab
 80032a0:	08008580 	.word	0x08008580

080032a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11f      	bne.n	80032fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d856      	bhi.n	8003372 <DMA_CheckFifoParam+0xce>
 80032c4:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <DMA_CheckFifoParam+0x28>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032ef 	.word	0x080032ef
 80032d4:	080032dd 	.word	0x080032dd
 80032d8:	08003373 	.word	0x08003373
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d046      	beq.n	8003376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ec:	e043      	b.n	8003376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032f6:	d140      	bne.n	800337a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fc:	e03d      	b.n	800337a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003306:	d121      	bne.n	800334c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d837      	bhi.n	800337e <DMA_CheckFifoParam+0xda>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <DMA_CheckFifoParam+0x70>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003325 	.word	0x08003325
 8003318:	0800332b 	.word	0x0800332b
 800331c:	08003325 	.word	0x08003325
 8003320:	0800333d 	.word	0x0800333d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      break;
 8003328:	e030      	b.n	800338c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d025      	beq.n	8003382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333a:	e022      	b.n	8003382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003344:	d11f      	bne.n	8003386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800334a:	e01c      	b.n	8003386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d903      	bls.n	800335a <DMA_CheckFifoParam+0xb6>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d003      	beq.n	8003360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003358:	e018      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
      break;
 800335e:	e015      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00e      	beq.n	800338a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      break;
 8003370:	e00b      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003372:	bf00      	nop
 8003374:	e00a      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e008      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 800337a:	bf00      	nop
 800337c:	e006      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
 8003380:	e004      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 8003382:	bf00      	nop
 8003384:	e002      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;   
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <DMA_CheckFifoParam+0xe8>
      break;
 800338a:	bf00      	nop
    }
  } 
  
  return status; 
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop

0800339c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e159      	b.n	800366c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b8:	2201      	movs	r2, #1
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	f040 8148 	bne.w	8003666 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d005      	beq.n	80033ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d130      	bne.n	8003450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 0201 	and.w	r2, r3, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b03      	cmp	r3, #3
 800345a:	d017      	beq.n	800348c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d123      	bne.n	80034e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	220f      	movs	r2, #15
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	08da      	lsrs	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3208      	adds	r2, #8
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80a2 	beq.w	8003666 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	4b57      	ldr	r3, [pc, #348]	; (8003684 <HAL_GPIO_Init+0x2e8>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4a56      	ldr	r2, [pc, #344]	; (8003684 <HAL_GPIO_Init+0x2e8>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003530:	6453      	str	r3, [r2, #68]	; 0x44
 8003532:	4b54      	ldr	r3, [pc, #336]	; (8003684 <HAL_GPIO_Init+0x2e8>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353e:	4a52      	ldr	r2, [pc, #328]	; (8003688 <HAL_GPIO_Init+0x2ec>)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a49      	ldr	r2, [pc, #292]	; (800368c <HAL_GPIO_Init+0x2f0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d019      	beq.n	800359e <HAL_GPIO_Init+0x202>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a48      	ldr	r2, [pc, #288]	; (8003690 <HAL_GPIO_Init+0x2f4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_GPIO_Init+0x1fe>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a47      	ldr	r2, [pc, #284]	; (8003694 <HAL_GPIO_Init+0x2f8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00d      	beq.n	8003596 <HAL_GPIO_Init+0x1fa>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a46      	ldr	r2, [pc, #280]	; (8003698 <HAL_GPIO_Init+0x2fc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <HAL_GPIO_Init+0x1f6>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a45      	ldr	r2, [pc, #276]	; (800369c <HAL_GPIO_Init+0x300>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_GPIO_Init+0x1f2>
 800358a:	2304      	movs	r3, #4
 800358c:	e008      	b.n	80035a0 <HAL_GPIO_Init+0x204>
 800358e:	2307      	movs	r3, #7
 8003590:	e006      	b.n	80035a0 <HAL_GPIO_Init+0x204>
 8003592:	2303      	movs	r3, #3
 8003594:	e004      	b.n	80035a0 <HAL_GPIO_Init+0x204>
 8003596:	2302      	movs	r3, #2
 8003598:	e002      	b.n	80035a0 <HAL_GPIO_Init+0x204>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_GPIO_Init+0x204>
 800359e:	2300      	movs	r3, #0
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	f002 0203 	and.w	r2, r2, #3
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	4093      	lsls	r3, r2
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b0:	4935      	ldr	r1, [pc, #212]	; (8003688 <HAL_GPIO_Init+0x2ec>)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	3302      	adds	r3, #2
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035be:	4b38      	ldr	r3, [pc, #224]	; (80036a0 <HAL_GPIO_Init+0x304>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035e2:	4a2f      	ldr	r2, [pc, #188]	; (80036a0 <HAL_GPIO_Init+0x304>)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035e8:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_GPIO_Init+0x304>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800360c:	4a24      	ldr	r2, [pc, #144]	; (80036a0 <HAL_GPIO_Init+0x304>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <HAL_GPIO_Init+0x304>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003636:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <HAL_GPIO_Init+0x304>)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_GPIO_Init+0x304>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003660:	4a0f      	ldr	r2, [pc, #60]	; (80036a0 <HAL_GPIO_Init+0x304>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3301      	adds	r3, #1
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	f67f aea2 	bls.w	80033b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	3724      	adds	r7, #36	; 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800
 8003688:	40013800 	.word	0x40013800
 800368c:	40020000 	.word	0x40020000
 8003690:	40020400 	.word	0x40020400
 8003694:	40020800 	.word	0x40020800
 8003698:	40020c00 	.word	0x40020c00
 800369c:	40021000 	.word	0x40021000
 80036a0:	40013c00 	.word	0x40013c00

080036a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
 80036b0:	4613      	mov	r3, r2
 80036b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b4:	787b      	ldrb	r3, [r7, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036c0:	e003      	b.n	80036ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	041a      	lsls	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	619a      	str	r2, [r3, #24]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036e8:	887a      	ldrh	r2, [r7, #2]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4013      	ands	r3, r2
 80036ee:	041a      	lsls	r2, r3, #16
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	43d9      	mvns	r1, r3
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	400b      	ands	r3, r1
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	619a      	str	r2, [r3, #24]
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d006      	beq.n	8003730 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003722:	4a05      	ldr	r2, [pc, #20]	; (8003738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd ff9a 	bl	8001664 <HAL_GPIO_EXTI_Callback>
  }
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40013c00 	.word	0x40013c00

0800373c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e12b      	b.n	80039a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd fc88 	bl	8001078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800378e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a0:	f001 fbec 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 80037a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4a81      	ldr	r2, [pc, #516]	; (80039b0 <HAL_I2C_Init+0x274>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d807      	bhi.n	80037c0 <HAL_I2C_Init+0x84>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a80      	ldr	r2, [pc, #512]	; (80039b4 <HAL_I2C_Init+0x278>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	bf94      	ite	ls
 80037b8:	2301      	movls	r3, #1
 80037ba:	2300      	movhi	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e006      	b.n	80037ce <HAL_I2C_Init+0x92>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a7d      	ldr	r2, [pc, #500]	; (80039b8 <HAL_I2C_Init+0x27c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	bf94      	ite	ls
 80037c8:	2301      	movls	r3, #1
 80037ca:	2300      	movhi	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0e7      	b.n	80039a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a78      	ldr	r2, [pc, #480]	; (80039bc <HAL_I2C_Init+0x280>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0c9b      	lsrs	r3, r3, #18
 80037e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a6a      	ldr	r2, [pc, #424]	; (80039b0 <HAL_I2C_Init+0x274>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d802      	bhi.n	8003810 <HAL_I2C_Init+0xd4>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3301      	adds	r3, #1
 800380e:	e009      	b.n	8003824 <HAL_I2C_Init+0xe8>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	4a69      	ldr	r2, [pc, #420]	; (80039c0 <HAL_I2C_Init+0x284>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	3301      	adds	r3, #1
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	430b      	orrs	r3, r1
 800382a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	495c      	ldr	r1, [pc, #368]	; (80039b0 <HAL_I2C_Init+0x274>)
 8003840:	428b      	cmp	r3, r1
 8003842:	d819      	bhi.n	8003878 <HAL_I2C_Init+0x13c>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1e59      	subs	r1, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003852:	1c59      	adds	r1, r3, #1
 8003854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003858:	400b      	ands	r3, r1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_I2C_Init+0x138>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1e59      	subs	r1, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fbb1 f3f3 	udiv	r3, r1, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003872:	e051      	b.n	8003918 <HAL_I2C_Init+0x1dc>
 8003874:	2304      	movs	r3, #4
 8003876:	e04f      	b.n	8003918 <HAL_I2C_Init+0x1dc>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d111      	bne.n	80038a4 <HAL_I2C_Init+0x168>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e58      	subs	r0, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	440b      	add	r3, r1
 800388e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e012      	b.n	80038ca <HAL_I2C_Init+0x18e>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e58      	subs	r0, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	0099      	lsls	r1, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_I2C_Init+0x196>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e022      	b.n	8003918 <HAL_I2C_Init+0x1dc>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10e      	bne.n	80038f8 <HAL_I2C_Init+0x1bc>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1e58      	subs	r0, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6859      	ldr	r1, [r3, #4]
 80038e2:	460b      	mov	r3, r1
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	440b      	add	r3, r1
 80038e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ec:	3301      	adds	r3, #1
 80038ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f6:	e00f      	b.n	8003918 <HAL_I2C_Init+0x1dc>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1e58      	subs	r0, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6859      	ldr	r1, [r3, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	0099      	lsls	r1, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	fbb0 f3f3 	udiv	r3, r0, r3
 800390e:	3301      	adds	r3, #1
 8003910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	6809      	ldr	r1, [r1, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69da      	ldr	r2, [r3, #28]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6911      	ldr	r1, [r2, #16]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68d2      	ldr	r2, [r2, #12]
 8003952:	4311      	orrs	r1, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	430b      	orrs	r3, r1
 800395a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	000186a0 	.word	0x000186a0
 80039b4:	001e847f 	.word	0x001e847f
 80039b8:	003d08ff 	.word	0x003d08ff
 80039bc:	431bde83 	.word	0x431bde83
 80039c0:	10624dd3 	.word	0x10624dd3

080039c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	461a      	mov	r2, r3
 80039d0:	460b      	mov	r3, r1
 80039d2:	817b      	strh	r3, [r7, #10]
 80039d4:	4613      	mov	r3, r2
 80039d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d8:	f7fe ff9c 	bl	8002914 <HAL_GetTick>
 80039dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	f040 80e0 	bne.w	8003bac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2319      	movs	r3, #25
 80039f2:	2201      	movs	r2, #1
 80039f4:	4970      	ldr	r1, [pc, #448]	; (8003bb8 <HAL_I2C_Master_Transmit+0x1f4>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fc72 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
 8003a04:	e0d3      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_I2C_Master_Transmit+0x50>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0cc      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d007      	beq.n	8003a3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2221      	movs	r2, #33	; 0x21
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2210      	movs	r2, #16
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	893a      	ldrh	r2, [r7, #8]
 8003a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4a50      	ldr	r2, [pc, #320]	; (8003bbc <HAL_I2C_Master_Transmit+0x1f8>)
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a7c:	8979      	ldrh	r1, [r7, #10]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fadc 	bl	8004040 <I2C_MasterRequestWrite>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e08d      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003aa8:	e066      	b.n	8003b78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	6a39      	ldr	r1, [r7, #32]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fcec 	bl	800448c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06b      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d11b      	bne.n	8003b4c <HAL_I2C_Master_Transmit+0x188>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	6a39      	ldr	r1, [r7, #32]
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fcdc 	bl	800450e <I2C_WaitOnBTFFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d107      	bne.n	8003b74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e01a      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d194      	bne.n	8003aaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000

08003bc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	; 0x30
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	460b      	mov	r3, r1
 8003bce:	817b      	strh	r3, [r7, #10]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd4:	f7fe fe9e 	bl	8002914 <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	f040 820b 	bne.w	8003ffe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2319      	movs	r3, #25
 8003bee:	2201      	movs	r2, #1
 8003bf0:	497c      	ldr	r1, [pc, #496]	; (8003de4 <HAL_I2C_Master_Receive+0x224>)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fb74 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e1fe      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_I2C_Master_Receive+0x50>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e1f7      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d007      	beq.n	8003c36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2222      	movs	r2, #34	; 0x22
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2210      	movs	r2, #16
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	893a      	ldrh	r2, [r7, #8]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a5c      	ldr	r2, [pc, #368]	; (8003de8 <HAL_I2C_Master_Receive+0x228>)
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c78:	8979      	ldrh	r1, [r7, #10]
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fa60 	bl	8004144 <I2C_MasterRequestRead>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1b8      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d113      	bne.n	8003cbe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e18c      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d11b      	bne.n	8003cfe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e16c      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d11b      	bne.n	8003d3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	e14c      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d64:	e138      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	f200 80f1 	bhi.w	8003f52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d123      	bne.n	8003dc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fc07 	bl	8004590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e139      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dbe:	e10b      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d14e      	bne.n	8003e66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4906      	ldr	r1, [pc, #24]	; (8003dec <HAL_I2C_Master_Receive+0x22c>)
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fa84 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e10e      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
 8003de2:	bf00      	nop
 8003de4:	00100002 	.word	0x00100002
 8003de8:	ffff0000 	.word	0xffff0000
 8003dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e64:	e0b8      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4966      	ldr	r1, [pc, #408]	; (8004008 <HAL_I2C_Master_Receive+0x448>)
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fa35 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0bf      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	2200      	movs	r2, #0
 8003eca:	494f      	ldr	r1, [pc, #316]	; (8004008 <HAL_I2C_Master_Receive+0x448>)
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fa07 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e091      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f50:	e042      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fb1a 	bl	8004590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e04c      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d118      	bne.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f47f aec2 	bne.w	8003d66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
  }
}
 8004000:	4618      	mov	r0, r3
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	00010004 	.word	0x00010004

0800400c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401a:	b2db      	uxtb	r3, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	460b      	mov	r3, r1
 800404e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d006      	beq.n	800406a <I2C_MasterRequestWrite+0x2a>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d003      	beq.n	800406a <I2C_MasterRequestWrite+0x2a>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004068:	d108      	bne.n	800407c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e00b      	b.n	8004094 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	2b12      	cmp	r3, #18
 8004082:	d107      	bne.n	8004094 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004092:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f91d 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00d      	beq.n	80040c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ba:	d103      	bne.n	80040c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e035      	b.n	8004134 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d0:	d108      	bne.n	80040e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040e0:	611a      	str	r2, [r3, #16]
 80040e2:	e01b      	b.n	800411c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040e4:	897b      	ldrh	r3, [r7, #10]
 80040e6:	11db      	asrs	r3, r3, #7
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f003 0306 	and.w	r3, r3, #6
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f063 030f 	orn	r3, r3, #15
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	490e      	ldr	r1, [pc, #56]	; (800413c <I2C_MasterRequestWrite+0xfc>)
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f943 	bl	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e010      	b.n	8004134 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004112:	897b      	ldrh	r3, [r7, #10]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4907      	ldr	r1, [pc, #28]	; (8004140 <I2C_MasterRequestWrite+0x100>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f933 	bl	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	00010008 	.word	0x00010008
 8004140:	00010002 	.word	0x00010002

08004144 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	460b      	mov	r3, r1
 8004152:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004168:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d006      	beq.n	800417e <I2C_MasterRequestRead+0x3a>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d003      	beq.n	800417e <I2C_MasterRequestRead+0x3a>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800417c:	d108      	bne.n	8004190 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e00b      	b.n	80041a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	2b11      	cmp	r3, #17
 8004196:	d107      	bne.n	80041a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f893 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ce:	d103      	bne.n	80041d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e079      	b.n	80042d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e4:	d108      	bne.n	80041f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041e6:	897b      	ldrh	r3, [r7, #10]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]
 80041f6:	e05f      	b.n	80042b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041f8:	897b      	ldrh	r3, [r7, #10]
 80041fa:	11db      	asrs	r3, r3, #7
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f003 0306 	and.w	r3, r3, #6
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f063 030f 	orn	r3, r3, #15
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4930      	ldr	r1, [pc, #192]	; (80042d8 <I2C_MasterRequestRead+0x194>)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f8b9 	bl	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e054      	b.n	80042d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004226:	897b      	ldrh	r3, [r7, #10]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4929      	ldr	r1, [pc, #164]	; (80042dc <I2C_MasterRequestRead+0x198>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f8a9 	bl	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e044      	b.n	80042d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f831 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004292:	d103      	bne.n	800429c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e017      	b.n	80042d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80042a0:	897b      	ldrh	r3, [r7, #10]
 80042a2:	11db      	asrs	r3, r3, #7
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	f003 0306 	and.w	r3, r3, #6
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f063 030e 	orn	r3, r3, #14
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4907      	ldr	r1, [pc, #28]	; (80042dc <I2C_MasterRequestRead+0x198>)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f865 	bl	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	00010008 	.word	0x00010008
 80042dc:	00010002 	.word	0x00010002

080042e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f0:	e025      	b.n	800433e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d021      	beq.n	800433e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7fe fb0b 	bl	8002914 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d302      	bcc.n	8004310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d116      	bne.n	800433e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e023      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10d      	bne.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	43da      	mvns	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4013      	ands	r3, r2
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	bf0c      	ite	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	2300      	movne	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	e00c      	b.n	800437e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	43da      	mvns	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	429a      	cmp	r2, r3
 8004382:	d0b6      	beq.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800439c:	e051      	b.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ac:	d123      	bne.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f043 0204 	orr.w	r2, r3, #4
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e046      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d021      	beq.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fe fa89 	bl	8002914 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d116      	bne.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e020      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d10c      	bne.n	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	43da      	mvns	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4013      	ands	r3, r2
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	e00b      	b.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	43da      	mvns	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d18d      	bne.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004498:	e02d      	b.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f8ce 	bl	800463c <I2C_IsAcknowledgeFailed>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e02d      	b.n	8004506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d021      	beq.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fe fa2f 	bl	8002914 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e007      	b.n	8004506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d1ca      	bne.n	800449a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800451a:	e02d      	b.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f88d 	bl	800463c <I2C_IsAcknowledgeFailed>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e02d      	b.n	8004588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d021      	beq.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004534:	f7fe f9ee 	bl	8002914 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e007      	b.n	8004588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b04      	cmp	r3, #4
 8004584:	d1ca      	bne.n	800451c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800459c:	e042      	b.n	8004624 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d119      	bne.n	80045e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0210 	mvn.w	r2, #16
 80045b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e029      	b.n	8004634 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e0:	f7fe f998 	bl	8002914 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d302      	bcc.n	80045f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d116      	bne.n	8004624 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e007      	b.n	8004634 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d1b5      	bne.n	800459e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004652:	d11b      	bne.n	800468c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800465c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f043 0204 	orr.w	r2, r3, #4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e267      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d075      	beq.n	80047a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ba:	4b88      	ldr	r3, [pc, #544]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d00c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c6:	4b85      	ldr	r3, [pc, #532]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d112      	bne.n	80046f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d2:	4b82      	ldr	r3, [pc, #520]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046de:	d10b      	bne.n	80046f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	4b7e      	ldr	r3, [pc, #504]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d05b      	beq.n	80047a4 <HAL_RCC_OscConfig+0x108>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d157      	bne.n	80047a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e242      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004700:	d106      	bne.n	8004710 <HAL_RCC_OscConfig+0x74>
 8004702:	4b76      	ldr	r3, [pc, #472]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a75      	ldr	r2, [pc, #468]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e01d      	b.n	800474c <HAL_RCC_OscConfig+0xb0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004718:	d10c      	bne.n	8004734 <HAL_RCC_OscConfig+0x98>
 800471a:	4b70      	ldr	r3, [pc, #448]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a6f      	ldr	r2, [pc, #444]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a6c      	ldr	r2, [pc, #432]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e00b      	b.n	800474c <HAL_RCC_OscConfig+0xb0>
 8004734:	4b69      	ldr	r3, [pc, #420]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a68      	ldr	r2, [pc, #416]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 800473a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b66      	ldr	r3, [pc, #408]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a65      	ldr	r2, [pc, #404]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800474a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d013      	beq.n	800477c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fe f8de 	bl	8002914 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800475c:	f7fe f8da 	bl	8002914 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	; 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e207      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b5b      	ldr	r3, [pc, #364]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0xc0>
 800477a:	e014      	b.n	80047a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fe f8ca 	bl	8002914 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004784:	f7fe f8c6 	bl	8002914 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1f3      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004796:	4b51      	ldr	r3, [pc, #324]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0xe8>
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d063      	beq.n	800487a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047b2:	4b4a      	ldr	r3, [pc, #296]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d11c      	bne.n	8004804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ca:	4b44      	ldr	r3, [pc, #272]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d116      	bne.n	8004804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d6:	4b41      	ldr	r3, [pc, #260]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_RCC_OscConfig+0x152>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e1c7      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ee:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4937      	ldr	r1, [pc, #220]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004802:	e03a      	b.n	800487a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d020      	beq.n	800484e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480c:	4b34      	ldr	r3, [pc, #208]	; (80048e0 <HAL_RCC_OscConfig+0x244>)
 800480e:	2201      	movs	r2, #1
 8004810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fe f87f 	bl	8002914 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481a:	f7fe f87b 	bl	8002914 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e1a8      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482c:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	4b28      	ldr	r3, [pc, #160]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4925      	ldr	r1, [pc, #148]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]
 800484c:	e015      	b.n	800487a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <HAL_RCC_OscConfig+0x244>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fe f85e 	bl	8002914 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800485c:	f7fe f85a 	bl	8002914 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e187      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d036      	beq.n	80048f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d016      	beq.n	80048bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488e:	4b15      	ldr	r3, [pc, #84]	; (80048e4 <HAL_RCC_OscConfig+0x248>)
 8004890:	2201      	movs	r2, #1
 8004892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fe f83e 	bl	8002914 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489c:	f7fe f83a 	bl	8002914 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e167      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80048b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x200>
 80048ba:	e01b      	b.n	80048f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <HAL_RCC_OscConfig+0x248>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c2:	f7fe f827 	bl	8002914 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c8:	e00e      	b.n	80048e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ca:	f7fe f823 	bl	8002914 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d907      	bls.n	80048e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e150      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
 80048dc:	40023800 	.word	0x40023800
 80048e0:	42470000 	.word	0x42470000
 80048e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e8:	4b88      	ldr	r3, [pc, #544]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80048ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ea      	bne.n	80048ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 8097 	beq.w	8004a30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004906:	4b81      	ldr	r3, [pc, #516]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10f      	bne.n	8004932 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	4b7d      	ldr	r3, [pc, #500]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	4a7c      	ldr	r2, [pc, #496]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004920:	6413      	str	r3, [r2, #64]	; 0x40
 8004922:	4b7a      	ldr	r3, [pc, #488]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	4b77      	ldr	r3, [pc, #476]	; (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d118      	bne.n	8004970 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493e:	4b74      	ldr	r3, [pc, #464]	; (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a73      	ldr	r2, [pc, #460]	; (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494a:	f7fd ffe3 	bl	8002914 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004952:	f7fd ffdf 	bl	8002914 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e10c      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004964:	4b6a      	ldr	r3, [pc, #424]	; (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d106      	bne.n	8004986 <HAL_RCC_OscConfig+0x2ea>
 8004978:	4b64      	ldr	r3, [pc, #400]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a63      	ldr	r2, [pc, #396]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	e01c      	b.n	80049c0 <HAL_RCC_OscConfig+0x324>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b05      	cmp	r3, #5
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x30c>
 800498e:	4b5f      	ldr	r3, [pc, #380]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	4a5e      	ldr	r2, [pc, #376]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004994:	f043 0304 	orr.w	r3, r3, #4
 8004998:	6713      	str	r3, [r2, #112]	; 0x70
 800499a:	4b5c      	ldr	r3, [pc, #368]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a5b      	ldr	r2, [pc, #364]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70
 80049a6:	e00b      	b.n	80049c0 <HAL_RCC_OscConfig+0x324>
 80049a8:	4b58      	ldr	r3, [pc, #352]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	4a57      	ldr	r2, [pc, #348]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	6713      	str	r3, [r2, #112]	; 0x70
 80049b4:	4b55      	ldr	r3, [pc, #340]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	4a54      	ldr	r2, [pc, #336]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049ba:	f023 0304 	bic.w	r3, r3, #4
 80049be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d015      	beq.n	80049f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fd ffa4 	bl	8002914 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fd ffa0 	bl	8002914 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e0cb      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e6:	4b49      	ldr	r3, [pc, #292]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0ee      	beq.n	80049d0 <HAL_RCC_OscConfig+0x334>
 80049f2:	e014      	b.n	8004a1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f4:	f7fd ff8e 	bl	8002914 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fa:	e00a      	b.n	8004a12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049fc:	f7fd ff8a 	bl	8002914 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e0b5      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a12:	4b3e      	ldr	r3, [pc, #248]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ee      	bne.n	80049fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a24:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	4a38      	ldr	r2, [pc, #224]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80a1 	beq.w	8004b7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a3a:	4b34      	ldr	r3, [pc, #208]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d05c      	beq.n	8004b00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d141      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4e:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <HAL_RCC_OscConfig+0x478>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fd ff5e 	bl	8002914 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fd ff5a 	bl	8002914 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e087      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6e:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69da      	ldr	r2, [r3, #28]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	019b      	lsls	r3, r3, #6
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	3b01      	subs	r3, #1
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	061b      	lsls	r3, r3, #24
 8004a9e:	491b      	ldr	r1, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <HAL_RCC_OscConfig+0x478>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fd ff33 	bl	8002914 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7fd ff2f 	bl	8002914 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e05c      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x416>
 8004ad0:	e054      	b.n	8004b7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <HAL_RCC_OscConfig+0x478>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7fd ff1c 	bl	8002914 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fd ff18 	bl	8002914 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e045      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x444>
 8004afe:	e03d      	b.n	8004b7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d107      	bne.n	8004b18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e038      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40007000 	.word	0x40007000
 8004b14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b18:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <HAL_RCC_OscConfig+0x4ec>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d028      	beq.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d121      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d11a      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d111      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	3b01      	subs	r3, #1
 8004b62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0cc      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b68      	ldr	r3, [pc, #416]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d90c      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b65      	ldr	r3, [pc, #404]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b63      	ldr	r3, [pc, #396]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0b8      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d020      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be0:	4b59      	ldr	r3, [pc, #356]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4a58      	ldr	r2, [pc, #352]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf8:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	4a52      	ldr	r2, [pc, #328]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c04:	4b50      	ldr	r3, [pc, #320]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	494d      	ldr	r1, [pc, #308]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d044      	beq.n	8004cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b47      	ldr	r3, [pc, #284]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d119      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e07f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d003      	beq.n	8004c4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	4b3f      	ldr	r3, [pc, #252]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e06f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e067      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6a:	4b37      	ldr	r3, [pc, #220]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f023 0203 	bic.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4934      	ldr	r1, [pc, #208]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c7c:	f7fd fe4a 	bl	8002914 <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c84:	f7fd fe46 	bl	8002914 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e04f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 020c 	and.w	r2, r3, #12
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d1eb      	bne.n	8004c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cac:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d20c      	bcs.n	8004cd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b22      	ldr	r3, [pc, #136]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e032      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce0:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4916      	ldr	r1, [pc, #88]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d009      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	490e      	ldr	r1, [pc, #56]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d12:	f000 f821 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8004d16:	4602      	mov	r2, r0
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	490a      	ldr	r1, [pc, #40]	; (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004d24:	5ccb      	ldrb	r3, [r1, r3]
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fd fdaa 	bl	800288c <HAL_InitTick>

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40023c00 	.word	0x40023c00
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	08008568 	.word	0x08008568
 8004d50:	20000000 	.word	0x20000000
 8004d54:	2000001c 	.word	0x2000001c

08004d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d5c:	b094      	sub	sp, #80	; 0x50
 8004d5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	647b      	str	r3, [r7, #68]	; 0x44
 8004d64:	2300      	movs	r3, #0
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d68:	2300      	movs	r3, #0
 8004d6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d70:	4b79      	ldr	r3, [pc, #484]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d00d      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x40>
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	f200 80e1 	bhi.w	8004f44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0x34>
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d8a:	e0db      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d8c:	4b73      	ldr	r3, [pc, #460]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d90:	e0db      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d92:	4b73      	ldr	r3, [pc, #460]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d96:	e0d8      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d98:	4b6f      	ldr	r3, [pc, #444]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da2:	4b6d      	ldr	r3, [pc, #436]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d063      	beq.n	8004e76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dae:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	099b      	lsrs	r3, r3, #6
 8004db4:	2200      	movs	r2, #0
 8004db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dca:	4622      	mov	r2, r4
 8004dcc:	462b      	mov	r3, r5
 8004dce:	f04f 0000 	mov.w	r0, #0
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	0159      	lsls	r1, r3, #5
 8004dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ddc:	0150      	lsls	r0, r2, #5
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4621      	mov	r1, r4
 8004de4:	1a51      	subs	r1, r2, r1
 8004de6:	6139      	str	r1, [r7, #16]
 8004de8:	4629      	mov	r1, r5
 8004dea:	eb63 0301 	sbc.w	r3, r3, r1
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	018b      	lsls	r3, r1, #6
 8004e00:	4651      	mov	r1, sl
 8004e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e06:	4651      	mov	r1, sl
 8004e08:	018a      	lsls	r2, r1, #6
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e10:	4659      	mov	r1, fp
 8004e12:	eb63 0901 	sbc.w	r9, r3, r1
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	4699      	mov	r9, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	eb18 0303 	adds.w	r3, r8, r3
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	462b      	mov	r3, r5
 8004e38:	eb49 0303 	adc.w	r3, r9, r3
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	024b      	lsls	r3, r1, #9
 8004e4e:	4621      	mov	r1, r4
 8004e50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e54:	4621      	mov	r1, r4
 8004e56:	024a      	lsls	r2, r1, #9
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5e:	2200      	movs	r2, #0
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e68:	f7fb feb0 	bl	8000bcc <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4613      	mov	r3, r2
 8004e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e74:	e058      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e76:	4b38      	ldr	r3, [pc, #224]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	4611      	mov	r1, r2
 8004e82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e90:	4642      	mov	r2, r8
 8004e92:	464b      	mov	r3, r9
 8004e94:	f04f 0000 	mov.w	r0, #0
 8004e98:	f04f 0100 	mov.w	r1, #0
 8004e9c:	0159      	lsls	r1, r3, #5
 8004e9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea2:	0150      	lsls	r0, r2, #5
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eae:	4649      	mov	r1, r9
 8004eb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ec0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ec4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ec8:	ebb2 040a 	subs.w	r4, r2, sl
 8004ecc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	00eb      	lsls	r3, r5, #3
 8004eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ede:	00e2      	lsls	r2, r4, #3
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	461d      	mov	r5, r3
 8004ee4:	4643      	mov	r3, r8
 8004ee6:	18e3      	adds	r3, r4, r3
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	464b      	mov	r3, r9
 8004eec:	eb45 0303 	adc.w	r3, r5, r3
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004efe:	4629      	mov	r1, r5
 8004f00:	028b      	lsls	r3, r1, #10
 8004f02:	4621      	mov	r1, r4
 8004f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f08:	4621      	mov	r1, r4
 8004f0a:	028a      	lsls	r2, r1, #10
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f12:	2200      	movs	r2, #0
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	61fa      	str	r2, [r7, #28]
 8004f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f1c:	f7fb fe56 	bl	8000bcc <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4613      	mov	r3, r2
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f42:	e002      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3750      	adds	r7, #80	; 0x50
 8004f50:	46bd      	mov	sp, r7
 8004f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	00f42400 	.word	0x00f42400
 8004f60:	007a1200 	.word	0x007a1200

08004f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f68:	4b03      	ldr	r3, [pc, #12]	; (8004f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20000000 	.word	0x20000000

08004f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f80:	f7ff fff0 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	0a9b      	lsrs	r3, r3, #10
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4903      	ldr	r1, [pc, #12]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	08008578 	.word	0x08008578

08004fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fa8:	f7ff ffdc 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0b5b      	lsrs	r3, r3, #13
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4903      	ldr	r1, [pc, #12]	; (8004fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	08008578 	.word	0x08008578

08004fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e041      	b.n	8005062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fc fdde 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f000 fc54 	bl	80058b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d001      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e044      	b.n	800510e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1e      	ldr	r2, [pc, #120]	; (800511c <HAL_TIM_Base_Start_IT+0xb0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d018      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x6c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ae:	d013      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x6c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1a      	ldr	r2, [pc, #104]	; (8005120 <HAL_TIM_Base_Start_IT+0xb4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00e      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x6c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a19      	ldr	r2, [pc, #100]	; (8005124 <HAL_TIM_Base_Start_IT+0xb8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d009      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x6c>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a17      	ldr	r2, [pc, #92]	; (8005128 <HAL_TIM_Base_Start_IT+0xbc>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d004      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x6c>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a16      	ldr	r2, [pc, #88]	; (800512c <HAL_TIM_Base_Start_IT+0xc0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d111      	bne.n	80050fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b06      	cmp	r3, #6
 80050e8:	d010      	beq.n	800510c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0201 	orr.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fa:	e007      	b.n	800510c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40010000 	.word	0x40010000
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40000c00 	.word	0x40000c00
 800512c:	40014000 	.word	0x40014000

08005130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e041      	b.n	80051c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f839 	bl	80051ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	4619      	mov	r1, r3
 800516e:	4610      	mov	r0, r2
 8005170:	f000 fba2 	bl	80058b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
	...

080051e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d109      	bne.n	8005208 <HAL_TIM_PWM_Start+0x24>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	bf14      	ite	ne
 8005200:	2301      	movne	r3, #1
 8005202:	2300      	moveq	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	e022      	b.n	800524e <HAL_TIM_PWM_Start+0x6a>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b04      	cmp	r3, #4
 800520c:	d109      	bne.n	8005222 <HAL_TIM_PWM_Start+0x3e>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b01      	cmp	r3, #1
 8005218:	bf14      	ite	ne
 800521a:	2301      	movne	r3, #1
 800521c:	2300      	moveq	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	e015      	b.n	800524e <HAL_TIM_PWM_Start+0x6a>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d109      	bne.n	800523c <HAL_TIM_PWM_Start+0x58>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	bf14      	ite	ne
 8005234:	2301      	movne	r3, #1
 8005236:	2300      	moveq	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e008      	b.n	800524e <HAL_TIM_PWM_Start+0x6a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e068      	b.n	8005328 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <HAL_TIM_PWM_Start+0x82>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005264:	e013      	b.n	800528e <HAL_TIM_PWM_Start+0xaa>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b04      	cmp	r3, #4
 800526a:	d104      	bne.n	8005276 <HAL_TIM_PWM_Start+0x92>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005274:	e00b      	b.n	800528e <HAL_TIM_PWM_Start+0xaa>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0xa2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005284:	e003      	b.n	800528e <HAL_TIM_PWM_Start+0xaa>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2201      	movs	r2, #1
 8005294:	6839      	ldr	r1, [r7, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fdb4 	bl	8005e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a23      	ldr	r2, [pc, #140]	; (8005330 <HAL_TIM_PWM_Start+0x14c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d107      	bne.n	80052b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1d      	ldr	r2, [pc, #116]	; (8005330 <HAL_TIM_PWM_Start+0x14c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d018      	beq.n	80052f2 <HAL_TIM_PWM_Start+0x10e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d013      	beq.n	80052f2 <HAL_TIM_PWM_Start+0x10e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a19      	ldr	r2, [pc, #100]	; (8005334 <HAL_TIM_PWM_Start+0x150>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00e      	beq.n	80052f2 <HAL_TIM_PWM_Start+0x10e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a17      	ldr	r2, [pc, #92]	; (8005338 <HAL_TIM_PWM_Start+0x154>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d009      	beq.n	80052f2 <HAL_TIM_PWM_Start+0x10e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a16      	ldr	r2, [pc, #88]	; (800533c <HAL_TIM_PWM_Start+0x158>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d004      	beq.n	80052f2 <HAL_TIM_PWM_Start+0x10e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a14      	ldr	r2, [pc, #80]	; (8005340 <HAL_TIM_PWM_Start+0x15c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d111      	bne.n	8005316 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b06      	cmp	r3, #6
 8005302:	d010      	beq.n	8005326 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005314:	e007      	b.n	8005326 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40010000 	.word	0x40010000
 8005334:	40000400 	.word	0x40000400
 8005338:	40000800 	.word	0x40000800
 800533c:	40000c00 	.word	0x40000c00
 8005340:	40014000 	.word	0x40014000

08005344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b02      	cmp	r3, #2
 8005358:	d122      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	d11b      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0202 	mvn.w	r2, #2
 8005370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa77 	bl	800587a <HAL_TIM_IC_CaptureCallback>
 800538c:	e005      	b.n	800539a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa69 	bl	8005866 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fa7a 	bl	800588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d122      	bne.n	80053f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d11b      	bne.n	80053f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0204 	mvn.w	r2, #4
 80053c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa4d 	bl	800587a <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa3f 	bl	8005866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fa50 	bl	800588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d122      	bne.n	8005448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b08      	cmp	r3, #8
 800540e:	d11b      	bne.n	8005448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0208 	mvn.w	r2, #8
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2204      	movs	r2, #4
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa23 	bl	800587a <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa15 	bl	8005866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fa26 	bl	800588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b10      	cmp	r3, #16
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b10      	cmp	r3, #16
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0210 	mvn.w	r2, #16
 800546c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2208      	movs	r2, #8
 8005472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f9f9 	bl	800587a <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f9eb 	bl	8005866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f9fc 	bl	800588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d10e      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d107      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0201 	mvn.w	r2, #1
 80054c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fc f822 	bl	800150c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d2:	2b80      	cmp	r3, #128	; 0x80
 80054d4:	d10e      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e0:	2b80      	cmp	r3, #128	; 0x80
 80054e2:	d107      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fd26 	bl	8005f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d10e      	bne.n	8005520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d107      	bne.n	8005520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f9c1 	bl	80058a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b20      	cmp	r3, #32
 800552c:	d10e      	bne.n	800554c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b20      	cmp	r3, #32
 800553a:	d107      	bne.n	800554c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0220 	mvn.w	r2, #32
 8005544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fcf0 	bl	8005f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800556e:	2302      	movs	r3, #2
 8005570:	e0ae      	b.n	80056d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b0c      	cmp	r3, #12
 800557e:	f200 809f 	bhi.w	80056c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055bd 	.word	0x080055bd
 800558c:	080056c1 	.word	0x080056c1
 8005590:	080056c1 	.word	0x080056c1
 8005594:	080056c1 	.word	0x080056c1
 8005598:	080055fd 	.word	0x080055fd
 800559c:	080056c1 	.word	0x080056c1
 80055a0:	080056c1 	.word	0x080056c1
 80055a4:	080056c1 	.word	0x080056c1
 80055a8:	0800563f 	.word	0x0800563f
 80055ac:	080056c1 	.word	0x080056c1
 80055b0:	080056c1 	.word	0x080056c1
 80055b4:	080056c1 	.word	0x080056c1
 80055b8:	0800567f 	.word	0x0800567f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f9f8 	bl	80059b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0208 	orr.w	r2, r2, #8
 80055d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0204 	bic.w	r2, r2, #4
 80055e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6999      	ldr	r1, [r3, #24]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	619a      	str	r2, [r3, #24]
      break;
 80055fa:	e064      	b.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fa3e 	bl	8005a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6999      	ldr	r1, [r3, #24]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	619a      	str	r2, [r3, #24]
      break;
 800563c:	e043      	b.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fa89 	bl	8005b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0208 	orr.w	r2, r2, #8
 8005658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0204 	bic.w	r2, r2, #4
 8005668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69d9      	ldr	r1, [r3, #28]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	61da      	str	r2, [r3, #28]
      break;
 800567c:	e023      	b.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fad3 	bl	8005c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69d9      	ldr	r1, [r3, #28]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	021a      	lsls	r2, r3, #8
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	61da      	str	r2, [r3, #28]
      break;
 80056be:	e002      	b.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	75fb      	strb	r3, [r7, #23]
      break;
 80056c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIM_ConfigClockSource+0x1c>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e0b4      	b.n	800585e <HAL_TIM_ConfigClockSource+0x186>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800571a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572c:	d03e      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0xd4>
 800572e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005732:	f200 8087 	bhi.w	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573a:	f000 8086 	beq.w	800584a <HAL_TIM_ConfigClockSource+0x172>
 800573e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005742:	d87f      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b70      	cmp	r3, #112	; 0x70
 8005746:	d01a      	beq.n	800577e <HAL_TIM_ConfigClockSource+0xa6>
 8005748:	2b70      	cmp	r3, #112	; 0x70
 800574a:	d87b      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b60      	cmp	r3, #96	; 0x60
 800574e:	d050      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005750:	2b60      	cmp	r3, #96	; 0x60
 8005752:	d877      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b50      	cmp	r3, #80	; 0x50
 8005756:	d03c      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005758:	2b50      	cmp	r3, #80	; 0x50
 800575a:	d873      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d058      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x13a>
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d86f      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005764:	2b30      	cmp	r3, #48	; 0x30
 8005766:	d064      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 8005768:	2b30      	cmp	r3, #48	; 0x30
 800576a:	d86b      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b20      	cmp	r3, #32
 800576e:	d060      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 8005770:	2b20      	cmp	r3, #32
 8005772:	d867      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d05c      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 8005778:	2b10      	cmp	r3, #16
 800577a:	d05a      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 800577c:	e062      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	6899      	ldr	r1, [r3, #8]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f000 fb19 	bl	8005dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	609a      	str	r2, [r3, #8]
      break;
 80057aa:	e04f      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	6899      	ldr	r1, [r3, #8]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f000 fb02 	bl	8005dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ce:	609a      	str	r2, [r3, #8]
      break;
 80057d0:	e03c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 fa76 	bl	8005cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2150      	movs	r1, #80	; 0x50
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 facf 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 80057f0:	e02c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	461a      	mov	r2, r3
 8005800:	f000 fa95 	bl	8005d2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2160      	movs	r1, #96	; 0x60
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fabf 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 8005810:	e01c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6859      	ldr	r1, [r3, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	461a      	mov	r2, r3
 8005820:	f000 fa56 	bl	8005cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2140      	movs	r1, #64	; 0x40
 800582a:	4618      	mov	r0, r3
 800582c:	f000 faaf 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 8005830:	e00c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f000 faa6 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 8005842:	e003      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
      break;
 8005848:	e000      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800584a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a34      	ldr	r2, [pc, #208]	; (800599c <TIM_Base_SetConfig+0xe4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00f      	beq.n	80058f0 <TIM_Base_SetConfig+0x38>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d6:	d00b      	beq.n	80058f0 <TIM_Base_SetConfig+0x38>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a31      	ldr	r2, [pc, #196]	; (80059a0 <TIM_Base_SetConfig+0xe8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d007      	beq.n	80058f0 <TIM_Base_SetConfig+0x38>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a30      	ldr	r2, [pc, #192]	; (80059a4 <TIM_Base_SetConfig+0xec>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_Base_SetConfig+0x38>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a2f      	ldr	r2, [pc, #188]	; (80059a8 <TIM_Base_SetConfig+0xf0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d108      	bne.n	8005902 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a25      	ldr	r2, [pc, #148]	; (800599c <TIM_Base_SetConfig+0xe4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d01b      	beq.n	8005942 <TIM_Base_SetConfig+0x8a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005910:	d017      	beq.n	8005942 <TIM_Base_SetConfig+0x8a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <TIM_Base_SetConfig+0xe8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <TIM_Base_SetConfig+0x8a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a21      	ldr	r2, [pc, #132]	; (80059a4 <TIM_Base_SetConfig+0xec>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00f      	beq.n	8005942 <TIM_Base_SetConfig+0x8a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a20      	ldr	r2, [pc, #128]	; (80059a8 <TIM_Base_SetConfig+0xf0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00b      	beq.n	8005942 <TIM_Base_SetConfig+0x8a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <TIM_Base_SetConfig+0xf4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d007      	beq.n	8005942 <TIM_Base_SetConfig+0x8a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <TIM_Base_SetConfig+0xf8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d003      	beq.n	8005942 <TIM_Base_SetConfig+0x8a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1d      	ldr	r2, [pc, #116]	; (80059b4 <TIM_Base_SetConfig+0xfc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d108      	bne.n	8005954 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a08      	ldr	r2, [pc, #32]	; (800599c <TIM_Base_SetConfig+0xe4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d103      	bne.n	8005988 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	615a      	str	r2, [r3, #20]
}
 800598e:	bf00      	nop
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40010000 	.word	0x40010000
 80059a0:	40000400 	.word	0x40000400
 80059a4:	40000800 	.word	0x40000800
 80059a8:	40000c00 	.word	0x40000c00
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800

080059b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f023 0201 	bic.w	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0303 	bic.w	r3, r3, #3
 80059ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f023 0302 	bic.w	r3, r3, #2
 8005a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a1c      	ldr	r2, [pc, #112]	; (8005a80 <TIM_OC1_SetConfig+0xc8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d10c      	bne.n	8005a2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f023 0308 	bic.w	r3, r3, #8
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0304 	bic.w	r3, r3, #4
 8005a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <TIM_OC1_SetConfig+0xc8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d111      	bne.n	8005a5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	621a      	str	r2, [r3, #32]
}
 8005a74:	bf00      	nop
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	40010000 	.word	0x40010000

08005a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f023 0210 	bic.w	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0320 	bic.w	r3, r3, #32
 8005ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a1e      	ldr	r2, [pc, #120]	; (8005b58 <TIM_OC2_SetConfig+0xd4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d10d      	bne.n	8005b00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005afe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <TIM_OC2_SetConfig+0xd4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d113      	bne.n	8005b30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000

08005b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <TIM_OC3_SetConfig+0xd0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10d      	bne.n	8005bd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a14      	ldr	r2, [pc, #80]	; (8005c2c <TIM_OC3_SetConfig+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d113      	bne.n	8005c06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40010000 	.word	0x40010000

08005c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	031b      	lsls	r3, r3, #12
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a10      	ldr	r2, [pc, #64]	; (8005ccc <TIM_OC4_SetConfig+0x9c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d109      	bne.n	8005ca4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40010000 	.word	0x40010000

08005cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f023 0201 	bic.w	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f023 030a 	bic.w	r3, r3, #10
 8005d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b087      	sub	sp, #28
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f023 0210 	bic.w	r2, r3, #16
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	031b      	lsls	r3, r3, #12
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f043 0307 	orr.w	r3, r3, #7
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	609a      	str	r2, [r3, #8]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	021a      	lsls	r2, r3, #8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	609a      	str	r2, [r3, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	2201      	movs	r2, #1
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a1a      	ldr	r2, [r3, #32]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	43db      	mvns	r3, r3
 8005e26:	401a      	ands	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e050      	b.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1c      	ldr	r2, [pc, #112]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d018      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb4:	d013      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00e      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d009      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d10c      	bne.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40014000 	.word	0x40014000

08005f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e03f      	b.n	8005fe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fb fef4 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2224      	movs	r2, #36	; 0x24
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 ff11 	bl	8006dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695a      	ldr	r2, [r3, #20]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b090      	sub	sp, #64	; 0x40
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006004:	2b80      	cmp	r3, #128	; 0x80
 8006006:	bf0c      	ite	eq
 8006008:	2301      	moveq	r3, #1
 800600a:	2300      	movne	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b21      	cmp	r3, #33	; 0x21
 800601a:	d128      	bne.n	800606e <HAL_UART_DMAStop+0x80>
 800601c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d025      	beq.n	800606e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	623b      	str	r3, [r7, #32]
   return(result);
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006038:	63bb      	str	r3, [r7, #56]	; 0x38
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3314      	adds	r3, #20
 8006040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006042:	633a      	str	r2, [r7, #48]	; 0x30
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e5      	bne.n	8006022 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	2b00      	cmp	r3, #0
 800605c:	d004      	beq.n	8006068 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	4618      	mov	r0, r3
 8006064:	f7fc fe9e 	bl	8002da4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fce7 	bl	8006a3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	bf0c      	ite	eq
 800607c:	2301      	moveq	r3, #1
 800607e:	2300      	movne	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b22      	cmp	r3, #34	; 0x22
 800608e:	d128      	bne.n	80060e2 <HAL_UART_DMAStop+0xf4>
 8006090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d025      	beq.n	80060e2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3314      	adds	r3, #20
 800609c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3314      	adds	r3, #20
 80060b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060b6:	61fa      	str	r2, [r7, #28]
 80060b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	69b9      	ldr	r1, [r7, #24]
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	617b      	str	r3, [r7, #20]
   return(result);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e5      	bne.n	8006096 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fc fe64 	bl	8002da4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fcd5 	bl	8006a8c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3740      	adds	r7, #64	; 0x40
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08c      	sub	sp, #48	; 0x30
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b20      	cmp	r3, #32
 8006104:	d152      	bne.n	80061ac <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e04b      	b.n	80061ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006120:	2302      	movs	r3, #2
 8006122:	e044      	b.n	80061ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	461a      	mov	r2, r3
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fbe1 	bl	8006900 <UART_Start_Receive_DMA>
 800613e:	4603      	mov	r3, r0
 8006140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006148:	2b00      	cmp	r3, #0
 800614a:	d12c      	bne.n	80061a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	2b01      	cmp	r3, #1
 8006152:	d125      	bne.n	80061a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006154:	2300      	movs	r3, #0
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	330c      	adds	r3, #12
 8006170:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	617b      	str	r3, [r7, #20]
   return(result);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f043 0310 	orr.w	r3, r3, #16
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800618a:	627a      	str	r2, [r7, #36]	; 0x24
 800618c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6a39      	ldr	r1, [r7, #32]
 8006190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	61fb      	str	r3, [r7, #28]
   return(result);
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e5      	bne.n	800616a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800619e:	e002      	b.n	80061a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80061a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061aa:	e000      	b.n	80061ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80061ac:	2302      	movs	r3, #2
  }
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3730      	adds	r7, #48	; 0x30
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b0ba      	sub	sp, #232	; 0xe8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061de:	2300      	movs	r3, #0
 80061e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10f      	bne.n	800621e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b00      	cmp	r3, #0
 8006208:	d009      	beq.n	800621e <HAL_UART_IRQHandler+0x66>
 800620a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fd17 	bl	8006c4a <UART_Receive_IT>
      return;
 800621c:	e256      	b.n	80066cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800621e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 80de 	beq.w	80063e4 <HAL_UART_IRQHandler+0x22c>
 8006228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006238:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80d1 	beq.w	80063e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <HAL_UART_IRQHandler+0xae>
 800624e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f043 0201 	orr.w	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <HAL_UART_IRQHandler+0xd2>
 8006272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d005      	beq.n	800628a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	f043 0202 	orr.w	r2, r3, #2
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800628a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <HAL_UART_IRQHandler+0xf6>
 8006296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f043 0204 	orr.w	r2, r3, #4
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d011      	beq.n	80062de <HAL_UART_IRQHandler+0x126>
 80062ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d105      	bne.n	80062d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f043 0208 	orr.w	r2, r3, #8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 81ed 	beq.w	80066c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <HAL_UART_IRQHandler+0x14e>
 80062f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fca2 	bl	8006c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <HAL_UART_IRQHandler+0x17a>
 800632a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632e:	2b00      	cmp	r3, #0
 8006330:	d04f      	beq.n	80063d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fbaa 	bl	8006a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	d141      	bne.n	80063ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3314      	adds	r3, #20
 800634c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800635c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3314      	adds	r3, #20
 800636e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800637e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800638a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1d9      	bne.n	8006346 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	2b00      	cmp	r3, #0
 8006398:	d013      	beq.n	80063c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	4a7d      	ldr	r2, [pc, #500]	; (8006594 <HAL_UART_IRQHandler+0x3dc>)
 80063a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fc fd6c 	bl	8002e84 <HAL_DMA_Abort_IT>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d016      	beq.n	80063e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063bc:	4610      	mov	r0, r2
 80063be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c0:	e00e      	b.n	80063e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fb f924 	bl	8001610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c8:	e00a      	b.n	80063e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fb f920 	bl	8001610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	e006      	b.n	80063e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fb f91c 	bl	8001610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063de:	e170      	b.n	80066c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	bf00      	nop
    return;
 80063e2:	e16e      	b.n	80066c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	f040 814a 	bne.w	8006682 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f2:	f003 0310 	and.w	r3, r3, #16
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 8143 	beq.w	8006682 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 813c 	beq.w	8006682 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800640a:	2300      	movs	r3, #0
 800640c:	60bb      	str	r3, [r7, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	60bb      	str	r3, [r7, #8]
 800641e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642a:	2b40      	cmp	r3, #64	; 0x40
 800642c:	f040 80b4 	bne.w	8006598 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800643c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 8140 	beq.w	80066c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800644a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800644e:	429a      	cmp	r2, r3
 8006450:	f080 8139 	bcs.w	80066c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800645a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006466:	f000 8088 	beq.w	800657a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	330c      	adds	r3, #12
 8006492:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006496:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800649a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1d9      	bne.n	800646a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3314      	adds	r3, #20
 80064bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3314      	adds	r3, #20
 80064d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e1      	bne.n	80064b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3314      	adds	r3, #20
 80064f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3314      	adds	r3, #20
 8006512:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006516:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006518:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800651c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e3      	bne.n	80064f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800654a:	f023 0310 	bic.w	r3, r3, #16
 800654e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800655c:	65ba      	str	r2, [r7, #88]	; 0x58
 800655e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800656a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e3      	bne.n	8006538 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	4618      	mov	r0, r3
 8006576:	f7fc fc15 	bl	8002da4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006582:	b29b      	uxth	r3, r3
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	b29b      	uxth	r3, r3
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fa fff2 	bl	8001574 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006590:	e099      	b.n	80066c6 <HAL_UART_IRQHandler+0x50e>
 8006592:	bf00      	nop
 8006594:	08006b53 	.word	0x08006b53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 808b 	beq.w	80066ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8086 	beq.w	80066ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	330c      	adds	r3, #12
 80065c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065e2:	647a      	str	r2, [r7, #68]	; 0x44
 80065e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e3      	bne.n	80065be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3314      	adds	r3, #20
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	623b      	str	r3, [r7, #32]
   return(result);
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	f023 0301 	bic.w	r3, r3, #1
 800660c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3314      	adds	r3, #20
 8006616:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800661a:	633a      	str	r2, [r7, #48]	; 0x30
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e3      	bne.n	80065f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	60fb      	str	r3, [r7, #12]
   return(result);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0310 	bic.w	r3, r3, #16
 8006652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006660:	61fa      	str	r2, [r7, #28]
 8006662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	69b9      	ldr	r1, [r7, #24]
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	617b      	str	r3, [r7, #20]
   return(result);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e3      	bne.n	800663c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fa ff7a 	bl	8001574 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006680:	e023      	b.n	80066ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	2b00      	cmp	r3, #0
 800668c:	d009      	beq.n	80066a2 <HAL_UART_IRQHandler+0x4ea>
 800668e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa6d 	bl	8006b7a <UART_Transmit_IT>
    return;
 80066a0:	e014      	b.n	80066cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00e      	beq.n	80066cc <HAL_UART_IRQHandler+0x514>
 80066ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 faad 	bl	8006c1a <UART_EndTransmit_IT>
    return;
 80066c0:	e004      	b.n	80066cc <HAL_UART_IRQHandler+0x514>
    return;
 80066c2:	bf00      	nop
 80066c4:	e002      	b.n	80066cc <HAL_UART_IRQHandler+0x514>
      return;
 80066c6:	bf00      	nop
 80066c8:	e000      	b.n	80066cc <HAL_UART_IRQHandler+0x514>
      return;
 80066ca:	bf00      	nop
  }
}
 80066cc:	37e8      	adds	r7, #232	; 0xe8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop

080066d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b09c      	sub	sp, #112	; 0x70
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006728:	2b00      	cmp	r3, #0
 800672a:	d172      	bne.n	8006812 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800672c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672e:	2200      	movs	r2, #0
 8006730:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006748:	66bb      	str	r3, [r7, #104]	; 0x68
 800674a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006752:	65ba      	str	r2, [r7, #88]	; 0x58
 8006754:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e5      	bne.n	8006732 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3314      	adds	r3, #20
 800676c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006778:	f023 0301 	bic.w	r3, r3, #1
 800677c:	667b      	str	r3, [r7, #100]	; 0x64
 800677e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3314      	adds	r3, #20
 8006784:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006786:	647a      	str	r2, [r7, #68]	; 0x44
 8006788:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800678c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e5      	bne.n	8006766 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3314      	adds	r3, #20
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	623b      	str	r3, [r7, #32]
   return(result);
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b0:	663b      	str	r3, [r7, #96]	; 0x60
 80067b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067ba:	633a      	str	r2, [r7, #48]	; 0x30
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e5      	bne.n	800679a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d119      	bne.n	8006812 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f023 0310 	bic.w	r3, r3, #16
 80067f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067fe:	61fa      	str	r2, [r7, #28]
 8006800:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	69b9      	ldr	r1, [r7, #24]
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	617b      	str	r3, [r7, #20]
   return(result);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e5      	bne.n	80067de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	2b01      	cmp	r3, #1
 8006818:	d106      	bne.n	8006828 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800681a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800681e:	4619      	mov	r1, r3
 8006820:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006822:	f7fa fea7 	bl	8001574 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006826:	e002      	b.n	800682e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006828:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800682a:	f7ff ff5d 	bl	80066e8 <HAL_UART_RxCpltCallback>
}
 800682e:	bf00      	nop
 8006830:	3770      	adds	r7, #112	; 0x70
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	2b01      	cmp	r3, #1
 800684a:	d108      	bne.n	800685e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	b29b      	uxth	r3, r3
 8006854:	4619      	mov	r1, r3
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7fa fe8c 	bl	8001574 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800685c:	e002      	b.n	8006864 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff ff4c 	bl	80066fc <HAL_UART_RxHalfCpltCallback>
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006888:	2b80      	cmp	r3, #128	; 0x80
 800688a:	bf0c      	ite	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2300      	movne	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b21      	cmp	r3, #33	; 0x21
 800689e:	d108      	bne.n	80068b2 <UART_DMAError+0x46>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2200      	movs	r2, #0
 80068aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80068ac:	68b8      	ldr	r0, [r7, #8]
 80068ae:	f000 f8c5 	bl	8006a3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b40      	cmp	r3, #64	; 0x40
 80068be:	bf0c      	ite	eq
 80068c0:	2301      	moveq	r3, #1
 80068c2:	2300      	movne	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b22      	cmp	r3, #34	; 0x22
 80068d2:	d108      	bne.n	80068e6 <UART_DMAError+0x7a>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2200      	movs	r2, #0
 80068de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80068e0:	68b8      	ldr	r0, [r7, #8]
 80068e2:	f000 f8d3 	bl	8006a8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f043 0210 	orr.w	r2, r3, #16
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f2:	68b8      	ldr	r0, [r7, #8]
 80068f4:	f7fa fe8c 	bl	8001610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b098      	sub	sp, #96	; 0x60
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	4613      	mov	r3, r2
 800690c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	88fa      	ldrh	r2, [r7, #6]
 8006918:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2222      	movs	r2, #34	; 0x22
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	4a40      	ldr	r2, [pc, #256]	; (8006a30 <UART_Start_Receive_DMA+0x130>)
 800692e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	4a3f      	ldr	r2, [pc, #252]	; (8006a34 <UART_Start_Receive_DMA+0x134>)
 8006936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	4a3e      	ldr	r2, [pc, #248]	; (8006a38 <UART_Start_Receive_DMA+0x138>)
 800693e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	2200      	movs	r2, #0
 8006946:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006948:	f107 0308 	add.w	r3, r7, #8
 800694c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3304      	adds	r3, #4
 8006958:	4619      	mov	r1, r3
 800695a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	f7fc f9c8 	bl	8002cf4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d019      	beq.n	80069be <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800699a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80069ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80069b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80069b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e5      	bne.n	800698a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3314      	adds	r3, #20
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	657b      	str	r3, [r7, #84]	; 0x54
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3314      	adds	r3, #20
 80069dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069de:	63ba      	str	r2, [r7, #56]	; 0x38
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e5      	bne.n	80069be <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3314      	adds	r3, #20
 80069f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	617b      	str	r3, [r7, #20]
   return(result);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a08:	653b      	str	r3, [r7, #80]	; 0x50
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3314      	adds	r3, #20
 8006a10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a12:	627a      	str	r2, [r7, #36]	; 0x24
 8006a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6a39      	ldr	r1, [r7, #32]
 8006a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e5      	bne.n	80069f2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3760      	adds	r7, #96	; 0x60
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	08006711 	.word	0x08006711
 8006a34:	08006837 	.word	0x08006837
 8006a38:	0800686d 	.word	0x0800686d

08006a3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b089      	sub	sp, #36	; 0x24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	330c      	adds	r3, #12
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	61ba      	str	r2, [r7, #24]
 8006a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6979      	ldr	r1, [r7, #20]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	613b      	str	r3, [r7, #16]
   return(result);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e5      	bne.n	8006a44 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a80:	bf00      	nop
 8006a82:	3724      	adds	r7, #36	; 0x24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b095      	sub	sp, #84	; 0x54
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ab4:	643a      	str	r2, [r7, #64]	; 0x40
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e5      	bne.n	8006a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f023 0301 	bic.w	r3, r3, #1
 8006ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3314      	adds	r3, #20
 8006ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e5      	bne.n	8006ac8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d119      	bne.n	8006b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f023 0310 	bic.w	r3, r3, #16
 8006b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b24:	61ba      	str	r2, [r7, #24]
 8006b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6979      	ldr	r1, [r7, #20]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	613b      	str	r3, [r7, #16]
   return(result);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e5      	bne.n	8006b04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b46:	bf00      	nop
 8006b48:	3754      	adds	r7, #84	; 0x54
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7fa fd4f 	bl	8001610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b21      	cmp	r3, #33	; 0x21
 8006b8c:	d13e      	bne.n	8006c0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b96:	d114      	bne.n	8006bc2 <UART_Transmit_IT+0x48>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d110      	bne.n	8006bc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	1c9a      	adds	r2, r3, #2
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	621a      	str	r2, [r3, #32]
 8006bc0:	e008      	b.n	8006bd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	1c59      	adds	r1, r3, #1
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6211      	str	r1, [r2, #32]
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	4619      	mov	r1, r3
 8006be2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10f      	bne.n	8006c08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e000      	b.n	8006c0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c0c:	2302      	movs	r3, #2
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff fd4a 	bl	80066d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b08c      	sub	sp, #48	; 0x30
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b22      	cmp	r3, #34	; 0x22
 8006c5c:	f040 80ab 	bne.w	8006db6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c68:	d117      	bne.n	8006c9a <UART_Receive_IT+0x50>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d113      	bne.n	8006c9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	1c9a      	adds	r2, r3, #2
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	629a      	str	r2, [r3, #40]	; 0x28
 8006c98:	e026      	b.n	8006ce8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cac:	d007      	beq.n	8006cbe <UART_Receive_IT+0x74>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <UART_Receive_IT+0x82>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	e008      	b.n	8006cde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d15a      	bne.n	8006db2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0220 	bic.w	r2, r2, #32
 8006d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d135      	bne.n	8006da8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	330c      	adds	r3, #12
 8006d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	613b      	str	r3, [r7, #16]
   return(result);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f023 0310 	bic.w	r3, r3, #16
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d62:	623a      	str	r2, [r7, #32]
 8006d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	69f9      	ldr	r1, [r7, #28]
 8006d68:	6a3a      	ldr	r2, [r7, #32]
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0310 	and.w	r3, r3, #16
 8006d80:	2b10      	cmp	r3, #16
 8006d82:	d10a      	bne.n	8006d9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7fa fbe7 	bl	8001574 <HAL_UARTEx_RxEventCallback>
 8006da6:	e002      	b.n	8006dae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff fc9d 	bl	80066e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	e002      	b.n	8006db8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e000      	b.n	8006db8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006db6:	2302      	movs	r3, #2
  }
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3730      	adds	r7, #48	; 0x30
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc4:	b0c0      	sub	sp, #256	; 0x100
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ddc:	68d9      	ldr	r1, [r3, #12]
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	ea40 0301 	orr.w	r3, r0, r1
 8006de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e18:	f021 010c 	bic.w	r1, r1, #12
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e26:	430b      	orrs	r3, r1
 8006e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3a:	6999      	ldr	r1, [r3, #24]
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	ea40 0301 	orr.w	r3, r0, r1
 8006e46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b8f      	ldr	r3, [pc, #572]	; (800708c <UART_SetConfig+0x2cc>)
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d005      	beq.n	8006e60 <UART_SetConfig+0xa0>
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4b8d      	ldr	r3, [pc, #564]	; (8007090 <UART_SetConfig+0x2d0>)
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d104      	bne.n	8006e6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e60:	f7fe f8a0 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 8006e64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e68:	e003      	b.n	8006e72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e6a:	f7fe f887 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8006e6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e7c:	f040 810c 	bne.w	8007098 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e92:	4622      	mov	r2, r4
 8006e94:	462b      	mov	r3, r5
 8006e96:	1891      	adds	r1, r2, r2
 8006e98:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e9a:	415b      	adcs	r3, r3
 8006e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	eb12 0801 	adds.w	r8, r2, r1
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	eb43 0901 	adc.w	r9, r3, r1
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ec2:	4690      	mov	r8, r2
 8006ec4:	4699      	mov	r9, r3
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	eb18 0303 	adds.w	r3, r8, r3
 8006ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	eb49 0303 	adc.w	r3, r9, r3
 8006ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ee6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006eea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006eee:	460b      	mov	r3, r1
 8006ef0:	18db      	adds	r3, r3, r3
 8006ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	eb42 0303 	adc.w	r3, r2, r3
 8006efa:	657b      	str	r3, [r7, #84]	; 0x54
 8006efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f04:	f7f9 fe62 	bl	8000bcc <__aeabi_uldivmod>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4b61      	ldr	r3, [pc, #388]	; (8007094 <UART_SetConfig+0x2d4>)
 8006f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	011c      	lsls	r4, r3, #4
 8006f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f28:	4642      	mov	r2, r8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	1891      	adds	r1, r2, r2
 8006f2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f30:	415b      	adcs	r3, r3
 8006f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f38:	4641      	mov	r1, r8
 8006f3a:	eb12 0a01 	adds.w	sl, r2, r1
 8006f3e:	4649      	mov	r1, r9
 8006f40:	eb43 0b01 	adc.w	fp, r3, r1
 8006f44:	f04f 0200 	mov.w	r2, #0
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f58:	4692      	mov	sl, r2
 8006f5a:	469b      	mov	fp, r3
 8006f5c:	4643      	mov	r3, r8
 8006f5e:	eb1a 0303 	adds.w	r3, sl, r3
 8006f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f66:	464b      	mov	r3, r9
 8006f68:	eb4b 0303 	adc.w	r3, fp, r3
 8006f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f84:	460b      	mov	r3, r1
 8006f86:	18db      	adds	r3, r3, r3
 8006f88:	643b      	str	r3, [r7, #64]	; 0x40
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	eb42 0303 	adc.w	r3, r2, r3
 8006f90:	647b      	str	r3, [r7, #68]	; 0x44
 8006f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f9a:	f7f9 fe17 	bl	8000bcc <__aeabi_uldivmod>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	4b3b      	ldr	r3, [pc, #236]	; (8007094 <UART_SetConfig+0x2d4>)
 8006fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	2264      	movs	r2, #100	; 0x64
 8006fae:	fb02 f303 	mul.w	r3, r2, r3
 8006fb2:	1acb      	subs	r3, r1, r3
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fba:	4b36      	ldr	r3, [pc, #216]	; (8007094 <UART_SetConfig+0x2d4>)
 8006fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fc8:	441c      	add	r4, r3
 8006fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006fd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	1891      	adds	r1, r2, r2
 8006fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006fe4:	415b      	adcs	r3, r3
 8006fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006fec:	4641      	mov	r1, r8
 8006fee:	1851      	adds	r1, r2, r1
 8006ff0:	6339      	str	r1, [r7, #48]	; 0x30
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	414b      	adcs	r3, r1
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007004:	4659      	mov	r1, fp
 8007006:	00cb      	lsls	r3, r1, #3
 8007008:	4651      	mov	r1, sl
 800700a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800700e:	4651      	mov	r1, sl
 8007010:	00ca      	lsls	r2, r1, #3
 8007012:	4610      	mov	r0, r2
 8007014:	4619      	mov	r1, r3
 8007016:	4603      	mov	r3, r0
 8007018:	4642      	mov	r2, r8
 800701a:	189b      	adds	r3, r3, r2
 800701c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007020:	464b      	mov	r3, r9
 8007022:	460a      	mov	r2, r1
 8007024:	eb42 0303 	adc.w	r3, r2, r3
 8007028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007038:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800703c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007040:	460b      	mov	r3, r1
 8007042:	18db      	adds	r3, r3, r3
 8007044:	62bb      	str	r3, [r7, #40]	; 0x28
 8007046:	4613      	mov	r3, r2
 8007048:	eb42 0303 	adc.w	r3, r2, r3
 800704c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800704e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007052:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007056:	f7f9 fdb9 	bl	8000bcc <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <UART_SetConfig+0x2d4>)
 8007060:	fba3 1302 	umull	r1, r3, r3, r2
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	2164      	movs	r1, #100	; 0x64
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	3332      	adds	r3, #50	; 0x32
 8007072:	4a08      	ldr	r2, [pc, #32]	; (8007094 <UART_SetConfig+0x2d4>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f003 0207 	and.w	r2, r3, #7
 800707e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4422      	add	r2, r4
 8007086:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007088:	e105      	b.n	8007296 <UART_SetConfig+0x4d6>
 800708a:	bf00      	nop
 800708c:	40011000 	.word	0x40011000
 8007090:	40011400 	.word	0x40011400
 8007094:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800709c:	2200      	movs	r2, #0
 800709e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80070a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80070aa:	4642      	mov	r2, r8
 80070ac:	464b      	mov	r3, r9
 80070ae:	1891      	adds	r1, r2, r2
 80070b0:	6239      	str	r1, [r7, #32]
 80070b2:	415b      	adcs	r3, r3
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
 80070b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070ba:	4641      	mov	r1, r8
 80070bc:	1854      	adds	r4, r2, r1
 80070be:	4649      	mov	r1, r9
 80070c0:	eb43 0501 	adc.w	r5, r3, r1
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	00eb      	lsls	r3, r5, #3
 80070ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070d2:	00e2      	lsls	r2, r4, #3
 80070d4:	4614      	mov	r4, r2
 80070d6:	461d      	mov	r5, r3
 80070d8:	4643      	mov	r3, r8
 80070da:	18e3      	adds	r3, r4, r3
 80070dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070e0:	464b      	mov	r3, r9
 80070e2:	eb45 0303 	adc.w	r3, r5, r3
 80070e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	f04f 0300 	mov.w	r3, #0
 8007102:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007106:	4629      	mov	r1, r5
 8007108:	008b      	lsls	r3, r1, #2
 800710a:	4621      	mov	r1, r4
 800710c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007110:	4621      	mov	r1, r4
 8007112:	008a      	lsls	r2, r1, #2
 8007114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007118:	f7f9 fd58 	bl	8000bcc <__aeabi_uldivmod>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4b60      	ldr	r3, [pc, #384]	; (80072a4 <UART_SetConfig+0x4e4>)
 8007122:	fba3 2302 	umull	r2, r3, r3, r2
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	011c      	lsls	r4, r3, #4
 800712a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800712e:	2200      	movs	r2, #0
 8007130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007134:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007138:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800713c:	4642      	mov	r2, r8
 800713e:	464b      	mov	r3, r9
 8007140:	1891      	adds	r1, r2, r2
 8007142:	61b9      	str	r1, [r7, #24]
 8007144:	415b      	adcs	r3, r3
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800714c:	4641      	mov	r1, r8
 800714e:	1851      	adds	r1, r2, r1
 8007150:	6139      	str	r1, [r7, #16]
 8007152:	4649      	mov	r1, r9
 8007154:	414b      	adcs	r3, r1
 8007156:	617b      	str	r3, [r7, #20]
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007164:	4659      	mov	r1, fp
 8007166:	00cb      	lsls	r3, r1, #3
 8007168:	4651      	mov	r1, sl
 800716a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800716e:	4651      	mov	r1, sl
 8007170:	00ca      	lsls	r2, r1, #3
 8007172:	4610      	mov	r0, r2
 8007174:	4619      	mov	r1, r3
 8007176:	4603      	mov	r3, r0
 8007178:	4642      	mov	r2, r8
 800717a:	189b      	adds	r3, r3, r2
 800717c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007180:	464b      	mov	r3, r9
 8007182:	460a      	mov	r2, r1
 8007184:	eb42 0303 	adc.w	r3, r2, r3
 8007188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	67bb      	str	r3, [r7, #120]	; 0x78
 8007196:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007198:	f04f 0200 	mov.w	r2, #0
 800719c:	f04f 0300 	mov.w	r3, #0
 80071a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80071a4:	4649      	mov	r1, r9
 80071a6:	008b      	lsls	r3, r1, #2
 80071a8:	4641      	mov	r1, r8
 80071aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071ae:	4641      	mov	r1, r8
 80071b0:	008a      	lsls	r2, r1, #2
 80071b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071b6:	f7f9 fd09 	bl	8000bcc <__aeabi_uldivmod>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4b39      	ldr	r3, [pc, #228]	; (80072a4 <UART_SetConfig+0x4e4>)
 80071c0:	fba3 1302 	umull	r1, r3, r3, r2
 80071c4:	095b      	lsrs	r3, r3, #5
 80071c6:	2164      	movs	r1, #100	; 0x64
 80071c8:	fb01 f303 	mul.w	r3, r1, r3
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	3332      	adds	r3, #50	; 0x32
 80071d2:	4a34      	ldr	r2, [pc, #208]	; (80072a4 <UART_SetConfig+0x4e4>)
 80071d4:	fba2 2303 	umull	r2, r3, r2, r3
 80071d8:	095b      	lsrs	r3, r3, #5
 80071da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071de:	441c      	add	r4, r3
 80071e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071e4:	2200      	movs	r2, #0
 80071e6:	673b      	str	r3, [r7, #112]	; 0x70
 80071e8:	677a      	str	r2, [r7, #116]	; 0x74
 80071ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071ee:	4642      	mov	r2, r8
 80071f0:	464b      	mov	r3, r9
 80071f2:	1891      	adds	r1, r2, r2
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	415b      	adcs	r3, r3
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071fe:	4641      	mov	r1, r8
 8007200:	1851      	adds	r1, r2, r1
 8007202:	6039      	str	r1, [r7, #0]
 8007204:	4649      	mov	r1, r9
 8007206:	414b      	adcs	r3, r1
 8007208:	607b      	str	r3, [r7, #4]
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007216:	4659      	mov	r1, fp
 8007218:	00cb      	lsls	r3, r1, #3
 800721a:	4651      	mov	r1, sl
 800721c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007220:	4651      	mov	r1, sl
 8007222:	00ca      	lsls	r2, r1, #3
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	4603      	mov	r3, r0
 800722a:	4642      	mov	r2, r8
 800722c:	189b      	adds	r3, r3, r2
 800722e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007230:	464b      	mov	r3, r9
 8007232:	460a      	mov	r2, r1
 8007234:	eb42 0303 	adc.w	r3, r2, r3
 8007238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800723a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	663b      	str	r3, [r7, #96]	; 0x60
 8007244:	667a      	str	r2, [r7, #100]	; 0x64
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007252:	4649      	mov	r1, r9
 8007254:	008b      	lsls	r3, r1, #2
 8007256:	4641      	mov	r1, r8
 8007258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800725c:	4641      	mov	r1, r8
 800725e:	008a      	lsls	r2, r1, #2
 8007260:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007264:	f7f9 fcb2 	bl	8000bcc <__aeabi_uldivmod>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <UART_SetConfig+0x4e4>)
 800726e:	fba3 1302 	umull	r1, r3, r3, r2
 8007272:	095b      	lsrs	r3, r3, #5
 8007274:	2164      	movs	r1, #100	; 0x64
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	011b      	lsls	r3, r3, #4
 800727e:	3332      	adds	r3, #50	; 0x32
 8007280:	4a08      	ldr	r2, [pc, #32]	; (80072a4 <UART_SetConfig+0x4e4>)
 8007282:	fba2 2303 	umull	r2, r3, r2, r3
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	f003 020f 	and.w	r2, r3, #15
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4422      	add	r2, r4
 8007294:	609a      	str	r2, [r3, #8]
}
 8007296:	bf00      	nop
 8007298:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800729c:	46bd      	mov	sp, r7
 800729e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072a2:	bf00      	nop
 80072a4:	51eb851f 	.word	0x51eb851f

080072a8 <__errno>:
 80072a8:	4b01      	ldr	r3, [pc, #4]	; (80072b0 <__errno+0x8>)
 80072aa:	6818      	ldr	r0, [r3, #0]
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	20000024 	.word	0x20000024

080072b4 <__libc_init_array>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	4d0d      	ldr	r5, [pc, #52]	; (80072ec <__libc_init_array+0x38>)
 80072b8:	4c0d      	ldr	r4, [pc, #52]	; (80072f0 <__libc_init_array+0x3c>)
 80072ba:	1b64      	subs	r4, r4, r5
 80072bc:	10a4      	asrs	r4, r4, #2
 80072be:	2600      	movs	r6, #0
 80072c0:	42a6      	cmp	r6, r4
 80072c2:	d109      	bne.n	80072d8 <__libc_init_array+0x24>
 80072c4:	4d0b      	ldr	r5, [pc, #44]	; (80072f4 <__libc_init_array+0x40>)
 80072c6:	4c0c      	ldr	r4, [pc, #48]	; (80072f8 <__libc_init_array+0x44>)
 80072c8:	f001 f824 	bl	8008314 <_init>
 80072cc:	1b64      	subs	r4, r4, r5
 80072ce:	10a4      	asrs	r4, r4, #2
 80072d0:	2600      	movs	r6, #0
 80072d2:	42a6      	cmp	r6, r4
 80072d4:	d105      	bne.n	80072e2 <__libc_init_array+0x2e>
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072dc:	4798      	blx	r3
 80072de:	3601      	adds	r6, #1
 80072e0:	e7ee      	b.n	80072c0 <__libc_init_array+0xc>
 80072e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e6:	4798      	blx	r3
 80072e8:	3601      	adds	r6, #1
 80072ea:	e7f2      	b.n	80072d2 <__libc_init_array+0x1e>
 80072ec:	08008628 	.word	0x08008628
 80072f0:	08008628 	.word	0x08008628
 80072f4:	08008628 	.word	0x08008628
 80072f8:	0800862c 	.word	0x0800862c

080072fc <memset>:
 80072fc:	4402      	add	r2, r0
 80072fe:	4603      	mov	r3, r0
 8007300:	4293      	cmp	r3, r2
 8007302:	d100      	bne.n	8007306 <memset+0xa>
 8007304:	4770      	bx	lr
 8007306:	f803 1b01 	strb.w	r1, [r3], #1
 800730a:	e7f9      	b.n	8007300 <memset+0x4>

0800730c <iprintf>:
 800730c:	b40f      	push	{r0, r1, r2, r3}
 800730e:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <iprintf+0x2c>)
 8007310:	b513      	push	{r0, r1, r4, lr}
 8007312:	681c      	ldr	r4, [r3, #0]
 8007314:	b124      	cbz	r4, 8007320 <iprintf+0x14>
 8007316:	69a3      	ldr	r3, [r4, #24]
 8007318:	b913      	cbnz	r3, 8007320 <iprintf+0x14>
 800731a:	4620      	mov	r0, r4
 800731c:	f000 fa5e 	bl	80077dc <__sinit>
 8007320:	ab05      	add	r3, sp, #20
 8007322:	9a04      	ldr	r2, [sp, #16]
 8007324:	68a1      	ldr	r1, [r4, #8]
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fc67 	bl	8007bfc <_vfiprintf_r>
 800732e:	b002      	add	sp, #8
 8007330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007334:	b004      	add	sp, #16
 8007336:	4770      	bx	lr
 8007338:	20000024 	.word	0x20000024

0800733c <_puts_r>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	460e      	mov	r6, r1
 8007340:	4605      	mov	r5, r0
 8007342:	b118      	cbz	r0, 800734c <_puts_r+0x10>
 8007344:	6983      	ldr	r3, [r0, #24]
 8007346:	b90b      	cbnz	r3, 800734c <_puts_r+0x10>
 8007348:	f000 fa48 	bl	80077dc <__sinit>
 800734c:	69ab      	ldr	r3, [r5, #24]
 800734e:	68ac      	ldr	r4, [r5, #8]
 8007350:	b913      	cbnz	r3, 8007358 <_puts_r+0x1c>
 8007352:	4628      	mov	r0, r5
 8007354:	f000 fa42 	bl	80077dc <__sinit>
 8007358:	4b2c      	ldr	r3, [pc, #176]	; (800740c <_puts_r+0xd0>)
 800735a:	429c      	cmp	r4, r3
 800735c:	d120      	bne.n	80073a0 <_puts_r+0x64>
 800735e:	686c      	ldr	r4, [r5, #4]
 8007360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007362:	07db      	lsls	r3, r3, #31
 8007364:	d405      	bmi.n	8007372 <_puts_r+0x36>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	0598      	lsls	r0, r3, #22
 800736a:	d402      	bmi.n	8007372 <_puts_r+0x36>
 800736c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800736e:	f000 fad3 	bl	8007918 <__retarget_lock_acquire_recursive>
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	0719      	lsls	r1, r3, #28
 8007376:	d51d      	bpl.n	80073b4 <_puts_r+0x78>
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	b1db      	cbz	r3, 80073b4 <_puts_r+0x78>
 800737c:	3e01      	subs	r6, #1
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007384:	3b01      	subs	r3, #1
 8007386:	60a3      	str	r3, [r4, #8]
 8007388:	bb39      	cbnz	r1, 80073da <_puts_r+0x9e>
 800738a:	2b00      	cmp	r3, #0
 800738c:	da38      	bge.n	8007400 <_puts_r+0xc4>
 800738e:	4622      	mov	r2, r4
 8007390:	210a      	movs	r1, #10
 8007392:	4628      	mov	r0, r5
 8007394:	f000 f848 	bl	8007428 <__swbuf_r>
 8007398:	3001      	adds	r0, #1
 800739a:	d011      	beq.n	80073c0 <_puts_r+0x84>
 800739c:	250a      	movs	r5, #10
 800739e:	e011      	b.n	80073c4 <_puts_r+0x88>
 80073a0:	4b1b      	ldr	r3, [pc, #108]	; (8007410 <_puts_r+0xd4>)
 80073a2:	429c      	cmp	r4, r3
 80073a4:	d101      	bne.n	80073aa <_puts_r+0x6e>
 80073a6:	68ac      	ldr	r4, [r5, #8]
 80073a8:	e7da      	b.n	8007360 <_puts_r+0x24>
 80073aa:	4b1a      	ldr	r3, [pc, #104]	; (8007414 <_puts_r+0xd8>)
 80073ac:	429c      	cmp	r4, r3
 80073ae:	bf08      	it	eq
 80073b0:	68ec      	ldreq	r4, [r5, #12]
 80073b2:	e7d5      	b.n	8007360 <_puts_r+0x24>
 80073b4:	4621      	mov	r1, r4
 80073b6:	4628      	mov	r0, r5
 80073b8:	f000 f888 	bl	80074cc <__swsetup_r>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d0dd      	beq.n	800737c <_puts_r+0x40>
 80073c0:	f04f 35ff 	mov.w	r5, #4294967295
 80073c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073c6:	07da      	lsls	r2, r3, #31
 80073c8:	d405      	bmi.n	80073d6 <_puts_r+0x9a>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	059b      	lsls	r3, r3, #22
 80073ce:	d402      	bmi.n	80073d6 <_puts_r+0x9a>
 80073d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073d2:	f000 faa2 	bl	800791a <__retarget_lock_release_recursive>
 80073d6:	4628      	mov	r0, r5
 80073d8:	bd70      	pop	{r4, r5, r6, pc}
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da04      	bge.n	80073e8 <_puts_r+0xac>
 80073de:	69a2      	ldr	r2, [r4, #24]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	dc06      	bgt.n	80073f2 <_puts_r+0xb6>
 80073e4:	290a      	cmp	r1, #10
 80073e6:	d004      	beq.n	80073f2 <_puts_r+0xb6>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	6022      	str	r2, [r4, #0]
 80073ee:	7019      	strb	r1, [r3, #0]
 80073f0:	e7c5      	b.n	800737e <_puts_r+0x42>
 80073f2:	4622      	mov	r2, r4
 80073f4:	4628      	mov	r0, r5
 80073f6:	f000 f817 	bl	8007428 <__swbuf_r>
 80073fa:	3001      	adds	r0, #1
 80073fc:	d1bf      	bne.n	800737e <_puts_r+0x42>
 80073fe:	e7df      	b.n	80073c0 <_puts_r+0x84>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	250a      	movs	r5, #10
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	6022      	str	r2, [r4, #0]
 8007408:	701d      	strb	r5, [r3, #0]
 800740a:	e7db      	b.n	80073c4 <_puts_r+0x88>
 800740c:	080085ac 	.word	0x080085ac
 8007410:	080085cc 	.word	0x080085cc
 8007414:	0800858c 	.word	0x0800858c

08007418 <puts>:
 8007418:	4b02      	ldr	r3, [pc, #8]	; (8007424 <puts+0xc>)
 800741a:	4601      	mov	r1, r0
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	f7ff bf8d 	b.w	800733c <_puts_r>
 8007422:	bf00      	nop
 8007424:	20000024 	.word	0x20000024

08007428 <__swbuf_r>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	460e      	mov	r6, r1
 800742c:	4614      	mov	r4, r2
 800742e:	4605      	mov	r5, r0
 8007430:	b118      	cbz	r0, 800743a <__swbuf_r+0x12>
 8007432:	6983      	ldr	r3, [r0, #24]
 8007434:	b90b      	cbnz	r3, 800743a <__swbuf_r+0x12>
 8007436:	f000 f9d1 	bl	80077dc <__sinit>
 800743a:	4b21      	ldr	r3, [pc, #132]	; (80074c0 <__swbuf_r+0x98>)
 800743c:	429c      	cmp	r4, r3
 800743e:	d12b      	bne.n	8007498 <__swbuf_r+0x70>
 8007440:	686c      	ldr	r4, [r5, #4]
 8007442:	69a3      	ldr	r3, [r4, #24]
 8007444:	60a3      	str	r3, [r4, #8]
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	071a      	lsls	r2, r3, #28
 800744a:	d52f      	bpl.n	80074ac <__swbuf_r+0x84>
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	b36b      	cbz	r3, 80074ac <__swbuf_r+0x84>
 8007450:	6923      	ldr	r3, [r4, #16]
 8007452:	6820      	ldr	r0, [r4, #0]
 8007454:	1ac0      	subs	r0, r0, r3
 8007456:	6963      	ldr	r3, [r4, #20]
 8007458:	b2f6      	uxtb	r6, r6
 800745a:	4283      	cmp	r3, r0
 800745c:	4637      	mov	r7, r6
 800745e:	dc04      	bgt.n	800746a <__swbuf_r+0x42>
 8007460:	4621      	mov	r1, r4
 8007462:	4628      	mov	r0, r5
 8007464:	f000 f926 	bl	80076b4 <_fflush_r>
 8007468:	bb30      	cbnz	r0, 80074b8 <__swbuf_r+0x90>
 800746a:	68a3      	ldr	r3, [r4, #8]
 800746c:	3b01      	subs	r3, #1
 800746e:	60a3      	str	r3, [r4, #8]
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	6022      	str	r2, [r4, #0]
 8007476:	701e      	strb	r6, [r3, #0]
 8007478:	6963      	ldr	r3, [r4, #20]
 800747a:	3001      	adds	r0, #1
 800747c:	4283      	cmp	r3, r0
 800747e:	d004      	beq.n	800748a <__swbuf_r+0x62>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	07db      	lsls	r3, r3, #31
 8007484:	d506      	bpl.n	8007494 <__swbuf_r+0x6c>
 8007486:	2e0a      	cmp	r6, #10
 8007488:	d104      	bne.n	8007494 <__swbuf_r+0x6c>
 800748a:	4621      	mov	r1, r4
 800748c:	4628      	mov	r0, r5
 800748e:	f000 f911 	bl	80076b4 <_fflush_r>
 8007492:	b988      	cbnz	r0, 80074b8 <__swbuf_r+0x90>
 8007494:	4638      	mov	r0, r7
 8007496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007498:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <__swbuf_r+0x9c>)
 800749a:	429c      	cmp	r4, r3
 800749c:	d101      	bne.n	80074a2 <__swbuf_r+0x7a>
 800749e:	68ac      	ldr	r4, [r5, #8]
 80074a0:	e7cf      	b.n	8007442 <__swbuf_r+0x1a>
 80074a2:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <__swbuf_r+0xa0>)
 80074a4:	429c      	cmp	r4, r3
 80074a6:	bf08      	it	eq
 80074a8:	68ec      	ldreq	r4, [r5, #12]
 80074aa:	e7ca      	b.n	8007442 <__swbuf_r+0x1a>
 80074ac:	4621      	mov	r1, r4
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 f80c 	bl	80074cc <__swsetup_r>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d0cb      	beq.n	8007450 <__swbuf_r+0x28>
 80074b8:	f04f 37ff 	mov.w	r7, #4294967295
 80074bc:	e7ea      	b.n	8007494 <__swbuf_r+0x6c>
 80074be:	bf00      	nop
 80074c0:	080085ac 	.word	0x080085ac
 80074c4:	080085cc 	.word	0x080085cc
 80074c8:	0800858c 	.word	0x0800858c

080074cc <__swsetup_r>:
 80074cc:	4b32      	ldr	r3, [pc, #200]	; (8007598 <__swsetup_r+0xcc>)
 80074ce:	b570      	push	{r4, r5, r6, lr}
 80074d0:	681d      	ldr	r5, [r3, #0]
 80074d2:	4606      	mov	r6, r0
 80074d4:	460c      	mov	r4, r1
 80074d6:	b125      	cbz	r5, 80074e2 <__swsetup_r+0x16>
 80074d8:	69ab      	ldr	r3, [r5, #24]
 80074da:	b913      	cbnz	r3, 80074e2 <__swsetup_r+0x16>
 80074dc:	4628      	mov	r0, r5
 80074de:	f000 f97d 	bl	80077dc <__sinit>
 80074e2:	4b2e      	ldr	r3, [pc, #184]	; (800759c <__swsetup_r+0xd0>)
 80074e4:	429c      	cmp	r4, r3
 80074e6:	d10f      	bne.n	8007508 <__swsetup_r+0x3c>
 80074e8:	686c      	ldr	r4, [r5, #4]
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074f0:	0719      	lsls	r1, r3, #28
 80074f2:	d42c      	bmi.n	800754e <__swsetup_r+0x82>
 80074f4:	06dd      	lsls	r5, r3, #27
 80074f6:	d411      	bmi.n	800751c <__swsetup_r+0x50>
 80074f8:	2309      	movs	r3, #9
 80074fa:	6033      	str	r3, [r6, #0]
 80074fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	f04f 30ff 	mov.w	r0, #4294967295
 8007506:	e03e      	b.n	8007586 <__swsetup_r+0xba>
 8007508:	4b25      	ldr	r3, [pc, #148]	; (80075a0 <__swsetup_r+0xd4>)
 800750a:	429c      	cmp	r4, r3
 800750c:	d101      	bne.n	8007512 <__swsetup_r+0x46>
 800750e:	68ac      	ldr	r4, [r5, #8]
 8007510:	e7eb      	b.n	80074ea <__swsetup_r+0x1e>
 8007512:	4b24      	ldr	r3, [pc, #144]	; (80075a4 <__swsetup_r+0xd8>)
 8007514:	429c      	cmp	r4, r3
 8007516:	bf08      	it	eq
 8007518:	68ec      	ldreq	r4, [r5, #12]
 800751a:	e7e6      	b.n	80074ea <__swsetup_r+0x1e>
 800751c:	0758      	lsls	r0, r3, #29
 800751e:	d512      	bpl.n	8007546 <__swsetup_r+0x7a>
 8007520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007522:	b141      	cbz	r1, 8007536 <__swsetup_r+0x6a>
 8007524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007528:	4299      	cmp	r1, r3
 800752a:	d002      	beq.n	8007532 <__swsetup_r+0x66>
 800752c:	4630      	mov	r0, r6
 800752e:	f000 fa5b 	bl	80079e8 <_free_r>
 8007532:	2300      	movs	r3, #0
 8007534:	6363      	str	r3, [r4, #52]	; 0x34
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	2300      	movs	r3, #0
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f043 0308 	orr.w	r3, r3, #8
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	b94b      	cbnz	r3, 8007566 <__swsetup_r+0x9a>
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800755c:	d003      	beq.n	8007566 <__swsetup_r+0x9a>
 800755e:	4621      	mov	r1, r4
 8007560:	4630      	mov	r0, r6
 8007562:	f000 fa01 	bl	8007968 <__smakebuf_r>
 8007566:	89a0      	ldrh	r0, [r4, #12]
 8007568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800756c:	f010 0301 	ands.w	r3, r0, #1
 8007570:	d00a      	beq.n	8007588 <__swsetup_r+0xbc>
 8007572:	2300      	movs	r3, #0
 8007574:	60a3      	str	r3, [r4, #8]
 8007576:	6963      	ldr	r3, [r4, #20]
 8007578:	425b      	negs	r3, r3
 800757a:	61a3      	str	r3, [r4, #24]
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	b943      	cbnz	r3, 8007592 <__swsetup_r+0xc6>
 8007580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007584:	d1ba      	bne.n	80074fc <__swsetup_r+0x30>
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	0781      	lsls	r1, r0, #30
 800758a:	bf58      	it	pl
 800758c:	6963      	ldrpl	r3, [r4, #20]
 800758e:	60a3      	str	r3, [r4, #8]
 8007590:	e7f4      	b.n	800757c <__swsetup_r+0xb0>
 8007592:	2000      	movs	r0, #0
 8007594:	e7f7      	b.n	8007586 <__swsetup_r+0xba>
 8007596:	bf00      	nop
 8007598:	20000024 	.word	0x20000024
 800759c:	080085ac 	.word	0x080085ac
 80075a0:	080085cc 	.word	0x080085cc
 80075a4:	0800858c 	.word	0x0800858c

080075a8 <__sflush_r>:
 80075a8:	898a      	ldrh	r2, [r1, #12]
 80075aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ae:	4605      	mov	r5, r0
 80075b0:	0710      	lsls	r0, r2, #28
 80075b2:	460c      	mov	r4, r1
 80075b4:	d458      	bmi.n	8007668 <__sflush_r+0xc0>
 80075b6:	684b      	ldr	r3, [r1, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dc05      	bgt.n	80075c8 <__sflush_r+0x20>
 80075bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dc02      	bgt.n	80075c8 <__sflush_r+0x20>
 80075c2:	2000      	movs	r0, #0
 80075c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ca:	2e00      	cmp	r6, #0
 80075cc:	d0f9      	beq.n	80075c2 <__sflush_r+0x1a>
 80075ce:	2300      	movs	r3, #0
 80075d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075d4:	682f      	ldr	r7, [r5, #0]
 80075d6:	602b      	str	r3, [r5, #0]
 80075d8:	d032      	beq.n	8007640 <__sflush_r+0x98>
 80075da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	075a      	lsls	r2, r3, #29
 80075e0:	d505      	bpl.n	80075ee <__sflush_r+0x46>
 80075e2:	6863      	ldr	r3, [r4, #4]
 80075e4:	1ac0      	subs	r0, r0, r3
 80075e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075e8:	b10b      	cbz	r3, 80075ee <__sflush_r+0x46>
 80075ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075ec:	1ac0      	subs	r0, r0, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	4602      	mov	r2, r0
 80075f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075f4:	6a21      	ldr	r1, [r4, #32]
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b0      	blx	r6
 80075fa:	1c43      	adds	r3, r0, #1
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	d106      	bne.n	800760e <__sflush_r+0x66>
 8007600:	6829      	ldr	r1, [r5, #0]
 8007602:	291d      	cmp	r1, #29
 8007604:	d82c      	bhi.n	8007660 <__sflush_r+0xb8>
 8007606:	4a2a      	ldr	r2, [pc, #168]	; (80076b0 <__sflush_r+0x108>)
 8007608:	40ca      	lsrs	r2, r1
 800760a:	07d6      	lsls	r6, r2, #31
 800760c:	d528      	bpl.n	8007660 <__sflush_r+0xb8>
 800760e:	2200      	movs	r2, #0
 8007610:	6062      	str	r2, [r4, #4]
 8007612:	04d9      	lsls	r1, r3, #19
 8007614:	6922      	ldr	r2, [r4, #16]
 8007616:	6022      	str	r2, [r4, #0]
 8007618:	d504      	bpl.n	8007624 <__sflush_r+0x7c>
 800761a:	1c42      	adds	r2, r0, #1
 800761c:	d101      	bne.n	8007622 <__sflush_r+0x7a>
 800761e:	682b      	ldr	r3, [r5, #0]
 8007620:	b903      	cbnz	r3, 8007624 <__sflush_r+0x7c>
 8007622:	6560      	str	r0, [r4, #84]	; 0x54
 8007624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007626:	602f      	str	r7, [r5, #0]
 8007628:	2900      	cmp	r1, #0
 800762a:	d0ca      	beq.n	80075c2 <__sflush_r+0x1a>
 800762c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007630:	4299      	cmp	r1, r3
 8007632:	d002      	beq.n	800763a <__sflush_r+0x92>
 8007634:	4628      	mov	r0, r5
 8007636:	f000 f9d7 	bl	80079e8 <_free_r>
 800763a:	2000      	movs	r0, #0
 800763c:	6360      	str	r0, [r4, #52]	; 0x34
 800763e:	e7c1      	b.n	80075c4 <__sflush_r+0x1c>
 8007640:	6a21      	ldr	r1, [r4, #32]
 8007642:	2301      	movs	r3, #1
 8007644:	4628      	mov	r0, r5
 8007646:	47b0      	blx	r6
 8007648:	1c41      	adds	r1, r0, #1
 800764a:	d1c7      	bne.n	80075dc <__sflush_r+0x34>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0c4      	beq.n	80075dc <__sflush_r+0x34>
 8007652:	2b1d      	cmp	r3, #29
 8007654:	d001      	beq.n	800765a <__sflush_r+0xb2>
 8007656:	2b16      	cmp	r3, #22
 8007658:	d101      	bne.n	800765e <__sflush_r+0xb6>
 800765a:	602f      	str	r7, [r5, #0]
 800765c:	e7b1      	b.n	80075c2 <__sflush_r+0x1a>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007664:	81a3      	strh	r3, [r4, #12]
 8007666:	e7ad      	b.n	80075c4 <__sflush_r+0x1c>
 8007668:	690f      	ldr	r7, [r1, #16]
 800766a:	2f00      	cmp	r7, #0
 800766c:	d0a9      	beq.n	80075c2 <__sflush_r+0x1a>
 800766e:	0793      	lsls	r3, r2, #30
 8007670:	680e      	ldr	r6, [r1, #0]
 8007672:	bf08      	it	eq
 8007674:	694b      	ldreq	r3, [r1, #20]
 8007676:	600f      	str	r7, [r1, #0]
 8007678:	bf18      	it	ne
 800767a:	2300      	movne	r3, #0
 800767c:	eba6 0807 	sub.w	r8, r6, r7
 8007680:	608b      	str	r3, [r1, #8]
 8007682:	f1b8 0f00 	cmp.w	r8, #0
 8007686:	dd9c      	ble.n	80075c2 <__sflush_r+0x1a>
 8007688:	6a21      	ldr	r1, [r4, #32]
 800768a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800768c:	4643      	mov	r3, r8
 800768e:	463a      	mov	r2, r7
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	2800      	cmp	r0, #0
 8007696:	dc06      	bgt.n	80076a6 <__sflush_r+0xfe>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800769e:	81a3      	strh	r3, [r4, #12]
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	e78e      	b.n	80075c4 <__sflush_r+0x1c>
 80076a6:	4407      	add	r7, r0
 80076a8:	eba8 0800 	sub.w	r8, r8, r0
 80076ac:	e7e9      	b.n	8007682 <__sflush_r+0xda>
 80076ae:	bf00      	nop
 80076b0:	20400001 	.word	0x20400001

080076b4 <_fflush_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	690b      	ldr	r3, [r1, #16]
 80076b8:	4605      	mov	r5, r0
 80076ba:	460c      	mov	r4, r1
 80076bc:	b913      	cbnz	r3, 80076c4 <_fflush_r+0x10>
 80076be:	2500      	movs	r5, #0
 80076c0:	4628      	mov	r0, r5
 80076c2:	bd38      	pop	{r3, r4, r5, pc}
 80076c4:	b118      	cbz	r0, 80076ce <_fflush_r+0x1a>
 80076c6:	6983      	ldr	r3, [r0, #24]
 80076c8:	b90b      	cbnz	r3, 80076ce <_fflush_r+0x1a>
 80076ca:	f000 f887 	bl	80077dc <__sinit>
 80076ce:	4b14      	ldr	r3, [pc, #80]	; (8007720 <_fflush_r+0x6c>)
 80076d0:	429c      	cmp	r4, r3
 80076d2:	d11b      	bne.n	800770c <_fflush_r+0x58>
 80076d4:	686c      	ldr	r4, [r5, #4]
 80076d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0ef      	beq.n	80076be <_fflush_r+0xa>
 80076de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076e0:	07d0      	lsls	r0, r2, #31
 80076e2:	d404      	bmi.n	80076ee <_fflush_r+0x3a>
 80076e4:	0599      	lsls	r1, r3, #22
 80076e6:	d402      	bmi.n	80076ee <_fflush_r+0x3a>
 80076e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ea:	f000 f915 	bl	8007918 <__retarget_lock_acquire_recursive>
 80076ee:	4628      	mov	r0, r5
 80076f0:	4621      	mov	r1, r4
 80076f2:	f7ff ff59 	bl	80075a8 <__sflush_r>
 80076f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076f8:	07da      	lsls	r2, r3, #31
 80076fa:	4605      	mov	r5, r0
 80076fc:	d4e0      	bmi.n	80076c0 <_fflush_r+0xc>
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	059b      	lsls	r3, r3, #22
 8007702:	d4dd      	bmi.n	80076c0 <_fflush_r+0xc>
 8007704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007706:	f000 f908 	bl	800791a <__retarget_lock_release_recursive>
 800770a:	e7d9      	b.n	80076c0 <_fflush_r+0xc>
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <_fflush_r+0x70>)
 800770e:	429c      	cmp	r4, r3
 8007710:	d101      	bne.n	8007716 <_fflush_r+0x62>
 8007712:	68ac      	ldr	r4, [r5, #8]
 8007714:	e7df      	b.n	80076d6 <_fflush_r+0x22>
 8007716:	4b04      	ldr	r3, [pc, #16]	; (8007728 <_fflush_r+0x74>)
 8007718:	429c      	cmp	r4, r3
 800771a:	bf08      	it	eq
 800771c:	68ec      	ldreq	r4, [r5, #12]
 800771e:	e7da      	b.n	80076d6 <_fflush_r+0x22>
 8007720:	080085ac 	.word	0x080085ac
 8007724:	080085cc 	.word	0x080085cc
 8007728:	0800858c 	.word	0x0800858c

0800772c <std>:
 800772c:	2300      	movs	r3, #0
 800772e:	b510      	push	{r4, lr}
 8007730:	4604      	mov	r4, r0
 8007732:	e9c0 3300 	strd	r3, r3, [r0]
 8007736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800773a:	6083      	str	r3, [r0, #8]
 800773c:	8181      	strh	r1, [r0, #12]
 800773e:	6643      	str	r3, [r0, #100]	; 0x64
 8007740:	81c2      	strh	r2, [r0, #14]
 8007742:	6183      	str	r3, [r0, #24]
 8007744:	4619      	mov	r1, r3
 8007746:	2208      	movs	r2, #8
 8007748:	305c      	adds	r0, #92	; 0x5c
 800774a:	f7ff fdd7 	bl	80072fc <memset>
 800774e:	4b05      	ldr	r3, [pc, #20]	; (8007764 <std+0x38>)
 8007750:	6263      	str	r3, [r4, #36]	; 0x24
 8007752:	4b05      	ldr	r3, [pc, #20]	; (8007768 <std+0x3c>)
 8007754:	62a3      	str	r3, [r4, #40]	; 0x28
 8007756:	4b05      	ldr	r3, [pc, #20]	; (800776c <std+0x40>)
 8007758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800775a:	4b05      	ldr	r3, [pc, #20]	; (8007770 <std+0x44>)
 800775c:	6224      	str	r4, [r4, #32]
 800775e:	6323      	str	r3, [r4, #48]	; 0x30
 8007760:	bd10      	pop	{r4, pc}
 8007762:	bf00      	nop
 8007764:	080081a5 	.word	0x080081a5
 8007768:	080081c7 	.word	0x080081c7
 800776c:	080081ff 	.word	0x080081ff
 8007770:	08008223 	.word	0x08008223

08007774 <_cleanup_r>:
 8007774:	4901      	ldr	r1, [pc, #4]	; (800777c <_cleanup_r+0x8>)
 8007776:	f000 b8af 	b.w	80078d8 <_fwalk_reent>
 800777a:	bf00      	nop
 800777c:	080076b5 	.word	0x080076b5

08007780 <__sfmoreglue>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	2268      	movs	r2, #104	; 0x68
 8007784:	1e4d      	subs	r5, r1, #1
 8007786:	4355      	muls	r5, r2
 8007788:	460e      	mov	r6, r1
 800778a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800778e:	f000 f997 	bl	8007ac0 <_malloc_r>
 8007792:	4604      	mov	r4, r0
 8007794:	b140      	cbz	r0, 80077a8 <__sfmoreglue+0x28>
 8007796:	2100      	movs	r1, #0
 8007798:	e9c0 1600 	strd	r1, r6, [r0]
 800779c:	300c      	adds	r0, #12
 800779e:	60a0      	str	r0, [r4, #8]
 80077a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077a4:	f7ff fdaa 	bl	80072fc <memset>
 80077a8:	4620      	mov	r0, r4
 80077aa:	bd70      	pop	{r4, r5, r6, pc}

080077ac <__sfp_lock_acquire>:
 80077ac:	4801      	ldr	r0, [pc, #4]	; (80077b4 <__sfp_lock_acquire+0x8>)
 80077ae:	f000 b8b3 	b.w	8007918 <__retarget_lock_acquire_recursive>
 80077b2:	bf00      	nop
 80077b4:	200002c5 	.word	0x200002c5

080077b8 <__sfp_lock_release>:
 80077b8:	4801      	ldr	r0, [pc, #4]	; (80077c0 <__sfp_lock_release+0x8>)
 80077ba:	f000 b8ae 	b.w	800791a <__retarget_lock_release_recursive>
 80077be:	bf00      	nop
 80077c0:	200002c5 	.word	0x200002c5

080077c4 <__sinit_lock_acquire>:
 80077c4:	4801      	ldr	r0, [pc, #4]	; (80077cc <__sinit_lock_acquire+0x8>)
 80077c6:	f000 b8a7 	b.w	8007918 <__retarget_lock_acquire_recursive>
 80077ca:	bf00      	nop
 80077cc:	200002c6 	.word	0x200002c6

080077d0 <__sinit_lock_release>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sinit_lock_release+0x8>)
 80077d2:	f000 b8a2 	b.w	800791a <__retarget_lock_release_recursive>
 80077d6:	bf00      	nop
 80077d8:	200002c6 	.word	0x200002c6

080077dc <__sinit>:
 80077dc:	b510      	push	{r4, lr}
 80077de:	4604      	mov	r4, r0
 80077e0:	f7ff fff0 	bl	80077c4 <__sinit_lock_acquire>
 80077e4:	69a3      	ldr	r3, [r4, #24]
 80077e6:	b11b      	cbz	r3, 80077f0 <__sinit+0x14>
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f7ff bff0 	b.w	80077d0 <__sinit_lock_release>
 80077f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077f4:	6523      	str	r3, [r4, #80]	; 0x50
 80077f6:	4b13      	ldr	r3, [pc, #76]	; (8007844 <__sinit+0x68>)
 80077f8:	4a13      	ldr	r2, [pc, #76]	; (8007848 <__sinit+0x6c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80077fe:	42a3      	cmp	r3, r4
 8007800:	bf04      	itt	eq
 8007802:	2301      	moveq	r3, #1
 8007804:	61a3      	streq	r3, [r4, #24]
 8007806:	4620      	mov	r0, r4
 8007808:	f000 f820 	bl	800784c <__sfp>
 800780c:	6060      	str	r0, [r4, #4]
 800780e:	4620      	mov	r0, r4
 8007810:	f000 f81c 	bl	800784c <__sfp>
 8007814:	60a0      	str	r0, [r4, #8]
 8007816:	4620      	mov	r0, r4
 8007818:	f000 f818 	bl	800784c <__sfp>
 800781c:	2200      	movs	r2, #0
 800781e:	60e0      	str	r0, [r4, #12]
 8007820:	2104      	movs	r1, #4
 8007822:	6860      	ldr	r0, [r4, #4]
 8007824:	f7ff ff82 	bl	800772c <std>
 8007828:	68a0      	ldr	r0, [r4, #8]
 800782a:	2201      	movs	r2, #1
 800782c:	2109      	movs	r1, #9
 800782e:	f7ff ff7d 	bl	800772c <std>
 8007832:	68e0      	ldr	r0, [r4, #12]
 8007834:	2202      	movs	r2, #2
 8007836:	2112      	movs	r1, #18
 8007838:	f7ff ff78 	bl	800772c <std>
 800783c:	2301      	movs	r3, #1
 800783e:	61a3      	str	r3, [r4, #24]
 8007840:	e7d2      	b.n	80077e8 <__sinit+0xc>
 8007842:	bf00      	nop
 8007844:	08008588 	.word	0x08008588
 8007848:	08007775 	.word	0x08007775

0800784c <__sfp>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	4607      	mov	r7, r0
 8007850:	f7ff ffac 	bl	80077ac <__sfp_lock_acquire>
 8007854:	4b1e      	ldr	r3, [pc, #120]	; (80078d0 <__sfp+0x84>)
 8007856:	681e      	ldr	r6, [r3, #0]
 8007858:	69b3      	ldr	r3, [r6, #24]
 800785a:	b913      	cbnz	r3, 8007862 <__sfp+0x16>
 800785c:	4630      	mov	r0, r6
 800785e:	f7ff ffbd 	bl	80077dc <__sinit>
 8007862:	3648      	adds	r6, #72	; 0x48
 8007864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007868:	3b01      	subs	r3, #1
 800786a:	d503      	bpl.n	8007874 <__sfp+0x28>
 800786c:	6833      	ldr	r3, [r6, #0]
 800786e:	b30b      	cbz	r3, 80078b4 <__sfp+0x68>
 8007870:	6836      	ldr	r6, [r6, #0]
 8007872:	e7f7      	b.n	8007864 <__sfp+0x18>
 8007874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007878:	b9d5      	cbnz	r5, 80078b0 <__sfp+0x64>
 800787a:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <__sfp+0x88>)
 800787c:	60e3      	str	r3, [r4, #12]
 800787e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007882:	6665      	str	r5, [r4, #100]	; 0x64
 8007884:	f000 f847 	bl	8007916 <__retarget_lock_init_recursive>
 8007888:	f7ff ff96 	bl	80077b8 <__sfp_lock_release>
 800788c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007894:	6025      	str	r5, [r4, #0]
 8007896:	61a5      	str	r5, [r4, #24]
 8007898:	2208      	movs	r2, #8
 800789a:	4629      	mov	r1, r5
 800789c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078a0:	f7ff fd2c 	bl	80072fc <memset>
 80078a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078ac:	4620      	mov	r0, r4
 80078ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b0:	3468      	adds	r4, #104	; 0x68
 80078b2:	e7d9      	b.n	8007868 <__sfp+0x1c>
 80078b4:	2104      	movs	r1, #4
 80078b6:	4638      	mov	r0, r7
 80078b8:	f7ff ff62 	bl	8007780 <__sfmoreglue>
 80078bc:	4604      	mov	r4, r0
 80078be:	6030      	str	r0, [r6, #0]
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d1d5      	bne.n	8007870 <__sfp+0x24>
 80078c4:	f7ff ff78 	bl	80077b8 <__sfp_lock_release>
 80078c8:	230c      	movs	r3, #12
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	e7ee      	b.n	80078ac <__sfp+0x60>
 80078ce:	bf00      	nop
 80078d0:	08008588 	.word	0x08008588
 80078d4:	ffff0001 	.word	0xffff0001

080078d8 <_fwalk_reent>:
 80078d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078dc:	4606      	mov	r6, r0
 80078de:	4688      	mov	r8, r1
 80078e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078e4:	2700      	movs	r7, #0
 80078e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ea:	f1b9 0901 	subs.w	r9, r9, #1
 80078ee:	d505      	bpl.n	80078fc <_fwalk_reent+0x24>
 80078f0:	6824      	ldr	r4, [r4, #0]
 80078f2:	2c00      	cmp	r4, #0
 80078f4:	d1f7      	bne.n	80078e6 <_fwalk_reent+0xe>
 80078f6:	4638      	mov	r0, r7
 80078f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078fc:	89ab      	ldrh	r3, [r5, #12]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d907      	bls.n	8007912 <_fwalk_reent+0x3a>
 8007902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007906:	3301      	adds	r3, #1
 8007908:	d003      	beq.n	8007912 <_fwalk_reent+0x3a>
 800790a:	4629      	mov	r1, r5
 800790c:	4630      	mov	r0, r6
 800790e:	47c0      	blx	r8
 8007910:	4307      	orrs	r7, r0
 8007912:	3568      	adds	r5, #104	; 0x68
 8007914:	e7e9      	b.n	80078ea <_fwalk_reent+0x12>

08007916 <__retarget_lock_init_recursive>:
 8007916:	4770      	bx	lr

08007918 <__retarget_lock_acquire_recursive>:
 8007918:	4770      	bx	lr

0800791a <__retarget_lock_release_recursive>:
 800791a:	4770      	bx	lr

0800791c <__swhatbuf_r>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	460e      	mov	r6, r1
 8007920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007924:	2900      	cmp	r1, #0
 8007926:	b096      	sub	sp, #88	; 0x58
 8007928:	4614      	mov	r4, r2
 800792a:	461d      	mov	r5, r3
 800792c:	da08      	bge.n	8007940 <__swhatbuf_r+0x24>
 800792e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	602a      	str	r2, [r5, #0]
 8007936:	061a      	lsls	r2, r3, #24
 8007938:	d410      	bmi.n	800795c <__swhatbuf_r+0x40>
 800793a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793e:	e00e      	b.n	800795e <__swhatbuf_r+0x42>
 8007940:	466a      	mov	r2, sp
 8007942:	f000 fc95 	bl	8008270 <_fstat_r>
 8007946:	2800      	cmp	r0, #0
 8007948:	dbf1      	blt.n	800792e <__swhatbuf_r+0x12>
 800794a:	9a01      	ldr	r2, [sp, #4]
 800794c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007954:	425a      	negs	r2, r3
 8007956:	415a      	adcs	r2, r3
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	e7ee      	b.n	800793a <__swhatbuf_r+0x1e>
 800795c:	2340      	movs	r3, #64	; 0x40
 800795e:	2000      	movs	r0, #0
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	b016      	add	sp, #88	; 0x58
 8007964:	bd70      	pop	{r4, r5, r6, pc}
	...

08007968 <__smakebuf_r>:
 8007968:	898b      	ldrh	r3, [r1, #12]
 800796a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800796c:	079d      	lsls	r5, r3, #30
 800796e:	4606      	mov	r6, r0
 8007970:	460c      	mov	r4, r1
 8007972:	d507      	bpl.n	8007984 <__smakebuf_r+0x1c>
 8007974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	2301      	movs	r3, #1
 800797e:	6163      	str	r3, [r4, #20]
 8007980:	b002      	add	sp, #8
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	ab01      	add	r3, sp, #4
 8007986:	466a      	mov	r2, sp
 8007988:	f7ff ffc8 	bl	800791c <__swhatbuf_r>
 800798c:	9900      	ldr	r1, [sp, #0]
 800798e:	4605      	mov	r5, r0
 8007990:	4630      	mov	r0, r6
 8007992:	f000 f895 	bl	8007ac0 <_malloc_r>
 8007996:	b948      	cbnz	r0, 80079ac <__smakebuf_r+0x44>
 8007998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800799c:	059a      	lsls	r2, r3, #22
 800799e:	d4ef      	bmi.n	8007980 <__smakebuf_r+0x18>
 80079a0:	f023 0303 	bic.w	r3, r3, #3
 80079a4:	f043 0302 	orr.w	r3, r3, #2
 80079a8:	81a3      	strh	r3, [r4, #12]
 80079aa:	e7e3      	b.n	8007974 <__smakebuf_r+0xc>
 80079ac:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <__smakebuf_r+0x7c>)
 80079ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	6020      	str	r0, [r4, #0]
 80079b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	9b00      	ldr	r3, [sp, #0]
 80079bc:	6163      	str	r3, [r4, #20]
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	6120      	str	r0, [r4, #16]
 80079c2:	b15b      	cbz	r3, 80079dc <__smakebuf_r+0x74>
 80079c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079c8:	4630      	mov	r0, r6
 80079ca:	f000 fc63 	bl	8008294 <_isatty_r>
 80079ce:	b128      	cbz	r0, 80079dc <__smakebuf_r+0x74>
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	f023 0303 	bic.w	r3, r3, #3
 80079d6:	f043 0301 	orr.w	r3, r3, #1
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	89a0      	ldrh	r0, [r4, #12]
 80079de:	4305      	orrs	r5, r0
 80079e0:	81a5      	strh	r5, [r4, #12]
 80079e2:	e7cd      	b.n	8007980 <__smakebuf_r+0x18>
 80079e4:	08007775 	.word	0x08007775

080079e8 <_free_r>:
 80079e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ea:	2900      	cmp	r1, #0
 80079ec:	d044      	beq.n	8007a78 <_free_r+0x90>
 80079ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079f2:	9001      	str	r0, [sp, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f1a1 0404 	sub.w	r4, r1, #4
 80079fa:	bfb8      	it	lt
 80079fc:	18e4      	addlt	r4, r4, r3
 80079fe:	f000 fc6b 	bl	80082d8 <__malloc_lock>
 8007a02:	4a1e      	ldr	r2, [pc, #120]	; (8007a7c <_free_r+0x94>)
 8007a04:	9801      	ldr	r0, [sp, #4]
 8007a06:	6813      	ldr	r3, [r2, #0]
 8007a08:	b933      	cbnz	r3, 8007a18 <_free_r+0x30>
 8007a0a:	6063      	str	r3, [r4, #4]
 8007a0c:	6014      	str	r4, [r2, #0]
 8007a0e:	b003      	add	sp, #12
 8007a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a14:	f000 bc66 	b.w	80082e4 <__malloc_unlock>
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	d908      	bls.n	8007a2e <_free_r+0x46>
 8007a1c:	6825      	ldr	r5, [r4, #0]
 8007a1e:	1961      	adds	r1, r4, r5
 8007a20:	428b      	cmp	r3, r1
 8007a22:	bf01      	itttt	eq
 8007a24:	6819      	ldreq	r1, [r3, #0]
 8007a26:	685b      	ldreq	r3, [r3, #4]
 8007a28:	1949      	addeq	r1, r1, r5
 8007a2a:	6021      	streq	r1, [r4, #0]
 8007a2c:	e7ed      	b.n	8007a0a <_free_r+0x22>
 8007a2e:	461a      	mov	r2, r3
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	b10b      	cbz	r3, 8007a38 <_free_r+0x50>
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	d9fa      	bls.n	8007a2e <_free_r+0x46>
 8007a38:	6811      	ldr	r1, [r2, #0]
 8007a3a:	1855      	adds	r5, r2, r1
 8007a3c:	42a5      	cmp	r5, r4
 8007a3e:	d10b      	bne.n	8007a58 <_free_r+0x70>
 8007a40:	6824      	ldr	r4, [r4, #0]
 8007a42:	4421      	add	r1, r4
 8007a44:	1854      	adds	r4, r2, r1
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	6011      	str	r1, [r2, #0]
 8007a4a:	d1e0      	bne.n	8007a0e <_free_r+0x26>
 8007a4c:	681c      	ldr	r4, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	6053      	str	r3, [r2, #4]
 8007a52:	4421      	add	r1, r4
 8007a54:	6011      	str	r1, [r2, #0]
 8007a56:	e7da      	b.n	8007a0e <_free_r+0x26>
 8007a58:	d902      	bls.n	8007a60 <_free_r+0x78>
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	6003      	str	r3, [r0, #0]
 8007a5e:	e7d6      	b.n	8007a0e <_free_r+0x26>
 8007a60:	6825      	ldr	r5, [r4, #0]
 8007a62:	1961      	adds	r1, r4, r5
 8007a64:	428b      	cmp	r3, r1
 8007a66:	bf04      	itt	eq
 8007a68:	6819      	ldreq	r1, [r3, #0]
 8007a6a:	685b      	ldreq	r3, [r3, #4]
 8007a6c:	6063      	str	r3, [r4, #4]
 8007a6e:	bf04      	itt	eq
 8007a70:	1949      	addeq	r1, r1, r5
 8007a72:	6021      	streq	r1, [r4, #0]
 8007a74:	6054      	str	r4, [r2, #4]
 8007a76:	e7ca      	b.n	8007a0e <_free_r+0x26>
 8007a78:	b003      	add	sp, #12
 8007a7a:	bd30      	pop	{r4, r5, pc}
 8007a7c:	200002c8 	.word	0x200002c8

08007a80 <sbrk_aligned>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	4e0e      	ldr	r6, [pc, #56]	; (8007abc <sbrk_aligned+0x3c>)
 8007a84:	460c      	mov	r4, r1
 8007a86:	6831      	ldr	r1, [r6, #0]
 8007a88:	4605      	mov	r5, r0
 8007a8a:	b911      	cbnz	r1, 8007a92 <sbrk_aligned+0x12>
 8007a8c:	f000 fb7a 	bl	8008184 <_sbrk_r>
 8007a90:	6030      	str	r0, [r6, #0]
 8007a92:	4621      	mov	r1, r4
 8007a94:	4628      	mov	r0, r5
 8007a96:	f000 fb75 	bl	8008184 <_sbrk_r>
 8007a9a:	1c43      	adds	r3, r0, #1
 8007a9c:	d00a      	beq.n	8007ab4 <sbrk_aligned+0x34>
 8007a9e:	1cc4      	adds	r4, r0, #3
 8007aa0:	f024 0403 	bic.w	r4, r4, #3
 8007aa4:	42a0      	cmp	r0, r4
 8007aa6:	d007      	beq.n	8007ab8 <sbrk_aligned+0x38>
 8007aa8:	1a21      	subs	r1, r4, r0
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 fb6a 	bl	8008184 <_sbrk_r>
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d101      	bne.n	8007ab8 <sbrk_aligned+0x38>
 8007ab4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ab8:	4620      	mov	r0, r4
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	200002cc 	.word	0x200002cc

08007ac0 <_malloc_r>:
 8007ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac4:	1ccd      	adds	r5, r1, #3
 8007ac6:	f025 0503 	bic.w	r5, r5, #3
 8007aca:	3508      	adds	r5, #8
 8007acc:	2d0c      	cmp	r5, #12
 8007ace:	bf38      	it	cc
 8007ad0:	250c      	movcc	r5, #12
 8007ad2:	2d00      	cmp	r5, #0
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	db01      	blt.n	8007adc <_malloc_r+0x1c>
 8007ad8:	42a9      	cmp	r1, r5
 8007ada:	d905      	bls.n	8007ae8 <_malloc_r+0x28>
 8007adc:	230c      	movs	r3, #12
 8007ade:	603b      	str	r3, [r7, #0]
 8007ae0:	2600      	movs	r6, #0
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae8:	4e2e      	ldr	r6, [pc, #184]	; (8007ba4 <_malloc_r+0xe4>)
 8007aea:	f000 fbf5 	bl	80082d8 <__malloc_lock>
 8007aee:	6833      	ldr	r3, [r6, #0]
 8007af0:	461c      	mov	r4, r3
 8007af2:	bb34      	cbnz	r4, 8007b42 <_malloc_r+0x82>
 8007af4:	4629      	mov	r1, r5
 8007af6:	4638      	mov	r0, r7
 8007af8:	f7ff ffc2 	bl	8007a80 <sbrk_aligned>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	4604      	mov	r4, r0
 8007b00:	d14d      	bne.n	8007b9e <_malloc_r+0xde>
 8007b02:	6834      	ldr	r4, [r6, #0]
 8007b04:	4626      	mov	r6, r4
 8007b06:	2e00      	cmp	r6, #0
 8007b08:	d140      	bne.n	8007b8c <_malloc_r+0xcc>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4638      	mov	r0, r7
 8007b10:	eb04 0803 	add.w	r8, r4, r3
 8007b14:	f000 fb36 	bl	8008184 <_sbrk_r>
 8007b18:	4580      	cmp	r8, r0
 8007b1a:	d13a      	bne.n	8007b92 <_malloc_r+0xd2>
 8007b1c:	6821      	ldr	r1, [r4, #0]
 8007b1e:	3503      	adds	r5, #3
 8007b20:	1a6d      	subs	r5, r5, r1
 8007b22:	f025 0503 	bic.w	r5, r5, #3
 8007b26:	3508      	adds	r5, #8
 8007b28:	2d0c      	cmp	r5, #12
 8007b2a:	bf38      	it	cc
 8007b2c:	250c      	movcc	r5, #12
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7ff ffa5 	bl	8007a80 <sbrk_aligned>
 8007b36:	3001      	adds	r0, #1
 8007b38:	d02b      	beq.n	8007b92 <_malloc_r+0xd2>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	442b      	add	r3, r5
 8007b3e:	6023      	str	r3, [r4, #0]
 8007b40:	e00e      	b.n	8007b60 <_malloc_r+0xa0>
 8007b42:	6822      	ldr	r2, [r4, #0]
 8007b44:	1b52      	subs	r2, r2, r5
 8007b46:	d41e      	bmi.n	8007b86 <_malloc_r+0xc6>
 8007b48:	2a0b      	cmp	r2, #11
 8007b4a:	d916      	bls.n	8007b7a <_malloc_r+0xba>
 8007b4c:	1961      	adds	r1, r4, r5
 8007b4e:	42a3      	cmp	r3, r4
 8007b50:	6025      	str	r5, [r4, #0]
 8007b52:	bf18      	it	ne
 8007b54:	6059      	strne	r1, [r3, #4]
 8007b56:	6863      	ldr	r3, [r4, #4]
 8007b58:	bf08      	it	eq
 8007b5a:	6031      	streq	r1, [r6, #0]
 8007b5c:	5162      	str	r2, [r4, r5]
 8007b5e:	604b      	str	r3, [r1, #4]
 8007b60:	4638      	mov	r0, r7
 8007b62:	f104 060b 	add.w	r6, r4, #11
 8007b66:	f000 fbbd 	bl	80082e4 <__malloc_unlock>
 8007b6a:	f026 0607 	bic.w	r6, r6, #7
 8007b6e:	1d23      	adds	r3, r4, #4
 8007b70:	1af2      	subs	r2, r6, r3
 8007b72:	d0b6      	beq.n	8007ae2 <_malloc_r+0x22>
 8007b74:	1b9b      	subs	r3, r3, r6
 8007b76:	50a3      	str	r3, [r4, r2]
 8007b78:	e7b3      	b.n	8007ae2 <_malloc_r+0x22>
 8007b7a:	6862      	ldr	r2, [r4, #4]
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	bf0c      	ite	eq
 8007b80:	6032      	streq	r2, [r6, #0]
 8007b82:	605a      	strne	r2, [r3, #4]
 8007b84:	e7ec      	b.n	8007b60 <_malloc_r+0xa0>
 8007b86:	4623      	mov	r3, r4
 8007b88:	6864      	ldr	r4, [r4, #4]
 8007b8a:	e7b2      	b.n	8007af2 <_malloc_r+0x32>
 8007b8c:	4634      	mov	r4, r6
 8007b8e:	6876      	ldr	r6, [r6, #4]
 8007b90:	e7b9      	b.n	8007b06 <_malloc_r+0x46>
 8007b92:	230c      	movs	r3, #12
 8007b94:	603b      	str	r3, [r7, #0]
 8007b96:	4638      	mov	r0, r7
 8007b98:	f000 fba4 	bl	80082e4 <__malloc_unlock>
 8007b9c:	e7a1      	b.n	8007ae2 <_malloc_r+0x22>
 8007b9e:	6025      	str	r5, [r4, #0]
 8007ba0:	e7de      	b.n	8007b60 <_malloc_r+0xa0>
 8007ba2:	bf00      	nop
 8007ba4:	200002c8 	.word	0x200002c8

08007ba8 <__sfputc_r>:
 8007ba8:	6893      	ldr	r3, [r2, #8]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	b410      	push	{r4}
 8007bb0:	6093      	str	r3, [r2, #8]
 8007bb2:	da08      	bge.n	8007bc6 <__sfputc_r+0x1e>
 8007bb4:	6994      	ldr	r4, [r2, #24]
 8007bb6:	42a3      	cmp	r3, r4
 8007bb8:	db01      	blt.n	8007bbe <__sfputc_r+0x16>
 8007bba:	290a      	cmp	r1, #10
 8007bbc:	d103      	bne.n	8007bc6 <__sfputc_r+0x1e>
 8007bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc2:	f7ff bc31 	b.w	8007428 <__swbuf_r>
 8007bc6:	6813      	ldr	r3, [r2, #0]
 8007bc8:	1c58      	adds	r0, r3, #1
 8007bca:	6010      	str	r0, [r2, #0]
 8007bcc:	7019      	strb	r1, [r3, #0]
 8007bce:	4608      	mov	r0, r1
 8007bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <__sfputs_r>:
 8007bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd8:	4606      	mov	r6, r0
 8007bda:	460f      	mov	r7, r1
 8007bdc:	4614      	mov	r4, r2
 8007bde:	18d5      	adds	r5, r2, r3
 8007be0:	42ac      	cmp	r4, r5
 8007be2:	d101      	bne.n	8007be8 <__sfputs_r+0x12>
 8007be4:	2000      	movs	r0, #0
 8007be6:	e007      	b.n	8007bf8 <__sfputs_r+0x22>
 8007be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bec:	463a      	mov	r2, r7
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f7ff ffda 	bl	8007ba8 <__sfputc_r>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d1f3      	bne.n	8007be0 <__sfputs_r+0xa>
 8007bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bfc <_vfiprintf_r>:
 8007bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c00:	460d      	mov	r5, r1
 8007c02:	b09d      	sub	sp, #116	; 0x74
 8007c04:	4614      	mov	r4, r2
 8007c06:	4698      	mov	r8, r3
 8007c08:	4606      	mov	r6, r0
 8007c0a:	b118      	cbz	r0, 8007c14 <_vfiprintf_r+0x18>
 8007c0c:	6983      	ldr	r3, [r0, #24]
 8007c0e:	b90b      	cbnz	r3, 8007c14 <_vfiprintf_r+0x18>
 8007c10:	f7ff fde4 	bl	80077dc <__sinit>
 8007c14:	4b89      	ldr	r3, [pc, #548]	; (8007e3c <_vfiprintf_r+0x240>)
 8007c16:	429d      	cmp	r5, r3
 8007c18:	d11b      	bne.n	8007c52 <_vfiprintf_r+0x56>
 8007c1a:	6875      	ldr	r5, [r6, #4]
 8007c1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c1e:	07d9      	lsls	r1, r3, #31
 8007c20:	d405      	bmi.n	8007c2e <_vfiprintf_r+0x32>
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	059a      	lsls	r2, r3, #22
 8007c26:	d402      	bmi.n	8007c2e <_vfiprintf_r+0x32>
 8007c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c2a:	f7ff fe75 	bl	8007918 <__retarget_lock_acquire_recursive>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	071b      	lsls	r3, r3, #28
 8007c32:	d501      	bpl.n	8007c38 <_vfiprintf_r+0x3c>
 8007c34:	692b      	ldr	r3, [r5, #16]
 8007c36:	b9eb      	cbnz	r3, 8007c74 <_vfiprintf_r+0x78>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f7ff fc46 	bl	80074cc <__swsetup_r>
 8007c40:	b1c0      	cbz	r0, 8007c74 <_vfiprintf_r+0x78>
 8007c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c44:	07dc      	lsls	r4, r3, #31
 8007c46:	d50e      	bpl.n	8007c66 <_vfiprintf_r+0x6a>
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4c:	b01d      	add	sp, #116	; 0x74
 8007c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c52:	4b7b      	ldr	r3, [pc, #492]	; (8007e40 <_vfiprintf_r+0x244>)
 8007c54:	429d      	cmp	r5, r3
 8007c56:	d101      	bne.n	8007c5c <_vfiprintf_r+0x60>
 8007c58:	68b5      	ldr	r5, [r6, #8]
 8007c5a:	e7df      	b.n	8007c1c <_vfiprintf_r+0x20>
 8007c5c:	4b79      	ldr	r3, [pc, #484]	; (8007e44 <_vfiprintf_r+0x248>)
 8007c5e:	429d      	cmp	r5, r3
 8007c60:	bf08      	it	eq
 8007c62:	68f5      	ldreq	r5, [r6, #12]
 8007c64:	e7da      	b.n	8007c1c <_vfiprintf_r+0x20>
 8007c66:	89ab      	ldrh	r3, [r5, #12]
 8007c68:	0598      	lsls	r0, r3, #22
 8007c6a:	d4ed      	bmi.n	8007c48 <_vfiprintf_r+0x4c>
 8007c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c6e:	f7ff fe54 	bl	800791a <__retarget_lock_release_recursive>
 8007c72:	e7e9      	b.n	8007c48 <_vfiprintf_r+0x4c>
 8007c74:	2300      	movs	r3, #0
 8007c76:	9309      	str	r3, [sp, #36]	; 0x24
 8007c78:	2320      	movs	r3, #32
 8007c7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c82:	2330      	movs	r3, #48	; 0x30
 8007c84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e48 <_vfiprintf_r+0x24c>
 8007c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c8c:	f04f 0901 	mov.w	r9, #1
 8007c90:	4623      	mov	r3, r4
 8007c92:	469a      	mov	sl, r3
 8007c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c98:	b10a      	cbz	r2, 8007c9e <_vfiprintf_r+0xa2>
 8007c9a:	2a25      	cmp	r2, #37	; 0x25
 8007c9c:	d1f9      	bne.n	8007c92 <_vfiprintf_r+0x96>
 8007c9e:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca2:	d00b      	beq.n	8007cbc <_vfiprintf_r+0xc0>
 8007ca4:	465b      	mov	r3, fp
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7ff ff93 	bl	8007bd6 <__sfputs_r>
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	f000 80aa 	beq.w	8007e0a <_vfiprintf_r+0x20e>
 8007cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb8:	445a      	add	r2, fp
 8007cba:	9209      	str	r2, [sp, #36]	; 0x24
 8007cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 80a2 	beq.w	8007e0a <_vfiprintf_r+0x20e>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd0:	f10a 0a01 	add.w	sl, sl, #1
 8007cd4:	9304      	str	r3, [sp, #16]
 8007cd6:	9307      	str	r3, [sp, #28]
 8007cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8007cde:	4654      	mov	r4, sl
 8007ce0:	2205      	movs	r2, #5
 8007ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce6:	4858      	ldr	r0, [pc, #352]	; (8007e48 <_vfiprintf_r+0x24c>)
 8007ce8:	f7f8 fa7a 	bl	80001e0 <memchr>
 8007cec:	9a04      	ldr	r2, [sp, #16]
 8007cee:	b9d8      	cbnz	r0, 8007d28 <_vfiprintf_r+0x12c>
 8007cf0:	06d1      	lsls	r1, r2, #27
 8007cf2:	bf44      	itt	mi
 8007cf4:	2320      	movmi	r3, #32
 8007cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cfa:	0713      	lsls	r3, r2, #28
 8007cfc:	bf44      	itt	mi
 8007cfe:	232b      	movmi	r3, #43	; 0x2b
 8007d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d04:	f89a 3000 	ldrb.w	r3, [sl]
 8007d08:	2b2a      	cmp	r3, #42	; 0x2a
 8007d0a:	d015      	beq.n	8007d38 <_vfiprintf_r+0x13c>
 8007d0c:	9a07      	ldr	r2, [sp, #28]
 8007d0e:	4654      	mov	r4, sl
 8007d10:	2000      	movs	r0, #0
 8007d12:	f04f 0c0a 	mov.w	ip, #10
 8007d16:	4621      	mov	r1, r4
 8007d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d1c:	3b30      	subs	r3, #48	; 0x30
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d94e      	bls.n	8007dc0 <_vfiprintf_r+0x1c4>
 8007d22:	b1b0      	cbz	r0, 8007d52 <_vfiprintf_r+0x156>
 8007d24:	9207      	str	r2, [sp, #28]
 8007d26:	e014      	b.n	8007d52 <_vfiprintf_r+0x156>
 8007d28:	eba0 0308 	sub.w	r3, r0, r8
 8007d2c:	fa09 f303 	lsl.w	r3, r9, r3
 8007d30:	4313      	orrs	r3, r2
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	46a2      	mov	sl, r4
 8007d36:	e7d2      	b.n	8007cde <_vfiprintf_r+0xe2>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	1d19      	adds	r1, r3, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	9103      	str	r1, [sp, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bfbb      	ittet	lt
 8007d44:	425b      	neglt	r3, r3
 8007d46:	f042 0202 	orrlt.w	r2, r2, #2
 8007d4a:	9307      	strge	r3, [sp, #28]
 8007d4c:	9307      	strlt	r3, [sp, #28]
 8007d4e:	bfb8      	it	lt
 8007d50:	9204      	strlt	r2, [sp, #16]
 8007d52:	7823      	ldrb	r3, [r4, #0]
 8007d54:	2b2e      	cmp	r3, #46	; 0x2e
 8007d56:	d10c      	bne.n	8007d72 <_vfiprintf_r+0x176>
 8007d58:	7863      	ldrb	r3, [r4, #1]
 8007d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5c:	d135      	bne.n	8007dca <_vfiprintf_r+0x1ce>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	1d1a      	adds	r2, r3, #4
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	9203      	str	r2, [sp, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bfb8      	it	lt
 8007d6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d6e:	3402      	adds	r4, #2
 8007d70:	9305      	str	r3, [sp, #20]
 8007d72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e58 <_vfiprintf_r+0x25c>
 8007d76:	7821      	ldrb	r1, [r4, #0]
 8007d78:	2203      	movs	r2, #3
 8007d7a:	4650      	mov	r0, sl
 8007d7c:	f7f8 fa30 	bl	80001e0 <memchr>
 8007d80:	b140      	cbz	r0, 8007d94 <_vfiprintf_r+0x198>
 8007d82:	2340      	movs	r3, #64	; 0x40
 8007d84:	eba0 000a 	sub.w	r0, r0, sl
 8007d88:	fa03 f000 	lsl.w	r0, r3, r0
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	4303      	orrs	r3, r0
 8007d90:	3401      	adds	r4, #1
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d98:	482c      	ldr	r0, [pc, #176]	; (8007e4c <_vfiprintf_r+0x250>)
 8007d9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d9e:	2206      	movs	r2, #6
 8007da0:	f7f8 fa1e 	bl	80001e0 <memchr>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d03f      	beq.n	8007e28 <_vfiprintf_r+0x22c>
 8007da8:	4b29      	ldr	r3, [pc, #164]	; (8007e50 <_vfiprintf_r+0x254>)
 8007daa:	bb1b      	cbnz	r3, 8007df4 <_vfiprintf_r+0x1f8>
 8007dac:	9b03      	ldr	r3, [sp, #12]
 8007dae:	3307      	adds	r3, #7
 8007db0:	f023 0307 	bic.w	r3, r3, #7
 8007db4:	3308      	adds	r3, #8
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dba:	443b      	add	r3, r7
 8007dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbe:	e767      	b.n	8007c90 <_vfiprintf_r+0x94>
 8007dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	e7a5      	b.n	8007d16 <_vfiprintf_r+0x11a>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	3401      	adds	r4, #1
 8007dce:	9305      	str	r3, [sp, #20]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f04f 0c0a 	mov.w	ip, #10
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ddc:	3a30      	subs	r2, #48	; 0x30
 8007dde:	2a09      	cmp	r2, #9
 8007de0:	d903      	bls.n	8007dea <_vfiprintf_r+0x1ee>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0c5      	beq.n	8007d72 <_vfiprintf_r+0x176>
 8007de6:	9105      	str	r1, [sp, #20]
 8007de8:	e7c3      	b.n	8007d72 <_vfiprintf_r+0x176>
 8007dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dee:	4604      	mov	r4, r0
 8007df0:	2301      	movs	r3, #1
 8007df2:	e7f0      	b.n	8007dd6 <_vfiprintf_r+0x1da>
 8007df4:	ab03      	add	r3, sp, #12
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	462a      	mov	r2, r5
 8007dfa:	4b16      	ldr	r3, [pc, #88]	; (8007e54 <_vfiprintf_r+0x258>)
 8007dfc:	a904      	add	r1, sp, #16
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f3af 8000 	nop.w
 8007e04:	4607      	mov	r7, r0
 8007e06:	1c78      	adds	r0, r7, #1
 8007e08:	d1d6      	bne.n	8007db8 <_vfiprintf_r+0x1bc>
 8007e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e0c:	07d9      	lsls	r1, r3, #31
 8007e0e:	d405      	bmi.n	8007e1c <_vfiprintf_r+0x220>
 8007e10:	89ab      	ldrh	r3, [r5, #12]
 8007e12:	059a      	lsls	r2, r3, #22
 8007e14:	d402      	bmi.n	8007e1c <_vfiprintf_r+0x220>
 8007e16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e18:	f7ff fd7f 	bl	800791a <__retarget_lock_release_recursive>
 8007e1c:	89ab      	ldrh	r3, [r5, #12]
 8007e1e:	065b      	lsls	r3, r3, #25
 8007e20:	f53f af12 	bmi.w	8007c48 <_vfiprintf_r+0x4c>
 8007e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e26:	e711      	b.n	8007c4c <_vfiprintf_r+0x50>
 8007e28:	ab03      	add	r3, sp, #12
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <_vfiprintf_r+0x258>)
 8007e30:	a904      	add	r1, sp, #16
 8007e32:	4630      	mov	r0, r6
 8007e34:	f000 f880 	bl	8007f38 <_printf_i>
 8007e38:	e7e4      	b.n	8007e04 <_vfiprintf_r+0x208>
 8007e3a:	bf00      	nop
 8007e3c:	080085ac 	.word	0x080085ac
 8007e40:	080085cc 	.word	0x080085cc
 8007e44:	0800858c 	.word	0x0800858c
 8007e48:	080085ec 	.word	0x080085ec
 8007e4c:	080085f6 	.word	0x080085f6
 8007e50:	00000000 	.word	0x00000000
 8007e54:	08007bd7 	.word	0x08007bd7
 8007e58:	080085f2 	.word	0x080085f2

08007e5c <_printf_common>:
 8007e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	4616      	mov	r6, r2
 8007e62:	4699      	mov	r9, r3
 8007e64:	688a      	ldr	r2, [r1, #8]
 8007e66:	690b      	ldr	r3, [r1, #16]
 8007e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	bfb8      	it	lt
 8007e70:	4613      	movlt	r3, r2
 8007e72:	6033      	str	r3, [r6, #0]
 8007e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e78:	4607      	mov	r7, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	b10a      	cbz	r2, 8007e82 <_printf_common+0x26>
 8007e7e:	3301      	adds	r3, #1
 8007e80:	6033      	str	r3, [r6, #0]
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	0699      	lsls	r1, r3, #26
 8007e86:	bf42      	ittt	mi
 8007e88:	6833      	ldrmi	r3, [r6, #0]
 8007e8a:	3302      	addmi	r3, #2
 8007e8c:	6033      	strmi	r3, [r6, #0]
 8007e8e:	6825      	ldr	r5, [r4, #0]
 8007e90:	f015 0506 	ands.w	r5, r5, #6
 8007e94:	d106      	bne.n	8007ea4 <_printf_common+0x48>
 8007e96:	f104 0a19 	add.w	sl, r4, #25
 8007e9a:	68e3      	ldr	r3, [r4, #12]
 8007e9c:	6832      	ldr	r2, [r6, #0]
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	42ab      	cmp	r3, r5
 8007ea2:	dc26      	bgt.n	8007ef2 <_printf_common+0x96>
 8007ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ea8:	1e13      	subs	r3, r2, #0
 8007eaa:	6822      	ldr	r2, [r4, #0]
 8007eac:	bf18      	it	ne
 8007eae:	2301      	movne	r3, #1
 8007eb0:	0692      	lsls	r2, r2, #26
 8007eb2:	d42b      	bmi.n	8007f0c <_printf_common+0xb0>
 8007eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eb8:	4649      	mov	r1, r9
 8007eba:	4638      	mov	r0, r7
 8007ebc:	47c0      	blx	r8
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	d01e      	beq.n	8007f00 <_printf_common+0xa4>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	68e5      	ldr	r5, [r4, #12]
 8007ec6:	6832      	ldr	r2, [r6, #0]
 8007ec8:	f003 0306 	and.w	r3, r3, #6
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	bf08      	it	eq
 8007ed0:	1aad      	subeq	r5, r5, r2
 8007ed2:	68a3      	ldr	r3, [r4, #8]
 8007ed4:	6922      	ldr	r2, [r4, #16]
 8007ed6:	bf0c      	ite	eq
 8007ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007edc:	2500      	movne	r5, #0
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	bfc4      	itt	gt
 8007ee2:	1a9b      	subgt	r3, r3, r2
 8007ee4:	18ed      	addgt	r5, r5, r3
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	341a      	adds	r4, #26
 8007eea:	42b5      	cmp	r5, r6
 8007eec:	d11a      	bne.n	8007f24 <_printf_common+0xc8>
 8007eee:	2000      	movs	r0, #0
 8007ef0:	e008      	b.n	8007f04 <_printf_common+0xa8>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4652      	mov	r2, sl
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	4638      	mov	r0, r7
 8007efa:	47c0      	blx	r8
 8007efc:	3001      	adds	r0, #1
 8007efe:	d103      	bne.n	8007f08 <_printf_common+0xac>
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f08:	3501      	adds	r5, #1
 8007f0a:	e7c6      	b.n	8007e9a <_printf_common+0x3e>
 8007f0c:	18e1      	adds	r1, r4, r3
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	2030      	movs	r0, #48	; 0x30
 8007f12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f16:	4422      	add	r2, r4
 8007f18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f20:	3302      	adds	r3, #2
 8007f22:	e7c7      	b.n	8007eb4 <_printf_common+0x58>
 8007f24:	2301      	movs	r3, #1
 8007f26:	4622      	mov	r2, r4
 8007f28:	4649      	mov	r1, r9
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	47c0      	blx	r8
 8007f2e:	3001      	adds	r0, #1
 8007f30:	d0e6      	beq.n	8007f00 <_printf_common+0xa4>
 8007f32:	3601      	adds	r6, #1
 8007f34:	e7d9      	b.n	8007eea <_printf_common+0x8e>
	...

08007f38 <_printf_i>:
 8007f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	7e0f      	ldrb	r7, [r1, #24]
 8007f3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f40:	2f78      	cmp	r7, #120	; 0x78
 8007f42:	4691      	mov	r9, r2
 8007f44:	4680      	mov	r8, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	469a      	mov	sl, r3
 8007f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f4e:	d807      	bhi.n	8007f60 <_printf_i+0x28>
 8007f50:	2f62      	cmp	r7, #98	; 0x62
 8007f52:	d80a      	bhi.n	8007f6a <_printf_i+0x32>
 8007f54:	2f00      	cmp	r7, #0
 8007f56:	f000 80d8 	beq.w	800810a <_printf_i+0x1d2>
 8007f5a:	2f58      	cmp	r7, #88	; 0x58
 8007f5c:	f000 80a3 	beq.w	80080a6 <_printf_i+0x16e>
 8007f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f68:	e03a      	b.n	8007fe0 <_printf_i+0xa8>
 8007f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f6e:	2b15      	cmp	r3, #21
 8007f70:	d8f6      	bhi.n	8007f60 <_printf_i+0x28>
 8007f72:	a101      	add	r1, pc, #4	; (adr r1, 8007f78 <_printf_i+0x40>)
 8007f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f78:	08007fd1 	.word	0x08007fd1
 8007f7c:	08007fe5 	.word	0x08007fe5
 8007f80:	08007f61 	.word	0x08007f61
 8007f84:	08007f61 	.word	0x08007f61
 8007f88:	08007f61 	.word	0x08007f61
 8007f8c:	08007f61 	.word	0x08007f61
 8007f90:	08007fe5 	.word	0x08007fe5
 8007f94:	08007f61 	.word	0x08007f61
 8007f98:	08007f61 	.word	0x08007f61
 8007f9c:	08007f61 	.word	0x08007f61
 8007fa0:	08007f61 	.word	0x08007f61
 8007fa4:	080080f1 	.word	0x080080f1
 8007fa8:	08008015 	.word	0x08008015
 8007fac:	080080d3 	.word	0x080080d3
 8007fb0:	08007f61 	.word	0x08007f61
 8007fb4:	08007f61 	.word	0x08007f61
 8007fb8:	08008113 	.word	0x08008113
 8007fbc:	08007f61 	.word	0x08007f61
 8007fc0:	08008015 	.word	0x08008015
 8007fc4:	08007f61 	.word	0x08007f61
 8007fc8:	08007f61 	.word	0x08007f61
 8007fcc:	080080db 	.word	0x080080db
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	1d1a      	adds	r2, r3, #4
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	602a      	str	r2, [r5, #0]
 8007fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e0a3      	b.n	800812c <_printf_i+0x1f4>
 8007fe4:	6820      	ldr	r0, [r4, #0]
 8007fe6:	6829      	ldr	r1, [r5, #0]
 8007fe8:	0606      	lsls	r6, r0, #24
 8007fea:	f101 0304 	add.w	r3, r1, #4
 8007fee:	d50a      	bpl.n	8008006 <_printf_i+0xce>
 8007ff0:	680e      	ldr	r6, [r1, #0]
 8007ff2:	602b      	str	r3, [r5, #0]
 8007ff4:	2e00      	cmp	r6, #0
 8007ff6:	da03      	bge.n	8008000 <_printf_i+0xc8>
 8007ff8:	232d      	movs	r3, #45	; 0x2d
 8007ffa:	4276      	negs	r6, r6
 8007ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008000:	485e      	ldr	r0, [pc, #376]	; (800817c <_printf_i+0x244>)
 8008002:	230a      	movs	r3, #10
 8008004:	e019      	b.n	800803a <_printf_i+0x102>
 8008006:	680e      	ldr	r6, [r1, #0]
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800800e:	bf18      	it	ne
 8008010:	b236      	sxthne	r6, r6
 8008012:	e7ef      	b.n	8007ff4 <_printf_i+0xbc>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	6820      	ldr	r0, [r4, #0]
 8008018:	1d19      	adds	r1, r3, #4
 800801a:	6029      	str	r1, [r5, #0]
 800801c:	0601      	lsls	r1, r0, #24
 800801e:	d501      	bpl.n	8008024 <_printf_i+0xec>
 8008020:	681e      	ldr	r6, [r3, #0]
 8008022:	e002      	b.n	800802a <_printf_i+0xf2>
 8008024:	0646      	lsls	r6, r0, #25
 8008026:	d5fb      	bpl.n	8008020 <_printf_i+0xe8>
 8008028:	881e      	ldrh	r6, [r3, #0]
 800802a:	4854      	ldr	r0, [pc, #336]	; (800817c <_printf_i+0x244>)
 800802c:	2f6f      	cmp	r7, #111	; 0x6f
 800802e:	bf0c      	ite	eq
 8008030:	2308      	moveq	r3, #8
 8008032:	230a      	movne	r3, #10
 8008034:	2100      	movs	r1, #0
 8008036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800803a:	6865      	ldr	r5, [r4, #4]
 800803c:	60a5      	str	r5, [r4, #8]
 800803e:	2d00      	cmp	r5, #0
 8008040:	bfa2      	ittt	ge
 8008042:	6821      	ldrge	r1, [r4, #0]
 8008044:	f021 0104 	bicge.w	r1, r1, #4
 8008048:	6021      	strge	r1, [r4, #0]
 800804a:	b90e      	cbnz	r6, 8008050 <_printf_i+0x118>
 800804c:	2d00      	cmp	r5, #0
 800804e:	d04d      	beq.n	80080ec <_printf_i+0x1b4>
 8008050:	4615      	mov	r5, r2
 8008052:	fbb6 f1f3 	udiv	r1, r6, r3
 8008056:	fb03 6711 	mls	r7, r3, r1, r6
 800805a:	5dc7      	ldrb	r7, [r0, r7]
 800805c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008060:	4637      	mov	r7, r6
 8008062:	42bb      	cmp	r3, r7
 8008064:	460e      	mov	r6, r1
 8008066:	d9f4      	bls.n	8008052 <_printf_i+0x11a>
 8008068:	2b08      	cmp	r3, #8
 800806a:	d10b      	bne.n	8008084 <_printf_i+0x14c>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	07de      	lsls	r6, r3, #31
 8008070:	d508      	bpl.n	8008084 <_printf_i+0x14c>
 8008072:	6923      	ldr	r3, [r4, #16]
 8008074:	6861      	ldr	r1, [r4, #4]
 8008076:	4299      	cmp	r1, r3
 8008078:	bfde      	ittt	le
 800807a:	2330      	movle	r3, #48	; 0x30
 800807c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008080:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008084:	1b52      	subs	r2, r2, r5
 8008086:	6122      	str	r2, [r4, #16]
 8008088:	f8cd a000 	str.w	sl, [sp]
 800808c:	464b      	mov	r3, r9
 800808e:	aa03      	add	r2, sp, #12
 8008090:	4621      	mov	r1, r4
 8008092:	4640      	mov	r0, r8
 8008094:	f7ff fee2 	bl	8007e5c <_printf_common>
 8008098:	3001      	adds	r0, #1
 800809a:	d14c      	bne.n	8008136 <_printf_i+0x1fe>
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	b004      	add	sp, #16
 80080a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a6:	4835      	ldr	r0, [pc, #212]	; (800817c <_printf_i+0x244>)
 80080a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080ac:	6829      	ldr	r1, [r5, #0]
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80080b4:	6029      	str	r1, [r5, #0]
 80080b6:	061d      	lsls	r5, r3, #24
 80080b8:	d514      	bpl.n	80080e4 <_printf_i+0x1ac>
 80080ba:	07df      	lsls	r7, r3, #31
 80080bc:	bf44      	itt	mi
 80080be:	f043 0320 	orrmi.w	r3, r3, #32
 80080c2:	6023      	strmi	r3, [r4, #0]
 80080c4:	b91e      	cbnz	r6, 80080ce <_printf_i+0x196>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	f023 0320 	bic.w	r3, r3, #32
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	2310      	movs	r3, #16
 80080d0:	e7b0      	b.n	8008034 <_printf_i+0xfc>
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	f043 0320 	orr.w	r3, r3, #32
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	2378      	movs	r3, #120	; 0x78
 80080dc:	4828      	ldr	r0, [pc, #160]	; (8008180 <_printf_i+0x248>)
 80080de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080e2:	e7e3      	b.n	80080ac <_printf_i+0x174>
 80080e4:	0659      	lsls	r1, r3, #25
 80080e6:	bf48      	it	mi
 80080e8:	b2b6      	uxthmi	r6, r6
 80080ea:	e7e6      	b.n	80080ba <_printf_i+0x182>
 80080ec:	4615      	mov	r5, r2
 80080ee:	e7bb      	b.n	8008068 <_printf_i+0x130>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	6826      	ldr	r6, [r4, #0]
 80080f4:	6961      	ldr	r1, [r4, #20]
 80080f6:	1d18      	adds	r0, r3, #4
 80080f8:	6028      	str	r0, [r5, #0]
 80080fa:	0635      	lsls	r5, r6, #24
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	d501      	bpl.n	8008104 <_printf_i+0x1cc>
 8008100:	6019      	str	r1, [r3, #0]
 8008102:	e002      	b.n	800810a <_printf_i+0x1d2>
 8008104:	0670      	lsls	r0, r6, #25
 8008106:	d5fb      	bpl.n	8008100 <_printf_i+0x1c8>
 8008108:	8019      	strh	r1, [r3, #0]
 800810a:	2300      	movs	r3, #0
 800810c:	6123      	str	r3, [r4, #16]
 800810e:	4615      	mov	r5, r2
 8008110:	e7ba      	b.n	8008088 <_printf_i+0x150>
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	1d1a      	adds	r2, r3, #4
 8008116:	602a      	str	r2, [r5, #0]
 8008118:	681d      	ldr	r5, [r3, #0]
 800811a:	6862      	ldr	r2, [r4, #4]
 800811c:	2100      	movs	r1, #0
 800811e:	4628      	mov	r0, r5
 8008120:	f7f8 f85e 	bl	80001e0 <memchr>
 8008124:	b108      	cbz	r0, 800812a <_printf_i+0x1f2>
 8008126:	1b40      	subs	r0, r0, r5
 8008128:	6060      	str	r0, [r4, #4]
 800812a:	6863      	ldr	r3, [r4, #4]
 800812c:	6123      	str	r3, [r4, #16]
 800812e:	2300      	movs	r3, #0
 8008130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008134:	e7a8      	b.n	8008088 <_printf_i+0x150>
 8008136:	6923      	ldr	r3, [r4, #16]
 8008138:	462a      	mov	r2, r5
 800813a:	4649      	mov	r1, r9
 800813c:	4640      	mov	r0, r8
 800813e:	47d0      	blx	sl
 8008140:	3001      	adds	r0, #1
 8008142:	d0ab      	beq.n	800809c <_printf_i+0x164>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	079b      	lsls	r3, r3, #30
 8008148:	d413      	bmi.n	8008172 <_printf_i+0x23a>
 800814a:	68e0      	ldr	r0, [r4, #12]
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	4298      	cmp	r0, r3
 8008150:	bfb8      	it	lt
 8008152:	4618      	movlt	r0, r3
 8008154:	e7a4      	b.n	80080a0 <_printf_i+0x168>
 8008156:	2301      	movs	r3, #1
 8008158:	4632      	mov	r2, r6
 800815a:	4649      	mov	r1, r9
 800815c:	4640      	mov	r0, r8
 800815e:	47d0      	blx	sl
 8008160:	3001      	adds	r0, #1
 8008162:	d09b      	beq.n	800809c <_printf_i+0x164>
 8008164:	3501      	adds	r5, #1
 8008166:	68e3      	ldr	r3, [r4, #12]
 8008168:	9903      	ldr	r1, [sp, #12]
 800816a:	1a5b      	subs	r3, r3, r1
 800816c:	42ab      	cmp	r3, r5
 800816e:	dcf2      	bgt.n	8008156 <_printf_i+0x21e>
 8008170:	e7eb      	b.n	800814a <_printf_i+0x212>
 8008172:	2500      	movs	r5, #0
 8008174:	f104 0619 	add.w	r6, r4, #25
 8008178:	e7f5      	b.n	8008166 <_printf_i+0x22e>
 800817a:	bf00      	nop
 800817c:	080085fd 	.word	0x080085fd
 8008180:	0800860e 	.word	0x0800860e

08008184 <_sbrk_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d06      	ldr	r5, [pc, #24]	; (80081a0 <_sbrk_r+0x1c>)
 8008188:	2300      	movs	r3, #0
 800818a:	4604      	mov	r4, r0
 800818c:	4608      	mov	r0, r1
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	f7f9 fb88 	bl	80018a4 <_sbrk>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_sbrk_r+0x1a>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	b103      	cbz	r3, 800819e <_sbrk_r+0x1a>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	200002d0 	.word	0x200002d0

080081a4 <__sread>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	460c      	mov	r4, r1
 80081a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ac:	f000 f8a0 	bl	80082f0 <_read_r>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	bfab      	itete	ge
 80081b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081b6:	89a3      	ldrhlt	r3, [r4, #12]
 80081b8:	181b      	addge	r3, r3, r0
 80081ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081be:	bfac      	ite	ge
 80081c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80081c2:	81a3      	strhlt	r3, [r4, #12]
 80081c4:	bd10      	pop	{r4, pc}

080081c6 <__swrite>:
 80081c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ca:	461f      	mov	r7, r3
 80081cc:	898b      	ldrh	r3, [r1, #12]
 80081ce:	05db      	lsls	r3, r3, #23
 80081d0:	4605      	mov	r5, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	4616      	mov	r6, r2
 80081d6:	d505      	bpl.n	80081e4 <__swrite+0x1e>
 80081d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081dc:	2302      	movs	r3, #2
 80081de:	2200      	movs	r2, #0
 80081e0:	f000 f868 	bl	80082b4 <_lseek_r>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081ee:	81a3      	strh	r3, [r4, #12]
 80081f0:	4632      	mov	r2, r6
 80081f2:	463b      	mov	r3, r7
 80081f4:	4628      	mov	r0, r5
 80081f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081fa:	f000 b817 	b.w	800822c <_write_r>

080081fe <__sseek>:
 80081fe:	b510      	push	{r4, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008206:	f000 f855 	bl	80082b4 <_lseek_r>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	bf15      	itete	ne
 8008210:	6560      	strne	r0, [r4, #84]	; 0x54
 8008212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800821a:	81a3      	strheq	r3, [r4, #12]
 800821c:	bf18      	it	ne
 800821e:	81a3      	strhne	r3, [r4, #12]
 8008220:	bd10      	pop	{r4, pc}

08008222 <__sclose>:
 8008222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008226:	f000 b813 	b.w	8008250 <_close_r>
	...

0800822c <_write_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d07      	ldr	r5, [pc, #28]	; (800824c <_write_r+0x20>)
 8008230:	4604      	mov	r4, r0
 8008232:	4608      	mov	r0, r1
 8008234:	4611      	mov	r1, r2
 8008236:	2200      	movs	r2, #0
 8008238:	602a      	str	r2, [r5, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	f7f9 fae1 	bl	8001802 <_write>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d102      	bne.n	800824a <_write_r+0x1e>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	b103      	cbz	r3, 800824a <_write_r+0x1e>
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	200002d0 	.word	0x200002d0

08008250 <_close_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d06      	ldr	r5, [pc, #24]	; (800826c <_close_r+0x1c>)
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	f7f9 faed 	bl	800183a <_close>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_close_r+0x1a>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_close_r+0x1a>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	200002d0 	.word	0x200002d0

08008270 <_fstat_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d07      	ldr	r5, [pc, #28]	; (8008290 <_fstat_r+0x20>)
 8008274:	2300      	movs	r3, #0
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	4611      	mov	r1, r2
 800827c:	602b      	str	r3, [r5, #0]
 800827e:	f7f9 fae8 	bl	8001852 <_fstat>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	d102      	bne.n	800828c <_fstat_r+0x1c>
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	b103      	cbz	r3, 800828c <_fstat_r+0x1c>
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	bd38      	pop	{r3, r4, r5, pc}
 800828e:	bf00      	nop
 8008290:	200002d0 	.word	0x200002d0

08008294 <_isatty_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4d06      	ldr	r5, [pc, #24]	; (80082b0 <_isatty_r+0x1c>)
 8008298:	2300      	movs	r3, #0
 800829a:	4604      	mov	r4, r0
 800829c:	4608      	mov	r0, r1
 800829e:	602b      	str	r3, [r5, #0]
 80082a0:	f7f9 fae7 	bl	8001872 <_isatty>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d102      	bne.n	80082ae <_isatty_r+0x1a>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	b103      	cbz	r3, 80082ae <_isatty_r+0x1a>
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	200002d0 	.word	0x200002d0

080082b4 <_lseek_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d07      	ldr	r5, [pc, #28]	; (80082d4 <_lseek_r+0x20>)
 80082b8:	4604      	mov	r4, r0
 80082ba:	4608      	mov	r0, r1
 80082bc:	4611      	mov	r1, r2
 80082be:	2200      	movs	r2, #0
 80082c0:	602a      	str	r2, [r5, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	f7f9 fae0 	bl	8001888 <_lseek>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d102      	bne.n	80082d2 <_lseek_r+0x1e>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	b103      	cbz	r3, 80082d2 <_lseek_r+0x1e>
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	200002d0 	.word	0x200002d0

080082d8 <__malloc_lock>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__malloc_lock+0x8>)
 80082da:	f7ff bb1d 	b.w	8007918 <__retarget_lock_acquire_recursive>
 80082de:	bf00      	nop
 80082e0:	200002c4 	.word	0x200002c4

080082e4 <__malloc_unlock>:
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <__malloc_unlock+0x8>)
 80082e6:	f7ff bb18 	b.w	800791a <__retarget_lock_release_recursive>
 80082ea:	bf00      	nop
 80082ec:	200002c4 	.word	0x200002c4

080082f0 <_read_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	; (8008310 <_read_r+0x20>)
 80082f4:	4604      	mov	r4, r0
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7f9 fa62 	bl	80017c8 <_read>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_read_r+0x1e>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_read_r+0x1e>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200002d0 	.word	0x200002d0

08008314 <_init>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr

08008320 <_fini>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr
