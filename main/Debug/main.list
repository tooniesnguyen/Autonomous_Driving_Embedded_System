
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000923c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  080093e0  080093e0  000193e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a24  08009a24  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009a24  08009a24  00019a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a2c  08009a2c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a30  08009a30  00019a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e8  08009c1c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08009c1c  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e0d  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002527  00000000  00000000  00032025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00034550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00035658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001809b  00000000  00000000  00036690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013940  00000000  00000000  0004e72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009268f  00000000  00000000  0006206b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f46fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b7c  00000000  00000000  000f474c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093c4 	.word	0x080093c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	080093c4 	.word	0x080093c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	2007      	movs	r0, #7
 8000fac:	f000 fa7c 	bl	80014a8 <bno055_writeData>
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	203d      	movs	r0, #61	; 0x3d
 8000fc8:	f000 fa6e 	bl	80014a8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d103      	bne.n	8000fda <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000fd2:	2013      	movs	r0, #19
 8000fd4:	f000 fa5c 	bl	8001490 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000fd8:	e002      	b.n	8000fe0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f000 fa58 	bl	8001490 <bno055_delay>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff ffe3 	bl	8000fb8 <bno055_setOperationMode>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000ffa:	200c      	movs	r0, #12
 8000ffc:	f7ff ffdc 	bl	8000fb8 <bno055_setOperationMode>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001008:	2120      	movs	r1, #32
 800100a:	203f      	movs	r0, #63	; 0x3f
 800100c:	f000 fa4c 	bl	80014a8 <bno055_writeData>
  bno055_delay(700);
 8001010:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001014:	f000 fa3c 	bl	8001490 <bno055_delay>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  bno055_reset();
 8001022:	f7ff ffef 	bl	8001004 <bno055_reset>

  uint8_t id = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	2000      	movs	r0, #0
 8001032:	f000 fb25 	bl	8001680 <bno055_readData>
  if (id != BNO055_ID) {
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2ba0      	cmp	r3, #160	; 0xa0
 800103a:	d004      	beq.n	8001046 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4619      	mov	r1, r3
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <bno055_setup+0x4c>)
 8001042:	f005 fec7 	bl	8006dd4 <iprintf>
  }
  bno055_setPage(0);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff ffa8 	bl	8000f9c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800104c:	2100      	movs	r1, #0
 800104e:	203f      	movs	r0, #63	; 0x3f
 8001050:	f000 fa2a 	bl	80014a8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001054:	f7ff ffc8 	bl	8000fe8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001058:	200a      	movs	r0, #10
 800105a:	f000 fa19 	bl	8001490 <bno055_delay>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	080093e0 	.word	0x080093e0

0800106c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800106c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001070:	b09e      	sub	sp, #120	; 0x78
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff ff8e 	bl	8000f9c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001084:	2b20      	cmp	r3, #32
 8001086:	d108      	bne.n	800109a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001088:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800108c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001090:	2208      	movs	r2, #8
 8001092:	4618      	mov	r0, r3
 8001094:	f000 faf4 	bl	8001680 <bno055_readData>
 8001098:	e007      	b.n	80010aa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800109a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800109e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a2:	2206      	movs	r2, #6
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 faeb 	bl	8001680 <bno055_readData>

  double scale = 1;
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b8b      	ldr	r3, [pc, #556]	; (80012dc <bno055_getVector+0x270>)
 80010b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80010b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010b8:	2b0e      	cmp	r3, #14
 80010ba:	d109      	bne.n	80010d0 <bno055_getVector+0x64>
    scale = magScale;
 80010bc:	4b88      	ldr	r3, [pc, #544]	; (80012e0 <bno055_getVector+0x274>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa27 	bl	8000514 <__aeabi_ui2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010ce:	e03e      	b.n	800114e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80010d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d007      	beq.n	80010e8 <bno055_getVector+0x7c>
 80010d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010dc:	2b28      	cmp	r3, #40	; 0x28
 80010de:	d003      	beq.n	80010e8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80010e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e4:	2b2e      	cmp	r3, #46	; 0x2e
 80010e6:	d109      	bne.n	80010fc <bno055_getVector+0x90>
    scale = accelScale;
 80010e8:	4b7e      	ldr	r3, [pc, #504]	; (80012e4 <bno055_getVector+0x278>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa11 	bl	8000514 <__aeabi_ui2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010fa:	e028      	b.n	800114e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80010fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001100:	2b14      	cmp	r3, #20
 8001102:	d109      	bne.n	8001118 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001104:	4b78      	ldr	r3, [pc, #480]	; (80012e8 <bno055_getVector+0x27c>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa03 	bl	8000514 <__aeabi_ui2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001116:	e01a      	b.n	800114e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800111c:	2b1a      	cmp	r3, #26
 800111e:	d109      	bne.n	8001134 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001120:	4b72      	ldr	r3, [pc, #456]	; (80012ec <bno055_getVector+0x280>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f9f5 	bl	8000514 <__aeabi_ui2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001132:	e00c      	b.n	800114e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001138:	2b20      	cmp	r3, #32
 800113a:	d108      	bne.n	800114e <bno055_getVector+0xe2>
    scale = quaScale;
 800113c:	4b6c      	ldr	r3, [pc, #432]	; (80012f0 <bno055_getVector+0x284>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9e7 	bl	8000514 <__aeabi_ui2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	2220      	movs	r2, #32
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f005 f9ca 	bl	80064f0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001160:	2b20      	cmp	r3, #32
 8001162:	d150      	bne.n	8001206 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001164:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21b      	sxth	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9dc 	bl	8000534 <__aeabi_i2d>
 800117c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001180:	f7ff fb6c 	bl	800085c <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800118c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b21b      	sxth	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9c8 	bl	8000534 <__aeabi_i2d>
 80011a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011a8:	f7ff fb58 	bl	800085c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80011b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f9b4 	bl	8000534 <__aeabi_i2d>
 80011cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011d0:	f7ff fb44 	bl	800085c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80011dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9a0 	bl	8000534 <__aeabi_i2d>
 80011f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011f8:	f7ff fb30 	bl	800085c <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001204:	e03b      	b.n	800127e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001206:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21b      	sxth	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f98b 	bl	8000534 <__aeabi_i2d>
 800121e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001222:	f7ff fb1b 	bl	800085c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800122e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21a      	sxth	r2, r3
 8001236:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21b      	sxth	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f977 	bl	8000534 <__aeabi_i2d>
 8001246:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800124a:	f7ff fb07 	bl	800085c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001256:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f963 	bl	8000534 <__aeabi_i2d>
 800126e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001272:	f7ff faf3 	bl	800085c <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 800127e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001282:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800128e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001292:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001296:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800129a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800129e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80012a2:	ec49 8b14 	vmov	d4, r8, r9
 80012a6:	ec45 4b15 	vmov	d5, r4, r5
 80012aa:	ec41 0b16 	vmov	d6, r0, r1
 80012ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80012b2:	eeb0 0a44 	vmov.f32	s0, s8
 80012b6:	eef0 0a64 	vmov.f32	s1, s9
 80012ba:	eeb0 1a45 	vmov.f32	s2, s10
 80012be:	eef0 1a65 	vmov.f32	s3, s11
 80012c2:	eeb0 2a46 	vmov.f32	s4, s12
 80012c6:	eef0 2a66 	vmov.f32	s5, s13
 80012ca:	eeb0 3a47 	vmov.f32	s6, s14
 80012ce:	eef0 3a67 	vmov.f32	s7, s15
 80012d2:	3778      	adds	r7, #120	; 0x78
 80012d4:	46bd      	mov	sp, r7
 80012d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012da:	bf00      	nop
 80012dc:	3ff00000 	.word	0x3ff00000
 80012e0:	20000006 	.word	0x20000006
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000002 	.word	0x20000002
 80012ec:	20000004 	.word	0x20000004
 80012f0:	20000008 	.word	0x20000008

080012f4 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80012f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012f8:	b090      	sub	sp, #64	; 0x40
 80012fa:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80012fc:	201a      	movs	r0, #26
 80012fe:	f7ff feb5 	bl	800106c <bno055_getVector>
 8001302:	eeb0 4a40 	vmov.f32	s8, s0
 8001306:	eef0 4a60 	vmov.f32	s9, s1
 800130a:	eeb0 5a41 	vmov.f32	s10, s2
 800130e:	eef0 5a61 	vmov.f32	s11, s3
 8001312:	eeb0 6a42 	vmov.f32	s12, s4
 8001316:	eef0 6a62 	vmov.f32	s13, s5
 800131a:	eeb0 7a43 	vmov.f32	s14, s6
 800131e:	eef0 7a63 	vmov.f32	s15, s7
 8001322:	ed87 4b08 	vstr	d4, [r7, #32]
 8001326:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800132a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800132e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001332:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001336:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800133a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800133e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001342:	ec49 8b14 	vmov	d4, r8, r9
 8001346:	ec45 4b15 	vmov	d5, r4, r5
 800134a:	ec41 0b16 	vmov	d6, r0, r1
 800134e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001352:	eeb0 0a44 	vmov.f32	s0, s8
 8001356:	eef0 0a64 	vmov.f32	s1, s9
 800135a:	eeb0 1a45 	vmov.f32	s2, s10
 800135e:	eef0 1a65 	vmov.f32	s3, s11
 8001362:	eeb0 2a46 	vmov.f32	s4, s12
 8001366:	eef0 2a66 	vmov.f32	s5, s13
 800136a:	eeb0 3a47 	vmov.f32	s6, s14
 800136e:	eef0 3a67 	vmov.f32	s7, s15
 8001372:	3740      	adds	r7, #64	; 0x40
 8001374:	46bd      	mov	sp, r7
 8001376:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800137c <checkNull>:
#include "log.h"

char txLogBuffer[100] = {0};
UART_HandleTypeDef *targetUART;

static HAL_StatusTypeDef checkNull(){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	if(targetUART != NULL) return HAL_OK;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <checkNull+0x1c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <checkNull+0x10>
 8001388:	2300      	movs	r3, #0
 800138a:	e000      	b.n	800138e <checkNull+0x12>
	return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	20000268 	.word	0x20000268

0800139c <log_Init>:

void log_Init(UART_HandleTypeDef *huart){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

	targetUART = huart;
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <log_Init+0x1c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000268 	.word	0x20000268

080013bc <log_TransmitCompleteHandle>:

void log_TransmitCompleteHandle(UART_HandleTypeDef *huart){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	if(huart != targetUART) return;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <log_TransmitCompleteHandle+0x30>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d109      	bne.n	80013e2 <log_TransmitCompleteHandle+0x26>
	memset(txLogBuffer,0,strlen(txLogBuffer));
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <log_TransmitCompleteHandle+0x34>)
 80013d0:	f7fe ff06 	bl	80001e0 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	2100      	movs	r1, #0
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <log_TransmitCompleteHandle+0x34>)
 80013dc:	f005 f888 	bl	80064f0 <memset>
 80013e0:	e000      	b.n	80013e4 <log_TransmitCompleteHandle+0x28>
	if(huart != targetUART) return;
 80013e2:	bf00      	nop

}
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000268 	.word	0x20000268
 80013f0:	20000204 	.word	0x20000204

080013f4 <log_SendString>:

void log_SendString(){
 80013f4:	b598      	push	{r3, r4, r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	if(checkNull() != HAL_OK) return;
 80013f8:	f7ff ffc0 	bl	800137c <checkNull>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d114      	bne.n	800142c <log_SendString+0x38>
	txLogBuffer[strlen(txLogBuffer) -1] = '\n';  //xóa dấu phẩy cuối cùng, thay bằng \n
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <log_SendString+0x3c>)
 8001404:	f7fe feec 	bl	80001e0 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	3b01      	subs	r3, #1
 800140c:	4a08      	ldr	r2, [pc, #32]	; (8001430 <log_SendString+0x3c>)
 800140e:	210a      	movs	r1, #10
 8001410:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_IT(targetUART, (uint8_t*)txLogBuffer, strlen(txLogBuffer));
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <log_SendString+0x40>)
 8001414:	681c      	ldr	r4, [r3, #0]
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <log_SendString+0x3c>)
 8001418:	f7fe fee2 	bl	80001e0 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	b29b      	uxth	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	4903      	ldr	r1, [pc, #12]	; (8001430 <log_SendString+0x3c>)
 8001424:	4620      	mov	r0, r4
 8001426:	f003 fe9a 	bl	800515e <HAL_UART_Transmit_IT>
 800142a:	e000      	b.n	800142e <log_SendString+0x3a>
	if(checkNull() != HAL_OK) return;
 800142c:	bf00      	nop
}
 800142e:	bd98      	pop	{r3, r4, r7, pc}
 8001430:	20000204 	.word	0x20000204
 8001434:	20000268 	.word	0x20000268

08001438 <log_AddArgumentToBuffer_float>:
	char s[10] = {0};
	strcpy(s,name);
	sprintf(txLogBuffer+strlen(txLogBuffer),"%s,",s);
}

void log_AddArgumentToBuffer_float(float data){
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(txLogBuffer+strlen(txLogBuffer),"%.2f,",data);
 8001442:	4809      	ldr	r0, [pc, #36]	; (8001468 <log_AddArgumentToBuffer_float+0x30>)
 8001444:	f7fe fecc 	bl	80001e0 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	4a07      	ldr	r2, [pc, #28]	; (8001468 <log_AddArgumentToBuffer_float+0x30>)
 800144c:	189c      	adds	r4, r3, r2
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff f882 	bl	8000558 <__aeabi_f2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4904      	ldr	r1, [pc, #16]	; (800146c <log_AddArgumentToBuffer_float+0x34>)
 800145a:	4620      	mov	r0, r4
 800145c:	f005 fd48 	bl	8006ef0 <siprintf>
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	20000204 	.word	0x20000204
 800146c:	08009420 	.word	0x08009420

08001470 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <bno055_assignI2C+0x1c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2000026c 	.word	0x2000026c

08001490 <bno055_delay>:

void bno055_delay(int time) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fe76 	bl	800218c <HAL_Delay>
#endif
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	4603      	mov	r3, r0
 80014b0:	460a      	mov	r2, r1
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	4613      	mov	r3, r2
 80014b6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	733b      	strb	r3, [r7, #12]
 80014bc:	79bb      	ldrb	r3, [r7, #6]
 80014be:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80014c0:	4b5a      	ldr	r3, [pc, #360]	; (800162c <bno055_writeData+0x184>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	f107 020c 	add.w	r2, r7, #12
 80014c8:	230a      	movs	r3, #10
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	2152      	movs	r1, #82	; 0x52
 80014d0:	f001 fe5c 	bl	800318c <HAL_I2C_Master_Transmit>
 80014d4:	4603      	mov	r3, r0
 80014d6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 80a0 	beq.w	8001620 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d103      	bne.n	80014ee <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80014e6:	4852      	ldr	r0, [pc, #328]	; (8001630 <bno055_writeData+0x188>)
 80014e8:	f005 fcfa 	bl	8006ee0 <puts>
 80014ec:	e012      	b.n	8001514 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d103      	bne.n	80014fc <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80014f4:	484f      	ldr	r0, [pc, #316]	; (8001634 <bno055_writeData+0x18c>)
 80014f6:	f005 fcf3 	bl	8006ee0 <puts>
 80014fa:	e00b      	b.n	8001514 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d103      	bne.n	800150a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001502:	484d      	ldr	r0, [pc, #308]	; (8001638 <bno055_writeData+0x190>)
 8001504:	f005 fcec 	bl	8006ee0 <puts>
 8001508:	e004      	b.n	8001514 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800150a:	7dfb      	ldrb	r3, [r7, #23]
 800150c:	4619      	mov	r1, r3
 800150e:	484b      	ldr	r0, [pc, #300]	; (800163c <bno055_writeData+0x194>)
 8001510:	f005 fc60 	bl	8006dd4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001514:	4b45      	ldr	r3, [pc, #276]	; (800162c <bno055_writeData+0x184>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f002 f969 	bl	80037f0 <HAL_I2C_GetError>
 800151e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d07e      	beq.n	8001624 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d103      	bne.n	8001534 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 800152c:	4844      	ldr	r0, [pc, #272]	; (8001640 <bno055_writeData+0x198>)
 800152e:	f005 fcd7 	bl	8006ee0 <puts>
 8001532:	e021      	b.n	8001578 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d103      	bne.n	8001542 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800153a:	4842      	ldr	r0, [pc, #264]	; (8001644 <bno055_writeData+0x19c>)
 800153c:	f005 fcd0 	bl	8006ee0 <puts>
 8001540:	e01a      	b.n	8001578 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d103      	bne.n	8001550 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001548:	483f      	ldr	r0, [pc, #252]	; (8001648 <bno055_writeData+0x1a0>)
 800154a:	f005 fcc9 	bl	8006ee0 <puts>
 800154e:	e013      	b.n	8001578 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2b08      	cmp	r3, #8
 8001554:	d103      	bne.n	800155e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001556:	483d      	ldr	r0, [pc, #244]	; (800164c <bno055_writeData+0x1a4>)
 8001558:	f005 fcc2 	bl	8006ee0 <puts>
 800155c:	e00c      	b.n	8001578 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	2b10      	cmp	r3, #16
 8001562:	d103      	bne.n	800156c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001564:	483a      	ldr	r0, [pc, #232]	; (8001650 <bno055_writeData+0x1a8>)
 8001566:	f005 fcbb 	bl	8006ee0 <puts>
 800156a:	e005      	b.n	8001578 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	2b20      	cmp	r3, #32
 8001570:	d102      	bne.n	8001578 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001572:	4838      	ldr	r0, [pc, #224]	; (8001654 <bno055_writeData+0x1ac>)
 8001574:	f005 fcb4 	bl	8006ee0 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001578:	4b2c      	ldr	r3, [pc, #176]	; (800162c <bno055_writeData+0x184>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f002 f929 	bl	80037d4 <HAL_I2C_GetState>
 8001582:	4603      	mov	r3, r0
 8001584:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d103      	bne.n	8001594 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 800158c:	4832      	ldr	r0, [pc, #200]	; (8001658 <bno055_writeData+0x1b0>)
 800158e:	f005 fca7 	bl	8006ee0 <puts>
 8001592:	e048      	b.n	8001626 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b20      	cmp	r3, #32
 8001598:	d103      	bne.n	80015a2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800159a:	482f      	ldr	r0, [pc, #188]	; (8001658 <bno055_writeData+0x1b0>)
 800159c:	f005 fca0 	bl	8006ee0 <puts>
 80015a0:	e041      	b.n	8001626 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b24      	cmp	r3, #36	; 0x24
 80015a6:	d103      	bne.n	80015b0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80015a8:	482c      	ldr	r0, [pc, #176]	; (800165c <bno055_writeData+0x1b4>)
 80015aa:	f005 fc99 	bl	8006ee0 <puts>
 80015ae:	e03a      	b.n	8001626 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	2b21      	cmp	r3, #33	; 0x21
 80015b4:	d103      	bne.n	80015be <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80015b6:	482a      	ldr	r0, [pc, #168]	; (8001660 <bno055_writeData+0x1b8>)
 80015b8:	f005 fc92 	bl	8006ee0 <puts>
 80015bc:	e033      	b.n	8001626 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b22      	cmp	r3, #34	; 0x22
 80015c2:	d103      	bne.n	80015cc <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80015c4:	4827      	ldr	r0, [pc, #156]	; (8001664 <bno055_writeData+0x1bc>)
 80015c6:	f005 fc8b 	bl	8006ee0 <puts>
 80015ca:	e02c      	b.n	8001626 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	2b28      	cmp	r3, #40	; 0x28
 80015d0:	d103      	bne.n	80015da <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80015d2:	4825      	ldr	r0, [pc, #148]	; (8001668 <bno055_writeData+0x1c0>)
 80015d4:	f005 fc84 	bl	8006ee0 <puts>
 80015d8:	e025      	b.n	8001626 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b29      	cmp	r3, #41	; 0x29
 80015de:	d103      	bne.n	80015e8 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80015e0:	4822      	ldr	r0, [pc, #136]	; (800166c <bno055_writeData+0x1c4>)
 80015e2:	f005 fc7d 	bl	8006ee0 <puts>
 80015e6:	e01e      	b.n	8001626 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	2b2a      	cmp	r3, #42	; 0x2a
 80015ec:	d103      	bne.n	80015f6 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80015ee:	4820      	ldr	r0, [pc, #128]	; (8001670 <bno055_writeData+0x1c8>)
 80015f0:	f005 fc76 	bl	8006ee0 <puts>
 80015f4:	e017      	b.n	8001626 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	2b60      	cmp	r3, #96	; 0x60
 80015fa:	d103      	bne.n	8001604 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80015fc:	481d      	ldr	r0, [pc, #116]	; (8001674 <bno055_writeData+0x1cc>)
 80015fe:	f005 fc6f 	bl	8006ee0 <puts>
 8001602:	e010      	b.n	8001626 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	2ba0      	cmp	r3, #160	; 0xa0
 8001608:	d103      	bne.n	8001612 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800160a:	481b      	ldr	r0, [pc, #108]	; (8001678 <bno055_writeData+0x1d0>)
 800160c:	f005 fc68 	bl	8006ee0 <puts>
 8001610:	e009      	b.n	8001626 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2be0      	cmp	r3, #224	; 0xe0
 8001616:	d106      	bne.n	8001626 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001618:	4818      	ldr	r0, [pc, #96]	; (800167c <bno055_writeData+0x1d4>)
 800161a:	f005 fc61 	bl	8006ee0 <puts>
 800161e:	e002      	b.n	8001626 <bno055_writeData+0x17e>
    return;
 8001620:	bf00      	nop
 8001622:	e000      	b.n	8001626 <bno055_writeData+0x17e>
    return;
 8001624:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000026c 	.word	0x2000026c
 8001630:	08009428 	.word	0x08009428
 8001634:	0800944c 	.word	0x0800944c
 8001638:	08009474 	.word	0x08009474
 800163c:	08009498 	.word	0x08009498
 8001640:	080094b0 	.word	0x080094b0
 8001644:	080094c4 	.word	0x080094c4
 8001648:	080094d8 	.word	0x080094d8
 800164c:	080094ec 	.word	0x080094ec
 8001650:	08009500 	.word	0x08009500
 8001654:	08009514 	.word	0x08009514
 8001658:	0800952c 	.word	0x0800952c
 800165c:	08009544 	.word	0x08009544
 8001660:	08009558 	.word	0x08009558
 8001664:	08009570 	.word	0x08009570
 8001668:	08009588 	.word	0x08009588
 800166c:	080095a0 	.word	0x080095a0
 8001670:	080095c0 	.word	0x080095c0
 8001674:	080095e0 	.word	0x080095e0
 8001678:	080095f8 	.word	0x080095f8
 800167c:	08009610 	.word	0x08009610

08001680 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af02      	add	r7, sp, #8
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <bno055_readData+0x40>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	1dfa      	adds	r2, r7, #7
 8001696:	2364      	movs	r3, #100	; 0x64
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2301      	movs	r3, #1
 800169c:	2152      	movs	r1, #82	; 0x52
 800169e:	f001 fd75 	bl	800318c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <bno055_readData+0x40>)
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2264      	movs	r2, #100	; 0x64
 80016ac:	9200      	str	r2, [sp, #0]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	2152      	movs	r1, #82	; 0x52
 80016b2:	f001 fe69 	bl	8003388 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000026c 	.word	0x2000026c

080016c4 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_UARTEx_RxEventCallback+0x34>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d10a      	bne.n	80016f0 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		memcpy(MainBuf, RxBuf, Size);
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	461a      	mov	r2, r3
 80016de:	4907      	ldr	r1, [pc, #28]	; (80016fc <HAL_UARTEx_RxEventCallback+0x38>)
 80016e0:	4807      	ldr	r0, [pc, #28]	; (8001700 <HAL_UARTEx_RxEventCallback+0x3c>)
 80016e2:	f004 fef7 	bl	80064d4 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 80016e6:	220a      	movs	r2, #10
 80016e8:	4904      	ldr	r1, [pc, #16]	; (80016fc <HAL_UARTEx_RxEventCallback+0x38>)
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <HAL_UARTEx_RxEventCallback+0x40>)
 80016ec:	f003 fd7c 	bl	80051e8 <HAL_UARTEx_ReceiveToIdle_DMA>
//		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
	}



}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40004400 	.word	0x40004400
 80016fc:	20000430 	.word	0x20000430
 8001700:	2000043c 	.word	0x2000043c
 8001704:	2000030c 	.word	0x2000030c

08001708 <HAL_TIM_PeriodElapsedCallback>:

uint8_t data[3];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]


    // Assign values to the elements of the data array

}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	log_TransmitCompleteHandle(huart);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fe49 	bl	80013bc <log_TransmitCompleteHandle>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001738:	f000 fcb6 	bl	80020a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173c:	f000 f8a0 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001740:	f000 f9d6 	bl	8001af0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001744:	f000 f9ac 	bl	8001aa0 <MX_DMA_Init>
  MX_TIM4_Init();
 8001748:	f000 f932 	bl	80019b0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800174c:	f000 f97e 	bl	8001a4c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001750:	f000 f900 	bl	8001954 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8001754:	4843      	ldr	r0, [pc, #268]	; (8001864 <main+0x130>)
 8001756:	f7ff fe8b 	bl	8001470 <bno055_assignI2C>
  bno055_setup();
 800175a:	f7ff fc5f 	bl	800101c <bno055_setup>
  bno055_setOperationModeNDOF();
 800175e:	f7ff fc4a 	bl	8000ff6 <bno055_setOperationModeNDOF>

  HAL_TIM_Base_Start_IT(&htim4);
 8001762:	4841      	ldr	r0, [pc, #260]	; (8001868 <main+0x134>)
 8001764:	f003 f826 	bl	80047b4 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001768:	220a      	movs	r2, #10
 800176a:	4940      	ldr	r1, [pc, #256]	; (800186c <main+0x138>)
 800176c:	4840      	ldr	r0, [pc, #256]	; (8001870 <main+0x13c>)
 800176e:	f003 fd3b 	bl	80051e8 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001772:	4b40      	ldr	r3, [pc, #256]	; (8001874 <main+0x140>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <main+0x140>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0208 	bic.w	r2, r2, #8
 8001780:	601a      	str	r2, [r3, #0]
  log_Init(&huart2);
 8001782:	483b      	ldr	r0, [pc, #236]	; (8001870 <main+0x13c>)
 8001784:	f7ff fe0a 	bl	800139c <log_Init>
  while (1)
  {



	v = bno055_getVectorEuler();
 8001788:	f7ff fdb4 	bl	80012f4 <bno055_getVectorEuler>
 800178c:	eeb0 4a40 	vmov.f32	s8, s0
 8001790:	eef0 4a60 	vmov.f32	s9, s1
 8001794:	eeb0 5a41 	vmov.f32	s10, s2
 8001798:	eef0 5a61 	vmov.f32	s11, s3
 800179c:	eeb0 6a42 	vmov.f32	s12, s4
 80017a0:	eef0 6a62 	vmov.f32	s13, s5
 80017a4:	eeb0 7a43 	vmov.f32	s14, s6
 80017a8:	eef0 7a63 	vmov.f32	s15, s7
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <main+0x144>)
 80017ae:	ed83 4b00 	vstr	d4, [r3]
 80017b2:	ed83 5b02 	vstr	d5, [r3, #8]
 80017b6:	ed83 6b04 	vstr	d6, [r3, #16]
 80017ba:	ed83 7b06 	vstr	d7, [r3, #24]


	data[0] = (uint8_t)v.x;
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <main+0x144>)
 80017c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7ff f9f6 	bl	8000bb8 <__aeabi_d2uiz>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <main+0x148>)
 80017d2:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t)v.y;
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <main+0x144>)
 80017d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f9eb 	bl	8000bb8 <__aeabi_d2uiz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <main+0x148>)
 80017e8:	705a      	strb	r2, [r3, #1]
	data[2] = (uint8_t)v.z;
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <main+0x144>)
 80017ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f9e0 	bl	8000bb8 <__aeabi_d2uiz>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <main+0x148>)
 80017fe:	709a      	strb	r2, [r3, #2]

	log_AddArgumentToBuffer_float((float)v.x);
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <main+0x144>)
 8001802:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f9f5 	bl	8000bf8 <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	ee00 3a10 	vmov	s0, r3
 8001814:	f7ff fe10 	bl	8001438 <log_AddArgumentToBuffer_float>
	log_AddArgumentToBuffer_float((float)v.y);
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <main+0x144>)
 800181a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f9e9 	bl	8000bf8 <__aeabi_d2f>
 8001826:	4603      	mov	r3, r0
 8001828:	ee00 3a10 	vmov	s0, r3
 800182c:	f7ff fe04 	bl	8001438 <log_AddArgumentToBuffer_float>
	log_AddArgumentToBuffer_float((float)v.z);
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <main+0x144>)
 8001832:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9dd 	bl	8000bf8 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	ee00 3a10 	vmov	s0, r3
 8001844:	f7ff fdf8 	bl	8001438 <log_AddArgumentToBuffer_float>
	log_SendString();
 8001848:	f7ff fdd4 	bl	80013f4 <log_SendString>

	HAL_UART_Transmit(&huart2, data, 50, 1000);
 800184c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001850:	2232      	movs	r2, #50	; 0x32
 8001852:	490a      	ldr	r1, [pc, #40]	; (800187c <main+0x148>)
 8001854:	4806      	ldr	r0, [pc, #24]	; (8001870 <main+0x13c>)
 8001856:	f003 fbf0 	bl	800503a <HAL_UART_Transmit>
	HAL_Delay(150);
 800185a:	2096      	movs	r0, #150	; 0x96
 800185c:	f000 fc96 	bl	800218c <HAL_Delay>
	v = bno055_getVectorEuler();
 8001860:	e792      	b.n	8001788 <main+0x54>
 8001862:	bf00      	nop
 8001864:	20000270 	.word	0x20000270
 8001868:	200002c4 	.word	0x200002c4
 800186c:	20000430 	.word	0x20000430
 8001870:	2000030c 	.word	0x2000030c
 8001874:	20000350 	.word	0x20000350
 8001878:	20000410 	.word	0x20000410
 800187c:	20000450 	.word	0x20000450

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b094      	sub	sp, #80	; 0x50
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	2230      	movs	r2, #48	; 0x30
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f004 fe2e 	bl	80064f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	4b28      	ldr	r3, [pc, #160]	; (800194c <SystemClock_Config+0xcc>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a27      	ldr	r2, [pc, #156]	; (800194c <SystemClock_Config+0xcc>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <SystemClock_Config+0xcc>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <SystemClock_Config+0xd0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018cc:	4a20      	ldr	r2, [pc, #128]	; (8001950 <SystemClock_Config+0xd0>)
 80018ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <SystemClock_Config+0xd0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e4:	2301      	movs	r3, #1
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e8:	2310      	movs	r3, #16
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ec:	2302      	movs	r3, #2
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018f0:	2300      	movs	r3, #0
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018f4:	2308      	movs	r3, #8
 80018f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80018f8:	2354      	movs	r3, #84	; 0x54
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001900:	2304      	movs	r3, #4
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	4618      	mov	r0, r3
 800190a:	f002 faab 	bl	8003e64 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001914:	f000 f922 	bl	8001b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001918:	230f      	movs	r3, #15
 800191a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800191c:	2302      	movs	r3, #2
 800191e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	2102      	movs	r1, #2
 8001934:	4618      	mov	r0, r3
 8001936:	f002 fd0d 	bl	8004354 <HAL_RCC_ClockConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001940:	f000 f90c 	bl	8001b5c <Error_Handler>
  }
}
 8001944:	bf00      	nop
 8001946:	3750      	adds	r7, #80	; 0x50
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000

08001954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_I2C1_Init+0x50>)
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <MX_I2C1_Init+0x54>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_I2C1_Init+0x58>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_I2C1_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001992:	f001 fab7 	bl	8002f04 <HAL_I2C_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800199c:	f000 f8de 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000270 	.word	0x20000270
 80019a8:	40005400 	.word	0x40005400
 80019ac:	00061a80 	.word	0x00061a80

080019b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	463b      	mov	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <MX_TIM4_Init+0x94>)
 80019ce:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <MX_TIM4_Init+0x98>)
 80019d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_TIM4_Init+0x94>)
 80019d4:	2253      	movs	r2, #83	; 0x53
 80019d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_TIM4_Init+0x94>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <MX_TIM4_Init+0x94>)
 80019e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_TIM4_Init+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <MX_TIM4_Init+0x94>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019f2:	4814      	ldr	r0, [pc, #80]	; (8001a44 <MX_TIM4_Init+0x94>)
 80019f4:	f002 fe8e 	bl	8004714 <HAL_TIM_Base_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80019fe:	f000 f8ad 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <MX_TIM4_Init+0x94>)
 8001a10:	f003 f83a 	bl	8004a88 <HAL_TIM_ConfigClockSource>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001a1a:	f000 f89f 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <MX_TIM4_Init+0x94>)
 8001a2c:	f003 fa36 	bl	8004e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001a36:	f000 f891 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200002c4 	.word	0x200002c4
 8001a48:	40000800 	.word	0x40000800

08001a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <MX_USART2_UART_Init+0x50>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f003 fa8c 	bl	8004fa0 <HAL_UART_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a8e:	f000 f865 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000030c 	.word	0x2000030c
 8001a9c:	40004400 	.word	0x40004400

08001aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <MX_DMA_Init+0x4c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <MX_DMA_Init+0x4c>)
 8001ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <MX_DMA_Init+0x4c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2010      	movs	r0, #16
 8001ac8:	f000 fc5f 	bl	800238a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001acc:	2010      	movs	r0, #16
 8001ace:	f000 fc78 	bl	80023c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2011      	movs	r0, #17
 8001ad8:	f000 fc57 	bl	800238a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001adc:	2011      	movs	r0, #17
 8001ade:	f000 fc70 	bl	80023c2 <HAL_NVIC_EnableIRQ>

}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_GPIO_Init+0x68>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <MX_GPIO_Init+0x68>)
 8001b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_GPIO_Init+0x68>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_GPIO_Init+0x68>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <MX_GPIO_Init+0x68>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <MX_GPIO_Init+0x68>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_GPIO_Init+0x68>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <MX_GPIO_Init+0x68>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_GPIO_Init+0x68>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800

08001b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <Error_Handler+0x8>
	...

08001b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_I2C_MspInit+0x84>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12c      	bne.n	8001c34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_I2C_MspInit+0x88>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_I2C_MspInit+0x88>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_I2C_MspInit+0x88>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfc:	2312      	movs	r3, #18
 8001bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <HAL_I2C_MspInit+0x8c>)
 8001c14:	f000 fff2 	bl	8002bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_I2C_MspInit+0x88>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_I2C_MspInit+0x88>)
 8001c22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_I2C_MspInit+0x88>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40005400 	.word	0x40005400
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020400 	.word	0x40020400

08001c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <HAL_TIM_Base_MspInit+0x48>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d115      	bne.n	8001c86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_TIM_Base_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <HAL_TIM_Base_MspInit+0x4c>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_TIM_Base_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	201e      	movs	r0, #30
 8001c7c:	f000 fb85 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c80:	201e      	movs	r0, #30
 8001c82:	f000 fb9e 	bl	80023c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40000800 	.word	0x40000800
 8001c94:	40023800 	.word	0x40023800

08001c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <HAL_UART_MspInit+0x14c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	f040 8090 	bne.w	8001ddc <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_UART_MspInit+0x150>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <HAL_UART_MspInit+0x150>)
 8001cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ccc:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_UART_MspInit+0x150>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <HAL_UART_MspInit+0x150>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	4a41      	ldr	r2, [pc, #260]	; (8001de8 <HAL_UART_MspInit+0x150>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce8:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_UART_MspInit+0x150>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cf4:	230c      	movs	r3, #12
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d04:	2307      	movs	r3, #7
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4837      	ldr	r0, [pc, #220]	; (8001dec <HAL_UART_MspInit+0x154>)
 8001d10:	f000 ff74 	bl	8002bfc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001d14:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d16:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <HAL_UART_MspInit+0x15c>)
 8001d18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001d1a:	4b35      	ldr	r3, [pc, #212]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d20:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d22:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d34:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d36:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d48:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d4e:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d54:	4826      	ldr	r0, [pc, #152]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d56:	f000 fb4f 	bl	80023f8 <HAL_DMA_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001d60:	f7ff fefc 	bl	8001b5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d68:	639a      	str	r2, [r3, #56]	; 0x38
 8001d6a:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <HAL_UART_MspInit+0x158>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_UART_MspInit+0x164>)
 8001d74:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001d78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001d80:	2240      	movs	r2, #64	; 0x40
 8001d82:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d90:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001db0:	4811      	ldr	r0, [pc, #68]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001db2:	f000 fb21 	bl	80023f8 <HAL_DMA_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001dbc:	f7ff fece 	bl	8001b5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_UART_MspInit+0x160>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2026      	movs	r0, #38	; 0x26
 8001dd2:	f000 fada 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dd6:	2026      	movs	r0, #38	; 0x26
 8001dd8:	f000 faf3 	bl	80023c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40004400 	.word	0x40004400
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	20000350 	.word	0x20000350
 8001df4:	40026088 	.word	0x40026088
 8001df8:	200003b0 	.word	0x200003b0
 8001dfc:	400260a0 	.word	0x400260a0

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <NMI_Handler+0x4>

08001e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <MemManage_Handler+0x4>

08001e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 f97e 	bl	800214c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <DMA1_Stream5_IRQHandler+0x10>)
 8001e5a:	f000 fc65 	bl	8002728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000350 	.word	0x20000350

08001e68 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <DMA1_Stream6_IRQHandler+0x10>)
 8001e6e:	f000 fc5b 	bl	8002728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200003b0 	.word	0x200003b0

08001e7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <TIM4_IRQHandler+0x10>)
 8001e82:	f002 fcf9 	bl	8004878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200002c4 	.word	0x200002c4

08001e90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <USART2_IRQHandler+0x10>)
 8001e96:	f003 fa0d 	bl	80052b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000030c 	.word	0x2000030c

08001ea4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return 1;
 8001ea8:	2301      	movs	r3, #1
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_kill>:

int _kill(int pid, int sig)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ebe:	f004 fadf 	bl	8006480 <__errno>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2216      	movs	r2, #22
 8001ec6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_exit>:

void _exit (int status)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ffe7 	bl	8001eb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ee6:	e7fe      	b.n	8001ee6 <_exit+0x12>

08001ee8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e00a      	b.n	8001f10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001efa:	f3af 8000 	nop.w
 8001efe:	4601      	mov	r1, r0
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	60ba      	str	r2, [r7, #8]
 8001f06:	b2ca      	uxtb	r2, r1
 8001f08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dbf0      	blt.n	8001efa <_read+0x12>
  }

  return len;
 8001f18:	687b      	ldr	r3, [r7, #4]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e009      	b.n	8001f48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	60ba      	str	r2, [r7, #8]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	dbf1      	blt.n	8001f34 <_write+0x12>
  }
  return len;
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_close>:

int _close(int file)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f82:	605a      	str	r2, [r3, #4]
  return 0;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <_isatty>:

int _isatty(int file)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	; (8002020 <_sbrk+0x5c>)
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <_sbrk+0x60>)
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <_sbrk+0x64>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <_sbrk+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d207      	bcs.n	8002004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff4:	f004 fa44 	bl	8006480 <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	e009      	b.n	8002018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <_sbrk+0x64>)
 8002014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20018000 	.word	0x20018000
 8002024:	00000400 	.word	0x00000400
 8002028:	20000454 	.word	0x20000454
 800202c:	20000470 	.word	0x20000470

08002030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <SystemInit+0x20>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <SystemInit+0x20>)
 800203c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800208c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800205a:	490e      	ldr	r1, [pc, #56]	; (8002094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800205c:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002060:	e002      	b.n	8002068 <LoopCopyDataInit>

08002062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002066:	3304      	adds	r3, #4

08002068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800206c:	d3f9      	bcc.n	8002062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002070:	4c0b      	ldr	r4, [pc, #44]	; (80020a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002074:	e001      	b.n	800207a <LoopFillZerobss>

08002076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002078:	3204      	adds	r2, #4

0800207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800207c:	d3fb      	bcc.n	8002076 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800207e:	f7ff ffd7 	bl	8002030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002082:	f004 fa03 	bl	800648c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002086:	f7ff fb55 	bl	8001734 <main>
  bx  lr    
 800208a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800208c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002098:	08009a34 	.word	0x08009a34
  ldr r2, =_sbss
 800209c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80020a0:	2000046c 	.word	0x2000046c

080020a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC_IRQHandler>
	...

080020a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <HAL_Init+0x40>)
 80020b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_Init+0x40>)
 80020be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <HAL_Init+0x40>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f000 f94f 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d6:	200f      	movs	r0, #15
 80020d8:	f000 f808 	bl	80020ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020dc:	f7ff fd44 	bl	8001b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023c00 	.word	0x40023c00

080020ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_InitTick+0x54>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_InitTick+0x58>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002102:	fbb3 f3f1 	udiv	r3, r3, r1
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f967 	bl	80023de <HAL_SYSTICK_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00e      	b.n	8002138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0f      	cmp	r3, #15
 800211e:	d80a      	bhi.n	8002136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002120:	2200      	movs	r2, #0
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f000 f92f 	bl	800238a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800212c:	4a06      	ldr	r2, [pc, #24]	; (8002148 <HAL_InitTick+0x5c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000000c 	.word	0x2000000c
 8002144:	20000014 	.word	0x20000014
 8002148:	20000010 	.word	0x20000010

0800214c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x20>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_IncTick+0x24>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000014 	.word	0x20000014
 8002170:	20000458 	.word	0x20000458

08002174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_GetTick+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000458 	.word	0x20000458

0800218c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff ffee 	bl	8002174 <HAL_GetTick>
 8002198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d005      	beq.n	80021b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_Delay+0x44>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021b2:	bf00      	nop
 80021b4:	f7ff ffde 	bl	8002174 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d8f7      	bhi.n	80021b4 <HAL_Delay+0x28>
  {
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000014 	.word	0x20000014

080021d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f0:	4013      	ands	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	60d3      	str	r3, [r2, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <__NVIC_GetPriorityGrouping+0x18>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 0307 	and.w	r3, r3, #7
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4907      	ldr	r1, [pc, #28]	; (8002270 <__NVIC_EnableIRQ+0x38>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2001      	movs	r0, #1
 800225a:	fa00 f202 	lsl.w	r2, r0, r2
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e100 	.word	0xe000e100

08002274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0a      	blt.n	800229e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	490c      	ldr	r1, [pc, #48]	; (80022c0 <__NVIC_SetPriority+0x4c>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	440b      	add	r3, r1
 8002298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800229c:	e00a      	b.n	80022b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <__NVIC_SetPriority+0x50>)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	3b04      	subs	r3, #4
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	761a      	strb	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f1c3 0307 	rsb	r3, r3, #7
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	bf28      	it	cs
 80022e6:	2304      	movcs	r3, #4
 80022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d902      	bls.n	80022f8 <NVIC_EncodePriority+0x30>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b03      	subs	r3, #3
 80022f6:	e000      	b.n	80022fa <NVIC_EncodePriority+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002310:	f04f 31ff 	mov.w	r1, #4294967295
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43d9      	mvns	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	4313      	orrs	r3, r2
         );
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	; 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f7ff ff8e 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff29 	bl	80021d4 <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239c:	f7ff ff3e 	bl	800221c <__NVIC_GetPriorityGrouping>
 80023a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff8e 	bl	80022c8 <NVIC_EncodePriority>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff5d 	bl	8002274 <__NVIC_SetPriority>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff31 	bl	8002238 <__NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffa2 	bl	8002330 <SysTick_Config>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff feb6 	bl	8002174 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e099      	b.n	8002548 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002434:	e00f      	b.n	8002456 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002436:	f7ff fe9d 	bl	8002174 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b05      	cmp	r3, #5
 8002442:	d908      	bls.n	8002456 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e078      	b.n	8002548 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e8      	bne.n	8002436 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4b38      	ldr	r3, [pc, #224]	; (8002550 <HAL_DMA_Init+0x158>)
 8002470:	4013      	ands	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d107      	bne.n	80024c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	4313      	orrs	r3, r2
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f023 0307 	bic.w	r3, r3, #7
 80024d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d117      	bne.n	800251a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00e      	beq.n	800251a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fb01 	bl	8002b04 <DMA_CheckFifoParam>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002516:	2301      	movs	r3, #1
 8002518:	e016      	b.n	8002548 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fab8 	bl	8002a98 <DMA_CalcBaseAndBitshift>
 8002528:	4603      	mov	r3, r0
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	223f      	movs	r2, #63	; 0x3f
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	f010803f 	.word	0xf010803f

08002554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_DMA_Start_IT+0x26>
 8002576:	2302      	movs	r3, #2
 8002578:	e040      	b.n	80025fc <HAL_DMA_Start_IT+0xa8>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d12f      	bne.n	80025ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fa4a 	bl	8002a3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	223f      	movs	r2, #63	; 0x3f
 80025ae:	409a      	lsls	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0216 	orr.w	r2, r2, #22
 80025c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e005      	b.n	80025fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
 80025f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002612:	f7ff fdaf 	bl	8002174 <HAL_GetTick>
 8002616:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d008      	beq.n	8002636 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e052      	b.n	80026dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0216 	bic.w	r2, r2, #22
 8002644:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002654:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <HAL_DMA_Abort+0x62>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0208 	bic.w	r2, r2, #8
 8002674:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002686:	e013      	b.n	80026b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002688:	f7ff fd74 	bl	8002174 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b05      	cmp	r3, #5
 8002694:	d90c      	bls.n	80026b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2203      	movs	r2, #3
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e015      	b.n	80026dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1e4      	bne.n	8002688 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	223f      	movs	r2, #63	; 0x3f
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d004      	beq.n	8002702 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e00c      	b.n	800271c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2205      	movs	r2, #5
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002734:	4b8e      	ldr	r3, [pc, #568]	; (8002970 <HAL_DMA_IRQHandler+0x248>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a8e      	ldr	r2, [pc, #568]	; (8002974 <HAL_DMA_IRQHandler+0x24c>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2208      	movs	r2, #8
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01a      	beq.n	8002794 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0204 	bic.w	r2, r2, #4
 800277a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	2208      	movs	r2, #8
 8002782:	409a      	lsls	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2201      	movs	r2, #1
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d012      	beq.n	80027ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	2201      	movs	r2, #1
 80027b8:	409a      	lsls	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f043 0202 	orr.w	r2, r3, #2
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2204      	movs	r2, #4
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	2204      	movs	r2, #4
 80027ee:	409a      	lsls	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	f043 0204 	orr.w	r2, r3, #4
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2210      	movs	r2, #16
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d043      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d03c      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2210      	movs	r2, #16
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d018      	beq.n	800286a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d024      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
 8002856:	e01f      	b.n	8002898 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01b      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e016      	b.n	8002898 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0208 	bic.w	r2, r2, #8
 8002886:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	2220      	movs	r2, #32
 800289e:	409a      	lsls	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 808f 	beq.w	80029c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8087 	beq.w	80029c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2220      	movs	r2, #32
 80028c0:	409a      	lsls	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d136      	bne.n	8002940 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0216 	bic.w	r2, r2, #22
 80028e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <HAL_DMA_IRQHandler+0x1da>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0208 	bic.w	r2, r2, #8
 8002910:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	223f      	movs	r2, #63	; 0x3f
 8002918:	409a      	lsls	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	2b00      	cmp	r3, #0
 8002934:	d07e      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
        }
        return;
 800293e:	e079      	b.n	8002a34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01d      	beq.n	800298a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10d      	bne.n	8002978 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	2b00      	cmp	r3, #0
 8002962:	d031      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
 800296c:	e02c      	b.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
 800296e:	bf00      	nop
 8002970:	2000000c 	.word	0x2000000c
 8002974:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
 8002988:	e01e      	b.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10f      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0210 	bic.w	r2, r2, #16
 80029a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d032      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2205      	movs	r2, #5
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	3301      	adds	r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d307      	bcc.n	8002a10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f2      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x2cc>
 8002a0e:	e000      	b.n	8002a12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
 8002a32:	e000      	b.n	8002a36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a34:	bf00      	nop
    }
  }
}
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	d108      	bne.n	8002a7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a7a:	e007      	b.n	8002a8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	60da      	str	r2, [r3, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	3b10      	subs	r3, #16
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <DMA_CalcBaseAndBitshift+0x64>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <DMA_CalcBaseAndBitshift+0x68>)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d909      	bls.n	8002ada <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	1d1a      	adds	r2, r3, #4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ad8:	e007      	b.n	8002aea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	aaaaaaab 	.word	0xaaaaaaab
 8002b00:	08009640 	.word	0x08009640

08002b04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11f      	bne.n	8002b5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d856      	bhi.n	8002bd2 <DMA_CheckFifoParam+0xce>
 8002b24:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <DMA_CheckFifoParam+0x28>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b3d 	.word	0x08002b3d
 8002b30:	08002b4f 	.word	0x08002b4f
 8002b34:	08002b3d 	.word	0x08002b3d
 8002b38:	08002bd3 	.word	0x08002bd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d046      	beq.n	8002bd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4c:	e043      	b.n	8002bd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b56:	d140      	bne.n	8002bda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e03d      	b.n	8002bda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b66:	d121      	bne.n	8002bac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d837      	bhi.n	8002bde <DMA_CheckFifoParam+0xda>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <DMA_CheckFifoParam+0x70>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	08002b8b 	.word	0x08002b8b
 8002b7c:	08002b85 	.word	0x08002b85
 8002b80:	08002b9d 	.word	0x08002b9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      break;
 8002b88:	e030      	b.n	8002bec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d025      	beq.n	8002be2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9a:	e022      	b.n	8002be2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba4:	d11f      	bne.n	8002be6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002baa:	e01c      	b.n	8002be6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d903      	bls.n	8002bba <DMA_CheckFifoParam+0xb6>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d003      	beq.n	8002bc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bb8:	e018      	b.n	8002bec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8002bbe:	e015      	b.n	8002bec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00e      	beq.n	8002bea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd0:	e00b      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e00a      	b.n	8002bec <DMA_CheckFifoParam+0xe8>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e008      	b.n	8002bec <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e006      	b.n	8002bec <DMA_CheckFifoParam+0xe8>
      break;
 8002bde:	bf00      	nop
 8002be0:	e004      	b.n	8002bec <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
 8002be4:	e002      	b.n	8002bec <DMA_CheckFifoParam+0xe8>
      break;   
 8002be6:	bf00      	nop
 8002be8:	e000      	b.n	8002bec <DMA_CheckFifoParam+0xe8>
      break;
 8002bea:	bf00      	nop
    }
  } 
  
  return status; 
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	; 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e159      	b.n	8002ecc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	f040 8148 	bne.w	8002ec6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d005      	beq.n	8002c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d130      	bne.n	8002cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 0201 	and.w	r2, r3, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d017      	beq.n	8002cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d123      	bne.n	8002d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	69b9      	ldr	r1, [r7, #24]
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a2 	beq.w	8002ec6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b57      	ldr	r3, [pc, #348]	; (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a56      	ldr	r2, [pc, #344]	; (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b54      	ldr	r3, [pc, #336]	; (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d9e:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_GPIO_Init+0x2ec>)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	3302      	adds	r3, #2
 8002da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	220f      	movs	r2, #15
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a49      	ldr	r2, [pc, #292]	; (8002eec <HAL_GPIO_Init+0x2f0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d019      	beq.n	8002dfe <HAL_GPIO_Init+0x202>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a48      	ldr	r2, [pc, #288]	; (8002ef0 <HAL_GPIO_Init+0x2f4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0x1fe>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a47      	ldr	r2, [pc, #284]	; (8002ef4 <HAL_GPIO_Init+0x2f8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_GPIO_Init+0x1fa>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a46      	ldr	r2, [pc, #280]	; (8002ef8 <HAL_GPIO_Init+0x2fc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0x1f6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a45      	ldr	r2, [pc, #276]	; (8002efc <HAL_GPIO_Init+0x300>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_GPIO_Init+0x1f2>
 8002dea:	2304      	movs	r3, #4
 8002dec:	e008      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002dee:	2307      	movs	r3, #7
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002df2:	2303      	movs	r3, #3
 8002df4:	e004      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	f002 0203 	and.w	r2, r2, #3
 8002e06:	0092      	lsls	r2, r2, #2
 8002e08:	4093      	lsls	r3, r2
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e10:	4935      	ldr	r1, [pc, #212]	; (8002ee8 <HAL_GPIO_Init+0x2ec>)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1e:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e42:	4a2f      	ldr	r2, [pc, #188]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e48:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e6c:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e96:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec0:	4a0f      	ldr	r2, [pc, #60]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b0f      	cmp	r3, #15
 8002ed0:	f67f aea2 	bls.w	8002c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	40020800 	.word	0x40020800
 8002ef8:	40020c00 	.word	0x40020c00
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40013c00 	.word	0x40013c00

08002f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e12b      	b.n	800316e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fe44 	bl	8001bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	; 0x24
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f68:	f001 fbac 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8002f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a81      	ldr	r2, [pc, #516]	; (8003178 <HAL_I2C_Init+0x274>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d807      	bhi.n	8002f88 <HAL_I2C_Init+0x84>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a80      	ldr	r2, [pc, #512]	; (800317c <HAL_I2C_Init+0x278>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	bf94      	ite	ls
 8002f80:	2301      	movls	r3, #1
 8002f82:	2300      	movhi	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e006      	b.n	8002f96 <HAL_I2C_Init+0x92>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a7d      	ldr	r2, [pc, #500]	; (8003180 <HAL_I2C_Init+0x27c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bf94      	ite	ls
 8002f90:	2301      	movls	r3, #1
 8002f92:	2300      	movhi	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0e7      	b.n	800316e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a78      	ldr	r2, [pc, #480]	; (8003184 <HAL_I2C_Init+0x280>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0c9b      	lsrs	r3, r3, #18
 8002fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4a6a      	ldr	r2, [pc, #424]	; (8003178 <HAL_I2C_Init+0x274>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d802      	bhi.n	8002fd8 <HAL_I2C_Init+0xd4>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	e009      	b.n	8002fec <HAL_I2C_Init+0xe8>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	4a69      	ldr	r2, [pc, #420]	; (8003188 <HAL_I2C_Init+0x284>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	3301      	adds	r3, #1
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ffe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	495c      	ldr	r1, [pc, #368]	; (8003178 <HAL_I2C_Init+0x274>)
 8003008:	428b      	cmp	r3, r1
 800300a:	d819      	bhi.n	8003040 <HAL_I2C_Init+0x13c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e59      	subs	r1, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fbb1 f3f3 	udiv	r3, r1, r3
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003020:	400b      	ands	r3, r1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_I2C_Init+0x138>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e59      	subs	r1, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fbb1 f3f3 	udiv	r3, r1, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303a:	e051      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 800303c:	2304      	movs	r3, #4
 800303e:	e04f      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d111      	bne.n	800306c <HAL_I2C_Init+0x168>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e012      	b.n	8003092 <HAL_I2C_Init+0x18e>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	0099      	lsls	r1, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Init+0x196>
 8003096:	2301      	movs	r3, #1
 8003098:	e022      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10e      	bne.n	80030c0 <HAL_I2C_Init+0x1bc>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1e58      	subs	r0, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	440b      	add	r3, r1
 80030b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030be:	e00f      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	0099      	lsls	r1, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	6809      	ldr	r1, [r1, #0]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800310e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6911      	ldr	r1, [r2, #16]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68d2      	ldr	r2, [r2, #12]
 800311a:	4311      	orrs	r1, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	430b      	orrs	r3, r1
 8003122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	000186a0 	.word	0x000186a0
 800317c:	001e847f 	.word	0x001e847f
 8003180:	003d08ff 	.word	0x003d08ff
 8003184:	431bde83 	.word	0x431bde83
 8003188:	10624dd3 	.word	0x10624dd3

0800318c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	461a      	mov	r2, r3
 8003198:	460b      	mov	r3, r1
 800319a:	817b      	strh	r3, [r7, #10]
 800319c:	4613      	mov	r3, r2
 800319e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7fe ffe8 	bl	8002174 <HAL_GetTick>
 80031a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	f040 80e0 	bne.w	8003374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	2319      	movs	r3, #25
 80031ba:	2201      	movs	r2, #1
 80031bc:	4970      	ldr	r1, [pc, #448]	; (8003380 <HAL_I2C_Master_Transmit+0x1f4>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fc72 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0d3      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_I2C_Master_Transmit+0x50>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0cc      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d007      	beq.n	8003202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2221      	movs	r2, #33	; 0x21
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2210      	movs	r2, #16
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	893a      	ldrh	r2, [r7, #8]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a50      	ldr	r2, [pc, #320]	; (8003384 <HAL_I2C_Master_Transmit+0x1f8>)
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003244:	8979      	ldrh	r1, [r7, #10]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fadc 	bl	8003808 <I2C_MasterRequestWrite>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e08d      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003270:	e066      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6a39      	ldr	r1, [r7, #32]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fcec 	bl	8003c54 <I2C_WaitOnTXEFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d107      	bne.n	800329a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06b      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d11b      	bne.n	8003314 <HAL_I2C_Master_Transmit+0x188>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d017      	beq.n	8003314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	6a39      	ldr	r1, [r7, #32]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fcdc 	bl	8003cd6 <I2C_WaitOnBTFFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2b04      	cmp	r3, #4
 800332a:	d107      	bne.n	800333c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e01a      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d194      	bne.n	8003272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	00100002 	.word	0x00100002
 8003384:	ffff0000 	.word	0xffff0000

08003388 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08c      	sub	sp, #48	; 0x30
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	461a      	mov	r2, r3
 8003394:	460b      	mov	r3, r1
 8003396:	817b      	strh	r3, [r7, #10]
 8003398:	4613      	mov	r3, r2
 800339a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800339c:	f7fe feea 	bl	8002174 <HAL_GetTick>
 80033a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	f040 820b 	bne.w	80037c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2319      	movs	r3, #25
 80033b6:	2201      	movs	r2, #1
 80033b8:	497c      	ldr	r1, [pc, #496]	; (80035ac <HAL_I2C_Master_Receive+0x224>)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fb74 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
 80033c8:	e1fe      	b.n	80037c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2C_Master_Receive+0x50>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e1f7      	b.n	80037c8 <HAL_I2C_Master_Receive+0x440>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d007      	beq.n	80033fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2222      	movs	r2, #34	; 0x22
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2210      	movs	r2, #16
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	893a      	ldrh	r2, [r7, #8]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a5c      	ldr	r2, [pc, #368]	; (80035b0 <HAL_I2C_Master_Receive+0x228>)
 800343e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003440:	8979      	ldrh	r1, [r7, #10]
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fa60 	bl	800390c <I2C_MasterRequestRead>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e1b8      	b.n	80037c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d113      	bne.n	8003486 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	623b      	str	r3, [r7, #32]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	623b      	str	r3, [r7, #32]
 8003472:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e18c      	b.n	80037a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	2b01      	cmp	r3, #1
 800348c:	d11b      	bne.n	80034c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e16c      	b.n	80037a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d11b      	bne.n	8003506 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	e14c      	b.n	80037a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800352c:	e138      	b.n	80037a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	2b03      	cmp	r3, #3
 8003534:	f200 80f1 	bhi.w	800371a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	2b01      	cmp	r3, #1
 800353e:	d123      	bne.n	8003588 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fc07 	bl	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e139      	b.n	80037c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003586:	e10b      	b.n	80037a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	2b02      	cmp	r3, #2
 800358e:	d14e      	bne.n	800362e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	2200      	movs	r2, #0
 8003598:	4906      	ldr	r1, [pc, #24]	; (80035b4 <HAL_I2C_Master_Receive+0x22c>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fa84 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e10e      	b.n	80037c8 <HAL_I2C_Master_Receive+0x440>
 80035aa:	bf00      	nop
 80035ac:	00100002 	.word	0x00100002
 80035b0:	ffff0000 	.word	0xffff0000
 80035b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800362c:	e0b8      	b.n	80037a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	2200      	movs	r2, #0
 8003636:	4966      	ldr	r1, [pc, #408]	; (80037d0 <HAL_I2C_Master_Receive+0x448>)
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fa35 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0bf      	b.n	80037c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	2200      	movs	r2, #0
 8003692:	494f      	ldr	r1, [pc, #316]	; (80037d0 <HAL_I2C_Master_Receive+0x448>)
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fa07 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e091      	b.n	80037c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003718:	e042      	b.n	80037a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fb1a 	bl	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e04c      	b.n	80037c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d118      	bne.n	80037a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f47f aec2 	bne.w	800352e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3728      	adds	r7, #40	; 0x28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	00010004 	.word	0x00010004

080037d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e2:	b2db      	uxtb	r3, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	460b      	mov	r3, r1
 8003816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d006      	beq.n	8003832 <I2C_MasterRequestWrite+0x2a>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d003      	beq.n	8003832 <I2C_MasterRequestWrite+0x2a>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003830:	d108      	bne.n	8003844 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e00b      	b.n	800385c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	2b12      	cmp	r3, #18
 800384a:	d107      	bne.n	800385c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f91d 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00d      	beq.n	8003890 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d103      	bne.n	800388c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e035      	b.n	80038fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003898:	d108      	bne.n	80038ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800389a:	897b      	ldrh	r3, [r7, #10]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038a8:	611a      	str	r2, [r3, #16]
 80038aa:	e01b      	b.n	80038e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038ac:	897b      	ldrh	r3, [r7, #10]
 80038ae:	11db      	asrs	r3, r3, #7
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f003 0306 	and.w	r3, r3, #6
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f063 030f 	orn	r3, r3, #15
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	490e      	ldr	r1, [pc, #56]	; (8003904 <I2C_MasterRequestWrite+0xfc>)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f943 	bl	8003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e010      	b.n	80038fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038da:	897b      	ldrh	r3, [r7, #10]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4907      	ldr	r1, [pc, #28]	; (8003908 <I2C_MasterRequestWrite+0x100>)
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f933 	bl	8003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	00010008 	.word	0x00010008
 8003908:	00010002 	.word	0x00010002

0800390c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	460b      	mov	r3, r1
 800391a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003930:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d006      	beq.n	8003946 <I2C_MasterRequestRead+0x3a>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d003      	beq.n	8003946 <I2C_MasterRequestRead+0x3a>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003944:	d108      	bne.n	8003958 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e00b      	b.n	8003970 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	2b11      	cmp	r3, #17
 800395e:	d107      	bne.n	8003970 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f893 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00d      	beq.n	80039a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003996:	d103      	bne.n	80039a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e079      	b.n	8003a98 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ac:	d108      	bne.n	80039c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	e05f      	b.n	8003a80 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039c0:	897b      	ldrh	r3, [r7, #10]
 80039c2:	11db      	asrs	r3, r3, #7
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0306 	and.w	r3, r3, #6
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f063 030f 	orn	r3, r3, #15
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4930      	ldr	r1, [pc, #192]	; (8003aa0 <I2C_MasterRequestRead+0x194>)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f8b9 	bl	8003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e054      	b.n	8003a98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4929      	ldr	r1, [pc, #164]	; (8003aa4 <I2C_MasterRequestRead+0x198>)
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f8a9 	bl	8003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e044      	b.n	8003a98 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a32:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f831 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00d      	beq.n	8003a68 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5a:	d103      	bne.n	8003a64 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e017      	b.n	8003a98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a68:	897b      	ldrh	r3, [r7, #10]
 8003a6a:	11db      	asrs	r3, r3, #7
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f003 0306 	and.w	r3, r3, #6
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f063 030e 	orn	r3, r3, #14
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4907      	ldr	r1, [pc, #28]	; (8003aa4 <I2C_MasterRequestRead+0x198>)
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f865 	bl	8003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	00010008 	.word	0x00010008
 8003aa4:	00010002 	.word	0x00010002

08003aa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab8:	e025      	b.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d021      	beq.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac2:	f7fe fb57 	bl	8002174 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d116      	bne.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e023      	b.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10d      	bne.n	8003b2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	43da      	mvns	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	e00c      	b.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	43da      	mvns	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4013      	ands	r3, r2
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bf0c      	ite	eq
 8003b3e:	2301      	moveq	r3, #1
 8003b40:	2300      	movne	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d0b6      	beq.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b64:	e051      	b.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b74:	d123      	bne.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f043 0204 	orr.w	r2, r3, #4
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e046      	b.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d021      	beq.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7fe fad5 	bl	8002174 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d116      	bne.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e020      	b.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d10c      	bne.n	8003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	e00b      	b.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	43da      	mvns	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d18d      	bne.n	8003b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c60:	e02d      	b.n	8003cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f8ce 	bl	8003e04 <I2C_IsAcknowledgeFailed>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e02d      	b.n	8003cce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d021      	beq.n	8003cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7fe fa7b 	bl	8002174 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d116      	bne.n	8003cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e007      	b.n	8003cce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc8:	2b80      	cmp	r3, #128	; 0x80
 8003cca:	d1ca      	bne.n	8003c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ce2:	e02d      	b.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f88d 	bl	8003e04 <I2C_IsAcknowledgeFailed>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e02d      	b.n	8003d50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d021      	beq.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfc:	f7fe fa3a 	bl	8002174 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d302      	bcc.n	8003d12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d116      	bne.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e007      	b.n	8003d50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d1ca      	bne.n	8003ce4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d64:	e042      	b.n	8003dec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d119      	bne.n	8003da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0210 	mvn.w	r2, #16
 8003d7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e029      	b.n	8003dfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da8:	f7fe f9e4 	bl	8002174 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d302      	bcc.n	8003dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e007      	b.n	8003dfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d1b5      	bne.n	8003d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1a:	d11b      	bne.n	8003e54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f043 0204 	orr.w	r2, r3, #4
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e267      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d075      	beq.n	8003f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e82:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e8e:	4b85      	ldr	r3, [pc, #532]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d112      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9a:	4b82      	ldr	r3, [pc, #520]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea6:	d10b      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	4b7e      	ldr	r3, [pc, #504]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d05b      	beq.n	8003f6c <HAL_RCC_OscConfig+0x108>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d157      	bne.n	8003f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e242      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec8:	d106      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x74>
 8003eca:	4b76      	ldr	r3, [pc, #472]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a75      	ldr	r2, [pc, #468]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e01d      	b.n	8003f14 <HAL_RCC_OscConfig+0xb0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x98>
 8003ee2:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6f      	ldr	r2, [pc, #444]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b6d      	ldr	r3, [pc, #436]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a6c      	ldr	r2, [pc, #432]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e00b      	b.n	8003f14 <HAL_RCC_OscConfig+0xb0>
 8003efc:	4b69      	ldr	r3, [pc, #420]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a68      	ldr	r2, [pc, #416]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b66      	ldr	r3, [pc, #408]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a65      	ldr	r2, [pc, #404]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fe f92a 	bl	8002174 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f24:	f7fe f926 	bl	8002174 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e207      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	4b5b      	ldr	r3, [pc, #364]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0xc0>
 8003f42:	e014      	b.n	8003f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fe f916 	bl	8002174 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fe f912 	bl	8002174 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e1f3      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5e:	4b51      	ldr	r3, [pc, #324]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0xe8>
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d063      	beq.n	8004042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7a:	4b4a      	ldr	r3, [pc, #296]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f86:	4b47      	ldr	r3, [pc, #284]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d11c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f92:	4b44      	ldr	r3, [pc, #272]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d116      	bne.n	8003fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9e:	4b41      	ldr	r3, [pc, #260]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x152>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e1c7      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b3b      	ldr	r3, [pc, #236]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4937      	ldr	r1, [pc, #220]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fca:	e03a      	b.n	8004042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d020      	beq.n	8004016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd4:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCC_OscConfig+0x244>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7fe f8cb 	bl	8002174 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe2:	f7fe f8c7 	bl	8002174 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e1a8      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff4:	4b2b      	ldr	r3, [pc, #172]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004000:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4925      	ldr	r1, [pc, #148]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8004010:	4313      	orrs	r3, r2
 8004012:	600b      	str	r3, [r1, #0]
 8004014:	e015      	b.n	8004042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_RCC_OscConfig+0x244>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe f8aa 	bl	8002174 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004024:	f7fe f8a6 	bl	8002174 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e187      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004036:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d036      	beq.n	80040bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_RCC_OscConfig+0x248>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fe f88a 	bl	8002174 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004064:	f7fe f886 	bl	8002174 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e167      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_OscConfig+0x240>)
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x200>
 8004082:	e01b      	b.n	80040bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCC_OscConfig+0x248>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fe f873 	bl	8002174 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004090:	e00e      	b.n	80040b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004092:	f7fe f86f 	bl	8002174 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d907      	bls.n	80040b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e150      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
 80040a4:	40023800 	.word	0x40023800
 80040a8:	42470000 	.word	0x42470000
 80040ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	4b88      	ldr	r3, [pc, #544]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 80040b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ea      	bne.n	8004092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8097 	beq.w	80041f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ce:	4b81      	ldr	r3, [pc, #516]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10f      	bne.n	80040fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	4b7d      	ldr	r3, [pc, #500]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	4a7c      	ldr	r2, [pc, #496]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ea:	4b7a      	ldr	r3, [pc, #488]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fa:	4b77      	ldr	r3, [pc, #476]	; (80042d8 <HAL_RCC_OscConfig+0x474>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d118      	bne.n	8004138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004106:	4b74      	ldr	r3, [pc, #464]	; (80042d8 <HAL_RCC_OscConfig+0x474>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a73      	ldr	r2, [pc, #460]	; (80042d8 <HAL_RCC_OscConfig+0x474>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004112:	f7fe f82f 	bl	8002174 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411a:	f7fe f82b 	bl	8002174 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e10c      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	4b6a      	ldr	r3, [pc, #424]	; (80042d8 <HAL_RCC_OscConfig+0x474>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x2ea>
 8004140:	4b64      	ldr	r3, [pc, #400]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	4a63      	ldr	r2, [pc, #396]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6713      	str	r3, [r2, #112]	; 0x70
 800414c:	e01c      	b.n	8004188 <HAL_RCC_OscConfig+0x324>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b05      	cmp	r3, #5
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x30c>
 8004156:	4b5f      	ldr	r3, [pc, #380]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4a5e      	ldr	r2, [pc, #376]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 800415c:	f043 0304 	orr.w	r3, r3, #4
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
 8004162:	4b5c      	ldr	r3, [pc, #368]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a5b      	ldr	r2, [pc, #364]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6713      	str	r3, [r2, #112]	; 0x70
 800416e:	e00b      	b.n	8004188 <HAL_RCC_OscConfig+0x324>
 8004170:	4b58      	ldr	r3, [pc, #352]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	4a57      	ldr	r2, [pc, #348]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	6713      	str	r3, [r2, #112]	; 0x70
 800417c:	4b55      	ldr	r3, [pc, #340]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a54      	ldr	r2, [pc, #336]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004182:	f023 0304 	bic.w	r3, r3, #4
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d015      	beq.n	80041bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fd fff0 	bl	8002174 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004196:	e00a      	b.n	80041ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fd ffec 	bl	8002174 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0cb      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ae:	4b49      	ldr	r3, [pc, #292]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0ee      	beq.n	8004198 <HAL_RCC_OscConfig+0x334>
 80041ba:	e014      	b.n	80041e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041bc:	f7fd ffda 	bl	8002174 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c2:	e00a      	b.n	80041da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c4:	f7fd ffd6 	bl	8002174 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e0b5      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041da:	4b3e      	ldr	r3, [pc, #248]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ee      	bne.n	80041c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ec:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	4a38      	ldr	r2, [pc, #224]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 80041f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80a1 	beq.w	8004344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004202:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b08      	cmp	r3, #8
 800420c:	d05c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d141      	bne.n	800429a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b31      	ldr	r3, [pc, #196]	; (80042dc <HAL_RCC_OscConfig+0x478>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fd ffaa 	bl	8002174 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004224:	f7fd ffa6 	bl	8002174 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e087      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	019b      	lsls	r3, r3, #6
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	3b01      	subs	r3, #1
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	061b      	lsls	r3, r3, #24
 8004266:	491b      	ldr	r1, [pc, #108]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_RCC_OscConfig+0x478>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004272:	f7fd ff7f 	bl	8002174 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427a:	f7fd ff7b 	bl	8002174 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e05c      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCC_OscConfig+0x416>
 8004298:	e054      	b.n	8004344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <HAL_RCC_OscConfig+0x478>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fd ff68 	bl	8002174 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fd ff64 	bl	8002174 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e045      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCC_OscConfig+0x470>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x444>
 80042c6:	e03d      	b.n	8004344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e038      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000
 80042dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <HAL_RCC_OscConfig+0x4ec>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d028      	beq.n	8004340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d121      	bne.n	8004340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d11a      	bne.n	8004340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004318:	4293      	cmp	r3, r2
 800431a:	d111      	bne.n	8004340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	3b01      	subs	r3, #1
 800432a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d107      	bne.n	8004340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800

08004354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0cc      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004368:	4b68      	ldr	r3, [pc, #416]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d90c      	bls.n	8004390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b65      	ldr	r3, [pc, #404]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b63      	ldr	r3, [pc, #396]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0b8      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d020      	beq.n	80043de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043a8:	4b59      	ldr	r3, [pc, #356]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a58      	ldr	r2, [pc, #352]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043c0:	4b53      	ldr	r3, [pc, #332]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4a52      	ldr	r2, [pc, #328]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043cc:	4b50      	ldr	r3, [pc, #320]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	494d      	ldr	r1, [pc, #308]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d044      	beq.n	8004474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d107      	bne.n	8004402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b47      	ldr	r3, [pc, #284]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d119      	bne.n	8004432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e07f      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d003      	beq.n	8004412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800440e:	2b03      	cmp	r3, #3
 8004410:	d107      	bne.n	8004422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004412:	4b3f      	ldr	r3, [pc, #252]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e06f      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004422:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e067      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004432:	4b37      	ldr	r3, [pc, #220]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f023 0203 	bic.w	r2, r3, #3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4934      	ldr	r1, [pc, #208]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004444:	f7fd fe96 	bl	8002174 <HAL_GetTick>
 8004448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	e00a      	b.n	8004462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444c:	f7fd fe92 	bl	8002174 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e04f      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004462:	4b2b      	ldr	r3, [pc, #172]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 020c 	and.w	r2, r3, #12
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	429a      	cmp	r2, r3
 8004472:	d1eb      	bne.n	800444c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004474:	4b25      	ldr	r3, [pc, #148]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d20c      	bcs.n	800449c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b22      	ldr	r3, [pc, #136]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b20      	ldr	r3, [pc, #128]	; (800450c <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e032      	b.n	8004502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4916      	ldr	r1, [pc, #88]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	490e      	ldr	r1, [pc, #56]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044da:	f000 f821 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 80044de:	4602      	mov	r2, r0
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	490a      	ldr	r1, [pc, #40]	; (8004514 <HAL_RCC_ClockConfig+0x1c0>)
 80044ec:	5ccb      	ldrb	r3, [r1, r3]
 80044ee:	fa22 f303 	lsr.w	r3, r2, r3
 80044f2:	4a09      	ldr	r2, [pc, #36]	; (8004518 <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCC_ClockConfig+0x1c8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fd fdf6 	bl	80020ec <HAL_InitTick>

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40023c00 	.word	0x40023c00
 8004510:	40023800 	.word	0x40023800
 8004514:	08009628 	.word	0x08009628
 8004518:	2000000c 	.word	0x2000000c
 800451c:	20000010 	.word	0x20000010

08004520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004524:	b090      	sub	sp, #64	; 0x40
 8004526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
 800452c:	2300      	movs	r3, #0
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004530:	2300      	movs	r3, #0
 8004532:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004538:	4b59      	ldr	r3, [pc, #356]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 030c 	and.w	r3, r3, #12
 8004540:	2b08      	cmp	r3, #8
 8004542:	d00d      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x40>
 8004544:	2b08      	cmp	r3, #8
 8004546:	f200 80a1 	bhi.w	800468c <HAL_RCC_GetSysClockFreq+0x16c>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_RCC_GetSysClockFreq+0x34>
 800454e:	2b04      	cmp	r3, #4
 8004550:	d003      	beq.n	800455a <HAL_RCC_GetSysClockFreq+0x3a>
 8004552:	e09b      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004554:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004556:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004558:	e09b      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800455a:	4b53      	ldr	r3, [pc, #332]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800455c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800455e:	e098      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004560:	4b4f      	ldr	r3, [pc, #316]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800456a:	4b4d      	ldr	r3, [pc, #308]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d028      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004576:	4b4a      	ldr	r3, [pc, #296]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	099b      	lsrs	r3, r3, #6
 800457c:	2200      	movs	r2, #0
 800457e:	623b      	str	r3, [r7, #32]
 8004580:	627a      	str	r2, [r7, #36]	; 0x24
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004588:	2100      	movs	r1, #0
 800458a:	4b47      	ldr	r3, [pc, #284]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800458c:	fb03 f201 	mul.w	r2, r3, r1
 8004590:	2300      	movs	r3, #0
 8004592:	fb00 f303 	mul.w	r3, r0, r3
 8004596:	4413      	add	r3, r2
 8004598:	4a43      	ldr	r2, [pc, #268]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800459a:	fba0 1202 	umull	r1, r2, r0, r2
 800459e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045a0:	460a      	mov	r2, r1
 80045a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80045a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a6:	4413      	add	r3, r2
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ac:	2200      	movs	r2, #0
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	61fa      	str	r2, [r7, #28]
 80045b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045ba:	f7fc fb6d 	bl	8000c98 <__aeabi_uldivmod>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4613      	mov	r3, r2
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c6:	e053      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c8:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	2200      	movs	r2, #0
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	617a      	str	r2, [r7, #20]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045da:	f04f 0b00 	mov.w	fp, #0
 80045de:	4652      	mov	r2, sl
 80045e0:	465b      	mov	r3, fp
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f04f 0100 	mov.w	r1, #0
 80045ea:	0159      	lsls	r1, r3, #5
 80045ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f0:	0150      	lsls	r0, r2, #5
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	ebb2 080a 	subs.w	r8, r2, sl
 80045fa:	eb63 090b 	sbc.w	r9, r3, fp
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800460a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800460e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004612:	ebb2 0408 	subs.w	r4, r2, r8
 8004616:	eb63 0509 	sbc.w	r5, r3, r9
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	00eb      	lsls	r3, r5, #3
 8004624:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004628:	00e2      	lsls	r2, r4, #3
 800462a:	4614      	mov	r4, r2
 800462c:	461d      	mov	r5, r3
 800462e:	eb14 030a 	adds.w	r3, r4, sl
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	eb45 030b 	adc.w	r3, r5, fp
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004646:	4629      	mov	r1, r5
 8004648:	028b      	lsls	r3, r1, #10
 800464a:	4621      	mov	r1, r4
 800464c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004650:	4621      	mov	r1, r4
 8004652:	028a      	lsls	r2, r1, #10
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465a:	2200      	movs	r2, #0
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	60fa      	str	r2, [r7, #12]
 8004660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004664:	f7fc fb18 	bl	8000c98 <__aeabi_uldivmod>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4613      	mov	r3, r2
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	3301      	adds	r3, #1
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800468a:	e002      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800468e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004694:	4618      	mov	r0, r3
 8004696:	3740      	adds	r7, #64	; 0x40
 8004698:	46bd      	mov	sp, r7
 800469a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	017d7840 	.word	0x017d7840

080046ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	2000000c 	.word	0x2000000c

080046c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046c8:	f7ff fff0 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0a9b      	lsrs	r3, r3, #10
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4903      	ldr	r1, [pc, #12]	; (80046e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40023800 	.word	0x40023800
 80046e8:	08009638 	.word	0x08009638

080046ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046f0:	f7ff ffdc 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <HAL_RCC_GetPCLK2Freq+0x20>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	0b5b      	lsrs	r3, r3, #13
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	4903      	ldr	r1, [pc, #12]	; (8004710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004702:	5ccb      	ldrb	r3, [r1, r3]
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	08009638 	.word	0x08009638

08004714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e041      	b.n	80047aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fd fa84 	bl	8001c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3304      	adds	r3, #4
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f000 fa88 	bl	8004c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d001      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e044      	b.n	8004856 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <HAL_TIM_Base_Start_IT+0xb0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d018      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x6c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f6:	d013      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x6c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1a      	ldr	r2, [pc, #104]	; (8004868 <HAL_TIM_Base_Start_IT+0xb4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x6c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a19      	ldr	r2, [pc, #100]	; (800486c <HAL_TIM_Base_Start_IT+0xb8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x6c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a17      	ldr	r2, [pc, #92]	; (8004870 <HAL_TIM_Base_Start_IT+0xbc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x6c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a16      	ldr	r2, [pc, #88]	; (8004874 <HAL_TIM_Base_Start_IT+0xc0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d111      	bne.n	8004844 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b06      	cmp	r3, #6
 8004830:	d010      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004842:	e007      	b.n	8004854 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40010000 	.word	0x40010000
 8004868:	40000400 	.word	0x40000400
 800486c:	40000800 	.word	0x40000800
 8004870:	40000c00 	.word	0x40000c00
 8004874:	40014000 	.word	0x40014000

08004878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b02      	cmp	r3, #2
 800488c:	d122      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b02      	cmp	r3, #2
 800489a:	d11b      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0202 	mvn.w	r2, #2
 80048a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f9b5 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9a7 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f9b8 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d122      	bne.n	8004928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d11b      	bne.n	8004928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0204 	mvn.w	r2, #4
 80048f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f98b 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f97d 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f98e 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b08      	cmp	r3, #8
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b08      	cmp	r3, #8
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0208 	mvn.w	r2, #8
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2204      	movs	r2, #4
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f961 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f953 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f964 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b10      	cmp	r3, #16
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b10      	cmp	r3, #16
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0210 	mvn.w	r2, #16
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2208      	movs	r2, #8
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f937 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f929 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f93a 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d10e      	bne.n	80049fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d107      	bne.n	80049fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0201 	mvn.w	r2, #1
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc fe86 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b80      	cmp	r3, #128	; 0x80
 8004a08:	d10e      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a14:	2b80      	cmp	r3, #128	; 0x80
 8004a16:	d107      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fab2 	bl	8004f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d10e      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d107      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8ff 	bl	8004c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d10e      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d107      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0220 	mvn.w	r2, #32
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa7c 	bl	8004f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e0b4      	b.n	8004c0e <HAL_TIM_ConfigClockSource+0x186>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004adc:	d03e      	beq.n	8004b5c <HAL_TIM_ConfigClockSource+0xd4>
 8004ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae2:	f200 8087 	bhi.w	8004bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aea:	f000 8086 	beq.w	8004bfa <HAL_TIM_ConfigClockSource+0x172>
 8004aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af2:	d87f      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004af4:	2b70      	cmp	r3, #112	; 0x70
 8004af6:	d01a      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0xa6>
 8004af8:	2b70      	cmp	r3, #112	; 0x70
 8004afa:	d87b      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004afc:	2b60      	cmp	r3, #96	; 0x60
 8004afe:	d050      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0x11a>
 8004b00:	2b60      	cmp	r3, #96	; 0x60
 8004b02:	d877      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004b04:	2b50      	cmp	r3, #80	; 0x50
 8004b06:	d03c      	beq.n	8004b82 <HAL_TIM_ConfigClockSource+0xfa>
 8004b08:	2b50      	cmp	r3, #80	; 0x50
 8004b0a:	d873      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d058      	beq.n	8004bc2 <HAL_TIM_ConfigClockSource+0x13a>
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d86f      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004b14:	2b30      	cmp	r3, #48	; 0x30
 8004b16:	d064      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b18:	2b30      	cmp	r3, #48	; 0x30
 8004b1a:	d86b      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d060      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d867      	bhi.n	8004bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d05c      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d05a      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b2c:	e062      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f000 f98d 	bl	8004e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	609a      	str	r2, [r3, #8]
      break;
 8004b5a:	e04f      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	6899      	ldr	r1, [r3, #8]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f000 f976 	bl	8004e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b7e:	609a      	str	r2, [r3, #8]
      break;
 8004b80:	e03c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	6859      	ldr	r1, [r3, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f000 f8ea 	bl	8004d68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2150      	movs	r1, #80	; 0x50
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f943 	bl	8004e26 <TIM_ITRx_SetConfig>
      break;
 8004ba0:	e02c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6859      	ldr	r1, [r3, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f000 f909 	bl	8004dc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2160      	movs	r1, #96	; 0x60
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f933 	bl	8004e26 <TIM_ITRx_SetConfig>
      break;
 8004bc0:	e01c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6859      	ldr	r1, [r3, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f000 f8ca 	bl	8004d68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2140      	movs	r1, #64	; 0x40
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f923 	bl	8004e26 <TIM_ITRx_SetConfig>
      break;
 8004be0:	e00c      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4619      	mov	r1, r3
 8004bec:	4610      	mov	r0, r2
 8004bee:	f000 f91a 	bl	8004e26 <TIM_ITRx_SetConfig>
      break;
 8004bf2:	e003      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf8:	e000      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <TIM_Base_SetConfig+0xe4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a31      	ldr	r2, [pc, #196]	; (8004d50 <TIM_Base_SetConfig+0xe8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <TIM_Base_SetConfig+0xec>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x38>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a2f      	ldr	r2, [pc, #188]	; (8004d58 <TIM_Base_SetConfig+0xf0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a25      	ldr	r2, [pc, #148]	; (8004d4c <TIM_Base_SetConfig+0xe4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01b      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d017      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <TIM_Base_SetConfig+0xe8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <TIM_Base_SetConfig+0xec>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a20      	ldr	r2, [pc, #128]	; (8004d58 <TIM_Base_SetConfig+0xf0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <TIM_Base_SetConfig+0xf4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <TIM_Base_SetConfig+0xf8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_Base_SetConfig+0x8a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <TIM_Base_SetConfig+0xfc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a08      	ldr	r2, [pc, #32]	; (8004d4c <TIM_Base_SetConfig+0xe4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d103      	bne.n	8004d38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	615a      	str	r2, [r3, #20]
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40014400 	.word	0x40014400
 8004d64:	40014800 	.word	0x40014800

08004d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f023 030a 	bic.w	r3, r3, #10
 8004da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	621a      	str	r2, [r3, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b087      	sub	sp, #28
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f023 0210 	bic.w	r2, r3, #16
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	031b      	lsls	r3, r3, #12
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f043 0307 	orr.w	r3, r3, #7
 8004e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	609a      	str	r2, [r3, #8]
}
 8004e50:	bf00      	nop
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	021a      	lsls	r2, r3, #8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	609a      	str	r2, [r3, #8]
}
 8004e90:	bf00      	nop
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e050      	b.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d018      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f00:	d013      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a16      	ldr	r2, [pc, #88]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d10c      	bne.n	8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40014000 	.word	0x40014000

08004f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e03f      	b.n	8005032 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fc fe66 	bl	8001c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2224      	movs	r2, #36	; 0x24
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 ffd7 	bl	8005f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b08a      	sub	sp, #40	; 0x28
 800503e:	af02      	add	r7, sp, #8
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b20      	cmp	r3, #32
 8005058:	d17c      	bne.n	8005154 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_UART_Transmit+0x2c>
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e075      	b.n	8005156 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_UART_Transmit+0x3e>
 8005074:	2302      	movs	r3, #2
 8005076:	e06e      	b.n	8005156 <HAL_UART_Transmit+0x11c>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2221      	movs	r2, #33	; 0x21
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800508e:	f7fd f871 	bl	8002174 <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a8:	d108      	bne.n	80050bc <HAL_UART_Transmit+0x82>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	e003      	b.n	80050c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050cc:	e02a      	b.n	8005124 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2180      	movs	r1, #128	; 0x80
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 fc8f 	bl	80059fc <UART_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e036      	b.n	8005156 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	3302      	adds	r3, #2
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e007      	b.n	8005116 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1cf      	bne.n	80050ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2200      	movs	r2, #0
 8005136:	2140      	movs	r1, #64	; 0x40
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 fc5f 	bl	80059fc <UART_WaitOnFlagUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e006      	b.n	8005156 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	4613      	mov	r3, r2
 800516a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b20      	cmp	r3, #32
 8005176:	d130      	bne.n	80051da <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <HAL_UART_Transmit_IT+0x26>
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e029      	b.n	80051dc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_UART_Transmit_IT+0x38>
 8005192:	2302      	movs	r3, #2
 8005194:	e022      	b.n	80051dc <HAL_UART_Transmit_IT+0x7e>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	88fa      	ldrh	r2, [r7, #6]
 80051a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	88fa      	ldrh	r2, [r7, #6]
 80051ae:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2221      	movs	r2, #33	; 0x21
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051d4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08c      	sub	sp, #48	; 0x30
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d152      	bne.n	80052a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e04b      	b.n	80052aa <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800521c:	2302      	movs	r3, #2
 800521e:	e044      	b.n	80052aa <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	461a      	mov	r2, r3
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 fc4f 	bl	8005ad8 <UART_Start_Receive_DMA>
 800523a:	4603      	mov	r3, r0
 800523c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005244:	2b00      	cmp	r3, #0
 8005246:	d12c      	bne.n	80052a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	2b01      	cmp	r3, #1
 800524e:	d125      	bne.n	800529c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	617b      	str	r3, [r7, #20]
   return(result);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f043 0310 	orr.w	r3, r3, #16
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005286:	627a      	str	r2, [r7, #36]	; 0x24
 8005288:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6a39      	ldr	r1, [r7, #32]
 800528c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	61fb      	str	r3, [r7, #28]
   return(result);
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800529a:	e002      	b.n	80052a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80052a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052a6:	e000      	b.n	80052aa <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
  }
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3730      	adds	r7, #48	; 0x30
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b0ba      	sub	sp, #232	; 0xe8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052da:	2300      	movs	r3, #0
 80052dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10f      	bne.n	800531a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_UART_IRQHandler+0x66>
 8005306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fd85 	bl	8005e22 <UART_Receive_IT>
      return;
 8005318:	e256      	b.n	80057c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800531a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80de 	beq.w	80054e0 <HAL_UART_IRQHandler+0x22c>
 8005324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005334:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80d1 	beq.w	80054e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00b      	beq.n	8005362 <HAL_UART_IRQHandler+0xae>
 800534a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f043 0201 	orr.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <HAL_UART_IRQHandler+0xd2>
 800536e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f043 0202 	orr.w	r2, r3, #2
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_UART_IRQHandler+0xf6>
 8005392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f043 0204 	orr.w	r2, r3, #4
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d011      	beq.n	80053da <HAL_UART_IRQHandler+0x126>
 80053b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d105      	bne.n	80053ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f043 0208 	orr.w	r2, r3, #8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 81ed 	beq.w	80057be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_UART_IRQHandler+0x14e>
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fd10 	bl	8005e22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <HAL_UART_IRQHandler+0x17a>
 8005426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d04f      	beq.n	80054ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fc18 	bl	8005c64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d141      	bne.n	80054c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3314      	adds	r3, #20
 8005448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800545c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3314      	adds	r3, #20
 800546a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800546e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800547a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1d9      	bne.n	8005442 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	2b00      	cmp	r3, #0
 8005494:	d013      	beq.n	80054be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	4a7d      	ldr	r2, [pc, #500]	; (8005690 <HAL_UART_IRQHandler+0x3dc>)
 800549c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fd f91e 	bl	80026e4 <HAL_DMA_Abort_IT>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054b8:	4610      	mov	r0, r2
 80054ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054bc:	e00e      	b.n	80054dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f99a 	bl	80057f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c4:	e00a      	b.n	80054dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f996 	bl	80057f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	e006      	b.n	80054dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f992 	bl	80057f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054da:	e170      	b.n	80057be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	bf00      	nop
    return;
 80054de:	e16e      	b.n	80057be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	f040 814a 	bne.w	800577e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8143 	beq.w	800577e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 813c 	beq.w	800577e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005506:	2300      	movs	r3, #0
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	f040 80b4 	bne.w	8005694 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005538:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8140 	beq.w	80057c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800554a:	429a      	cmp	r2, r3
 800554c:	f080 8139 	bcs.w	80057c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005556:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005562:	f000 8088 	beq.w	8005676 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800557c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005592:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800559e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1d9      	bne.n	8005566 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3314      	adds	r3, #20
 80055b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055c4:	f023 0301 	bic.w	r3, r3, #1
 80055c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3314      	adds	r3, #20
 80055d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e1      	bne.n	80055b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3314      	adds	r3, #20
 80055f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3314      	adds	r3, #20
 800560e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005612:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005614:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005618:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e3      	bne.n	80055ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005646:	f023 0310 	bic.w	r3, r3, #16
 800564a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005658:	65ba      	str	r2, [r7, #88]	; 0x58
 800565a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800565e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e3      	bne.n	8005634 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	4618      	mov	r0, r3
 8005672:	f7fc ffc7 	bl	8002604 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800567e:	b29b      	uxth	r3, r3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	b29b      	uxth	r3, r3
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fc f81c 	bl	80016c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800568c:	e099      	b.n	80057c2 <HAL_UART_IRQHandler+0x50e>
 800568e:	bf00      	nop
 8005690:	08005d2b 	.word	0x08005d2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800569c:	b29b      	uxth	r3, r3
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 808b 	beq.w	80057c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8086 	beq.w	80057c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056de:	647a      	str	r2, [r7, #68]	; 0x44
 80056e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e3      	bne.n	80056ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3314      	adds	r3, #20
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	623b      	str	r3, [r7, #32]
   return(result);
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3314      	adds	r3, #20
 8005712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005716:	633a      	str	r2, [r7, #48]	; 0x30
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800571c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e3      	bne.n	80056f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	60fb      	str	r3, [r7, #12]
   return(result);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0310 	bic.w	r3, r3, #16
 800574e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800575c:	61fa      	str	r2, [r7, #28]
 800575e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	69b9      	ldr	r1, [r7, #24]
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	617b      	str	r3, [r7, #20]
   return(result);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e3      	bne.n	8005738 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fb ffa4 	bl	80016c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800577c:	e023      	b.n	80057c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_UART_IRQHandler+0x4ea>
 800578a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fadb 	bl	8005d52 <UART_Transmit_IT>
    return;
 800579c:	e014      	b.n	80057c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00e      	beq.n	80057c8 <HAL_UART_IRQHandler+0x514>
 80057aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fb1b 	bl	8005df2 <UART_EndTransmit_IT>
    return;
 80057bc:	e004      	b.n	80057c8 <HAL_UART_IRQHandler+0x514>
    return;
 80057be:	bf00      	nop
 80057c0:	e002      	b.n	80057c8 <HAL_UART_IRQHandler+0x514>
      return;
 80057c2:	bf00      	nop
 80057c4:	e000      	b.n	80057c8 <HAL_UART_IRQHandler+0x514>
      return;
 80057c6:	bf00      	nop
  }
}
 80057c8:	37e8      	adds	r7, #232	; 0xe8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop

080057d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b09c      	sub	sp, #112	; 0x70
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d172      	bne.n	800590e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582a:	2200      	movs	r2, #0
 800582c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800582e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	330c      	adds	r3, #12
 8005834:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800583e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005844:	66bb      	str	r3, [r7, #104]	; 0x68
 8005846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	330c      	adds	r3, #12
 800584c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800584e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005850:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800585c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3314      	adds	r3, #20
 8005868:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	667b      	str	r3, [r7, #100]	; 0x64
 800587a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3314      	adds	r3, #20
 8005880:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005882:	647a      	str	r2, [r7, #68]	; 0x44
 8005884:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3314      	adds	r3, #20
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	623b      	str	r3, [r7, #32]
   return(result);
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ac:	663b      	str	r3, [r7, #96]	; 0x60
 80058ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3314      	adds	r3, #20
 80058b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058b6:	633a      	str	r2, [r7, #48]	; 0x30
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e5      	bne.n	8005896 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d119      	bne.n	800590e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f023 0310 	bic.w	r3, r3, #16
 80058f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058fa:	61fa      	str	r2, [r7, #28]
 80058fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	69b9      	ldr	r1, [r7, #24]
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	617b      	str	r3, [r7, #20]
   return(result);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e5      	bne.n	80058da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	2b01      	cmp	r3, #1
 8005914:	d106      	bne.n	8005924 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800591a:	4619      	mov	r1, r3
 800591c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800591e:	f7fb fed1 	bl	80016c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005922:	e002      	b.n	800592a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005924:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005926:	f7ff ff53 	bl	80057d0 <HAL_UART_RxCpltCallback>
}
 800592a:	bf00      	nop
 800592c:	3770      	adds	r7, #112	; 0x70
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	2b01      	cmp	r3, #1
 8005946:	d108      	bne.n	800595a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	4619      	mov	r1, r3
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7fb feb6 	bl	80016c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005958:	e002      	b.n	8005960 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7ff ff42 	bl	80057e4 <HAL_UART_RxHalfCpltCallback>
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	bf0c      	ite	eq
 8005988:	2301      	moveq	r3, #1
 800598a:	2300      	movne	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b21      	cmp	r3, #33	; 0x21
 800599a:	d108      	bne.n	80059ae <UART_DMAError+0x46>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2200      	movs	r2, #0
 80059a6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80059a8:	68b8      	ldr	r0, [r7, #8]
 80059aa:	f000 f933 	bl	8005c14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	bf0c      	ite	eq
 80059bc:	2301      	moveq	r3, #1
 80059be:	2300      	movne	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b22      	cmp	r3, #34	; 0x22
 80059ce:	d108      	bne.n	80059e2 <UART_DMAError+0x7a>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2200      	movs	r2, #0
 80059da:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80059dc:	68b8      	ldr	r0, [r7, #8]
 80059de:	f000 f941 	bl	8005c64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f043 0210 	orr.w	r2, r3, #16
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ee:	68b8      	ldr	r0, [r7, #8]
 80059f0:	f7ff ff02 	bl	80057f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b090      	sub	sp, #64	; 0x40
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0c:	e050      	b.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d04c      	beq.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a1c:	f7fc fbaa 	bl	8002174 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d241      	bcs.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	330c      	adds	r3, #12
 8005a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a4c:	637a      	str	r2, [r7, #52]	; 0x34
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e5      	bne.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3314      	adds	r3, #20
 8005a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3314      	adds	r3, #20
 8005a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a80:	623a      	str	r2, [r7, #32]
 8005a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	69f9      	ldr	r1, [r7, #28]
 8005a86:	6a3a      	ldr	r2, [r7, #32]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e00f      	b.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	bf0c      	ite	eq
 8005ac0:	2301      	moveq	r3, #1
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d09f      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3740      	adds	r7, #64	; 0x40
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b098      	sub	sp, #96	; 0x60
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2222      	movs	r2, #34	; 0x22
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	4a40      	ldr	r2, [pc, #256]	; (8005c08 <UART_Start_Receive_DMA+0x130>)
 8005b06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	4a3f      	ldr	r2, [pc, #252]	; (8005c0c <UART_Start_Receive_DMA+0x134>)
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	4a3e      	ldr	r2, [pc, #248]	; (8005c10 <UART_Start_Receive_DMA+0x138>)
 8005b16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b20:	f107 0308 	add.w	r3, r7, #8
 8005b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	f7fc fd0c 	bl	8002554 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d019      	beq.n	8005b96 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	330c      	adds	r3, #12
 8005b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b82:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e5      	bne.n	8005b62 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	657b      	str	r3, [r7, #84]	; 0x54
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3314      	adds	r3, #20
 8005bb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bb6:	63ba      	str	r2, [r7, #56]	; 0x38
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be0:	653b      	str	r3, [r7, #80]	; 0x50
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bea:	627a      	str	r2, [r7, #36]	; 0x24
 8005bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6a39      	ldr	r1, [r7, #32]
 8005bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3760      	adds	r7, #96	; 0x60
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	0800580d 	.word	0x0800580d
 8005c0c:	08005933 	.word	0x08005933
 8005c10:	08005969 	.word	0x08005969

08005c14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	; 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	330c      	adds	r3, #12
 8005c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	61ba      	str	r2, [r7, #24]
 8005c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6979      	ldr	r1, [r7, #20]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e5      	bne.n	8005c1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c58:	bf00      	nop
 8005c5a:	3724      	adds	r7, #36	; 0x24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b095      	sub	sp, #84	; 0x54
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c8c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e5      	bne.n	8005c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3314      	adds	r3, #20
 8005cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e5      	bne.n	8005ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d119      	bne.n	8005d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 0310 	bic.w	r3, r3, #16
 8005cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cfc:	61ba      	str	r2, [r7, #24]
 8005cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6979      	ldr	r1, [r7, #20]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e5      	bne.n	8005cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d1e:	bf00      	nop
 8005d20:	3754      	adds	r7, #84	; 0x54
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff fd57 	bl	80057f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b21      	cmp	r3, #33	; 0x21
 8005d64:	d13e      	bne.n	8005de4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6e:	d114      	bne.n	8005d9a <UART_Transmit_IT+0x48>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d110      	bne.n	8005d9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	1c9a      	adds	r2, r3, #2
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	621a      	str	r2, [r3, #32]
 8005d98:	e008      	b.n	8005dac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	1c59      	adds	r1, r3, #1
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6211      	str	r1, [r2, #32]
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	4619      	mov	r1, r3
 8005dba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10f      	bne.n	8005de0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e000      	b.n	8005de6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fb fc82 	bl	800171c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b08c      	sub	sp, #48	; 0x30
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b22      	cmp	r3, #34	; 0x22
 8005e34:	f040 80ab 	bne.w	8005f8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e40:	d117      	bne.n	8005e72 <UART_Receive_IT+0x50>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d113      	bne.n	8005e72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	1c9a      	adds	r2, r3, #2
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e70:	e026      	b.n	8005ec0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e84:	d007      	beq.n	8005e96 <UART_Receive_IT+0x74>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <UART_Receive_IT+0x82>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e008      	b.n	8005eb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d15a      	bne.n	8005f8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0220 	bic.w	r2, r2, #32
 8005ee2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695a      	ldr	r2, [r3, #20]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0201 	bic.w	r2, r2, #1
 8005f02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d135      	bne.n	8005f80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f023 0310 	bic.w	r3, r3, #16
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	623a      	str	r2, [r7, #32]
 8005f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	69f9      	ldr	r1, [r7, #28]
 8005f40:	6a3a      	ldr	r2, [r7, #32]
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b10      	cmp	r3, #16
 8005f5a:	d10a      	bne.n	8005f72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7fb fba3 	bl	80016c4 <HAL_UARTEx_RxEventCallback>
 8005f7e:	e002      	b.n	8005f86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff fc25 	bl	80057d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e002      	b.n	8005f90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e000      	b.n	8005f90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f8e:	2302      	movs	r3, #2
  }
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3730      	adds	r7, #48	; 0x30
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f9c:	b0c0      	sub	sp, #256	; 0x100
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb4:	68d9      	ldr	r1, [r3, #12]
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	ea40 0301 	orr.w	r3, r0, r1
 8005fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ff0:	f021 010c 	bic.w	r1, r1, #12
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ffe:	430b      	orrs	r3, r1
 8006000:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006012:	6999      	ldr	r1, [r3, #24]
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	ea40 0301 	orr.w	r3, r0, r1
 800601e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b8f      	ldr	r3, [pc, #572]	; (8006264 <UART_SetConfig+0x2cc>)
 8006028:	429a      	cmp	r2, r3
 800602a:	d005      	beq.n	8006038 <UART_SetConfig+0xa0>
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b8d      	ldr	r3, [pc, #564]	; (8006268 <UART_SetConfig+0x2d0>)
 8006034:	429a      	cmp	r2, r3
 8006036:	d104      	bne.n	8006042 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006038:	f7fe fb58 	bl	80046ec <HAL_RCC_GetPCLK2Freq>
 800603c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006040:	e003      	b.n	800604a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006042:	f7fe fb3f 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8006046:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800604a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006054:	f040 810c 	bne.w	8006270 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800605c:	2200      	movs	r2, #0
 800605e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006062:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006066:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800606a:	4622      	mov	r2, r4
 800606c:	462b      	mov	r3, r5
 800606e:	1891      	adds	r1, r2, r2
 8006070:	65b9      	str	r1, [r7, #88]	; 0x58
 8006072:	415b      	adcs	r3, r3
 8006074:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006076:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800607a:	4621      	mov	r1, r4
 800607c:	eb12 0801 	adds.w	r8, r2, r1
 8006080:	4629      	mov	r1, r5
 8006082:	eb43 0901 	adc.w	r9, r3, r1
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800609a:	4690      	mov	r8, r2
 800609c:	4699      	mov	r9, r3
 800609e:	4623      	mov	r3, r4
 80060a0:	eb18 0303 	adds.w	r3, r8, r3
 80060a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060a8:	462b      	mov	r3, r5
 80060aa:	eb49 0303 	adc.w	r3, r9, r3
 80060ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060c6:	460b      	mov	r3, r1
 80060c8:	18db      	adds	r3, r3, r3
 80060ca:	653b      	str	r3, [r7, #80]	; 0x50
 80060cc:	4613      	mov	r3, r2
 80060ce:	eb42 0303 	adc.w	r3, r2, r3
 80060d2:	657b      	str	r3, [r7, #84]	; 0x54
 80060d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060dc:	f7fa fddc 	bl	8000c98 <__aeabi_uldivmod>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4b61      	ldr	r3, [pc, #388]	; (800626c <UART_SetConfig+0x2d4>)
 80060e6:	fba3 2302 	umull	r2, r3, r3, r2
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	011c      	lsls	r4, r3, #4
 80060ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006100:	4642      	mov	r2, r8
 8006102:	464b      	mov	r3, r9
 8006104:	1891      	adds	r1, r2, r2
 8006106:	64b9      	str	r1, [r7, #72]	; 0x48
 8006108:	415b      	adcs	r3, r3
 800610a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800610c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006110:	4641      	mov	r1, r8
 8006112:	eb12 0a01 	adds.w	sl, r2, r1
 8006116:	4649      	mov	r1, r9
 8006118:	eb43 0b01 	adc.w	fp, r3, r1
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006128:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800612c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006130:	4692      	mov	sl, r2
 8006132:	469b      	mov	fp, r3
 8006134:	4643      	mov	r3, r8
 8006136:	eb1a 0303 	adds.w	r3, sl, r3
 800613a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800613e:	464b      	mov	r3, r9
 8006140:	eb4b 0303 	adc.w	r3, fp, r3
 8006144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006154:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006158:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800615c:	460b      	mov	r3, r1
 800615e:	18db      	adds	r3, r3, r3
 8006160:	643b      	str	r3, [r7, #64]	; 0x40
 8006162:	4613      	mov	r3, r2
 8006164:	eb42 0303 	adc.w	r3, r2, r3
 8006168:	647b      	str	r3, [r7, #68]	; 0x44
 800616a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800616e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006172:	f7fa fd91 	bl	8000c98 <__aeabi_uldivmod>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4611      	mov	r1, r2
 800617c:	4b3b      	ldr	r3, [pc, #236]	; (800626c <UART_SetConfig+0x2d4>)
 800617e:	fba3 2301 	umull	r2, r3, r3, r1
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	2264      	movs	r2, #100	; 0x64
 8006186:	fb02 f303 	mul.w	r3, r2, r3
 800618a:	1acb      	subs	r3, r1, r3
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006192:	4b36      	ldr	r3, [pc, #216]	; (800626c <UART_SetConfig+0x2d4>)
 8006194:	fba3 2302 	umull	r2, r3, r3, r2
 8006198:	095b      	lsrs	r3, r3, #5
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061a0:	441c      	add	r4, r3
 80061a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061b4:	4642      	mov	r2, r8
 80061b6:	464b      	mov	r3, r9
 80061b8:	1891      	adds	r1, r2, r2
 80061ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80061bc:	415b      	adcs	r3, r3
 80061be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061c4:	4641      	mov	r1, r8
 80061c6:	1851      	adds	r1, r2, r1
 80061c8:	6339      	str	r1, [r7, #48]	; 0x30
 80061ca:	4649      	mov	r1, r9
 80061cc:	414b      	adcs	r3, r1
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061dc:	4659      	mov	r1, fp
 80061de:	00cb      	lsls	r3, r1, #3
 80061e0:	4651      	mov	r1, sl
 80061e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061e6:	4651      	mov	r1, sl
 80061e8:	00ca      	lsls	r2, r1, #3
 80061ea:	4610      	mov	r0, r2
 80061ec:	4619      	mov	r1, r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	4642      	mov	r2, r8
 80061f2:	189b      	adds	r3, r3, r2
 80061f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061f8:	464b      	mov	r3, r9
 80061fa:	460a      	mov	r2, r1
 80061fc:	eb42 0303 	adc.w	r3, r2, r3
 8006200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006210:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006218:	460b      	mov	r3, r1
 800621a:	18db      	adds	r3, r3, r3
 800621c:	62bb      	str	r3, [r7, #40]	; 0x28
 800621e:	4613      	mov	r3, r2
 8006220:	eb42 0303 	adc.w	r3, r2, r3
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800622a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800622e:	f7fa fd33 	bl	8000c98 <__aeabi_uldivmod>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4b0d      	ldr	r3, [pc, #52]	; (800626c <UART_SetConfig+0x2d4>)
 8006238:	fba3 1302 	umull	r1, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	2164      	movs	r1, #100	; 0x64
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	3332      	adds	r3, #50	; 0x32
 800624a:	4a08      	ldr	r2, [pc, #32]	; (800626c <UART_SetConfig+0x2d4>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	f003 0207 	and.w	r2, r3, #7
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4422      	add	r2, r4
 800625e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006260:	e105      	b.n	800646e <UART_SetConfig+0x4d6>
 8006262:	bf00      	nop
 8006264:	40011000 	.word	0x40011000
 8006268:	40011400 	.word	0x40011400
 800626c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006274:	2200      	movs	r2, #0
 8006276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800627a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800627e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006282:	4642      	mov	r2, r8
 8006284:	464b      	mov	r3, r9
 8006286:	1891      	adds	r1, r2, r2
 8006288:	6239      	str	r1, [r7, #32]
 800628a:	415b      	adcs	r3, r3
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
 800628e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006292:	4641      	mov	r1, r8
 8006294:	1854      	adds	r4, r2, r1
 8006296:	4649      	mov	r1, r9
 8006298:	eb43 0501 	adc.w	r5, r3, r1
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	00eb      	lsls	r3, r5, #3
 80062a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062aa:	00e2      	lsls	r2, r4, #3
 80062ac:	4614      	mov	r4, r2
 80062ae:	461d      	mov	r5, r3
 80062b0:	4643      	mov	r3, r8
 80062b2:	18e3      	adds	r3, r4, r3
 80062b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062b8:	464b      	mov	r3, r9
 80062ba:	eb45 0303 	adc.w	r3, r5, r3
 80062be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062de:	4629      	mov	r1, r5
 80062e0:	008b      	lsls	r3, r1, #2
 80062e2:	4621      	mov	r1, r4
 80062e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e8:	4621      	mov	r1, r4
 80062ea:	008a      	lsls	r2, r1, #2
 80062ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062f0:	f7fa fcd2 	bl	8000c98 <__aeabi_uldivmod>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4b60      	ldr	r3, [pc, #384]	; (800647c <UART_SetConfig+0x4e4>)
 80062fa:	fba3 2302 	umull	r2, r3, r3, r2
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	011c      	lsls	r4, r3, #4
 8006302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800630c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006310:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	1891      	adds	r1, r2, r2
 800631a:	61b9      	str	r1, [r7, #24]
 800631c:	415b      	adcs	r3, r3
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006324:	4641      	mov	r1, r8
 8006326:	1851      	adds	r1, r2, r1
 8006328:	6139      	str	r1, [r7, #16]
 800632a:	4649      	mov	r1, r9
 800632c:	414b      	adcs	r3, r1
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800633c:	4659      	mov	r1, fp
 800633e:	00cb      	lsls	r3, r1, #3
 8006340:	4651      	mov	r1, sl
 8006342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006346:	4651      	mov	r1, sl
 8006348:	00ca      	lsls	r2, r1, #3
 800634a:	4610      	mov	r0, r2
 800634c:	4619      	mov	r1, r3
 800634e:	4603      	mov	r3, r0
 8006350:	4642      	mov	r2, r8
 8006352:	189b      	adds	r3, r3, r2
 8006354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006358:	464b      	mov	r3, r9
 800635a:	460a      	mov	r2, r1
 800635c:	eb42 0303 	adc.w	r3, r2, r3
 8006360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	67bb      	str	r3, [r7, #120]	; 0x78
 800636e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800637c:	4649      	mov	r1, r9
 800637e:	008b      	lsls	r3, r1, #2
 8006380:	4641      	mov	r1, r8
 8006382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006386:	4641      	mov	r1, r8
 8006388:	008a      	lsls	r2, r1, #2
 800638a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800638e:	f7fa fc83 	bl	8000c98 <__aeabi_uldivmod>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <UART_SetConfig+0x4e4>)
 8006398:	fba3 1302 	umull	r1, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	2164      	movs	r1, #100	; 0x64
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	3332      	adds	r3, #50	; 0x32
 80063aa:	4a34      	ldr	r2, [pc, #208]	; (800647c <UART_SetConfig+0x4e4>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063b6:	441c      	add	r4, r3
 80063b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063bc:	2200      	movs	r2, #0
 80063be:	673b      	str	r3, [r7, #112]	; 0x70
 80063c0:	677a      	str	r2, [r7, #116]	; 0x74
 80063c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063c6:	4642      	mov	r2, r8
 80063c8:	464b      	mov	r3, r9
 80063ca:	1891      	adds	r1, r2, r2
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	415b      	adcs	r3, r3
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063d6:	4641      	mov	r1, r8
 80063d8:	1851      	adds	r1, r2, r1
 80063da:	6039      	str	r1, [r7, #0]
 80063dc:	4649      	mov	r1, r9
 80063de:	414b      	adcs	r3, r1
 80063e0:	607b      	str	r3, [r7, #4]
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063ee:	4659      	mov	r1, fp
 80063f0:	00cb      	lsls	r3, r1, #3
 80063f2:	4651      	mov	r1, sl
 80063f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063f8:	4651      	mov	r1, sl
 80063fa:	00ca      	lsls	r2, r1, #3
 80063fc:	4610      	mov	r0, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	4603      	mov	r3, r0
 8006402:	4642      	mov	r2, r8
 8006404:	189b      	adds	r3, r3, r2
 8006406:	66bb      	str	r3, [r7, #104]	; 0x68
 8006408:	464b      	mov	r3, r9
 800640a:	460a      	mov	r2, r1
 800640c:	eb42 0303 	adc.w	r3, r2, r3
 8006410:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	663b      	str	r3, [r7, #96]	; 0x60
 800641c:	667a      	str	r2, [r7, #100]	; 0x64
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	f04f 0300 	mov.w	r3, #0
 8006426:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800642a:	4649      	mov	r1, r9
 800642c:	008b      	lsls	r3, r1, #2
 800642e:	4641      	mov	r1, r8
 8006430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006434:	4641      	mov	r1, r8
 8006436:	008a      	lsls	r2, r1, #2
 8006438:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800643c:	f7fa fc2c 	bl	8000c98 <__aeabi_uldivmod>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4b0d      	ldr	r3, [pc, #52]	; (800647c <UART_SetConfig+0x4e4>)
 8006446:	fba3 1302 	umull	r1, r3, r3, r2
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	2164      	movs	r1, #100	; 0x64
 800644e:	fb01 f303 	mul.w	r3, r1, r3
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	3332      	adds	r3, #50	; 0x32
 8006458:	4a08      	ldr	r2, [pc, #32]	; (800647c <UART_SetConfig+0x4e4>)
 800645a:	fba2 2303 	umull	r2, r3, r2, r3
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4422      	add	r2, r4
 800646c:	609a      	str	r2, [r3, #8]
}
 800646e:	bf00      	nop
 8006470:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006474:	46bd      	mov	sp, r7
 8006476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800647a:	bf00      	nop
 800647c:	51eb851f 	.word	0x51eb851f

08006480 <__errno>:
 8006480:	4b01      	ldr	r3, [pc, #4]	; (8006488 <__errno+0x8>)
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000018 	.word	0x20000018

0800648c <__libc_init_array>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4d0d      	ldr	r5, [pc, #52]	; (80064c4 <__libc_init_array+0x38>)
 8006490:	4c0d      	ldr	r4, [pc, #52]	; (80064c8 <__libc_init_array+0x3c>)
 8006492:	1b64      	subs	r4, r4, r5
 8006494:	10a4      	asrs	r4, r4, #2
 8006496:	2600      	movs	r6, #0
 8006498:	42a6      	cmp	r6, r4
 800649a:	d109      	bne.n	80064b0 <__libc_init_array+0x24>
 800649c:	4d0b      	ldr	r5, [pc, #44]	; (80064cc <__libc_init_array+0x40>)
 800649e:	4c0c      	ldr	r4, [pc, #48]	; (80064d0 <__libc_init_array+0x44>)
 80064a0:	f002 ff90 	bl	80093c4 <_init>
 80064a4:	1b64      	subs	r4, r4, r5
 80064a6:	10a4      	asrs	r4, r4, #2
 80064a8:	2600      	movs	r6, #0
 80064aa:	42a6      	cmp	r6, r4
 80064ac:	d105      	bne.n	80064ba <__libc_init_array+0x2e>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b4:	4798      	blx	r3
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7ee      	b.n	8006498 <__libc_init_array+0xc>
 80064ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80064be:	4798      	blx	r3
 80064c0:	3601      	adds	r6, #1
 80064c2:	e7f2      	b.n	80064aa <__libc_init_array+0x1e>
 80064c4:	08009a2c 	.word	0x08009a2c
 80064c8:	08009a2c 	.word	0x08009a2c
 80064cc:	08009a2c 	.word	0x08009a2c
 80064d0:	08009a30 	.word	0x08009a30

080064d4 <memcpy>:
 80064d4:	440a      	add	r2, r1
 80064d6:	4291      	cmp	r1, r2
 80064d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064dc:	d100      	bne.n	80064e0 <memcpy+0xc>
 80064de:	4770      	bx	lr
 80064e0:	b510      	push	{r4, lr}
 80064e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ea:	4291      	cmp	r1, r2
 80064ec:	d1f9      	bne.n	80064e2 <memcpy+0xe>
 80064ee:	bd10      	pop	{r4, pc}

080064f0 <memset>:
 80064f0:	4402      	add	r2, r0
 80064f2:	4603      	mov	r3, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <__cvt>:
 8006500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	ec55 4b10 	vmov	r4, r5, d0
 8006508:	2d00      	cmp	r5, #0
 800650a:	460e      	mov	r6, r1
 800650c:	4619      	mov	r1, r3
 800650e:	462b      	mov	r3, r5
 8006510:	bfbb      	ittet	lt
 8006512:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006516:	461d      	movlt	r5, r3
 8006518:	2300      	movge	r3, #0
 800651a:	232d      	movlt	r3, #45	; 0x2d
 800651c:	700b      	strb	r3, [r1, #0]
 800651e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006520:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006524:	4691      	mov	r9, r2
 8006526:	f023 0820 	bic.w	r8, r3, #32
 800652a:	bfbc      	itt	lt
 800652c:	4622      	movlt	r2, r4
 800652e:	4614      	movlt	r4, r2
 8006530:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006534:	d005      	beq.n	8006542 <__cvt+0x42>
 8006536:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800653a:	d100      	bne.n	800653e <__cvt+0x3e>
 800653c:	3601      	adds	r6, #1
 800653e:	2102      	movs	r1, #2
 8006540:	e000      	b.n	8006544 <__cvt+0x44>
 8006542:	2103      	movs	r1, #3
 8006544:	ab03      	add	r3, sp, #12
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	ab02      	add	r3, sp, #8
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	ec45 4b10 	vmov	d0, r4, r5
 8006550:	4653      	mov	r3, sl
 8006552:	4632      	mov	r2, r6
 8006554:	f000 fe38 	bl	80071c8 <_dtoa_r>
 8006558:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800655c:	4607      	mov	r7, r0
 800655e:	d102      	bne.n	8006566 <__cvt+0x66>
 8006560:	f019 0f01 	tst.w	r9, #1
 8006564:	d022      	beq.n	80065ac <__cvt+0xac>
 8006566:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800656a:	eb07 0906 	add.w	r9, r7, r6
 800656e:	d110      	bne.n	8006592 <__cvt+0x92>
 8006570:	783b      	ldrb	r3, [r7, #0]
 8006572:	2b30      	cmp	r3, #48	; 0x30
 8006574:	d10a      	bne.n	800658c <__cvt+0x8c>
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	4620      	mov	r0, r4
 800657c:	4629      	mov	r1, r5
 800657e:	f7fa faab 	bl	8000ad8 <__aeabi_dcmpeq>
 8006582:	b918      	cbnz	r0, 800658c <__cvt+0x8c>
 8006584:	f1c6 0601 	rsb	r6, r6, #1
 8006588:	f8ca 6000 	str.w	r6, [sl]
 800658c:	f8da 3000 	ldr.w	r3, [sl]
 8006590:	4499      	add	r9, r3
 8006592:	2200      	movs	r2, #0
 8006594:	2300      	movs	r3, #0
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	f7fa fa9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800659e:	b108      	cbz	r0, 80065a4 <__cvt+0xa4>
 80065a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80065a4:	2230      	movs	r2, #48	; 0x30
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	454b      	cmp	r3, r9
 80065aa:	d307      	bcc.n	80065bc <__cvt+0xbc>
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065b0:	1bdb      	subs	r3, r3, r7
 80065b2:	4638      	mov	r0, r7
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	b004      	add	sp, #16
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	1c59      	adds	r1, r3, #1
 80065be:	9103      	str	r1, [sp, #12]
 80065c0:	701a      	strb	r2, [r3, #0]
 80065c2:	e7f0      	b.n	80065a6 <__cvt+0xa6>

080065c4 <__exponent>:
 80065c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065c6:	4603      	mov	r3, r0
 80065c8:	2900      	cmp	r1, #0
 80065ca:	bfb8      	it	lt
 80065cc:	4249      	neglt	r1, r1
 80065ce:	f803 2b02 	strb.w	r2, [r3], #2
 80065d2:	bfb4      	ite	lt
 80065d4:	222d      	movlt	r2, #45	; 0x2d
 80065d6:	222b      	movge	r2, #43	; 0x2b
 80065d8:	2909      	cmp	r1, #9
 80065da:	7042      	strb	r2, [r0, #1]
 80065dc:	dd2a      	ble.n	8006634 <__exponent+0x70>
 80065de:	f10d 0407 	add.w	r4, sp, #7
 80065e2:	46a4      	mov	ip, r4
 80065e4:	270a      	movs	r7, #10
 80065e6:	46a6      	mov	lr, r4
 80065e8:	460a      	mov	r2, r1
 80065ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80065ee:	fb07 1516 	mls	r5, r7, r6, r1
 80065f2:	3530      	adds	r5, #48	; 0x30
 80065f4:	2a63      	cmp	r2, #99	; 0x63
 80065f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80065fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065fe:	4631      	mov	r1, r6
 8006600:	dcf1      	bgt.n	80065e6 <__exponent+0x22>
 8006602:	3130      	adds	r1, #48	; 0x30
 8006604:	f1ae 0502 	sub.w	r5, lr, #2
 8006608:	f804 1c01 	strb.w	r1, [r4, #-1]
 800660c:	1c44      	adds	r4, r0, #1
 800660e:	4629      	mov	r1, r5
 8006610:	4561      	cmp	r1, ip
 8006612:	d30a      	bcc.n	800662a <__exponent+0x66>
 8006614:	f10d 0209 	add.w	r2, sp, #9
 8006618:	eba2 020e 	sub.w	r2, r2, lr
 800661c:	4565      	cmp	r5, ip
 800661e:	bf88      	it	hi
 8006620:	2200      	movhi	r2, #0
 8006622:	4413      	add	r3, r2
 8006624:	1a18      	subs	r0, r3, r0
 8006626:	b003      	add	sp, #12
 8006628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800662a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800662e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006632:	e7ed      	b.n	8006610 <__exponent+0x4c>
 8006634:	2330      	movs	r3, #48	; 0x30
 8006636:	3130      	adds	r1, #48	; 0x30
 8006638:	7083      	strb	r3, [r0, #2]
 800663a:	70c1      	strb	r1, [r0, #3]
 800663c:	1d03      	adds	r3, r0, #4
 800663e:	e7f1      	b.n	8006624 <__exponent+0x60>

08006640 <_printf_float>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	ed2d 8b02 	vpush	{d8}
 8006648:	b08d      	sub	sp, #52	; 0x34
 800664a:	460c      	mov	r4, r1
 800664c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006650:	4616      	mov	r6, r2
 8006652:	461f      	mov	r7, r3
 8006654:	4605      	mov	r5, r0
 8006656:	f001 fd5d 	bl	8008114 <_localeconv_r>
 800665a:	f8d0 a000 	ldr.w	sl, [r0]
 800665e:	4650      	mov	r0, sl
 8006660:	f7f9 fdbe 	bl	80001e0 <strlen>
 8006664:	2300      	movs	r3, #0
 8006666:	930a      	str	r3, [sp, #40]	; 0x28
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	9305      	str	r3, [sp, #20]
 800666c:	f8d8 3000 	ldr.w	r3, [r8]
 8006670:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006674:	3307      	adds	r3, #7
 8006676:	f023 0307 	bic.w	r3, r3, #7
 800667a:	f103 0208 	add.w	r2, r3, #8
 800667e:	f8c8 2000 	str.w	r2, [r8]
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800668a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800668e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006692:	9307      	str	r3, [sp, #28]
 8006694:	f8cd 8018 	str.w	r8, [sp, #24]
 8006698:	ee08 0a10 	vmov	s16, r0
 800669c:	4b9f      	ldr	r3, [pc, #636]	; (800691c <_printf_float+0x2dc>)
 800669e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	f7fa fa49 	bl	8000b3c <__aeabi_dcmpun>
 80066aa:	bb88      	cbnz	r0, 8006710 <_printf_float+0xd0>
 80066ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066b0:	4b9a      	ldr	r3, [pc, #616]	; (800691c <_printf_float+0x2dc>)
 80066b2:	f04f 32ff 	mov.w	r2, #4294967295
 80066b6:	f7fa fa23 	bl	8000b00 <__aeabi_dcmple>
 80066ba:	bb48      	cbnz	r0, 8006710 <_printf_float+0xd0>
 80066bc:	2200      	movs	r2, #0
 80066be:	2300      	movs	r3, #0
 80066c0:	4640      	mov	r0, r8
 80066c2:	4649      	mov	r1, r9
 80066c4:	f7fa fa12 	bl	8000aec <__aeabi_dcmplt>
 80066c8:	b110      	cbz	r0, 80066d0 <_printf_float+0x90>
 80066ca:	232d      	movs	r3, #45	; 0x2d
 80066cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d0:	4b93      	ldr	r3, [pc, #588]	; (8006920 <_printf_float+0x2e0>)
 80066d2:	4894      	ldr	r0, [pc, #592]	; (8006924 <_printf_float+0x2e4>)
 80066d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066d8:	bf94      	ite	ls
 80066da:	4698      	movls	r8, r3
 80066dc:	4680      	movhi	r8, r0
 80066de:	2303      	movs	r3, #3
 80066e0:	6123      	str	r3, [r4, #16]
 80066e2:	9b05      	ldr	r3, [sp, #20]
 80066e4:	f023 0204 	bic.w	r2, r3, #4
 80066e8:	6022      	str	r2, [r4, #0]
 80066ea:	f04f 0900 	mov.w	r9, #0
 80066ee:	9700      	str	r7, [sp, #0]
 80066f0:	4633      	mov	r3, r6
 80066f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80066f4:	4621      	mov	r1, r4
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 f9d8 	bl	8006aac <_printf_common>
 80066fc:	3001      	adds	r0, #1
 80066fe:	f040 8090 	bne.w	8006822 <_printf_float+0x1e2>
 8006702:	f04f 30ff 	mov.w	r0, #4294967295
 8006706:	b00d      	add	sp, #52	; 0x34
 8006708:	ecbd 8b02 	vpop	{d8}
 800670c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	4640      	mov	r0, r8
 8006716:	4649      	mov	r1, r9
 8006718:	f7fa fa10 	bl	8000b3c <__aeabi_dcmpun>
 800671c:	b140      	cbz	r0, 8006730 <_printf_float+0xf0>
 800671e:	464b      	mov	r3, r9
 8006720:	2b00      	cmp	r3, #0
 8006722:	bfbc      	itt	lt
 8006724:	232d      	movlt	r3, #45	; 0x2d
 8006726:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800672a:	487f      	ldr	r0, [pc, #508]	; (8006928 <_printf_float+0x2e8>)
 800672c:	4b7f      	ldr	r3, [pc, #508]	; (800692c <_printf_float+0x2ec>)
 800672e:	e7d1      	b.n	80066d4 <_printf_float+0x94>
 8006730:	6863      	ldr	r3, [r4, #4]
 8006732:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006736:	9206      	str	r2, [sp, #24]
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	d13f      	bne.n	80067bc <_printf_float+0x17c>
 800673c:	2306      	movs	r3, #6
 800673e:	6063      	str	r3, [r4, #4]
 8006740:	9b05      	ldr	r3, [sp, #20]
 8006742:	6861      	ldr	r1, [r4, #4]
 8006744:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006748:	2300      	movs	r3, #0
 800674a:	9303      	str	r3, [sp, #12]
 800674c:	ab0a      	add	r3, sp, #40	; 0x28
 800674e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006752:	ab09      	add	r3, sp, #36	; 0x24
 8006754:	ec49 8b10 	vmov	d0, r8, r9
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	6022      	str	r2, [r4, #0]
 800675c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006760:	4628      	mov	r0, r5
 8006762:	f7ff fecd 	bl	8006500 <__cvt>
 8006766:	9b06      	ldr	r3, [sp, #24]
 8006768:	9909      	ldr	r1, [sp, #36]	; 0x24
 800676a:	2b47      	cmp	r3, #71	; 0x47
 800676c:	4680      	mov	r8, r0
 800676e:	d108      	bne.n	8006782 <_printf_float+0x142>
 8006770:	1cc8      	adds	r0, r1, #3
 8006772:	db02      	blt.n	800677a <_printf_float+0x13a>
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	4299      	cmp	r1, r3
 8006778:	dd41      	ble.n	80067fe <_printf_float+0x1be>
 800677a:	f1ab 0b02 	sub.w	fp, fp, #2
 800677e:	fa5f fb8b 	uxtb.w	fp, fp
 8006782:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006786:	d820      	bhi.n	80067ca <_printf_float+0x18a>
 8006788:	3901      	subs	r1, #1
 800678a:	465a      	mov	r2, fp
 800678c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006790:	9109      	str	r1, [sp, #36]	; 0x24
 8006792:	f7ff ff17 	bl	80065c4 <__exponent>
 8006796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006798:	1813      	adds	r3, r2, r0
 800679a:	2a01      	cmp	r2, #1
 800679c:	4681      	mov	r9, r0
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	dc02      	bgt.n	80067a8 <_printf_float+0x168>
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	07d2      	lsls	r2, r2, #31
 80067a6:	d501      	bpl.n	80067ac <_printf_float+0x16c>
 80067a8:	3301      	adds	r3, #1
 80067aa:	6123      	str	r3, [r4, #16]
 80067ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d09c      	beq.n	80066ee <_printf_float+0xae>
 80067b4:	232d      	movs	r3, #45	; 0x2d
 80067b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ba:	e798      	b.n	80066ee <_printf_float+0xae>
 80067bc:	9a06      	ldr	r2, [sp, #24]
 80067be:	2a47      	cmp	r2, #71	; 0x47
 80067c0:	d1be      	bne.n	8006740 <_printf_float+0x100>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1bc      	bne.n	8006740 <_printf_float+0x100>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e7b9      	b.n	800673e <_printf_float+0xfe>
 80067ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067ce:	d118      	bne.n	8006802 <_printf_float+0x1c2>
 80067d0:	2900      	cmp	r1, #0
 80067d2:	6863      	ldr	r3, [r4, #4]
 80067d4:	dd0b      	ble.n	80067ee <_printf_float+0x1ae>
 80067d6:	6121      	str	r1, [r4, #16]
 80067d8:	b913      	cbnz	r3, 80067e0 <_printf_float+0x1a0>
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	07d0      	lsls	r0, r2, #31
 80067de:	d502      	bpl.n	80067e6 <_printf_float+0x1a6>
 80067e0:	3301      	adds	r3, #1
 80067e2:	440b      	add	r3, r1
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80067e8:	f04f 0900 	mov.w	r9, #0
 80067ec:	e7de      	b.n	80067ac <_printf_float+0x16c>
 80067ee:	b913      	cbnz	r3, 80067f6 <_printf_float+0x1b6>
 80067f0:	6822      	ldr	r2, [r4, #0]
 80067f2:	07d2      	lsls	r2, r2, #31
 80067f4:	d501      	bpl.n	80067fa <_printf_float+0x1ba>
 80067f6:	3302      	adds	r3, #2
 80067f8:	e7f4      	b.n	80067e4 <_printf_float+0x1a4>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e7f2      	b.n	80067e4 <_printf_float+0x1a4>
 80067fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006804:	4299      	cmp	r1, r3
 8006806:	db05      	blt.n	8006814 <_printf_float+0x1d4>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	6121      	str	r1, [r4, #16]
 800680c:	07d8      	lsls	r0, r3, #31
 800680e:	d5ea      	bpl.n	80067e6 <_printf_float+0x1a6>
 8006810:	1c4b      	adds	r3, r1, #1
 8006812:	e7e7      	b.n	80067e4 <_printf_float+0x1a4>
 8006814:	2900      	cmp	r1, #0
 8006816:	bfd4      	ite	le
 8006818:	f1c1 0202 	rsble	r2, r1, #2
 800681c:	2201      	movgt	r2, #1
 800681e:	4413      	add	r3, r2
 8006820:	e7e0      	b.n	80067e4 <_printf_float+0x1a4>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	055a      	lsls	r2, r3, #21
 8006826:	d407      	bmi.n	8006838 <_printf_float+0x1f8>
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	4642      	mov	r2, r8
 800682c:	4631      	mov	r1, r6
 800682e:	4628      	mov	r0, r5
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	d12c      	bne.n	8006890 <_printf_float+0x250>
 8006836:	e764      	b.n	8006702 <_printf_float+0xc2>
 8006838:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800683c:	f240 80e0 	bls.w	8006a00 <_printf_float+0x3c0>
 8006840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006844:	2200      	movs	r2, #0
 8006846:	2300      	movs	r3, #0
 8006848:	f7fa f946 	bl	8000ad8 <__aeabi_dcmpeq>
 800684c:	2800      	cmp	r0, #0
 800684e:	d034      	beq.n	80068ba <_printf_float+0x27a>
 8006850:	4a37      	ldr	r2, [pc, #220]	; (8006930 <_printf_float+0x2f0>)
 8006852:	2301      	movs	r3, #1
 8006854:	4631      	mov	r1, r6
 8006856:	4628      	mov	r0, r5
 8006858:	47b8      	blx	r7
 800685a:	3001      	adds	r0, #1
 800685c:	f43f af51 	beq.w	8006702 <_printf_float+0xc2>
 8006860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006864:	429a      	cmp	r2, r3
 8006866:	db02      	blt.n	800686e <_printf_float+0x22e>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	07d8      	lsls	r0, r3, #31
 800686c:	d510      	bpl.n	8006890 <_printf_float+0x250>
 800686e:	ee18 3a10 	vmov	r3, s16
 8006872:	4652      	mov	r2, sl
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	f43f af41 	beq.w	8006702 <_printf_float+0xc2>
 8006880:	f04f 0800 	mov.w	r8, #0
 8006884:	f104 091a 	add.w	r9, r4, #26
 8006888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800688a:	3b01      	subs	r3, #1
 800688c:	4543      	cmp	r3, r8
 800688e:	dc09      	bgt.n	80068a4 <_printf_float+0x264>
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	079b      	lsls	r3, r3, #30
 8006894:	f100 8105 	bmi.w	8006aa2 <_printf_float+0x462>
 8006898:	68e0      	ldr	r0, [r4, #12]
 800689a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800689c:	4298      	cmp	r0, r3
 800689e:	bfb8      	it	lt
 80068a0:	4618      	movlt	r0, r3
 80068a2:	e730      	b.n	8006706 <_printf_float+0xc6>
 80068a4:	2301      	movs	r3, #1
 80068a6:	464a      	mov	r2, r9
 80068a8:	4631      	mov	r1, r6
 80068aa:	4628      	mov	r0, r5
 80068ac:	47b8      	blx	r7
 80068ae:	3001      	adds	r0, #1
 80068b0:	f43f af27 	beq.w	8006702 <_printf_float+0xc2>
 80068b4:	f108 0801 	add.w	r8, r8, #1
 80068b8:	e7e6      	b.n	8006888 <_printf_float+0x248>
 80068ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	dc39      	bgt.n	8006934 <_printf_float+0x2f4>
 80068c0:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <_printf_float+0x2f0>)
 80068c2:	2301      	movs	r3, #1
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	f43f af19 	beq.w	8006702 <_printf_float+0xc2>
 80068d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068d4:	4313      	orrs	r3, r2
 80068d6:	d102      	bne.n	80068de <_printf_float+0x29e>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	07d9      	lsls	r1, r3, #31
 80068dc:	d5d8      	bpl.n	8006890 <_printf_float+0x250>
 80068de:	ee18 3a10 	vmov	r3, s16
 80068e2:	4652      	mov	r2, sl
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af09 	beq.w	8006702 <_printf_float+0xc2>
 80068f0:	f04f 0900 	mov.w	r9, #0
 80068f4:	f104 0a1a 	add.w	sl, r4, #26
 80068f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fa:	425b      	negs	r3, r3
 80068fc:	454b      	cmp	r3, r9
 80068fe:	dc01      	bgt.n	8006904 <_printf_float+0x2c4>
 8006900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006902:	e792      	b.n	800682a <_printf_float+0x1ea>
 8006904:	2301      	movs	r3, #1
 8006906:	4652      	mov	r2, sl
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f aef7 	beq.w	8006702 <_printf_float+0xc2>
 8006914:	f109 0901 	add.w	r9, r9, #1
 8006918:	e7ee      	b.n	80068f8 <_printf_float+0x2b8>
 800691a:	bf00      	nop
 800691c:	7fefffff 	.word	0x7fefffff
 8006920:	0800964c 	.word	0x0800964c
 8006924:	08009650 	.word	0x08009650
 8006928:	08009658 	.word	0x08009658
 800692c:	08009654 	.word	0x08009654
 8006930:	0800965c 	.word	0x0800965c
 8006934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006936:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006938:	429a      	cmp	r2, r3
 800693a:	bfa8      	it	ge
 800693c:	461a      	movge	r2, r3
 800693e:	2a00      	cmp	r2, #0
 8006940:	4691      	mov	r9, r2
 8006942:	dc37      	bgt.n	80069b4 <_printf_float+0x374>
 8006944:	f04f 0b00 	mov.w	fp, #0
 8006948:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800694c:	f104 021a 	add.w	r2, r4, #26
 8006950:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006952:	9305      	str	r3, [sp, #20]
 8006954:	eba3 0309 	sub.w	r3, r3, r9
 8006958:	455b      	cmp	r3, fp
 800695a:	dc33      	bgt.n	80069c4 <_printf_float+0x384>
 800695c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006960:	429a      	cmp	r2, r3
 8006962:	db3b      	blt.n	80069dc <_printf_float+0x39c>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	07da      	lsls	r2, r3, #31
 8006968:	d438      	bmi.n	80069dc <_printf_float+0x39c>
 800696a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696c:	9a05      	ldr	r2, [sp, #20]
 800696e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006970:	1a9a      	subs	r2, r3, r2
 8006972:	eba3 0901 	sub.w	r9, r3, r1
 8006976:	4591      	cmp	r9, r2
 8006978:	bfa8      	it	ge
 800697a:	4691      	movge	r9, r2
 800697c:	f1b9 0f00 	cmp.w	r9, #0
 8006980:	dc35      	bgt.n	80069ee <_printf_float+0x3ae>
 8006982:	f04f 0800 	mov.w	r8, #0
 8006986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800698a:	f104 0a1a 	add.w	sl, r4, #26
 800698e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	eba3 0309 	sub.w	r3, r3, r9
 8006998:	4543      	cmp	r3, r8
 800699a:	f77f af79 	ble.w	8006890 <_printf_float+0x250>
 800699e:	2301      	movs	r3, #1
 80069a0:	4652      	mov	r2, sl
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f aeaa 	beq.w	8006702 <_printf_float+0xc2>
 80069ae:	f108 0801 	add.w	r8, r8, #1
 80069b2:	e7ec      	b.n	800698e <_printf_float+0x34e>
 80069b4:	4613      	mov	r3, r2
 80069b6:	4631      	mov	r1, r6
 80069b8:	4642      	mov	r2, r8
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	d1c0      	bne.n	8006944 <_printf_float+0x304>
 80069c2:	e69e      	b.n	8006702 <_printf_float+0xc2>
 80069c4:	2301      	movs	r3, #1
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	9205      	str	r2, [sp, #20]
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	f43f ae97 	beq.w	8006702 <_printf_float+0xc2>
 80069d4:	9a05      	ldr	r2, [sp, #20]
 80069d6:	f10b 0b01 	add.w	fp, fp, #1
 80069da:	e7b9      	b.n	8006950 <_printf_float+0x310>
 80069dc:	ee18 3a10 	vmov	r3, s16
 80069e0:	4652      	mov	r2, sl
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	d1be      	bne.n	800696a <_printf_float+0x32a>
 80069ec:	e689      	b.n	8006702 <_printf_float+0xc2>
 80069ee:	9a05      	ldr	r2, [sp, #20]
 80069f0:	464b      	mov	r3, r9
 80069f2:	4442      	add	r2, r8
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b8      	blx	r7
 80069fa:	3001      	adds	r0, #1
 80069fc:	d1c1      	bne.n	8006982 <_printf_float+0x342>
 80069fe:	e680      	b.n	8006702 <_printf_float+0xc2>
 8006a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a02:	2a01      	cmp	r2, #1
 8006a04:	dc01      	bgt.n	8006a0a <_printf_float+0x3ca>
 8006a06:	07db      	lsls	r3, r3, #31
 8006a08:	d538      	bpl.n	8006a7c <_printf_float+0x43c>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b8      	blx	r7
 8006a14:	3001      	adds	r0, #1
 8006a16:	f43f ae74 	beq.w	8006702 <_printf_float+0xc2>
 8006a1a:	ee18 3a10 	vmov	r3, s16
 8006a1e:	4652      	mov	r2, sl
 8006a20:	4631      	mov	r1, r6
 8006a22:	4628      	mov	r0, r5
 8006a24:	47b8      	blx	r7
 8006a26:	3001      	adds	r0, #1
 8006a28:	f43f ae6b 	beq.w	8006702 <_printf_float+0xc2>
 8006a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a30:	2200      	movs	r2, #0
 8006a32:	2300      	movs	r3, #0
 8006a34:	f7fa f850 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a38:	b9d8      	cbnz	r0, 8006a72 <_printf_float+0x432>
 8006a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3c:	f108 0201 	add.w	r2, r8, #1
 8006a40:	3b01      	subs	r3, #1
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d10e      	bne.n	8006a6a <_printf_float+0x42a>
 8006a4c:	e659      	b.n	8006702 <_printf_float+0xc2>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4652      	mov	r2, sl
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f43f ae52 	beq.w	8006702 <_printf_float+0xc2>
 8006a5e:	f108 0801 	add.w	r8, r8, #1
 8006a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a64:	3b01      	subs	r3, #1
 8006a66:	4543      	cmp	r3, r8
 8006a68:	dcf1      	bgt.n	8006a4e <_printf_float+0x40e>
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a70:	e6dc      	b.n	800682c <_printf_float+0x1ec>
 8006a72:	f04f 0800 	mov.w	r8, #0
 8006a76:	f104 0a1a 	add.w	sl, r4, #26
 8006a7a:	e7f2      	b.n	8006a62 <_printf_float+0x422>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	4642      	mov	r2, r8
 8006a80:	e7df      	b.n	8006a42 <_printf_float+0x402>
 8006a82:	2301      	movs	r3, #1
 8006a84:	464a      	mov	r2, r9
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	f43f ae38 	beq.w	8006702 <_printf_float+0xc2>
 8006a92:	f108 0801 	add.w	r8, r8, #1
 8006a96:	68e3      	ldr	r3, [r4, #12]
 8006a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a9a:	1a5b      	subs	r3, r3, r1
 8006a9c:	4543      	cmp	r3, r8
 8006a9e:	dcf0      	bgt.n	8006a82 <_printf_float+0x442>
 8006aa0:	e6fa      	b.n	8006898 <_printf_float+0x258>
 8006aa2:	f04f 0800 	mov.w	r8, #0
 8006aa6:	f104 0919 	add.w	r9, r4, #25
 8006aaa:	e7f4      	b.n	8006a96 <_printf_float+0x456>

08006aac <_printf_common>:
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	4699      	mov	r9, r3
 8006ab4:	688a      	ldr	r2, [r1, #8]
 8006ab6:	690b      	ldr	r3, [r1, #16]
 8006ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006abc:	4293      	cmp	r3, r2
 8006abe:	bfb8      	it	lt
 8006ac0:	4613      	movlt	r3, r2
 8006ac2:	6033      	str	r3, [r6, #0]
 8006ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ac8:	4607      	mov	r7, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	b10a      	cbz	r2, 8006ad2 <_printf_common+0x26>
 8006ace:	3301      	adds	r3, #1
 8006ad0:	6033      	str	r3, [r6, #0]
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	0699      	lsls	r1, r3, #26
 8006ad6:	bf42      	ittt	mi
 8006ad8:	6833      	ldrmi	r3, [r6, #0]
 8006ada:	3302      	addmi	r3, #2
 8006adc:	6033      	strmi	r3, [r6, #0]
 8006ade:	6825      	ldr	r5, [r4, #0]
 8006ae0:	f015 0506 	ands.w	r5, r5, #6
 8006ae4:	d106      	bne.n	8006af4 <_printf_common+0x48>
 8006ae6:	f104 0a19 	add.w	sl, r4, #25
 8006aea:	68e3      	ldr	r3, [r4, #12]
 8006aec:	6832      	ldr	r2, [r6, #0]
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	42ab      	cmp	r3, r5
 8006af2:	dc26      	bgt.n	8006b42 <_printf_common+0x96>
 8006af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006af8:	1e13      	subs	r3, r2, #0
 8006afa:	6822      	ldr	r2, [r4, #0]
 8006afc:	bf18      	it	ne
 8006afe:	2301      	movne	r3, #1
 8006b00:	0692      	lsls	r2, r2, #26
 8006b02:	d42b      	bmi.n	8006b5c <_printf_common+0xb0>
 8006b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b08:	4649      	mov	r1, r9
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	47c0      	blx	r8
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d01e      	beq.n	8006b50 <_printf_common+0xa4>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	68e5      	ldr	r5, [r4, #12]
 8006b16:	6832      	ldr	r2, [r6, #0]
 8006b18:	f003 0306 	and.w	r3, r3, #6
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	bf08      	it	eq
 8006b20:	1aad      	subeq	r5, r5, r2
 8006b22:	68a3      	ldr	r3, [r4, #8]
 8006b24:	6922      	ldr	r2, [r4, #16]
 8006b26:	bf0c      	ite	eq
 8006b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b2c:	2500      	movne	r5, #0
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	bfc4      	itt	gt
 8006b32:	1a9b      	subgt	r3, r3, r2
 8006b34:	18ed      	addgt	r5, r5, r3
 8006b36:	2600      	movs	r6, #0
 8006b38:	341a      	adds	r4, #26
 8006b3a:	42b5      	cmp	r5, r6
 8006b3c:	d11a      	bne.n	8006b74 <_printf_common+0xc8>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	e008      	b.n	8006b54 <_printf_common+0xa8>
 8006b42:	2301      	movs	r3, #1
 8006b44:	4652      	mov	r2, sl
 8006b46:	4649      	mov	r1, r9
 8006b48:	4638      	mov	r0, r7
 8006b4a:	47c0      	blx	r8
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d103      	bne.n	8006b58 <_printf_common+0xac>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b58:	3501      	adds	r5, #1
 8006b5a:	e7c6      	b.n	8006aea <_printf_common+0x3e>
 8006b5c:	18e1      	adds	r1, r4, r3
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	2030      	movs	r0, #48	; 0x30
 8006b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b66:	4422      	add	r2, r4
 8006b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b70:	3302      	adds	r3, #2
 8006b72:	e7c7      	b.n	8006b04 <_printf_common+0x58>
 8006b74:	2301      	movs	r3, #1
 8006b76:	4622      	mov	r2, r4
 8006b78:	4649      	mov	r1, r9
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	47c0      	blx	r8
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d0e6      	beq.n	8006b50 <_printf_common+0xa4>
 8006b82:	3601      	adds	r6, #1
 8006b84:	e7d9      	b.n	8006b3a <_printf_common+0x8e>
	...

08006b88 <_printf_i>:
 8006b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b8c:	7e0f      	ldrb	r7, [r1, #24]
 8006b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b90:	2f78      	cmp	r7, #120	; 0x78
 8006b92:	4691      	mov	r9, r2
 8006b94:	4680      	mov	r8, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	469a      	mov	sl, r3
 8006b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b9e:	d807      	bhi.n	8006bb0 <_printf_i+0x28>
 8006ba0:	2f62      	cmp	r7, #98	; 0x62
 8006ba2:	d80a      	bhi.n	8006bba <_printf_i+0x32>
 8006ba4:	2f00      	cmp	r7, #0
 8006ba6:	f000 80d8 	beq.w	8006d5a <_printf_i+0x1d2>
 8006baa:	2f58      	cmp	r7, #88	; 0x58
 8006bac:	f000 80a3 	beq.w	8006cf6 <_printf_i+0x16e>
 8006bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bb8:	e03a      	b.n	8006c30 <_printf_i+0xa8>
 8006bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bbe:	2b15      	cmp	r3, #21
 8006bc0:	d8f6      	bhi.n	8006bb0 <_printf_i+0x28>
 8006bc2:	a101      	add	r1, pc, #4	; (adr r1, 8006bc8 <_printf_i+0x40>)
 8006bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bc8:	08006c21 	.word	0x08006c21
 8006bcc:	08006c35 	.word	0x08006c35
 8006bd0:	08006bb1 	.word	0x08006bb1
 8006bd4:	08006bb1 	.word	0x08006bb1
 8006bd8:	08006bb1 	.word	0x08006bb1
 8006bdc:	08006bb1 	.word	0x08006bb1
 8006be0:	08006c35 	.word	0x08006c35
 8006be4:	08006bb1 	.word	0x08006bb1
 8006be8:	08006bb1 	.word	0x08006bb1
 8006bec:	08006bb1 	.word	0x08006bb1
 8006bf0:	08006bb1 	.word	0x08006bb1
 8006bf4:	08006d41 	.word	0x08006d41
 8006bf8:	08006c65 	.word	0x08006c65
 8006bfc:	08006d23 	.word	0x08006d23
 8006c00:	08006bb1 	.word	0x08006bb1
 8006c04:	08006bb1 	.word	0x08006bb1
 8006c08:	08006d63 	.word	0x08006d63
 8006c0c:	08006bb1 	.word	0x08006bb1
 8006c10:	08006c65 	.word	0x08006c65
 8006c14:	08006bb1 	.word	0x08006bb1
 8006c18:	08006bb1 	.word	0x08006bb1
 8006c1c:	08006d2b 	.word	0x08006d2b
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	1d1a      	adds	r2, r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	602a      	str	r2, [r5, #0]
 8006c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0a3      	b.n	8006d7c <_printf_i+0x1f4>
 8006c34:	6820      	ldr	r0, [r4, #0]
 8006c36:	6829      	ldr	r1, [r5, #0]
 8006c38:	0606      	lsls	r6, r0, #24
 8006c3a:	f101 0304 	add.w	r3, r1, #4
 8006c3e:	d50a      	bpl.n	8006c56 <_printf_i+0xce>
 8006c40:	680e      	ldr	r6, [r1, #0]
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	2e00      	cmp	r6, #0
 8006c46:	da03      	bge.n	8006c50 <_printf_i+0xc8>
 8006c48:	232d      	movs	r3, #45	; 0x2d
 8006c4a:	4276      	negs	r6, r6
 8006c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c50:	485e      	ldr	r0, [pc, #376]	; (8006dcc <_printf_i+0x244>)
 8006c52:	230a      	movs	r3, #10
 8006c54:	e019      	b.n	8006c8a <_printf_i+0x102>
 8006c56:	680e      	ldr	r6, [r1, #0]
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c5e:	bf18      	it	ne
 8006c60:	b236      	sxthne	r6, r6
 8006c62:	e7ef      	b.n	8006c44 <_printf_i+0xbc>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	6820      	ldr	r0, [r4, #0]
 8006c68:	1d19      	adds	r1, r3, #4
 8006c6a:	6029      	str	r1, [r5, #0]
 8006c6c:	0601      	lsls	r1, r0, #24
 8006c6e:	d501      	bpl.n	8006c74 <_printf_i+0xec>
 8006c70:	681e      	ldr	r6, [r3, #0]
 8006c72:	e002      	b.n	8006c7a <_printf_i+0xf2>
 8006c74:	0646      	lsls	r6, r0, #25
 8006c76:	d5fb      	bpl.n	8006c70 <_printf_i+0xe8>
 8006c78:	881e      	ldrh	r6, [r3, #0]
 8006c7a:	4854      	ldr	r0, [pc, #336]	; (8006dcc <_printf_i+0x244>)
 8006c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c7e:	bf0c      	ite	eq
 8006c80:	2308      	moveq	r3, #8
 8006c82:	230a      	movne	r3, #10
 8006c84:	2100      	movs	r1, #0
 8006c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c8a:	6865      	ldr	r5, [r4, #4]
 8006c8c:	60a5      	str	r5, [r4, #8]
 8006c8e:	2d00      	cmp	r5, #0
 8006c90:	bfa2      	ittt	ge
 8006c92:	6821      	ldrge	r1, [r4, #0]
 8006c94:	f021 0104 	bicge.w	r1, r1, #4
 8006c98:	6021      	strge	r1, [r4, #0]
 8006c9a:	b90e      	cbnz	r6, 8006ca0 <_printf_i+0x118>
 8006c9c:	2d00      	cmp	r5, #0
 8006c9e:	d04d      	beq.n	8006d3c <_printf_i+0x1b4>
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8006caa:	5dc7      	ldrb	r7, [r0, r7]
 8006cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cb0:	4637      	mov	r7, r6
 8006cb2:	42bb      	cmp	r3, r7
 8006cb4:	460e      	mov	r6, r1
 8006cb6:	d9f4      	bls.n	8006ca2 <_printf_i+0x11a>
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d10b      	bne.n	8006cd4 <_printf_i+0x14c>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	07de      	lsls	r6, r3, #31
 8006cc0:	d508      	bpl.n	8006cd4 <_printf_i+0x14c>
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	6861      	ldr	r1, [r4, #4]
 8006cc6:	4299      	cmp	r1, r3
 8006cc8:	bfde      	ittt	le
 8006cca:	2330      	movle	r3, #48	; 0x30
 8006ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cd4:	1b52      	subs	r2, r2, r5
 8006cd6:	6122      	str	r2, [r4, #16]
 8006cd8:	f8cd a000 	str.w	sl, [sp]
 8006cdc:	464b      	mov	r3, r9
 8006cde:	aa03      	add	r2, sp, #12
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	f7ff fee2 	bl	8006aac <_printf_common>
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d14c      	bne.n	8006d86 <_printf_i+0x1fe>
 8006cec:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf0:	b004      	add	sp, #16
 8006cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf6:	4835      	ldr	r0, [pc, #212]	; (8006dcc <_printf_i+0x244>)
 8006cf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cfc:	6829      	ldr	r1, [r5, #0]
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d04:	6029      	str	r1, [r5, #0]
 8006d06:	061d      	lsls	r5, r3, #24
 8006d08:	d514      	bpl.n	8006d34 <_printf_i+0x1ac>
 8006d0a:	07df      	lsls	r7, r3, #31
 8006d0c:	bf44      	itt	mi
 8006d0e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d12:	6023      	strmi	r3, [r4, #0]
 8006d14:	b91e      	cbnz	r6, 8006d1e <_printf_i+0x196>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	f023 0320 	bic.w	r3, r3, #32
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	2310      	movs	r3, #16
 8006d20:	e7b0      	b.n	8006c84 <_printf_i+0xfc>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	f043 0320 	orr.w	r3, r3, #32
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	2378      	movs	r3, #120	; 0x78
 8006d2c:	4828      	ldr	r0, [pc, #160]	; (8006dd0 <_printf_i+0x248>)
 8006d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d32:	e7e3      	b.n	8006cfc <_printf_i+0x174>
 8006d34:	0659      	lsls	r1, r3, #25
 8006d36:	bf48      	it	mi
 8006d38:	b2b6      	uxthmi	r6, r6
 8006d3a:	e7e6      	b.n	8006d0a <_printf_i+0x182>
 8006d3c:	4615      	mov	r5, r2
 8006d3e:	e7bb      	b.n	8006cb8 <_printf_i+0x130>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	6826      	ldr	r6, [r4, #0]
 8006d44:	6961      	ldr	r1, [r4, #20]
 8006d46:	1d18      	adds	r0, r3, #4
 8006d48:	6028      	str	r0, [r5, #0]
 8006d4a:	0635      	lsls	r5, r6, #24
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	d501      	bpl.n	8006d54 <_printf_i+0x1cc>
 8006d50:	6019      	str	r1, [r3, #0]
 8006d52:	e002      	b.n	8006d5a <_printf_i+0x1d2>
 8006d54:	0670      	lsls	r0, r6, #25
 8006d56:	d5fb      	bpl.n	8006d50 <_printf_i+0x1c8>
 8006d58:	8019      	strh	r1, [r3, #0]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	4615      	mov	r5, r2
 8006d60:	e7ba      	b.n	8006cd8 <_printf_i+0x150>
 8006d62:	682b      	ldr	r3, [r5, #0]
 8006d64:	1d1a      	adds	r2, r3, #4
 8006d66:	602a      	str	r2, [r5, #0]
 8006d68:	681d      	ldr	r5, [r3, #0]
 8006d6a:	6862      	ldr	r2, [r4, #4]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f7f9 fa3e 	bl	80001f0 <memchr>
 8006d74:	b108      	cbz	r0, 8006d7a <_printf_i+0x1f2>
 8006d76:	1b40      	subs	r0, r0, r5
 8006d78:	6060      	str	r0, [r4, #4]
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d84:	e7a8      	b.n	8006cd8 <_printf_i+0x150>
 8006d86:	6923      	ldr	r3, [r4, #16]
 8006d88:	462a      	mov	r2, r5
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	47d0      	blx	sl
 8006d90:	3001      	adds	r0, #1
 8006d92:	d0ab      	beq.n	8006cec <_printf_i+0x164>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	079b      	lsls	r3, r3, #30
 8006d98:	d413      	bmi.n	8006dc2 <_printf_i+0x23a>
 8006d9a:	68e0      	ldr	r0, [r4, #12]
 8006d9c:	9b03      	ldr	r3, [sp, #12]
 8006d9e:	4298      	cmp	r0, r3
 8006da0:	bfb8      	it	lt
 8006da2:	4618      	movlt	r0, r3
 8006da4:	e7a4      	b.n	8006cf0 <_printf_i+0x168>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4632      	mov	r2, r6
 8006daa:	4649      	mov	r1, r9
 8006dac:	4640      	mov	r0, r8
 8006dae:	47d0      	blx	sl
 8006db0:	3001      	adds	r0, #1
 8006db2:	d09b      	beq.n	8006cec <_printf_i+0x164>
 8006db4:	3501      	adds	r5, #1
 8006db6:	68e3      	ldr	r3, [r4, #12]
 8006db8:	9903      	ldr	r1, [sp, #12]
 8006dba:	1a5b      	subs	r3, r3, r1
 8006dbc:	42ab      	cmp	r3, r5
 8006dbe:	dcf2      	bgt.n	8006da6 <_printf_i+0x21e>
 8006dc0:	e7eb      	b.n	8006d9a <_printf_i+0x212>
 8006dc2:	2500      	movs	r5, #0
 8006dc4:	f104 0619 	add.w	r6, r4, #25
 8006dc8:	e7f5      	b.n	8006db6 <_printf_i+0x22e>
 8006dca:	bf00      	nop
 8006dcc:	0800965e 	.word	0x0800965e
 8006dd0:	0800966f 	.word	0x0800966f

08006dd4 <iprintf>:
 8006dd4:	b40f      	push	{r0, r1, r2, r3}
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <iprintf+0x2c>)
 8006dd8:	b513      	push	{r0, r1, r4, lr}
 8006dda:	681c      	ldr	r4, [r3, #0]
 8006ddc:	b124      	cbz	r4, 8006de8 <iprintf+0x14>
 8006dde:	69a3      	ldr	r3, [r4, #24]
 8006de0:	b913      	cbnz	r3, 8006de8 <iprintf+0x14>
 8006de2:	4620      	mov	r0, r4
 8006de4:	f001 f8f8 	bl	8007fd8 <__sinit>
 8006de8:	ab05      	add	r3, sp, #20
 8006dea:	9a04      	ldr	r2, [sp, #16]
 8006dec:	68a1      	ldr	r1, [r4, #8]
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	4620      	mov	r0, r4
 8006df2:	f002 f803 	bl	8008dfc <_vfiprintf_r>
 8006df6:	b002      	add	sp, #8
 8006df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfc:	b004      	add	sp, #16
 8006dfe:	4770      	bx	lr
 8006e00:	20000018 	.word	0x20000018

08006e04 <_puts_r>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	460e      	mov	r6, r1
 8006e08:	4605      	mov	r5, r0
 8006e0a:	b118      	cbz	r0, 8006e14 <_puts_r+0x10>
 8006e0c:	6983      	ldr	r3, [r0, #24]
 8006e0e:	b90b      	cbnz	r3, 8006e14 <_puts_r+0x10>
 8006e10:	f001 f8e2 	bl	8007fd8 <__sinit>
 8006e14:	69ab      	ldr	r3, [r5, #24]
 8006e16:	68ac      	ldr	r4, [r5, #8]
 8006e18:	b913      	cbnz	r3, 8006e20 <_puts_r+0x1c>
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f001 f8dc 	bl	8007fd8 <__sinit>
 8006e20:	4b2c      	ldr	r3, [pc, #176]	; (8006ed4 <_puts_r+0xd0>)
 8006e22:	429c      	cmp	r4, r3
 8006e24:	d120      	bne.n	8006e68 <_puts_r+0x64>
 8006e26:	686c      	ldr	r4, [r5, #4]
 8006e28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e2a:	07db      	lsls	r3, r3, #31
 8006e2c:	d405      	bmi.n	8006e3a <_puts_r+0x36>
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	0598      	lsls	r0, r3, #22
 8006e32:	d402      	bmi.n	8006e3a <_puts_r+0x36>
 8006e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e36:	f001 f972 	bl	800811e <__retarget_lock_acquire_recursive>
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	0719      	lsls	r1, r3, #28
 8006e3e:	d51d      	bpl.n	8006e7c <_puts_r+0x78>
 8006e40:	6923      	ldr	r3, [r4, #16]
 8006e42:	b1db      	cbz	r3, 8006e7c <_puts_r+0x78>
 8006e44:	3e01      	subs	r6, #1
 8006e46:	68a3      	ldr	r3, [r4, #8]
 8006e48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	60a3      	str	r3, [r4, #8]
 8006e50:	bb39      	cbnz	r1, 8006ea2 <_puts_r+0x9e>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	da38      	bge.n	8006ec8 <_puts_r+0xc4>
 8006e56:	4622      	mov	r2, r4
 8006e58:	210a      	movs	r1, #10
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f000 f868 	bl	8006f30 <__swbuf_r>
 8006e60:	3001      	adds	r0, #1
 8006e62:	d011      	beq.n	8006e88 <_puts_r+0x84>
 8006e64:	250a      	movs	r5, #10
 8006e66:	e011      	b.n	8006e8c <_puts_r+0x88>
 8006e68:	4b1b      	ldr	r3, [pc, #108]	; (8006ed8 <_puts_r+0xd4>)
 8006e6a:	429c      	cmp	r4, r3
 8006e6c:	d101      	bne.n	8006e72 <_puts_r+0x6e>
 8006e6e:	68ac      	ldr	r4, [r5, #8]
 8006e70:	e7da      	b.n	8006e28 <_puts_r+0x24>
 8006e72:	4b1a      	ldr	r3, [pc, #104]	; (8006edc <_puts_r+0xd8>)
 8006e74:	429c      	cmp	r4, r3
 8006e76:	bf08      	it	eq
 8006e78:	68ec      	ldreq	r4, [r5, #12]
 8006e7a:	e7d5      	b.n	8006e28 <_puts_r+0x24>
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 f8a8 	bl	8006fd4 <__swsetup_r>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d0dd      	beq.n	8006e44 <_puts_r+0x40>
 8006e88:	f04f 35ff 	mov.w	r5, #4294967295
 8006e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e8e:	07da      	lsls	r2, r3, #31
 8006e90:	d405      	bmi.n	8006e9e <_puts_r+0x9a>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	059b      	lsls	r3, r3, #22
 8006e96:	d402      	bmi.n	8006e9e <_puts_r+0x9a>
 8006e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e9a:	f001 f941 	bl	8008120 <__retarget_lock_release_recursive>
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	bd70      	pop	{r4, r5, r6, pc}
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	da04      	bge.n	8006eb0 <_puts_r+0xac>
 8006ea6:	69a2      	ldr	r2, [r4, #24]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	dc06      	bgt.n	8006eba <_puts_r+0xb6>
 8006eac:	290a      	cmp	r1, #10
 8006eae:	d004      	beq.n	8006eba <_puts_r+0xb6>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	6022      	str	r2, [r4, #0]
 8006eb6:	7019      	strb	r1, [r3, #0]
 8006eb8:	e7c5      	b.n	8006e46 <_puts_r+0x42>
 8006eba:	4622      	mov	r2, r4
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f000 f837 	bl	8006f30 <__swbuf_r>
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	d1bf      	bne.n	8006e46 <_puts_r+0x42>
 8006ec6:	e7df      	b.n	8006e88 <_puts_r+0x84>
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	250a      	movs	r5, #10
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	6022      	str	r2, [r4, #0]
 8006ed0:	701d      	strb	r5, [r3, #0]
 8006ed2:	e7db      	b.n	8006e8c <_puts_r+0x88>
 8006ed4:	08009730 	.word	0x08009730
 8006ed8:	08009750 	.word	0x08009750
 8006edc:	08009710 	.word	0x08009710

08006ee0 <puts>:
 8006ee0:	4b02      	ldr	r3, [pc, #8]	; (8006eec <puts+0xc>)
 8006ee2:	4601      	mov	r1, r0
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	f7ff bf8d 	b.w	8006e04 <_puts_r>
 8006eea:	bf00      	nop
 8006eec:	20000018 	.word	0x20000018

08006ef0 <siprintf>:
 8006ef0:	b40e      	push	{r1, r2, r3}
 8006ef2:	b500      	push	{lr}
 8006ef4:	b09c      	sub	sp, #112	; 0x70
 8006ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ef8:	9002      	str	r0, [sp, #8]
 8006efa:	9006      	str	r0, [sp, #24]
 8006efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f00:	4809      	ldr	r0, [pc, #36]	; (8006f28 <siprintf+0x38>)
 8006f02:	9107      	str	r1, [sp, #28]
 8006f04:	9104      	str	r1, [sp, #16]
 8006f06:	4909      	ldr	r1, [pc, #36]	; (8006f2c <siprintf+0x3c>)
 8006f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0c:	9105      	str	r1, [sp, #20]
 8006f0e:	6800      	ldr	r0, [r0, #0]
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	a902      	add	r1, sp, #8
 8006f14:	f001 fe48 	bl	8008ba8 <_svfiprintf_r>
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	b01c      	add	sp, #112	; 0x70
 8006f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f24:	b003      	add	sp, #12
 8006f26:	4770      	bx	lr
 8006f28:	20000018 	.word	0x20000018
 8006f2c:	ffff0208 	.word	0xffff0208

08006f30 <__swbuf_r>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	460e      	mov	r6, r1
 8006f34:	4614      	mov	r4, r2
 8006f36:	4605      	mov	r5, r0
 8006f38:	b118      	cbz	r0, 8006f42 <__swbuf_r+0x12>
 8006f3a:	6983      	ldr	r3, [r0, #24]
 8006f3c:	b90b      	cbnz	r3, 8006f42 <__swbuf_r+0x12>
 8006f3e:	f001 f84b 	bl	8007fd8 <__sinit>
 8006f42:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <__swbuf_r+0x98>)
 8006f44:	429c      	cmp	r4, r3
 8006f46:	d12b      	bne.n	8006fa0 <__swbuf_r+0x70>
 8006f48:	686c      	ldr	r4, [r5, #4]
 8006f4a:	69a3      	ldr	r3, [r4, #24]
 8006f4c:	60a3      	str	r3, [r4, #8]
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	071a      	lsls	r2, r3, #28
 8006f52:	d52f      	bpl.n	8006fb4 <__swbuf_r+0x84>
 8006f54:	6923      	ldr	r3, [r4, #16]
 8006f56:	b36b      	cbz	r3, 8006fb4 <__swbuf_r+0x84>
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	6820      	ldr	r0, [r4, #0]
 8006f5c:	1ac0      	subs	r0, r0, r3
 8006f5e:	6963      	ldr	r3, [r4, #20]
 8006f60:	b2f6      	uxtb	r6, r6
 8006f62:	4283      	cmp	r3, r0
 8006f64:	4637      	mov	r7, r6
 8006f66:	dc04      	bgt.n	8006f72 <__swbuf_r+0x42>
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 ffa0 	bl	8007eb0 <_fflush_r>
 8006f70:	bb30      	cbnz	r0, 8006fc0 <__swbuf_r+0x90>
 8006f72:	68a3      	ldr	r3, [r4, #8]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	60a3      	str	r3, [r4, #8]
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	6022      	str	r2, [r4, #0]
 8006f7e:	701e      	strb	r6, [r3, #0]
 8006f80:	6963      	ldr	r3, [r4, #20]
 8006f82:	3001      	adds	r0, #1
 8006f84:	4283      	cmp	r3, r0
 8006f86:	d004      	beq.n	8006f92 <__swbuf_r+0x62>
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	07db      	lsls	r3, r3, #31
 8006f8c:	d506      	bpl.n	8006f9c <__swbuf_r+0x6c>
 8006f8e:	2e0a      	cmp	r6, #10
 8006f90:	d104      	bne.n	8006f9c <__swbuf_r+0x6c>
 8006f92:	4621      	mov	r1, r4
 8006f94:	4628      	mov	r0, r5
 8006f96:	f000 ff8b 	bl	8007eb0 <_fflush_r>
 8006f9a:	b988      	cbnz	r0, 8006fc0 <__swbuf_r+0x90>
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <__swbuf_r+0x9c>)
 8006fa2:	429c      	cmp	r4, r3
 8006fa4:	d101      	bne.n	8006faa <__swbuf_r+0x7a>
 8006fa6:	68ac      	ldr	r4, [r5, #8]
 8006fa8:	e7cf      	b.n	8006f4a <__swbuf_r+0x1a>
 8006faa:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <__swbuf_r+0xa0>)
 8006fac:	429c      	cmp	r4, r3
 8006fae:	bf08      	it	eq
 8006fb0:	68ec      	ldreq	r4, [r5, #12]
 8006fb2:	e7ca      	b.n	8006f4a <__swbuf_r+0x1a>
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f000 f80c 	bl	8006fd4 <__swsetup_r>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d0cb      	beq.n	8006f58 <__swbuf_r+0x28>
 8006fc0:	f04f 37ff 	mov.w	r7, #4294967295
 8006fc4:	e7ea      	b.n	8006f9c <__swbuf_r+0x6c>
 8006fc6:	bf00      	nop
 8006fc8:	08009730 	.word	0x08009730
 8006fcc:	08009750 	.word	0x08009750
 8006fd0:	08009710 	.word	0x08009710

08006fd4 <__swsetup_r>:
 8006fd4:	4b32      	ldr	r3, [pc, #200]	; (80070a0 <__swsetup_r+0xcc>)
 8006fd6:	b570      	push	{r4, r5, r6, lr}
 8006fd8:	681d      	ldr	r5, [r3, #0]
 8006fda:	4606      	mov	r6, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	b125      	cbz	r5, 8006fea <__swsetup_r+0x16>
 8006fe0:	69ab      	ldr	r3, [r5, #24]
 8006fe2:	b913      	cbnz	r3, 8006fea <__swsetup_r+0x16>
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f000 fff7 	bl	8007fd8 <__sinit>
 8006fea:	4b2e      	ldr	r3, [pc, #184]	; (80070a4 <__swsetup_r+0xd0>)
 8006fec:	429c      	cmp	r4, r3
 8006fee:	d10f      	bne.n	8007010 <__swsetup_r+0x3c>
 8006ff0:	686c      	ldr	r4, [r5, #4]
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ff8:	0719      	lsls	r1, r3, #28
 8006ffa:	d42c      	bmi.n	8007056 <__swsetup_r+0x82>
 8006ffc:	06dd      	lsls	r5, r3, #27
 8006ffe:	d411      	bmi.n	8007024 <__swsetup_r+0x50>
 8007000:	2309      	movs	r3, #9
 8007002:	6033      	str	r3, [r6, #0]
 8007004:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007008:	81a3      	strh	r3, [r4, #12]
 800700a:	f04f 30ff 	mov.w	r0, #4294967295
 800700e:	e03e      	b.n	800708e <__swsetup_r+0xba>
 8007010:	4b25      	ldr	r3, [pc, #148]	; (80070a8 <__swsetup_r+0xd4>)
 8007012:	429c      	cmp	r4, r3
 8007014:	d101      	bne.n	800701a <__swsetup_r+0x46>
 8007016:	68ac      	ldr	r4, [r5, #8]
 8007018:	e7eb      	b.n	8006ff2 <__swsetup_r+0x1e>
 800701a:	4b24      	ldr	r3, [pc, #144]	; (80070ac <__swsetup_r+0xd8>)
 800701c:	429c      	cmp	r4, r3
 800701e:	bf08      	it	eq
 8007020:	68ec      	ldreq	r4, [r5, #12]
 8007022:	e7e6      	b.n	8006ff2 <__swsetup_r+0x1e>
 8007024:	0758      	lsls	r0, r3, #29
 8007026:	d512      	bpl.n	800704e <__swsetup_r+0x7a>
 8007028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800702a:	b141      	cbz	r1, 800703e <__swsetup_r+0x6a>
 800702c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007030:	4299      	cmp	r1, r3
 8007032:	d002      	beq.n	800703a <__swsetup_r+0x66>
 8007034:	4630      	mov	r0, r6
 8007036:	f001 fc7b 	bl	8008930 <_free_r>
 800703a:	2300      	movs	r3, #0
 800703c:	6363      	str	r3, [r4, #52]	; 0x34
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007044:	81a3      	strh	r3, [r4, #12]
 8007046:	2300      	movs	r3, #0
 8007048:	6063      	str	r3, [r4, #4]
 800704a:	6923      	ldr	r3, [r4, #16]
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	f043 0308 	orr.w	r3, r3, #8
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	6923      	ldr	r3, [r4, #16]
 8007058:	b94b      	cbnz	r3, 800706e <__swsetup_r+0x9a>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007064:	d003      	beq.n	800706e <__swsetup_r+0x9a>
 8007066:	4621      	mov	r1, r4
 8007068:	4630      	mov	r0, r6
 800706a:	f001 f87f 	bl	800816c <__smakebuf_r>
 800706e:	89a0      	ldrh	r0, [r4, #12]
 8007070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007074:	f010 0301 	ands.w	r3, r0, #1
 8007078:	d00a      	beq.n	8007090 <__swsetup_r+0xbc>
 800707a:	2300      	movs	r3, #0
 800707c:	60a3      	str	r3, [r4, #8]
 800707e:	6963      	ldr	r3, [r4, #20]
 8007080:	425b      	negs	r3, r3
 8007082:	61a3      	str	r3, [r4, #24]
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	b943      	cbnz	r3, 800709a <__swsetup_r+0xc6>
 8007088:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800708c:	d1ba      	bne.n	8007004 <__swsetup_r+0x30>
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	0781      	lsls	r1, r0, #30
 8007092:	bf58      	it	pl
 8007094:	6963      	ldrpl	r3, [r4, #20]
 8007096:	60a3      	str	r3, [r4, #8]
 8007098:	e7f4      	b.n	8007084 <__swsetup_r+0xb0>
 800709a:	2000      	movs	r0, #0
 800709c:	e7f7      	b.n	800708e <__swsetup_r+0xba>
 800709e:	bf00      	nop
 80070a0:	20000018 	.word	0x20000018
 80070a4:	08009730 	.word	0x08009730
 80070a8:	08009750 	.word	0x08009750
 80070ac:	08009710 	.word	0x08009710

080070b0 <quorem>:
 80070b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	6903      	ldr	r3, [r0, #16]
 80070b6:	690c      	ldr	r4, [r1, #16]
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	4607      	mov	r7, r0
 80070bc:	f2c0 8081 	blt.w	80071c2 <quorem+0x112>
 80070c0:	3c01      	subs	r4, #1
 80070c2:	f101 0814 	add.w	r8, r1, #20
 80070c6:	f100 0514 	add.w	r5, r0, #20
 80070ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070ce:	9301      	str	r3, [sp, #4]
 80070d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070d8:	3301      	adds	r3, #1
 80070da:	429a      	cmp	r2, r3
 80070dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80070e8:	d331      	bcc.n	800714e <quorem+0x9e>
 80070ea:	f04f 0e00 	mov.w	lr, #0
 80070ee:	4640      	mov	r0, r8
 80070f0:	46ac      	mov	ip, r5
 80070f2:	46f2      	mov	sl, lr
 80070f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80070f8:	b293      	uxth	r3, r2
 80070fa:	fb06 e303 	mla	r3, r6, r3, lr
 80070fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007102:	b29b      	uxth	r3, r3
 8007104:	ebaa 0303 	sub.w	r3, sl, r3
 8007108:	f8dc a000 	ldr.w	sl, [ip]
 800710c:	0c12      	lsrs	r2, r2, #16
 800710e:	fa13 f38a 	uxtah	r3, r3, sl
 8007112:	fb06 e202 	mla	r2, r6, r2, lr
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	9b00      	ldr	r3, [sp, #0]
 800711a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800711e:	b292      	uxth	r2, r2
 8007120:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007128:	f8bd 3000 	ldrh.w	r3, [sp]
 800712c:	4581      	cmp	r9, r0
 800712e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007132:	f84c 3b04 	str.w	r3, [ip], #4
 8007136:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800713a:	d2db      	bcs.n	80070f4 <quorem+0x44>
 800713c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007140:	b92b      	cbnz	r3, 800714e <quorem+0x9e>
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	3b04      	subs	r3, #4
 8007146:	429d      	cmp	r5, r3
 8007148:	461a      	mov	r2, r3
 800714a:	d32e      	bcc.n	80071aa <quorem+0xfa>
 800714c:	613c      	str	r4, [r7, #16]
 800714e:	4638      	mov	r0, r7
 8007150:	f001 fad6 	bl	8008700 <__mcmp>
 8007154:	2800      	cmp	r0, #0
 8007156:	db24      	blt.n	80071a2 <quorem+0xf2>
 8007158:	3601      	adds	r6, #1
 800715a:	4628      	mov	r0, r5
 800715c:	f04f 0c00 	mov.w	ip, #0
 8007160:	f858 2b04 	ldr.w	r2, [r8], #4
 8007164:	f8d0 e000 	ldr.w	lr, [r0]
 8007168:	b293      	uxth	r3, r2
 800716a:	ebac 0303 	sub.w	r3, ip, r3
 800716e:	0c12      	lsrs	r2, r2, #16
 8007170:	fa13 f38e 	uxtah	r3, r3, lr
 8007174:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800717c:	b29b      	uxth	r3, r3
 800717e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007182:	45c1      	cmp	r9, r8
 8007184:	f840 3b04 	str.w	r3, [r0], #4
 8007188:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800718c:	d2e8      	bcs.n	8007160 <quorem+0xb0>
 800718e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007196:	b922      	cbnz	r2, 80071a2 <quorem+0xf2>
 8007198:	3b04      	subs	r3, #4
 800719a:	429d      	cmp	r5, r3
 800719c:	461a      	mov	r2, r3
 800719e:	d30a      	bcc.n	80071b6 <quorem+0x106>
 80071a0:	613c      	str	r4, [r7, #16]
 80071a2:	4630      	mov	r0, r6
 80071a4:	b003      	add	sp, #12
 80071a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071aa:	6812      	ldr	r2, [r2, #0]
 80071ac:	3b04      	subs	r3, #4
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	d1cc      	bne.n	800714c <quorem+0x9c>
 80071b2:	3c01      	subs	r4, #1
 80071b4:	e7c7      	b.n	8007146 <quorem+0x96>
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	3b04      	subs	r3, #4
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	d1f0      	bne.n	80071a0 <quorem+0xf0>
 80071be:	3c01      	subs	r4, #1
 80071c0:	e7eb      	b.n	800719a <quorem+0xea>
 80071c2:	2000      	movs	r0, #0
 80071c4:	e7ee      	b.n	80071a4 <quorem+0xf4>
	...

080071c8 <_dtoa_r>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	ed2d 8b04 	vpush	{d8-d9}
 80071d0:	ec57 6b10 	vmov	r6, r7, d0
 80071d4:	b093      	sub	sp, #76	; 0x4c
 80071d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071dc:	9106      	str	r1, [sp, #24]
 80071de:	ee10 aa10 	vmov	sl, s0
 80071e2:	4604      	mov	r4, r0
 80071e4:	9209      	str	r2, [sp, #36]	; 0x24
 80071e6:	930c      	str	r3, [sp, #48]	; 0x30
 80071e8:	46bb      	mov	fp, r7
 80071ea:	b975      	cbnz	r5, 800720a <_dtoa_r+0x42>
 80071ec:	2010      	movs	r0, #16
 80071ee:	f000 fffd 	bl	80081ec <malloc>
 80071f2:	4602      	mov	r2, r0
 80071f4:	6260      	str	r0, [r4, #36]	; 0x24
 80071f6:	b920      	cbnz	r0, 8007202 <_dtoa_r+0x3a>
 80071f8:	4ba7      	ldr	r3, [pc, #668]	; (8007498 <_dtoa_r+0x2d0>)
 80071fa:	21ea      	movs	r1, #234	; 0xea
 80071fc:	48a7      	ldr	r0, [pc, #668]	; (800749c <_dtoa_r+0x2d4>)
 80071fe:	f001 ff93 	bl	8009128 <__assert_func>
 8007202:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007206:	6005      	str	r5, [r0, #0]
 8007208:	60c5      	str	r5, [r0, #12]
 800720a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800720c:	6819      	ldr	r1, [r3, #0]
 800720e:	b151      	cbz	r1, 8007226 <_dtoa_r+0x5e>
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	604a      	str	r2, [r1, #4]
 8007214:	2301      	movs	r3, #1
 8007216:	4093      	lsls	r3, r2
 8007218:	608b      	str	r3, [r1, #8]
 800721a:	4620      	mov	r0, r4
 800721c:	f001 f82e 	bl	800827c <_Bfree>
 8007220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	1e3b      	subs	r3, r7, #0
 8007228:	bfaa      	itet	ge
 800722a:	2300      	movge	r3, #0
 800722c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007230:	f8c8 3000 	strge.w	r3, [r8]
 8007234:	4b9a      	ldr	r3, [pc, #616]	; (80074a0 <_dtoa_r+0x2d8>)
 8007236:	bfbc      	itt	lt
 8007238:	2201      	movlt	r2, #1
 800723a:	f8c8 2000 	strlt.w	r2, [r8]
 800723e:	ea33 030b 	bics.w	r3, r3, fp
 8007242:	d11b      	bne.n	800727c <_dtoa_r+0xb4>
 8007244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007246:	f242 730f 	movw	r3, #9999	; 0x270f
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007250:	4333      	orrs	r3, r6
 8007252:	f000 8592 	beq.w	8007d7a <_dtoa_r+0xbb2>
 8007256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007258:	b963      	cbnz	r3, 8007274 <_dtoa_r+0xac>
 800725a:	4b92      	ldr	r3, [pc, #584]	; (80074a4 <_dtoa_r+0x2dc>)
 800725c:	e022      	b.n	80072a4 <_dtoa_r+0xdc>
 800725e:	4b92      	ldr	r3, [pc, #584]	; (80074a8 <_dtoa_r+0x2e0>)
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	3308      	adds	r3, #8
 8007264:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	9801      	ldr	r0, [sp, #4]
 800726a:	b013      	add	sp, #76	; 0x4c
 800726c:	ecbd 8b04 	vpop	{d8-d9}
 8007270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007274:	4b8b      	ldr	r3, [pc, #556]	; (80074a4 <_dtoa_r+0x2dc>)
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	3303      	adds	r3, #3
 800727a:	e7f3      	b.n	8007264 <_dtoa_r+0x9c>
 800727c:	2200      	movs	r2, #0
 800727e:	2300      	movs	r3, #0
 8007280:	4650      	mov	r0, sl
 8007282:	4659      	mov	r1, fp
 8007284:	f7f9 fc28 	bl	8000ad8 <__aeabi_dcmpeq>
 8007288:	ec4b ab19 	vmov	d9, sl, fp
 800728c:	4680      	mov	r8, r0
 800728e:	b158      	cbz	r0, 80072a8 <_dtoa_r+0xe0>
 8007290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007292:	2301      	movs	r3, #1
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 856b 	beq.w	8007d74 <_dtoa_r+0xbac>
 800729e:	4883      	ldr	r0, [pc, #524]	; (80074ac <_dtoa_r+0x2e4>)
 80072a0:	6018      	str	r0, [r3, #0]
 80072a2:	1e43      	subs	r3, r0, #1
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	e7df      	b.n	8007268 <_dtoa_r+0xa0>
 80072a8:	ec4b ab10 	vmov	d0, sl, fp
 80072ac:	aa10      	add	r2, sp, #64	; 0x40
 80072ae:	a911      	add	r1, sp, #68	; 0x44
 80072b0:	4620      	mov	r0, r4
 80072b2:	f001 facb 	bl	800884c <__d2b>
 80072b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80072ba:	ee08 0a10 	vmov	s16, r0
 80072be:	2d00      	cmp	r5, #0
 80072c0:	f000 8084 	beq.w	80073cc <_dtoa_r+0x204>
 80072c4:	ee19 3a90 	vmov	r3, s19
 80072c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80072d0:	4656      	mov	r6, sl
 80072d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80072d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80072de:	4b74      	ldr	r3, [pc, #464]	; (80074b0 <_dtoa_r+0x2e8>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	4630      	mov	r0, r6
 80072e4:	4639      	mov	r1, r7
 80072e6:	f7f8 ffd7 	bl	8000298 <__aeabi_dsub>
 80072ea:	a365      	add	r3, pc, #404	; (adr r3, 8007480 <_dtoa_r+0x2b8>)
 80072ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f0:	f7f9 f98a 	bl	8000608 <__aeabi_dmul>
 80072f4:	a364      	add	r3, pc, #400	; (adr r3, 8007488 <_dtoa_r+0x2c0>)
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f7f8 ffcf 	bl	800029c <__adddf3>
 80072fe:	4606      	mov	r6, r0
 8007300:	4628      	mov	r0, r5
 8007302:	460f      	mov	r7, r1
 8007304:	f7f9 f916 	bl	8000534 <__aeabi_i2d>
 8007308:	a361      	add	r3, pc, #388	; (adr r3, 8007490 <_dtoa_r+0x2c8>)
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	f7f9 f97b 	bl	8000608 <__aeabi_dmul>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4630      	mov	r0, r6
 8007318:	4639      	mov	r1, r7
 800731a:	f7f8 ffbf 	bl	800029c <__adddf3>
 800731e:	4606      	mov	r6, r0
 8007320:	460f      	mov	r7, r1
 8007322:	f7f9 fc21 	bl	8000b68 <__aeabi_d2iz>
 8007326:	2200      	movs	r2, #0
 8007328:	9000      	str	r0, [sp, #0]
 800732a:	2300      	movs	r3, #0
 800732c:	4630      	mov	r0, r6
 800732e:	4639      	mov	r1, r7
 8007330:	f7f9 fbdc 	bl	8000aec <__aeabi_dcmplt>
 8007334:	b150      	cbz	r0, 800734c <_dtoa_r+0x184>
 8007336:	9800      	ldr	r0, [sp, #0]
 8007338:	f7f9 f8fc 	bl	8000534 <__aeabi_i2d>
 800733c:	4632      	mov	r2, r6
 800733e:	463b      	mov	r3, r7
 8007340:	f7f9 fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007344:	b910      	cbnz	r0, 800734c <_dtoa_r+0x184>
 8007346:	9b00      	ldr	r3, [sp, #0]
 8007348:	3b01      	subs	r3, #1
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	9b00      	ldr	r3, [sp, #0]
 800734e:	2b16      	cmp	r3, #22
 8007350:	d85a      	bhi.n	8007408 <_dtoa_r+0x240>
 8007352:	9a00      	ldr	r2, [sp, #0]
 8007354:	4b57      	ldr	r3, [pc, #348]	; (80074b4 <_dtoa_r+0x2ec>)
 8007356:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	ec51 0b19 	vmov	r0, r1, d9
 8007362:	f7f9 fbc3 	bl	8000aec <__aeabi_dcmplt>
 8007366:	2800      	cmp	r0, #0
 8007368:	d050      	beq.n	800740c <_dtoa_r+0x244>
 800736a:	9b00      	ldr	r3, [sp, #0]
 800736c:	3b01      	subs	r3, #1
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	2300      	movs	r3, #0
 8007372:	930b      	str	r3, [sp, #44]	; 0x2c
 8007374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007376:	1b5d      	subs	r5, r3, r5
 8007378:	1e6b      	subs	r3, r5, #1
 800737a:	9305      	str	r3, [sp, #20]
 800737c:	bf45      	ittet	mi
 800737e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007382:	9304      	strmi	r3, [sp, #16]
 8007384:	2300      	movpl	r3, #0
 8007386:	2300      	movmi	r3, #0
 8007388:	bf4c      	ite	mi
 800738a:	9305      	strmi	r3, [sp, #20]
 800738c:	9304      	strpl	r3, [sp, #16]
 800738e:	9b00      	ldr	r3, [sp, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	db3d      	blt.n	8007410 <_dtoa_r+0x248>
 8007394:	9b05      	ldr	r3, [sp, #20]
 8007396:	9a00      	ldr	r2, [sp, #0]
 8007398:	920a      	str	r2, [sp, #40]	; 0x28
 800739a:	4413      	add	r3, r2
 800739c:	9305      	str	r3, [sp, #20]
 800739e:	2300      	movs	r3, #0
 80073a0:	9307      	str	r3, [sp, #28]
 80073a2:	9b06      	ldr	r3, [sp, #24]
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	f200 8089 	bhi.w	80074bc <_dtoa_r+0x2f4>
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	bfc4      	itt	gt
 80073ae:	3b04      	subgt	r3, #4
 80073b0:	9306      	strgt	r3, [sp, #24]
 80073b2:	9b06      	ldr	r3, [sp, #24]
 80073b4:	f1a3 0302 	sub.w	r3, r3, #2
 80073b8:	bfcc      	ite	gt
 80073ba:	2500      	movgt	r5, #0
 80073bc:	2501      	movle	r5, #1
 80073be:	2b03      	cmp	r3, #3
 80073c0:	f200 8087 	bhi.w	80074d2 <_dtoa_r+0x30a>
 80073c4:	e8df f003 	tbb	[pc, r3]
 80073c8:	59383a2d 	.word	0x59383a2d
 80073cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80073d0:	441d      	add	r5, r3
 80073d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	bfc1      	itttt	gt
 80073da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80073e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80073e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073ea:	bfda      	itte	le
 80073ec:	f1c3 0320 	rsble	r3, r3, #32
 80073f0:	fa06 f003 	lslle.w	r0, r6, r3
 80073f4:	4318      	orrgt	r0, r3
 80073f6:	f7f9 f88d 	bl	8000514 <__aeabi_ui2d>
 80073fa:	2301      	movs	r3, #1
 80073fc:	4606      	mov	r6, r0
 80073fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007402:	3d01      	subs	r5, #1
 8007404:	930e      	str	r3, [sp, #56]	; 0x38
 8007406:	e76a      	b.n	80072de <_dtoa_r+0x116>
 8007408:	2301      	movs	r3, #1
 800740a:	e7b2      	b.n	8007372 <_dtoa_r+0x1aa>
 800740c:	900b      	str	r0, [sp, #44]	; 0x2c
 800740e:	e7b1      	b.n	8007374 <_dtoa_r+0x1ac>
 8007410:	9b04      	ldr	r3, [sp, #16]
 8007412:	9a00      	ldr	r2, [sp, #0]
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	9304      	str	r3, [sp, #16]
 8007418:	4253      	negs	r3, r2
 800741a:	9307      	str	r3, [sp, #28]
 800741c:	2300      	movs	r3, #0
 800741e:	930a      	str	r3, [sp, #40]	; 0x28
 8007420:	e7bf      	b.n	80073a2 <_dtoa_r+0x1da>
 8007422:	2300      	movs	r3, #0
 8007424:	9308      	str	r3, [sp, #32]
 8007426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	dc55      	bgt.n	80074d8 <_dtoa_r+0x310>
 800742c:	2301      	movs	r3, #1
 800742e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007432:	461a      	mov	r2, r3
 8007434:	9209      	str	r2, [sp, #36]	; 0x24
 8007436:	e00c      	b.n	8007452 <_dtoa_r+0x28a>
 8007438:	2301      	movs	r3, #1
 800743a:	e7f3      	b.n	8007424 <_dtoa_r+0x25c>
 800743c:	2300      	movs	r3, #0
 800743e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007440:	9308      	str	r3, [sp, #32]
 8007442:	9b00      	ldr	r3, [sp, #0]
 8007444:	4413      	add	r3, r2
 8007446:	9302      	str	r3, [sp, #8]
 8007448:	3301      	adds	r3, #1
 800744a:	2b01      	cmp	r3, #1
 800744c:	9303      	str	r3, [sp, #12]
 800744e:	bfb8      	it	lt
 8007450:	2301      	movlt	r3, #1
 8007452:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007454:	2200      	movs	r2, #0
 8007456:	6042      	str	r2, [r0, #4]
 8007458:	2204      	movs	r2, #4
 800745a:	f102 0614 	add.w	r6, r2, #20
 800745e:	429e      	cmp	r6, r3
 8007460:	6841      	ldr	r1, [r0, #4]
 8007462:	d93d      	bls.n	80074e0 <_dtoa_r+0x318>
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fec9 	bl	80081fc <_Balloc>
 800746a:	9001      	str	r0, [sp, #4]
 800746c:	2800      	cmp	r0, #0
 800746e:	d13b      	bne.n	80074e8 <_dtoa_r+0x320>
 8007470:	4b11      	ldr	r3, [pc, #68]	; (80074b8 <_dtoa_r+0x2f0>)
 8007472:	4602      	mov	r2, r0
 8007474:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007478:	e6c0      	b.n	80071fc <_dtoa_r+0x34>
 800747a:	2301      	movs	r3, #1
 800747c:	e7df      	b.n	800743e <_dtoa_r+0x276>
 800747e:	bf00      	nop
 8007480:	636f4361 	.word	0x636f4361
 8007484:	3fd287a7 	.word	0x3fd287a7
 8007488:	8b60c8b3 	.word	0x8b60c8b3
 800748c:	3fc68a28 	.word	0x3fc68a28
 8007490:	509f79fb 	.word	0x509f79fb
 8007494:	3fd34413 	.word	0x3fd34413
 8007498:	0800968d 	.word	0x0800968d
 800749c:	080096a4 	.word	0x080096a4
 80074a0:	7ff00000 	.word	0x7ff00000
 80074a4:	08009689 	.word	0x08009689
 80074a8:	08009680 	.word	0x08009680
 80074ac:	0800965d 	.word	0x0800965d
 80074b0:	3ff80000 	.word	0x3ff80000
 80074b4:	080097f8 	.word	0x080097f8
 80074b8:	080096ff 	.word	0x080096ff
 80074bc:	2501      	movs	r5, #1
 80074be:	2300      	movs	r3, #0
 80074c0:	9306      	str	r3, [sp, #24]
 80074c2:	9508      	str	r5, [sp, #32]
 80074c4:	f04f 33ff 	mov.w	r3, #4294967295
 80074c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074cc:	2200      	movs	r2, #0
 80074ce:	2312      	movs	r3, #18
 80074d0:	e7b0      	b.n	8007434 <_dtoa_r+0x26c>
 80074d2:	2301      	movs	r3, #1
 80074d4:	9308      	str	r3, [sp, #32]
 80074d6:	e7f5      	b.n	80074c4 <_dtoa_r+0x2fc>
 80074d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074de:	e7b8      	b.n	8007452 <_dtoa_r+0x28a>
 80074e0:	3101      	adds	r1, #1
 80074e2:	6041      	str	r1, [r0, #4]
 80074e4:	0052      	lsls	r2, r2, #1
 80074e6:	e7b8      	b.n	800745a <_dtoa_r+0x292>
 80074e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ea:	9a01      	ldr	r2, [sp, #4]
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	9b03      	ldr	r3, [sp, #12]
 80074f0:	2b0e      	cmp	r3, #14
 80074f2:	f200 809d 	bhi.w	8007630 <_dtoa_r+0x468>
 80074f6:	2d00      	cmp	r5, #0
 80074f8:	f000 809a 	beq.w	8007630 <_dtoa_r+0x468>
 80074fc:	9b00      	ldr	r3, [sp, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	dd32      	ble.n	8007568 <_dtoa_r+0x3a0>
 8007502:	4ab7      	ldr	r2, [pc, #732]	; (80077e0 <_dtoa_r+0x618>)
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800750c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007510:	9b00      	ldr	r3, [sp, #0]
 8007512:	05d8      	lsls	r0, r3, #23
 8007514:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007518:	d516      	bpl.n	8007548 <_dtoa_r+0x380>
 800751a:	4bb2      	ldr	r3, [pc, #712]	; (80077e4 <_dtoa_r+0x61c>)
 800751c:	ec51 0b19 	vmov	r0, r1, d9
 8007520:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007524:	f7f9 f99a 	bl	800085c <__aeabi_ddiv>
 8007528:	f007 070f 	and.w	r7, r7, #15
 800752c:	4682      	mov	sl, r0
 800752e:	468b      	mov	fp, r1
 8007530:	2503      	movs	r5, #3
 8007532:	4eac      	ldr	r6, [pc, #688]	; (80077e4 <_dtoa_r+0x61c>)
 8007534:	b957      	cbnz	r7, 800754c <_dtoa_r+0x384>
 8007536:	4642      	mov	r2, r8
 8007538:	464b      	mov	r3, r9
 800753a:	4650      	mov	r0, sl
 800753c:	4659      	mov	r1, fp
 800753e:	f7f9 f98d 	bl	800085c <__aeabi_ddiv>
 8007542:	4682      	mov	sl, r0
 8007544:	468b      	mov	fp, r1
 8007546:	e028      	b.n	800759a <_dtoa_r+0x3d2>
 8007548:	2502      	movs	r5, #2
 800754a:	e7f2      	b.n	8007532 <_dtoa_r+0x36a>
 800754c:	07f9      	lsls	r1, r7, #31
 800754e:	d508      	bpl.n	8007562 <_dtoa_r+0x39a>
 8007550:	4640      	mov	r0, r8
 8007552:	4649      	mov	r1, r9
 8007554:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007558:	f7f9 f856 	bl	8000608 <__aeabi_dmul>
 800755c:	3501      	adds	r5, #1
 800755e:	4680      	mov	r8, r0
 8007560:	4689      	mov	r9, r1
 8007562:	107f      	asrs	r7, r7, #1
 8007564:	3608      	adds	r6, #8
 8007566:	e7e5      	b.n	8007534 <_dtoa_r+0x36c>
 8007568:	f000 809b 	beq.w	80076a2 <_dtoa_r+0x4da>
 800756c:	9b00      	ldr	r3, [sp, #0]
 800756e:	4f9d      	ldr	r7, [pc, #628]	; (80077e4 <_dtoa_r+0x61c>)
 8007570:	425e      	negs	r6, r3
 8007572:	4b9b      	ldr	r3, [pc, #620]	; (80077e0 <_dtoa_r+0x618>)
 8007574:	f006 020f 	and.w	r2, r6, #15
 8007578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	ec51 0b19 	vmov	r0, r1, d9
 8007584:	f7f9 f840 	bl	8000608 <__aeabi_dmul>
 8007588:	1136      	asrs	r6, r6, #4
 800758a:	4682      	mov	sl, r0
 800758c:	468b      	mov	fp, r1
 800758e:	2300      	movs	r3, #0
 8007590:	2502      	movs	r5, #2
 8007592:	2e00      	cmp	r6, #0
 8007594:	d17a      	bne.n	800768c <_dtoa_r+0x4c4>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1d3      	bne.n	8007542 <_dtoa_r+0x37a>
 800759a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8082 	beq.w	80076a6 <_dtoa_r+0x4de>
 80075a2:	4b91      	ldr	r3, [pc, #580]	; (80077e8 <_dtoa_r+0x620>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	4650      	mov	r0, sl
 80075a8:	4659      	mov	r1, fp
 80075aa:	f7f9 fa9f 	bl	8000aec <__aeabi_dcmplt>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d079      	beq.n	80076a6 <_dtoa_r+0x4de>
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d076      	beq.n	80076a6 <_dtoa_r+0x4de>
 80075b8:	9b02      	ldr	r3, [sp, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	dd36      	ble.n	800762c <_dtoa_r+0x464>
 80075be:	9b00      	ldr	r3, [sp, #0]
 80075c0:	4650      	mov	r0, sl
 80075c2:	4659      	mov	r1, fp
 80075c4:	1e5f      	subs	r7, r3, #1
 80075c6:	2200      	movs	r2, #0
 80075c8:	4b88      	ldr	r3, [pc, #544]	; (80077ec <_dtoa_r+0x624>)
 80075ca:	f7f9 f81d 	bl	8000608 <__aeabi_dmul>
 80075ce:	9e02      	ldr	r6, [sp, #8]
 80075d0:	4682      	mov	sl, r0
 80075d2:	468b      	mov	fp, r1
 80075d4:	3501      	adds	r5, #1
 80075d6:	4628      	mov	r0, r5
 80075d8:	f7f8 ffac 	bl	8000534 <__aeabi_i2d>
 80075dc:	4652      	mov	r2, sl
 80075de:	465b      	mov	r3, fp
 80075e0:	f7f9 f812 	bl	8000608 <__aeabi_dmul>
 80075e4:	4b82      	ldr	r3, [pc, #520]	; (80077f0 <_dtoa_r+0x628>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	f7f8 fe58 	bl	800029c <__adddf3>
 80075ec:	46d0      	mov	r8, sl
 80075ee:	46d9      	mov	r9, fp
 80075f0:	4682      	mov	sl, r0
 80075f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80075f6:	2e00      	cmp	r6, #0
 80075f8:	d158      	bne.n	80076ac <_dtoa_r+0x4e4>
 80075fa:	4b7e      	ldr	r3, [pc, #504]	; (80077f4 <_dtoa_r+0x62c>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	4640      	mov	r0, r8
 8007600:	4649      	mov	r1, r9
 8007602:	f7f8 fe49 	bl	8000298 <__aeabi_dsub>
 8007606:	4652      	mov	r2, sl
 8007608:	465b      	mov	r3, fp
 800760a:	4680      	mov	r8, r0
 800760c:	4689      	mov	r9, r1
 800760e:	f7f9 fa8b 	bl	8000b28 <__aeabi_dcmpgt>
 8007612:	2800      	cmp	r0, #0
 8007614:	f040 8295 	bne.w	8007b42 <_dtoa_r+0x97a>
 8007618:	4652      	mov	r2, sl
 800761a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800761e:	4640      	mov	r0, r8
 8007620:	4649      	mov	r1, r9
 8007622:	f7f9 fa63 	bl	8000aec <__aeabi_dcmplt>
 8007626:	2800      	cmp	r0, #0
 8007628:	f040 8289 	bne.w	8007b3e <_dtoa_r+0x976>
 800762c:	ec5b ab19 	vmov	sl, fp, d9
 8007630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007632:	2b00      	cmp	r3, #0
 8007634:	f2c0 8148 	blt.w	80078c8 <_dtoa_r+0x700>
 8007638:	9a00      	ldr	r2, [sp, #0]
 800763a:	2a0e      	cmp	r2, #14
 800763c:	f300 8144 	bgt.w	80078c8 <_dtoa_r+0x700>
 8007640:	4b67      	ldr	r3, [pc, #412]	; (80077e0 <_dtoa_r+0x618>)
 8007642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007646:	e9d3 8900 	ldrd	r8, r9, [r3]
 800764a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	f280 80d5 	bge.w	80077fc <_dtoa_r+0x634>
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	f300 80d1 	bgt.w	80077fc <_dtoa_r+0x634>
 800765a:	f040 826f 	bne.w	8007b3c <_dtoa_r+0x974>
 800765e:	4b65      	ldr	r3, [pc, #404]	; (80077f4 <_dtoa_r+0x62c>)
 8007660:	2200      	movs	r2, #0
 8007662:	4640      	mov	r0, r8
 8007664:	4649      	mov	r1, r9
 8007666:	f7f8 ffcf 	bl	8000608 <__aeabi_dmul>
 800766a:	4652      	mov	r2, sl
 800766c:	465b      	mov	r3, fp
 800766e:	f7f9 fa51 	bl	8000b14 <__aeabi_dcmpge>
 8007672:	9e03      	ldr	r6, [sp, #12]
 8007674:	4637      	mov	r7, r6
 8007676:	2800      	cmp	r0, #0
 8007678:	f040 8245 	bne.w	8007b06 <_dtoa_r+0x93e>
 800767c:	9d01      	ldr	r5, [sp, #4]
 800767e:	2331      	movs	r3, #49	; 0x31
 8007680:	f805 3b01 	strb.w	r3, [r5], #1
 8007684:	9b00      	ldr	r3, [sp, #0]
 8007686:	3301      	adds	r3, #1
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	e240      	b.n	8007b0e <_dtoa_r+0x946>
 800768c:	07f2      	lsls	r2, r6, #31
 800768e:	d505      	bpl.n	800769c <_dtoa_r+0x4d4>
 8007690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007694:	f7f8 ffb8 	bl	8000608 <__aeabi_dmul>
 8007698:	3501      	adds	r5, #1
 800769a:	2301      	movs	r3, #1
 800769c:	1076      	asrs	r6, r6, #1
 800769e:	3708      	adds	r7, #8
 80076a0:	e777      	b.n	8007592 <_dtoa_r+0x3ca>
 80076a2:	2502      	movs	r5, #2
 80076a4:	e779      	b.n	800759a <_dtoa_r+0x3d2>
 80076a6:	9f00      	ldr	r7, [sp, #0]
 80076a8:	9e03      	ldr	r6, [sp, #12]
 80076aa:	e794      	b.n	80075d6 <_dtoa_r+0x40e>
 80076ac:	9901      	ldr	r1, [sp, #4]
 80076ae:	4b4c      	ldr	r3, [pc, #304]	; (80077e0 <_dtoa_r+0x618>)
 80076b0:	4431      	add	r1, r6
 80076b2:	910d      	str	r1, [sp, #52]	; 0x34
 80076b4:	9908      	ldr	r1, [sp, #32]
 80076b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80076ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076be:	2900      	cmp	r1, #0
 80076c0:	d043      	beq.n	800774a <_dtoa_r+0x582>
 80076c2:	494d      	ldr	r1, [pc, #308]	; (80077f8 <_dtoa_r+0x630>)
 80076c4:	2000      	movs	r0, #0
 80076c6:	f7f9 f8c9 	bl	800085c <__aeabi_ddiv>
 80076ca:	4652      	mov	r2, sl
 80076cc:	465b      	mov	r3, fp
 80076ce:	f7f8 fde3 	bl	8000298 <__aeabi_dsub>
 80076d2:	9d01      	ldr	r5, [sp, #4]
 80076d4:	4682      	mov	sl, r0
 80076d6:	468b      	mov	fp, r1
 80076d8:	4649      	mov	r1, r9
 80076da:	4640      	mov	r0, r8
 80076dc:	f7f9 fa44 	bl	8000b68 <__aeabi_d2iz>
 80076e0:	4606      	mov	r6, r0
 80076e2:	f7f8 ff27 	bl	8000534 <__aeabi_i2d>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4640      	mov	r0, r8
 80076ec:	4649      	mov	r1, r9
 80076ee:	f7f8 fdd3 	bl	8000298 <__aeabi_dsub>
 80076f2:	3630      	adds	r6, #48	; 0x30
 80076f4:	f805 6b01 	strb.w	r6, [r5], #1
 80076f8:	4652      	mov	r2, sl
 80076fa:	465b      	mov	r3, fp
 80076fc:	4680      	mov	r8, r0
 80076fe:	4689      	mov	r9, r1
 8007700:	f7f9 f9f4 	bl	8000aec <__aeabi_dcmplt>
 8007704:	2800      	cmp	r0, #0
 8007706:	d163      	bne.n	80077d0 <_dtoa_r+0x608>
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	4936      	ldr	r1, [pc, #216]	; (80077e8 <_dtoa_r+0x620>)
 800770e:	2000      	movs	r0, #0
 8007710:	f7f8 fdc2 	bl	8000298 <__aeabi_dsub>
 8007714:	4652      	mov	r2, sl
 8007716:	465b      	mov	r3, fp
 8007718:	f7f9 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800771c:	2800      	cmp	r0, #0
 800771e:	f040 80b5 	bne.w	800788c <_dtoa_r+0x6c4>
 8007722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007724:	429d      	cmp	r5, r3
 8007726:	d081      	beq.n	800762c <_dtoa_r+0x464>
 8007728:	4b30      	ldr	r3, [pc, #192]	; (80077ec <_dtoa_r+0x624>)
 800772a:	2200      	movs	r2, #0
 800772c:	4650      	mov	r0, sl
 800772e:	4659      	mov	r1, fp
 8007730:	f7f8 ff6a 	bl	8000608 <__aeabi_dmul>
 8007734:	4b2d      	ldr	r3, [pc, #180]	; (80077ec <_dtoa_r+0x624>)
 8007736:	4682      	mov	sl, r0
 8007738:	468b      	mov	fp, r1
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	2200      	movs	r2, #0
 8007740:	f7f8 ff62 	bl	8000608 <__aeabi_dmul>
 8007744:	4680      	mov	r8, r0
 8007746:	4689      	mov	r9, r1
 8007748:	e7c6      	b.n	80076d8 <_dtoa_r+0x510>
 800774a:	4650      	mov	r0, sl
 800774c:	4659      	mov	r1, fp
 800774e:	f7f8 ff5b 	bl	8000608 <__aeabi_dmul>
 8007752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007754:	9d01      	ldr	r5, [sp, #4]
 8007756:	930f      	str	r3, [sp, #60]	; 0x3c
 8007758:	4682      	mov	sl, r0
 800775a:	468b      	mov	fp, r1
 800775c:	4649      	mov	r1, r9
 800775e:	4640      	mov	r0, r8
 8007760:	f7f9 fa02 	bl	8000b68 <__aeabi_d2iz>
 8007764:	4606      	mov	r6, r0
 8007766:	f7f8 fee5 	bl	8000534 <__aeabi_i2d>
 800776a:	3630      	adds	r6, #48	; 0x30
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4640      	mov	r0, r8
 8007772:	4649      	mov	r1, r9
 8007774:	f7f8 fd90 	bl	8000298 <__aeabi_dsub>
 8007778:	f805 6b01 	strb.w	r6, [r5], #1
 800777c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800777e:	429d      	cmp	r5, r3
 8007780:	4680      	mov	r8, r0
 8007782:	4689      	mov	r9, r1
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	d124      	bne.n	80077d4 <_dtoa_r+0x60c>
 800778a:	4b1b      	ldr	r3, [pc, #108]	; (80077f8 <_dtoa_r+0x630>)
 800778c:	4650      	mov	r0, sl
 800778e:	4659      	mov	r1, fp
 8007790:	f7f8 fd84 	bl	800029c <__adddf3>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4640      	mov	r0, r8
 800779a:	4649      	mov	r1, r9
 800779c:	f7f9 f9c4 	bl	8000b28 <__aeabi_dcmpgt>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d173      	bne.n	800788c <_dtoa_r+0x6c4>
 80077a4:	4652      	mov	r2, sl
 80077a6:	465b      	mov	r3, fp
 80077a8:	4913      	ldr	r1, [pc, #76]	; (80077f8 <_dtoa_r+0x630>)
 80077aa:	2000      	movs	r0, #0
 80077ac:	f7f8 fd74 	bl	8000298 <__aeabi_dsub>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4640      	mov	r0, r8
 80077b6:	4649      	mov	r1, r9
 80077b8:	f7f9 f998 	bl	8000aec <__aeabi_dcmplt>
 80077bc:	2800      	cmp	r0, #0
 80077be:	f43f af35 	beq.w	800762c <_dtoa_r+0x464>
 80077c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077c4:	1e6b      	subs	r3, r5, #1
 80077c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80077c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077cc:	2b30      	cmp	r3, #48	; 0x30
 80077ce:	d0f8      	beq.n	80077c2 <_dtoa_r+0x5fa>
 80077d0:	9700      	str	r7, [sp, #0]
 80077d2:	e049      	b.n	8007868 <_dtoa_r+0x6a0>
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <_dtoa_r+0x624>)
 80077d6:	f7f8 ff17 	bl	8000608 <__aeabi_dmul>
 80077da:	4680      	mov	r8, r0
 80077dc:	4689      	mov	r9, r1
 80077de:	e7bd      	b.n	800775c <_dtoa_r+0x594>
 80077e0:	080097f8 	.word	0x080097f8
 80077e4:	080097d0 	.word	0x080097d0
 80077e8:	3ff00000 	.word	0x3ff00000
 80077ec:	40240000 	.word	0x40240000
 80077f0:	401c0000 	.word	0x401c0000
 80077f4:	40140000 	.word	0x40140000
 80077f8:	3fe00000 	.word	0x3fe00000
 80077fc:	9d01      	ldr	r5, [sp, #4]
 80077fe:	4656      	mov	r6, sl
 8007800:	465f      	mov	r7, fp
 8007802:	4642      	mov	r2, r8
 8007804:	464b      	mov	r3, r9
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f9 f827 	bl	800085c <__aeabi_ddiv>
 800780e:	f7f9 f9ab 	bl	8000b68 <__aeabi_d2iz>
 8007812:	4682      	mov	sl, r0
 8007814:	f7f8 fe8e 	bl	8000534 <__aeabi_i2d>
 8007818:	4642      	mov	r2, r8
 800781a:	464b      	mov	r3, r9
 800781c:	f7f8 fef4 	bl	8000608 <__aeabi_dmul>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4630      	mov	r0, r6
 8007826:	4639      	mov	r1, r7
 8007828:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800782c:	f7f8 fd34 	bl	8000298 <__aeabi_dsub>
 8007830:	f805 6b01 	strb.w	r6, [r5], #1
 8007834:	9e01      	ldr	r6, [sp, #4]
 8007836:	9f03      	ldr	r7, [sp, #12]
 8007838:	1bae      	subs	r6, r5, r6
 800783a:	42b7      	cmp	r7, r6
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	d135      	bne.n	80078ae <_dtoa_r+0x6e6>
 8007842:	f7f8 fd2b 	bl	800029c <__adddf3>
 8007846:	4642      	mov	r2, r8
 8007848:	464b      	mov	r3, r9
 800784a:	4606      	mov	r6, r0
 800784c:	460f      	mov	r7, r1
 800784e:	f7f9 f96b 	bl	8000b28 <__aeabi_dcmpgt>
 8007852:	b9d0      	cbnz	r0, 800788a <_dtoa_r+0x6c2>
 8007854:	4642      	mov	r2, r8
 8007856:	464b      	mov	r3, r9
 8007858:	4630      	mov	r0, r6
 800785a:	4639      	mov	r1, r7
 800785c:	f7f9 f93c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007860:	b110      	cbz	r0, 8007868 <_dtoa_r+0x6a0>
 8007862:	f01a 0f01 	tst.w	sl, #1
 8007866:	d110      	bne.n	800788a <_dtoa_r+0x6c2>
 8007868:	4620      	mov	r0, r4
 800786a:	ee18 1a10 	vmov	r1, s16
 800786e:	f000 fd05 	bl	800827c <_Bfree>
 8007872:	2300      	movs	r3, #0
 8007874:	9800      	ldr	r0, [sp, #0]
 8007876:	702b      	strb	r3, [r5, #0]
 8007878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800787a:	3001      	adds	r0, #1
 800787c:	6018      	str	r0, [r3, #0]
 800787e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007880:	2b00      	cmp	r3, #0
 8007882:	f43f acf1 	beq.w	8007268 <_dtoa_r+0xa0>
 8007886:	601d      	str	r5, [r3, #0]
 8007888:	e4ee      	b.n	8007268 <_dtoa_r+0xa0>
 800788a:	9f00      	ldr	r7, [sp, #0]
 800788c:	462b      	mov	r3, r5
 800788e:	461d      	mov	r5, r3
 8007890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007894:	2a39      	cmp	r2, #57	; 0x39
 8007896:	d106      	bne.n	80078a6 <_dtoa_r+0x6de>
 8007898:	9a01      	ldr	r2, [sp, #4]
 800789a:	429a      	cmp	r2, r3
 800789c:	d1f7      	bne.n	800788e <_dtoa_r+0x6c6>
 800789e:	9901      	ldr	r1, [sp, #4]
 80078a0:	2230      	movs	r2, #48	; 0x30
 80078a2:	3701      	adds	r7, #1
 80078a4:	700a      	strb	r2, [r1, #0]
 80078a6:	781a      	ldrb	r2, [r3, #0]
 80078a8:	3201      	adds	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	e790      	b.n	80077d0 <_dtoa_r+0x608>
 80078ae:	4ba6      	ldr	r3, [pc, #664]	; (8007b48 <_dtoa_r+0x980>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	f7f8 fea9 	bl	8000608 <__aeabi_dmul>
 80078b6:	2200      	movs	r2, #0
 80078b8:	2300      	movs	r3, #0
 80078ba:	4606      	mov	r6, r0
 80078bc:	460f      	mov	r7, r1
 80078be:	f7f9 f90b 	bl	8000ad8 <__aeabi_dcmpeq>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d09d      	beq.n	8007802 <_dtoa_r+0x63a>
 80078c6:	e7cf      	b.n	8007868 <_dtoa_r+0x6a0>
 80078c8:	9a08      	ldr	r2, [sp, #32]
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	f000 80d7 	beq.w	8007a7e <_dtoa_r+0x8b6>
 80078d0:	9a06      	ldr	r2, [sp, #24]
 80078d2:	2a01      	cmp	r2, #1
 80078d4:	f300 80ba 	bgt.w	8007a4c <_dtoa_r+0x884>
 80078d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078da:	2a00      	cmp	r2, #0
 80078dc:	f000 80b2 	beq.w	8007a44 <_dtoa_r+0x87c>
 80078e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078e4:	9e07      	ldr	r6, [sp, #28]
 80078e6:	9d04      	ldr	r5, [sp, #16]
 80078e8:	9a04      	ldr	r2, [sp, #16]
 80078ea:	441a      	add	r2, r3
 80078ec:	9204      	str	r2, [sp, #16]
 80078ee:	9a05      	ldr	r2, [sp, #20]
 80078f0:	2101      	movs	r1, #1
 80078f2:	441a      	add	r2, r3
 80078f4:	4620      	mov	r0, r4
 80078f6:	9205      	str	r2, [sp, #20]
 80078f8:	f000 fd78 	bl	80083ec <__i2b>
 80078fc:	4607      	mov	r7, r0
 80078fe:	2d00      	cmp	r5, #0
 8007900:	dd0c      	ble.n	800791c <_dtoa_r+0x754>
 8007902:	9b05      	ldr	r3, [sp, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	dd09      	ble.n	800791c <_dtoa_r+0x754>
 8007908:	42ab      	cmp	r3, r5
 800790a:	9a04      	ldr	r2, [sp, #16]
 800790c:	bfa8      	it	ge
 800790e:	462b      	movge	r3, r5
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	9204      	str	r2, [sp, #16]
 8007914:	9a05      	ldr	r2, [sp, #20]
 8007916:	1aed      	subs	r5, r5, r3
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	9305      	str	r3, [sp, #20]
 800791c:	9b07      	ldr	r3, [sp, #28]
 800791e:	b31b      	cbz	r3, 8007968 <_dtoa_r+0x7a0>
 8007920:	9b08      	ldr	r3, [sp, #32]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 80af 	beq.w	8007a86 <_dtoa_r+0x8be>
 8007928:	2e00      	cmp	r6, #0
 800792a:	dd13      	ble.n	8007954 <_dtoa_r+0x78c>
 800792c:	4639      	mov	r1, r7
 800792e:	4632      	mov	r2, r6
 8007930:	4620      	mov	r0, r4
 8007932:	f000 fe1b 	bl	800856c <__pow5mult>
 8007936:	ee18 2a10 	vmov	r2, s16
 800793a:	4601      	mov	r1, r0
 800793c:	4607      	mov	r7, r0
 800793e:	4620      	mov	r0, r4
 8007940:	f000 fd6a 	bl	8008418 <__multiply>
 8007944:	ee18 1a10 	vmov	r1, s16
 8007948:	4680      	mov	r8, r0
 800794a:	4620      	mov	r0, r4
 800794c:	f000 fc96 	bl	800827c <_Bfree>
 8007950:	ee08 8a10 	vmov	s16, r8
 8007954:	9b07      	ldr	r3, [sp, #28]
 8007956:	1b9a      	subs	r2, r3, r6
 8007958:	d006      	beq.n	8007968 <_dtoa_r+0x7a0>
 800795a:	ee18 1a10 	vmov	r1, s16
 800795e:	4620      	mov	r0, r4
 8007960:	f000 fe04 	bl	800856c <__pow5mult>
 8007964:	ee08 0a10 	vmov	s16, r0
 8007968:	2101      	movs	r1, #1
 800796a:	4620      	mov	r0, r4
 800796c:	f000 fd3e 	bl	80083ec <__i2b>
 8007970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	4606      	mov	r6, r0
 8007976:	f340 8088 	ble.w	8007a8a <_dtoa_r+0x8c2>
 800797a:	461a      	mov	r2, r3
 800797c:	4601      	mov	r1, r0
 800797e:	4620      	mov	r0, r4
 8007980:	f000 fdf4 	bl	800856c <__pow5mult>
 8007984:	9b06      	ldr	r3, [sp, #24]
 8007986:	2b01      	cmp	r3, #1
 8007988:	4606      	mov	r6, r0
 800798a:	f340 8081 	ble.w	8007a90 <_dtoa_r+0x8c8>
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	6933      	ldr	r3, [r6, #16]
 8007994:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007998:	6918      	ldr	r0, [r3, #16]
 800799a:	f000 fcd7 	bl	800834c <__hi0bits>
 800799e:	f1c0 0020 	rsb	r0, r0, #32
 80079a2:	9b05      	ldr	r3, [sp, #20]
 80079a4:	4418      	add	r0, r3
 80079a6:	f010 001f 	ands.w	r0, r0, #31
 80079aa:	f000 8092 	beq.w	8007ad2 <_dtoa_r+0x90a>
 80079ae:	f1c0 0320 	rsb	r3, r0, #32
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	f340 808a 	ble.w	8007acc <_dtoa_r+0x904>
 80079b8:	f1c0 001c 	rsb	r0, r0, #28
 80079bc:	9b04      	ldr	r3, [sp, #16]
 80079be:	4403      	add	r3, r0
 80079c0:	9304      	str	r3, [sp, #16]
 80079c2:	9b05      	ldr	r3, [sp, #20]
 80079c4:	4403      	add	r3, r0
 80079c6:	4405      	add	r5, r0
 80079c8:	9305      	str	r3, [sp, #20]
 80079ca:	9b04      	ldr	r3, [sp, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dd07      	ble.n	80079e0 <_dtoa_r+0x818>
 80079d0:	ee18 1a10 	vmov	r1, s16
 80079d4:	461a      	mov	r2, r3
 80079d6:	4620      	mov	r0, r4
 80079d8:	f000 fe22 	bl	8008620 <__lshift>
 80079dc:	ee08 0a10 	vmov	s16, r0
 80079e0:	9b05      	ldr	r3, [sp, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	dd05      	ble.n	80079f2 <_dtoa_r+0x82a>
 80079e6:	4631      	mov	r1, r6
 80079e8:	461a      	mov	r2, r3
 80079ea:	4620      	mov	r0, r4
 80079ec:	f000 fe18 	bl	8008620 <__lshift>
 80079f0:	4606      	mov	r6, r0
 80079f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d06e      	beq.n	8007ad6 <_dtoa_r+0x90e>
 80079f8:	ee18 0a10 	vmov	r0, s16
 80079fc:	4631      	mov	r1, r6
 80079fe:	f000 fe7f 	bl	8008700 <__mcmp>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	da67      	bge.n	8007ad6 <_dtoa_r+0x90e>
 8007a06:	9b00      	ldr	r3, [sp, #0]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	ee18 1a10 	vmov	r1, s16
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	220a      	movs	r2, #10
 8007a12:	2300      	movs	r3, #0
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fc53 	bl	80082c0 <__multadd>
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	ee08 0a10 	vmov	s16, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 81b1 	beq.w	8007d88 <_dtoa_r+0xbc0>
 8007a26:	2300      	movs	r3, #0
 8007a28:	4639      	mov	r1, r7
 8007a2a:	220a      	movs	r2, #10
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fc47 	bl	80082c0 <__multadd>
 8007a32:	9b02      	ldr	r3, [sp, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	4607      	mov	r7, r0
 8007a38:	f300 808e 	bgt.w	8007b58 <_dtoa_r+0x990>
 8007a3c:	9b06      	ldr	r3, [sp, #24]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	dc51      	bgt.n	8007ae6 <_dtoa_r+0x91e>
 8007a42:	e089      	b.n	8007b58 <_dtoa_r+0x990>
 8007a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a4a:	e74b      	b.n	80078e4 <_dtoa_r+0x71c>
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	1e5e      	subs	r6, r3, #1
 8007a50:	9b07      	ldr	r3, [sp, #28]
 8007a52:	42b3      	cmp	r3, r6
 8007a54:	bfbf      	itttt	lt
 8007a56:	9b07      	ldrlt	r3, [sp, #28]
 8007a58:	9607      	strlt	r6, [sp, #28]
 8007a5a:	1af2      	sublt	r2, r6, r3
 8007a5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a5e:	bfb6      	itet	lt
 8007a60:	189b      	addlt	r3, r3, r2
 8007a62:	1b9e      	subge	r6, r3, r6
 8007a64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	bfb8      	it	lt
 8007a6a:	2600      	movlt	r6, #0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	bfb7      	itett	lt
 8007a70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007a74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007a78:	1a9d      	sublt	r5, r3, r2
 8007a7a:	2300      	movlt	r3, #0
 8007a7c:	e734      	b.n	80078e8 <_dtoa_r+0x720>
 8007a7e:	9e07      	ldr	r6, [sp, #28]
 8007a80:	9d04      	ldr	r5, [sp, #16]
 8007a82:	9f08      	ldr	r7, [sp, #32]
 8007a84:	e73b      	b.n	80078fe <_dtoa_r+0x736>
 8007a86:	9a07      	ldr	r2, [sp, #28]
 8007a88:	e767      	b.n	800795a <_dtoa_r+0x792>
 8007a8a:	9b06      	ldr	r3, [sp, #24]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	dc18      	bgt.n	8007ac2 <_dtoa_r+0x8fa>
 8007a90:	f1ba 0f00 	cmp.w	sl, #0
 8007a94:	d115      	bne.n	8007ac2 <_dtoa_r+0x8fa>
 8007a96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a9a:	b993      	cbnz	r3, 8007ac2 <_dtoa_r+0x8fa>
 8007a9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007aa0:	0d1b      	lsrs	r3, r3, #20
 8007aa2:	051b      	lsls	r3, r3, #20
 8007aa4:	b183      	cbz	r3, 8007ac8 <_dtoa_r+0x900>
 8007aa6:	9b04      	ldr	r3, [sp, #16]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	9b05      	ldr	r3, [sp, #20]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	9305      	str	r3, [sp, #20]
 8007ab2:	f04f 0801 	mov.w	r8, #1
 8007ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f47f af6a 	bne.w	8007992 <_dtoa_r+0x7ca>
 8007abe:	2001      	movs	r0, #1
 8007ac0:	e76f      	b.n	80079a2 <_dtoa_r+0x7da>
 8007ac2:	f04f 0800 	mov.w	r8, #0
 8007ac6:	e7f6      	b.n	8007ab6 <_dtoa_r+0x8ee>
 8007ac8:	4698      	mov	r8, r3
 8007aca:	e7f4      	b.n	8007ab6 <_dtoa_r+0x8ee>
 8007acc:	f43f af7d 	beq.w	80079ca <_dtoa_r+0x802>
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	301c      	adds	r0, #28
 8007ad4:	e772      	b.n	80079bc <_dtoa_r+0x7f4>
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dc37      	bgt.n	8007b4c <_dtoa_r+0x984>
 8007adc:	9b06      	ldr	r3, [sp, #24]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	dd34      	ble.n	8007b4c <_dtoa_r+0x984>
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	9302      	str	r3, [sp, #8]
 8007ae6:	9b02      	ldr	r3, [sp, #8]
 8007ae8:	b96b      	cbnz	r3, 8007b06 <_dtoa_r+0x93e>
 8007aea:	4631      	mov	r1, r6
 8007aec:	2205      	movs	r2, #5
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 fbe6 	bl	80082c0 <__multadd>
 8007af4:	4601      	mov	r1, r0
 8007af6:	4606      	mov	r6, r0
 8007af8:	ee18 0a10 	vmov	r0, s16
 8007afc:	f000 fe00 	bl	8008700 <__mcmp>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	f73f adbb 	bgt.w	800767c <_dtoa_r+0x4b4>
 8007b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b08:	9d01      	ldr	r5, [sp, #4]
 8007b0a:	43db      	mvns	r3, r3
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	f04f 0800 	mov.w	r8, #0
 8007b12:	4631      	mov	r1, r6
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 fbb1 	bl	800827c <_Bfree>
 8007b1a:	2f00      	cmp	r7, #0
 8007b1c:	f43f aea4 	beq.w	8007868 <_dtoa_r+0x6a0>
 8007b20:	f1b8 0f00 	cmp.w	r8, #0
 8007b24:	d005      	beq.n	8007b32 <_dtoa_r+0x96a>
 8007b26:	45b8      	cmp	r8, r7
 8007b28:	d003      	beq.n	8007b32 <_dtoa_r+0x96a>
 8007b2a:	4641      	mov	r1, r8
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 fba5 	bl	800827c <_Bfree>
 8007b32:	4639      	mov	r1, r7
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 fba1 	bl	800827c <_Bfree>
 8007b3a:	e695      	b.n	8007868 <_dtoa_r+0x6a0>
 8007b3c:	2600      	movs	r6, #0
 8007b3e:	4637      	mov	r7, r6
 8007b40:	e7e1      	b.n	8007b06 <_dtoa_r+0x93e>
 8007b42:	9700      	str	r7, [sp, #0]
 8007b44:	4637      	mov	r7, r6
 8007b46:	e599      	b.n	800767c <_dtoa_r+0x4b4>
 8007b48:	40240000 	.word	0x40240000
 8007b4c:	9b08      	ldr	r3, [sp, #32]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 80ca 	beq.w	8007ce8 <_dtoa_r+0xb20>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	9302      	str	r3, [sp, #8]
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	dd05      	ble.n	8007b68 <_dtoa_r+0x9a0>
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	462a      	mov	r2, r5
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 fd5d 	bl	8008620 <__lshift>
 8007b66:	4607      	mov	r7, r0
 8007b68:	f1b8 0f00 	cmp.w	r8, #0
 8007b6c:	d05b      	beq.n	8007c26 <_dtoa_r+0xa5e>
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fb43 	bl	80081fc <_Balloc>
 8007b76:	4605      	mov	r5, r0
 8007b78:	b928      	cbnz	r0, 8007b86 <_dtoa_r+0x9be>
 8007b7a:	4b87      	ldr	r3, [pc, #540]	; (8007d98 <_dtoa_r+0xbd0>)
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b82:	f7ff bb3b 	b.w	80071fc <_dtoa_r+0x34>
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	3202      	adds	r2, #2
 8007b8a:	0092      	lsls	r2, r2, #2
 8007b8c:	f107 010c 	add.w	r1, r7, #12
 8007b90:	300c      	adds	r0, #12
 8007b92:	f7fe fc9f 	bl	80064d4 <memcpy>
 8007b96:	2201      	movs	r2, #1
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 fd40 	bl	8008620 <__lshift>
 8007ba0:	9b01      	ldr	r3, [sp, #4]
 8007ba2:	f103 0901 	add.w	r9, r3, #1
 8007ba6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007baa:	4413      	add	r3, r2
 8007bac:	9305      	str	r3, [sp, #20]
 8007bae:	f00a 0301 	and.w	r3, sl, #1
 8007bb2:	46b8      	mov	r8, r7
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	4631      	mov	r1, r6
 8007bba:	ee18 0a10 	vmov	r0, s16
 8007bbe:	f7ff fa77 	bl	80070b0 <quorem>
 8007bc2:	4641      	mov	r1, r8
 8007bc4:	9002      	str	r0, [sp, #8]
 8007bc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007bca:	ee18 0a10 	vmov	r0, s16
 8007bce:	f000 fd97 	bl	8008700 <__mcmp>
 8007bd2:	463a      	mov	r2, r7
 8007bd4:	9003      	str	r0, [sp, #12]
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 fdad 	bl	8008738 <__mdiff>
 8007bde:	68c2      	ldr	r2, [r0, #12]
 8007be0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007be4:	4605      	mov	r5, r0
 8007be6:	bb02      	cbnz	r2, 8007c2a <_dtoa_r+0xa62>
 8007be8:	4601      	mov	r1, r0
 8007bea:	ee18 0a10 	vmov	r0, s16
 8007bee:	f000 fd87 	bl	8008700 <__mcmp>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	9207      	str	r2, [sp, #28]
 8007bfa:	f000 fb3f 	bl	800827c <_Bfree>
 8007bfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007c02:	ea43 0102 	orr.w	r1, r3, r2
 8007c06:	9b04      	ldr	r3, [sp, #16]
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	464d      	mov	r5, r9
 8007c0c:	d10f      	bne.n	8007c2e <_dtoa_r+0xa66>
 8007c0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c12:	d02a      	beq.n	8007c6a <_dtoa_r+0xaa2>
 8007c14:	9b03      	ldr	r3, [sp, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	dd02      	ble.n	8007c20 <_dtoa_r+0xa58>
 8007c1a:	9b02      	ldr	r3, [sp, #8]
 8007c1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007c20:	f88b a000 	strb.w	sl, [fp]
 8007c24:	e775      	b.n	8007b12 <_dtoa_r+0x94a>
 8007c26:	4638      	mov	r0, r7
 8007c28:	e7ba      	b.n	8007ba0 <_dtoa_r+0x9d8>
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	e7e2      	b.n	8007bf4 <_dtoa_r+0xa2c>
 8007c2e:	9b03      	ldr	r3, [sp, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	db04      	blt.n	8007c3e <_dtoa_r+0xa76>
 8007c34:	9906      	ldr	r1, [sp, #24]
 8007c36:	430b      	orrs	r3, r1
 8007c38:	9904      	ldr	r1, [sp, #16]
 8007c3a:	430b      	orrs	r3, r1
 8007c3c:	d122      	bne.n	8007c84 <_dtoa_r+0xabc>
 8007c3e:	2a00      	cmp	r2, #0
 8007c40:	ddee      	ble.n	8007c20 <_dtoa_r+0xa58>
 8007c42:	ee18 1a10 	vmov	r1, s16
 8007c46:	2201      	movs	r2, #1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fce9 	bl	8008620 <__lshift>
 8007c4e:	4631      	mov	r1, r6
 8007c50:	ee08 0a10 	vmov	s16, r0
 8007c54:	f000 fd54 	bl	8008700 <__mcmp>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	dc03      	bgt.n	8007c64 <_dtoa_r+0xa9c>
 8007c5c:	d1e0      	bne.n	8007c20 <_dtoa_r+0xa58>
 8007c5e:	f01a 0f01 	tst.w	sl, #1
 8007c62:	d0dd      	beq.n	8007c20 <_dtoa_r+0xa58>
 8007c64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c68:	d1d7      	bne.n	8007c1a <_dtoa_r+0xa52>
 8007c6a:	2339      	movs	r3, #57	; 0x39
 8007c6c:	f88b 3000 	strb.w	r3, [fp]
 8007c70:	462b      	mov	r3, r5
 8007c72:	461d      	mov	r5, r3
 8007c74:	3b01      	subs	r3, #1
 8007c76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c7a:	2a39      	cmp	r2, #57	; 0x39
 8007c7c:	d071      	beq.n	8007d62 <_dtoa_r+0xb9a>
 8007c7e:	3201      	adds	r2, #1
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	e746      	b.n	8007b12 <_dtoa_r+0x94a>
 8007c84:	2a00      	cmp	r2, #0
 8007c86:	dd07      	ble.n	8007c98 <_dtoa_r+0xad0>
 8007c88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c8c:	d0ed      	beq.n	8007c6a <_dtoa_r+0xaa2>
 8007c8e:	f10a 0301 	add.w	r3, sl, #1
 8007c92:	f88b 3000 	strb.w	r3, [fp]
 8007c96:	e73c      	b.n	8007b12 <_dtoa_r+0x94a>
 8007c98:	9b05      	ldr	r3, [sp, #20]
 8007c9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007c9e:	4599      	cmp	r9, r3
 8007ca0:	d047      	beq.n	8007d32 <_dtoa_r+0xb6a>
 8007ca2:	ee18 1a10 	vmov	r1, s16
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	220a      	movs	r2, #10
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 fb08 	bl	80082c0 <__multadd>
 8007cb0:	45b8      	cmp	r8, r7
 8007cb2:	ee08 0a10 	vmov	s16, r0
 8007cb6:	f04f 0300 	mov.w	r3, #0
 8007cba:	f04f 020a 	mov.w	r2, #10
 8007cbe:	4641      	mov	r1, r8
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	d106      	bne.n	8007cd2 <_dtoa_r+0xb0a>
 8007cc4:	f000 fafc 	bl	80082c0 <__multadd>
 8007cc8:	4680      	mov	r8, r0
 8007cca:	4607      	mov	r7, r0
 8007ccc:	f109 0901 	add.w	r9, r9, #1
 8007cd0:	e772      	b.n	8007bb8 <_dtoa_r+0x9f0>
 8007cd2:	f000 faf5 	bl	80082c0 <__multadd>
 8007cd6:	4639      	mov	r1, r7
 8007cd8:	4680      	mov	r8, r0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	220a      	movs	r2, #10
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 faee 	bl	80082c0 <__multadd>
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	e7f1      	b.n	8007ccc <_dtoa_r+0xb04>
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	9302      	str	r3, [sp, #8]
 8007cec:	9d01      	ldr	r5, [sp, #4]
 8007cee:	ee18 0a10 	vmov	r0, s16
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	f7ff f9dc 	bl	80070b0 <quorem>
 8007cf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007cfc:	9b01      	ldr	r3, [sp, #4]
 8007cfe:	f805 ab01 	strb.w	sl, [r5], #1
 8007d02:	1aea      	subs	r2, r5, r3
 8007d04:	9b02      	ldr	r3, [sp, #8]
 8007d06:	4293      	cmp	r3, r2
 8007d08:	dd09      	ble.n	8007d1e <_dtoa_r+0xb56>
 8007d0a:	ee18 1a10 	vmov	r1, s16
 8007d0e:	2300      	movs	r3, #0
 8007d10:	220a      	movs	r2, #10
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 fad4 	bl	80082c0 <__multadd>
 8007d18:	ee08 0a10 	vmov	s16, r0
 8007d1c:	e7e7      	b.n	8007cee <_dtoa_r+0xb26>
 8007d1e:	9b02      	ldr	r3, [sp, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bfc8      	it	gt
 8007d24:	461d      	movgt	r5, r3
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	bfd8      	it	le
 8007d2a:	2501      	movle	r5, #1
 8007d2c:	441d      	add	r5, r3
 8007d2e:	f04f 0800 	mov.w	r8, #0
 8007d32:	ee18 1a10 	vmov	r1, s16
 8007d36:	2201      	movs	r2, #1
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fc71 	bl	8008620 <__lshift>
 8007d3e:	4631      	mov	r1, r6
 8007d40:	ee08 0a10 	vmov	s16, r0
 8007d44:	f000 fcdc 	bl	8008700 <__mcmp>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	dc91      	bgt.n	8007c70 <_dtoa_r+0xaa8>
 8007d4c:	d102      	bne.n	8007d54 <_dtoa_r+0xb8c>
 8007d4e:	f01a 0f01 	tst.w	sl, #1
 8007d52:	d18d      	bne.n	8007c70 <_dtoa_r+0xaa8>
 8007d54:	462b      	mov	r3, r5
 8007d56:	461d      	mov	r5, r3
 8007d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d5c:	2a30      	cmp	r2, #48	; 0x30
 8007d5e:	d0fa      	beq.n	8007d56 <_dtoa_r+0xb8e>
 8007d60:	e6d7      	b.n	8007b12 <_dtoa_r+0x94a>
 8007d62:	9a01      	ldr	r2, [sp, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d184      	bne.n	8007c72 <_dtoa_r+0xaaa>
 8007d68:	9b00      	ldr	r3, [sp, #0]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	2331      	movs	r3, #49	; 0x31
 8007d70:	7013      	strb	r3, [r2, #0]
 8007d72:	e6ce      	b.n	8007b12 <_dtoa_r+0x94a>
 8007d74:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <_dtoa_r+0xbd4>)
 8007d76:	f7ff ba95 	b.w	80072a4 <_dtoa_r+0xdc>
 8007d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f47f aa6e 	bne.w	800725e <_dtoa_r+0x96>
 8007d82:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <_dtoa_r+0xbd8>)
 8007d84:	f7ff ba8e 	b.w	80072a4 <_dtoa_r+0xdc>
 8007d88:	9b02      	ldr	r3, [sp, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	dcae      	bgt.n	8007cec <_dtoa_r+0xb24>
 8007d8e:	9b06      	ldr	r3, [sp, #24]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	f73f aea8 	bgt.w	8007ae6 <_dtoa_r+0x91e>
 8007d96:	e7a9      	b.n	8007cec <_dtoa_r+0xb24>
 8007d98:	080096ff 	.word	0x080096ff
 8007d9c:	0800965c 	.word	0x0800965c
 8007da0:	08009680 	.word	0x08009680

08007da4 <__sflush_r>:
 8007da4:	898a      	ldrh	r2, [r1, #12]
 8007da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007daa:	4605      	mov	r5, r0
 8007dac:	0710      	lsls	r0, r2, #28
 8007dae:	460c      	mov	r4, r1
 8007db0:	d458      	bmi.n	8007e64 <__sflush_r+0xc0>
 8007db2:	684b      	ldr	r3, [r1, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	dc05      	bgt.n	8007dc4 <__sflush_r+0x20>
 8007db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	dc02      	bgt.n	8007dc4 <__sflush_r+0x20>
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dc6:	2e00      	cmp	r6, #0
 8007dc8:	d0f9      	beq.n	8007dbe <__sflush_r+0x1a>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dd0:	682f      	ldr	r7, [r5, #0]
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	d032      	beq.n	8007e3c <__sflush_r+0x98>
 8007dd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	075a      	lsls	r2, r3, #29
 8007ddc:	d505      	bpl.n	8007dea <__sflush_r+0x46>
 8007dde:	6863      	ldr	r3, [r4, #4]
 8007de0:	1ac0      	subs	r0, r0, r3
 8007de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007de4:	b10b      	cbz	r3, 8007dea <__sflush_r+0x46>
 8007de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007de8:	1ac0      	subs	r0, r0, r3
 8007dea:	2300      	movs	r3, #0
 8007dec:	4602      	mov	r2, r0
 8007dee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007df0:	6a21      	ldr	r1, [r4, #32]
 8007df2:	4628      	mov	r0, r5
 8007df4:	47b0      	blx	r6
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	d106      	bne.n	8007e0a <__sflush_r+0x66>
 8007dfc:	6829      	ldr	r1, [r5, #0]
 8007dfe:	291d      	cmp	r1, #29
 8007e00:	d82c      	bhi.n	8007e5c <__sflush_r+0xb8>
 8007e02:	4a2a      	ldr	r2, [pc, #168]	; (8007eac <__sflush_r+0x108>)
 8007e04:	40ca      	lsrs	r2, r1
 8007e06:	07d6      	lsls	r6, r2, #31
 8007e08:	d528      	bpl.n	8007e5c <__sflush_r+0xb8>
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	6062      	str	r2, [r4, #4]
 8007e0e:	04d9      	lsls	r1, r3, #19
 8007e10:	6922      	ldr	r2, [r4, #16]
 8007e12:	6022      	str	r2, [r4, #0]
 8007e14:	d504      	bpl.n	8007e20 <__sflush_r+0x7c>
 8007e16:	1c42      	adds	r2, r0, #1
 8007e18:	d101      	bne.n	8007e1e <__sflush_r+0x7a>
 8007e1a:	682b      	ldr	r3, [r5, #0]
 8007e1c:	b903      	cbnz	r3, 8007e20 <__sflush_r+0x7c>
 8007e1e:	6560      	str	r0, [r4, #84]	; 0x54
 8007e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e22:	602f      	str	r7, [r5, #0]
 8007e24:	2900      	cmp	r1, #0
 8007e26:	d0ca      	beq.n	8007dbe <__sflush_r+0x1a>
 8007e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e2c:	4299      	cmp	r1, r3
 8007e2e:	d002      	beq.n	8007e36 <__sflush_r+0x92>
 8007e30:	4628      	mov	r0, r5
 8007e32:	f000 fd7d 	bl	8008930 <_free_r>
 8007e36:	2000      	movs	r0, #0
 8007e38:	6360      	str	r0, [r4, #52]	; 0x34
 8007e3a:	e7c1      	b.n	8007dc0 <__sflush_r+0x1c>
 8007e3c:	6a21      	ldr	r1, [r4, #32]
 8007e3e:	2301      	movs	r3, #1
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b0      	blx	r6
 8007e44:	1c41      	adds	r1, r0, #1
 8007e46:	d1c7      	bne.n	8007dd8 <__sflush_r+0x34>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0c4      	beq.n	8007dd8 <__sflush_r+0x34>
 8007e4e:	2b1d      	cmp	r3, #29
 8007e50:	d001      	beq.n	8007e56 <__sflush_r+0xb2>
 8007e52:	2b16      	cmp	r3, #22
 8007e54:	d101      	bne.n	8007e5a <__sflush_r+0xb6>
 8007e56:	602f      	str	r7, [r5, #0]
 8007e58:	e7b1      	b.n	8007dbe <__sflush_r+0x1a>
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e60:	81a3      	strh	r3, [r4, #12]
 8007e62:	e7ad      	b.n	8007dc0 <__sflush_r+0x1c>
 8007e64:	690f      	ldr	r7, [r1, #16]
 8007e66:	2f00      	cmp	r7, #0
 8007e68:	d0a9      	beq.n	8007dbe <__sflush_r+0x1a>
 8007e6a:	0793      	lsls	r3, r2, #30
 8007e6c:	680e      	ldr	r6, [r1, #0]
 8007e6e:	bf08      	it	eq
 8007e70:	694b      	ldreq	r3, [r1, #20]
 8007e72:	600f      	str	r7, [r1, #0]
 8007e74:	bf18      	it	ne
 8007e76:	2300      	movne	r3, #0
 8007e78:	eba6 0807 	sub.w	r8, r6, r7
 8007e7c:	608b      	str	r3, [r1, #8]
 8007e7e:	f1b8 0f00 	cmp.w	r8, #0
 8007e82:	dd9c      	ble.n	8007dbe <__sflush_r+0x1a>
 8007e84:	6a21      	ldr	r1, [r4, #32]
 8007e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e88:	4643      	mov	r3, r8
 8007e8a:	463a      	mov	r2, r7
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b0      	blx	r6
 8007e90:	2800      	cmp	r0, #0
 8007e92:	dc06      	bgt.n	8007ea2 <__sflush_r+0xfe>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	e78e      	b.n	8007dc0 <__sflush_r+0x1c>
 8007ea2:	4407      	add	r7, r0
 8007ea4:	eba8 0800 	sub.w	r8, r8, r0
 8007ea8:	e7e9      	b.n	8007e7e <__sflush_r+0xda>
 8007eaa:	bf00      	nop
 8007eac:	20400001 	.word	0x20400001

08007eb0 <_fflush_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	690b      	ldr	r3, [r1, #16]
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	b913      	cbnz	r3, 8007ec0 <_fflush_r+0x10>
 8007eba:	2500      	movs	r5, #0
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	b118      	cbz	r0, 8007eca <_fflush_r+0x1a>
 8007ec2:	6983      	ldr	r3, [r0, #24]
 8007ec4:	b90b      	cbnz	r3, 8007eca <_fflush_r+0x1a>
 8007ec6:	f000 f887 	bl	8007fd8 <__sinit>
 8007eca:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <_fflush_r+0x6c>)
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	d11b      	bne.n	8007f08 <_fflush_r+0x58>
 8007ed0:	686c      	ldr	r4, [r5, #4]
 8007ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0ef      	beq.n	8007eba <_fflush_r+0xa>
 8007eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007edc:	07d0      	lsls	r0, r2, #31
 8007ede:	d404      	bmi.n	8007eea <_fflush_r+0x3a>
 8007ee0:	0599      	lsls	r1, r3, #22
 8007ee2:	d402      	bmi.n	8007eea <_fflush_r+0x3a>
 8007ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ee6:	f000 f91a 	bl	800811e <__retarget_lock_acquire_recursive>
 8007eea:	4628      	mov	r0, r5
 8007eec:	4621      	mov	r1, r4
 8007eee:	f7ff ff59 	bl	8007da4 <__sflush_r>
 8007ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ef4:	07da      	lsls	r2, r3, #31
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	d4e0      	bmi.n	8007ebc <_fflush_r+0xc>
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	059b      	lsls	r3, r3, #22
 8007efe:	d4dd      	bmi.n	8007ebc <_fflush_r+0xc>
 8007f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f02:	f000 f90d 	bl	8008120 <__retarget_lock_release_recursive>
 8007f06:	e7d9      	b.n	8007ebc <_fflush_r+0xc>
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <_fflush_r+0x70>)
 8007f0a:	429c      	cmp	r4, r3
 8007f0c:	d101      	bne.n	8007f12 <_fflush_r+0x62>
 8007f0e:	68ac      	ldr	r4, [r5, #8]
 8007f10:	e7df      	b.n	8007ed2 <_fflush_r+0x22>
 8007f12:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <_fflush_r+0x74>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	bf08      	it	eq
 8007f18:	68ec      	ldreq	r4, [r5, #12]
 8007f1a:	e7da      	b.n	8007ed2 <_fflush_r+0x22>
 8007f1c:	08009730 	.word	0x08009730
 8007f20:	08009750 	.word	0x08009750
 8007f24:	08009710 	.word	0x08009710

08007f28 <std>:
 8007f28:	2300      	movs	r3, #0
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f36:	6083      	str	r3, [r0, #8]
 8007f38:	8181      	strh	r1, [r0, #12]
 8007f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f3c:	81c2      	strh	r2, [r0, #14]
 8007f3e:	6183      	str	r3, [r0, #24]
 8007f40:	4619      	mov	r1, r3
 8007f42:	2208      	movs	r2, #8
 8007f44:	305c      	adds	r0, #92	; 0x5c
 8007f46:	f7fe fad3 	bl	80064f0 <memset>
 8007f4a:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <std+0x38>)
 8007f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8007f4e:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <std+0x3c>)
 8007f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <std+0x40>)
 8007f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f56:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <std+0x44>)
 8007f58:	6224      	str	r4, [r4, #32]
 8007f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	bf00      	nop
 8007f60:	0800907d 	.word	0x0800907d
 8007f64:	0800909f 	.word	0x0800909f
 8007f68:	080090d7 	.word	0x080090d7
 8007f6c:	080090fb 	.word	0x080090fb

08007f70 <_cleanup_r>:
 8007f70:	4901      	ldr	r1, [pc, #4]	; (8007f78 <_cleanup_r+0x8>)
 8007f72:	f000 b8af 	b.w	80080d4 <_fwalk_reent>
 8007f76:	bf00      	nop
 8007f78:	08007eb1 	.word	0x08007eb1

08007f7c <__sfmoreglue>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	2268      	movs	r2, #104	; 0x68
 8007f80:	1e4d      	subs	r5, r1, #1
 8007f82:	4355      	muls	r5, r2
 8007f84:	460e      	mov	r6, r1
 8007f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f8a:	f000 fd3d 	bl	8008a08 <_malloc_r>
 8007f8e:	4604      	mov	r4, r0
 8007f90:	b140      	cbz	r0, 8007fa4 <__sfmoreglue+0x28>
 8007f92:	2100      	movs	r1, #0
 8007f94:	e9c0 1600 	strd	r1, r6, [r0]
 8007f98:	300c      	adds	r0, #12
 8007f9a:	60a0      	str	r0, [r4, #8]
 8007f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fa0:	f7fe faa6 	bl	80064f0 <memset>
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}

08007fa8 <__sfp_lock_acquire>:
 8007fa8:	4801      	ldr	r0, [pc, #4]	; (8007fb0 <__sfp_lock_acquire+0x8>)
 8007faa:	f000 b8b8 	b.w	800811e <__retarget_lock_acquire_recursive>
 8007fae:	bf00      	nop
 8007fb0:	2000045d 	.word	0x2000045d

08007fb4 <__sfp_lock_release>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	; (8007fbc <__sfp_lock_release+0x8>)
 8007fb6:	f000 b8b3 	b.w	8008120 <__retarget_lock_release_recursive>
 8007fba:	bf00      	nop
 8007fbc:	2000045d 	.word	0x2000045d

08007fc0 <__sinit_lock_acquire>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <__sinit_lock_acquire+0x8>)
 8007fc2:	f000 b8ac 	b.w	800811e <__retarget_lock_acquire_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	2000045e 	.word	0x2000045e

08007fcc <__sinit_lock_release>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	; (8007fd4 <__sinit_lock_release+0x8>)
 8007fce:	f000 b8a7 	b.w	8008120 <__retarget_lock_release_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	2000045e 	.word	0x2000045e

08007fd8 <__sinit>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	4604      	mov	r4, r0
 8007fdc:	f7ff fff0 	bl	8007fc0 <__sinit_lock_acquire>
 8007fe0:	69a3      	ldr	r3, [r4, #24]
 8007fe2:	b11b      	cbz	r3, 8007fec <__sinit+0x14>
 8007fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe8:	f7ff bff0 	b.w	8007fcc <__sinit_lock_release>
 8007fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ff2:	4b13      	ldr	r3, [pc, #76]	; (8008040 <__sinit+0x68>)
 8007ff4:	4a13      	ldr	r2, [pc, #76]	; (8008044 <__sinit+0x6c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ffa:	42a3      	cmp	r3, r4
 8007ffc:	bf04      	itt	eq
 8007ffe:	2301      	moveq	r3, #1
 8008000:	61a3      	streq	r3, [r4, #24]
 8008002:	4620      	mov	r0, r4
 8008004:	f000 f820 	bl	8008048 <__sfp>
 8008008:	6060      	str	r0, [r4, #4]
 800800a:	4620      	mov	r0, r4
 800800c:	f000 f81c 	bl	8008048 <__sfp>
 8008010:	60a0      	str	r0, [r4, #8]
 8008012:	4620      	mov	r0, r4
 8008014:	f000 f818 	bl	8008048 <__sfp>
 8008018:	2200      	movs	r2, #0
 800801a:	60e0      	str	r0, [r4, #12]
 800801c:	2104      	movs	r1, #4
 800801e:	6860      	ldr	r0, [r4, #4]
 8008020:	f7ff ff82 	bl	8007f28 <std>
 8008024:	68a0      	ldr	r0, [r4, #8]
 8008026:	2201      	movs	r2, #1
 8008028:	2109      	movs	r1, #9
 800802a:	f7ff ff7d 	bl	8007f28 <std>
 800802e:	68e0      	ldr	r0, [r4, #12]
 8008030:	2202      	movs	r2, #2
 8008032:	2112      	movs	r1, #18
 8008034:	f7ff ff78 	bl	8007f28 <std>
 8008038:	2301      	movs	r3, #1
 800803a:	61a3      	str	r3, [r4, #24]
 800803c:	e7d2      	b.n	8007fe4 <__sinit+0xc>
 800803e:	bf00      	nop
 8008040:	08009648 	.word	0x08009648
 8008044:	08007f71 	.word	0x08007f71

08008048 <__sfp>:
 8008048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804a:	4607      	mov	r7, r0
 800804c:	f7ff ffac 	bl	8007fa8 <__sfp_lock_acquire>
 8008050:	4b1e      	ldr	r3, [pc, #120]	; (80080cc <__sfp+0x84>)
 8008052:	681e      	ldr	r6, [r3, #0]
 8008054:	69b3      	ldr	r3, [r6, #24]
 8008056:	b913      	cbnz	r3, 800805e <__sfp+0x16>
 8008058:	4630      	mov	r0, r6
 800805a:	f7ff ffbd 	bl	8007fd8 <__sinit>
 800805e:	3648      	adds	r6, #72	; 0x48
 8008060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008064:	3b01      	subs	r3, #1
 8008066:	d503      	bpl.n	8008070 <__sfp+0x28>
 8008068:	6833      	ldr	r3, [r6, #0]
 800806a:	b30b      	cbz	r3, 80080b0 <__sfp+0x68>
 800806c:	6836      	ldr	r6, [r6, #0]
 800806e:	e7f7      	b.n	8008060 <__sfp+0x18>
 8008070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008074:	b9d5      	cbnz	r5, 80080ac <__sfp+0x64>
 8008076:	4b16      	ldr	r3, [pc, #88]	; (80080d0 <__sfp+0x88>)
 8008078:	60e3      	str	r3, [r4, #12]
 800807a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800807e:	6665      	str	r5, [r4, #100]	; 0x64
 8008080:	f000 f84c 	bl	800811c <__retarget_lock_init_recursive>
 8008084:	f7ff ff96 	bl	8007fb4 <__sfp_lock_release>
 8008088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800808c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008090:	6025      	str	r5, [r4, #0]
 8008092:	61a5      	str	r5, [r4, #24]
 8008094:	2208      	movs	r2, #8
 8008096:	4629      	mov	r1, r5
 8008098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800809c:	f7fe fa28 	bl	80064f0 <memset>
 80080a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080a8:	4620      	mov	r0, r4
 80080aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ac:	3468      	adds	r4, #104	; 0x68
 80080ae:	e7d9      	b.n	8008064 <__sfp+0x1c>
 80080b0:	2104      	movs	r1, #4
 80080b2:	4638      	mov	r0, r7
 80080b4:	f7ff ff62 	bl	8007f7c <__sfmoreglue>
 80080b8:	4604      	mov	r4, r0
 80080ba:	6030      	str	r0, [r6, #0]
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1d5      	bne.n	800806c <__sfp+0x24>
 80080c0:	f7ff ff78 	bl	8007fb4 <__sfp_lock_release>
 80080c4:	230c      	movs	r3, #12
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	e7ee      	b.n	80080a8 <__sfp+0x60>
 80080ca:	bf00      	nop
 80080cc:	08009648 	.word	0x08009648
 80080d0:	ffff0001 	.word	0xffff0001

080080d4 <_fwalk_reent>:
 80080d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d8:	4606      	mov	r6, r0
 80080da:	4688      	mov	r8, r1
 80080dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080e0:	2700      	movs	r7, #0
 80080e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080e6:	f1b9 0901 	subs.w	r9, r9, #1
 80080ea:	d505      	bpl.n	80080f8 <_fwalk_reent+0x24>
 80080ec:	6824      	ldr	r4, [r4, #0]
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	d1f7      	bne.n	80080e2 <_fwalk_reent+0xe>
 80080f2:	4638      	mov	r0, r7
 80080f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080f8:	89ab      	ldrh	r3, [r5, #12]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d907      	bls.n	800810e <_fwalk_reent+0x3a>
 80080fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008102:	3301      	adds	r3, #1
 8008104:	d003      	beq.n	800810e <_fwalk_reent+0x3a>
 8008106:	4629      	mov	r1, r5
 8008108:	4630      	mov	r0, r6
 800810a:	47c0      	blx	r8
 800810c:	4307      	orrs	r7, r0
 800810e:	3568      	adds	r5, #104	; 0x68
 8008110:	e7e9      	b.n	80080e6 <_fwalk_reent+0x12>
	...

08008114 <_localeconv_r>:
 8008114:	4800      	ldr	r0, [pc, #0]	; (8008118 <_localeconv_r+0x4>)
 8008116:	4770      	bx	lr
 8008118:	2000016c 	.word	0x2000016c

0800811c <__retarget_lock_init_recursive>:
 800811c:	4770      	bx	lr

0800811e <__retarget_lock_acquire_recursive>:
 800811e:	4770      	bx	lr

08008120 <__retarget_lock_release_recursive>:
 8008120:	4770      	bx	lr

08008122 <__swhatbuf_r>:
 8008122:	b570      	push	{r4, r5, r6, lr}
 8008124:	460e      	mov	r6, r1
 8008126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800812a:	2900      	cmp	r1, #0
 800812c:	b096      	sub	sp, #88	; 0x58
 800812e:	4614      	mov	r4, r2
 8008130:	461d      	mov	r5, r3
 8008132:	da08      	bge.n	8008146 <__swhatbuf_r+0x24>
 8008134:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	602a      	str	r2, [r5, #0]
 800813c:	061a      	lsls	r2, r3, #24
 800813e:	d410      	bmi.n	8008162 <__swhatbuf_r+0x40>
 8008140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008144:	e00e      	b.n	8008164 <__swhatbuf_r+0x42>
 8008146:	466a      	mov	r2, sp
 8008148:	f001 f82e 	bl	80091a8 <_fstat_r>
 800814c:	2800      	cmp	r0, #0
 800814e:	dbf1      	blt.n	8008134 <__swhatbuf_r+0x12>
 8008150:	9a01      	ldr	r2, [sp, #4]
 8008152:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008156:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800815a:	425a      	negs	r2, r3
 800815c:	415a      	adcs	r2, r3
 800815e:	602a      	str	r2, [r5, #0]
 8008160:	e7ee      	b.n	8008140 <__swhatbuf_r+0x1e>
 8008162:	2340      	movs	r3, #64	; 0x40
 8008164:	2000      	movs	r0, #0
 8008166:	6023      	str	r3, [r4, #0]
 8008168:	b016      	add	sp, #88	; 0x58
 800816a:	bd70      	pop	{r4, r5, r6, pc}

0800816c <__smakebuf_r>:
 800816c:	898b      	ldrh	r3, [r1, #12]
 800816e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008170:	079d      	lsls	r5, r3, #30
 8008172:	4606      	mov	r6, r0
 8008174:	460c      	mov	r4, r1
 8008176:	d507      	bpl.n	8008188 <__smakebuf_r+0x1c>
 8008178:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	2301      	movs	r3, #1
 8008182:	6163      	str	r3, [r4, #20]
 8008184:	b002      	add	sp, #8
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	ab01      	add	r3, sp, #4
 800818a:	466a      	mov	r2, sp
 800818c:	f7ff ffc9 	bl	8008122 <__swhatbuf_r>
 8008190:	9900      	ldr	r1, [sp, #0]
 8008192:	4605      	mov	r5, r0
 8008194:	4630      	mov	r0, r6
 8008196:	f000 fc37 	bl	8008a08 <_malloc_r>
 800819a:	b948      	cbnz	r0, 80081b0 <__smakebuf_r+0x44>
 800819c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a0:	059a      	lsls	r2, r3, #22
 80081a2:	d4ef      	bmi.n	8008184 <__smakebuf_r+0x18>
 80081a4:	f023 0303 	bic.w	r3, r3, #3
 80081a8:	f043 0302 	orr.w	r3, r3, #2
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	e7e3      	b.n	8008178 <__smakebuf_r+0xc>
 80081b0:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <__smakebuf_r+0x7c>)
 80081b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	6020      	str	r0, [r4, #0]
 80081b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	9b00      	ldr	r3, [sp, #0]
 80081c0:	6163      	str	r3, [r4, #20]
 80081c2:	9b01      	ldr	r3, [sp, #4]
 80081c4:	6120      	str	r0, [r4, #16]
 80081c6:	b15b      	cbz	r3, 80081e0 <__smakebuf_r+0x74>
 80081c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081cc:	4630      	mov	r0, r6
 80081ce:	f000 fffd 	bl	80091cc <_isatty_r>
 80081d2:	b128      	cbz	r0, 80081e0 <__smakebuf_r+0x74>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	f043 0301 	orr.w	r3, r3, #1
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	89a0      	ldrh	r0, [r4, #12]
 80081e2:	4305      	orrs	r5, r0
 80081e4:	81a5      	strh	r5, [r4, #12]
 80081e6:	e7cd      	b.n	8008184 <__smakebuf_r+0x18>
 80081e8:	08007f71 	.word	0x08007f71

080081ec <malloc>:
 80081ec:	4b02      	ldr	r3, [pc, #8]	; (80081f8 <malloc+0xc>)
 80081ee:	4601      	mov	r1, r0
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	f000 bc09 	b.w	8008a08 <_malloc_r>
 80081f6:	bf00      	nop
 80081f8:	20000018 	.word	0x20000018

080081fc <_Balloc>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008200:	4604      	mov	r4, r0
 8008202:	460d      	mov	r5, r1
 8008204:	b976      	cbnz	r6, 8008224 <_Balloc+0x28>
 8008206:	2010      	movs	r0, #16
 8008208:	f7ff fff0 	bl	80081ec <malloc>
 800820c:	4602      	mov	r2, r0
 800820e:	6260      	str	r0, [r4, #36]	; 0x24
 8008210:	b920      	cbnz	r0, 800821c <_Balloc+0x20>
 8008212:	4b18      	ldr	r3, [pc, #96]	; (8008274 <_Balloc+0x78>)
 8008214:	4818      	ldr	r0, [pc, #96]	; (8008278 <_Balloc+0x7c>)
 8008216:	2166      	movs	r1, #102	; 0x66
 8008218:	f000 ff86 	bl	8009128 <__assert_func>
 800821c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008220:	6006      	str	r6, [r0, #0]
 8008222:	60c6      	str	r6, [r0, #12]
 8008224:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008226:	68f3      	ldr	r3, [r6, #12]
 8008228:	b183      	cbz	r3, 800824c <_Balloc+0x50>
 800822a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008232:	b9b8      	cbnz	r0, 8008264 <_Balloc+0x68>
 8008234:	2101      	movs	r1, #1
 8008236:	fa01 f605 	lsl.w	r6, r1, r5
 800823a:	1d72      	adds	r2, r6, #5
 800823c:	0092      	lsls	r2, r2, #2
 800823e:	4620      	mov	r0, r4
 8008240:	f000 fb60 	bl	8008904 <_calloc_r>
 8008244:	b160      	cbz	r0, 8008260 <_Balloc+0x64>
 8008246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800824a:	e00e      	b.n	800826a <_Balloc+0x6e>
 800824c:	2221      	movs	r2, #33	; 0x21
 800824e:	2104      	movs	r1, #4
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fb57 	bl	8008904 <_calloc_r>
 8008256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008258:	60f0      	str	r0, [r6, #12]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e4      	bne.n	800822a <_Balloc+0x2e>
 8008260:	2000      	movs	r0, #0
 8008262:	bd70      	pop	{r4, r5, r6, pc}
 8008264:	6802      	ldr	r2, [r0, #0]
 8008266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800826a:	2300      	movs	r3, #0
 800826c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008270:	e7f7      	b.n	8008262 <_Balloc+0x66>
 8008272:	bf00      	nop
 8008274:	0800968d 	.word	0x0800968d
 8008278:	08009770 	.word	0x08009770

0800827c <_Bfree>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008280:	4605      	mov	r5, r0
 8008282:	460c      	mov	r4, r1
 8008284:	b976      	cbnz	r6, 80082a4 <_Bfree+0x28>
 8008286:	2010      	movs	r0, #16
 8008288:	f7ff ffb0 	bl	80081ec <malloc>
 800828c:	4602      	mov	r2, r0
 800828e:	6268      	str	r0, [r5, #36]	; 0x24
 8008290:	b920      	cbnz	r0, 800829c <_Bfree+0x20>
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <_Bfree+0x3c>)
 8008294:	4809      	ldr	r0, [pc, #36]	; (80082bc <_Bfree+0x40>)
 8008296:	218a      	movs	r1, #138	; 0x8a
 8008298:	f000 ff46 	bl	8009128 <__assert_func>
 800829c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082a0:	6006      	str	r6, [r0, #0]
 80082a2:	60c6      	str	r6, [r0, #12]
 80082a4:	b13c      	cbz	r4, 80082b6 <_Bfree+0x3a>
 80082a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082a8:	6862      	ldr	r2, [r4, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082b0:	6021      	str	r1, [r4, #0]
 80082b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	0800968d 	.word	0x0800968d
 80082bc:	08009770 	.word	0x08009770

080082c0 <__multadd>:
 80082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	690d      	ldr	r5, [r1, #16]
 80082c6:	4607      	mov	r7, r0
 80082c8:	460c      	mov	r4, r1
 80082ca:	461e      	mov	r6, r3
 80082cc:	f101 0c14 	add.w	ip, r1, #20
 80082d0:	2000      	movs	r0, #0
 80082d2:	f8dc 3000 	ldr.w	r3, [ip]
 80082d6:	b299      	uxth	r1, r3
 80082d8:	fb02 6101 	mla	r1, r2, r1, r6
 80082dc:	0c1e      	lsrs	r6, r3, #16
 80082de:	0c0b      	lsrs	r3, r1, #16
 80082e0:	fb02 3306 	mla	r3, r2, r6, r3
 80082e4:	b289      	uxth	r1, r1
 80082e6:	3001      	adds	r0, #1
 80082e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082ec:	4285      	cmp	r5, r0
 80082ee:	f84c 1b04 	str.w	r1, [ip], #4
 80082f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082f6:	dcec      	bgt.n	80082d2 <__multadd+0x12>
 80082f8:	b30e      	cbz	r6, 800833e <__multadd+0x7e>
 80082fa:	68a3      	ldr	r3, [r4, #8]
 80082fc:	42ab      	cmp	r3, r5
 80082fe:	dc19      	bgt.n	8008334 <__multadd+0x74>
 8008300:	6861      	ldr	r1, [r4, #4]
 8008302:	4638      	mov	r0, r7
 8008304:	3101      	adds	r1, #1
 8008306:	f7ff ff79 	bl	80081fc <_Balloc>
 800830a:	4680      	mov	r8, r0
 800830c:	b928      	cbnz	r0, 800831a <__multadd+0x5a>
 800830e:	4602      	mov	r2, r0
 8008310:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <__multadd+0x84>)
 8008312:	480d      	ldr	r0, [pc, #52]	; (8008348 <__multadd+0x88>)
 8008314:	21b5      	movs	r1, #181	; 0xb5
 8008316:	f000 ff07 	bl	8009128 <__assert_func>
 800831a:	6922      	ldr	r2, [r4, #16]
 800831c:	3202      	adds	r2, #2
 800831e:	f104 010c 	add.w	r1, r4, #12
 8008322:	0092      	lsls	r2, r2, #2
 8008324:	300c      	adds	r0, #12
 8008326:	f7fe f8d5 	bl	80064d4 <memcpy>
 800832a:	4621      	mov	r1, r4
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ffa5 	bl	800827c <_Bfree>
 8008332:	4644      	mov	r4, r8
 8008334:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008338:	3501      	adds	r5, #1
 800833a:	615e      	str	r6, [r3, #20]
 800833c:	6125      	str	r5, [r4, #16]
 800833e:	4620      	mov	r0, r4
 8008340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008344:	080096ff 	.word	0x080096ff
 8008348:	08009770 	.word	0x08009770

0800834c <__hi0bits>:
 800834c:	0c03      	lsrs	r3, r0, #16
 800834e:	041b      	lsls	r3, r3, #16
 8008350:	b9d3      	cbnz	r3, 8008388 <__hi0bits+0x3c>
 8008352:	0400      	lsls	r0, r0, #16
 8008354:	2310      	movs	r3, #16
 8008356:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800835a:	bf04      	itt	eq
 800835c:	0200      	lsleq	r0, r0, #8
 800835e:	3308      	addeq	r3, #8
 8008360:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008364:	bf04      	itt	eq
 8008366:	0100      	lsleq	r0, r0, #4
 8008368:	3304      	addeq	r3, #4
 800836a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800836e:	bf04      	itt	eq
 8008370:	0080      	lsleq	r0, r0, #2
 8008372:	3302      	addeq	r3, #2
 8008374:	2800      	cmp	r0, #0
 8008376:	db05      	blt.n	8008384 <__hi0bits+0x38>
 8008378:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800837c:	f103 0301 	add.w	r3, r3, #1
 8008380:	bf08      	it	eq
 8008382:	2320      	moveq	r3, #32
 8008384:	4618      	mov	r0, r3
 8008386:	4770      	bx	lr
 8008388:	2300      	movs	r3, #0
 800838a:	e7e4      	b.n	8008356 <__hi0bits+0xa>

0800838c <__lo0bits>:
 800838c:	6803      	ldr	r3, [r0, #0]
 800838e:	f013 0207 	ands.w	r2, r3, #7
 8008392:	4601      	mov	r1, r0
 8008394:	d00b      	beq.n	80083ae <__lo0bits+0x22>
 8008396:	07da      	lsls	r2, r3, #31
 8008398:	d423      	bmi.n	80083e2 <__lo0bits+0x56>
 800839a:	0798      	lsls	r0, r3, #30
 800839c:	bf49      	itett	mi
 800839e:	085b      	lsrmi	r3, r3, #1
 80083a0:	089b      	lsrpl	r3, r3, #2
 80083a2:	2001      	movmi	r0, #1
 80083a4:	600b      	strmi	r3, [r1, #0]
 80083a6:	bf5c      	itt	pl
 80083a8:	600b      	strpl	r3, [r1, #0]
 80083aa:	2002      	movpl	r0, #2
 80083ac:	4770      	bx	lr
 80083ae:	b298      	uxth	r0, r3
 80083b0:	b9a8      	cbnz	r0, 80083de <__lo0bits+0x52>
 80083b2:	0c1b      	lsrs	r3, r3, #16
 80083b4:	2010      	movs	r0, #16
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	b90a      	cbnz	r2, 80083be <__lo0bits+0x32>
 80083ba:	3008      	adds	r0, #8
 80083bc:	0a1b      	lsrs	r3, r3, #8
 80083be:	071a      	lsls	r2, r3, #28
 80083c0:	bf04      	itt	eq
 80083c2:	091b      	lsreq	r3, r3, #4
 80083c4:	3004      	addeq	r0, #4
 80083c6:	079a      	lsls	r2, r3, #30
 80083c8:	bf04      	itt	eq
 80083ca:	089b      	lsreq	r3, r3, #2
 80083cc:	3002      	addeq	r0, #2
 80083ce:	07da      	lsls	r2, r3, #31
 80083d0:	d403      	bmi.n	80083da <__lo0bits+0x4e>
 80083d2:	085b      	lsrs	r3, r3, #1
 80083d4:	f100 0001 	add.w	r0, r0, #1
 80083d8:	d005      	beq.n	80083e6 <__lo0bits+0x5a>
 80083da:	600b      	str	r3, [r1, #0]
 80083dc:	4770      	bx	lr
 80083de:	4610      	mov	r0, r2
 80083e0:	e7e9      	b.n	80083b6 <__lo0bits+0x2a>
 80083e2:	2000      	movs	r0, #0
 80083e4:	4770      	bx	lr
 80083e6:	2020      	movs	r0, #32
 80083e8:	4770      	bx	lr
	...

080083ec <__i2b>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	2101      	movs	r1, #1
 80083f2:	f7ff ff03 	bl	80081fc <_Balloc>
 80083f6:	4602      	mov	r2, r0
 80083f8:	b928      	cbnz	r0, 8008406 <__i2b+0x1a>
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <__i2b+0x24>)
 80083fc:	4805      	ldr	r0, [pc, #20]	; (8008414 <__i2b+0x28>)
 80083fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008402:	f000 fe91 	bl	8009128 <__assert_func>
 8008406:	2301      	movs	r3, #1
 8008408:	6144      	str	r4, [r0, #20]
 800840a:	6103      	str	r3, [r0, #16]
 800840c:	bd10      	pop	{r4, pc}
 800840e:	bf00      	nop
 8008410:	080096ff 	.word	0x080096ff
 8008414:	08009770 	.word	0x08009770

08008418 <__multiply>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	4691      	mov	r9, r2
 800841e:	690a      	ldr	r2, [r1, #16]
 8008420:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008424:	429a      	cmp	r2, r3
 8008426:	bfb8      	it	lt
 8008428:	460b      	movlt	r3, r1
 800842a:	460c      	mov	r4, r1
 800842c:	bfbc      	itt	lt
 800842e:	464c      	movlt	r4, r9
 8008430:	4699      	movlt	r9, r3
 8008432:	6927      	ldr	r7, [r4, #16]
 8008434:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008438:	68a3      	ldr	r3, [r4, #8]
 800843a:	6861      	ldr	r1, [r4, #4]
 800843c:	eb07 060a 	add.w	r6, r7, sl
 8008440:	42b3      	cmp	r3, r6
 8008442:	b085      	sub	sp, #20
 8008444:	bfb8      	it	lt
 8008446:	3101      	addlt	r1, #1
 8008448:	f7ff fed8 	bl	80081fc <_Balloc>
 800844c:	b930      	cbnz	r0, 800845c <__multiply+0x44>
 800844e:	4602      	mov	r2, r0
 8008450:	4b44      	ldr	r3, [pc, #272]	; (8008564 <__multiply+0x14c>)
 8008452:	4845      	ldr	r0, [pc, #276]	; (8008568 <__multiply+0x150>)
 8008454:	f240 115d 	movw	r1, #349	; 0x15d
 8008458:	f000 fe66 	bl	8009128 <__assert_func>
 800845c:	f100 0514 	add.w	r5, r0, #20
 8008460:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008464:	462b      	mov	r3, r5
 8008466:	2200      	movs	r2, #0
 8008468:	4543      	cmp	r3, r8
 800846a:	d321      	bcc.n	80084b0 <__multiply+0x98>
 800846c:	f104 0314 	add.w	r3, r4, #20
 8008470:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008474:	f109 0314 	add.w	r3, r9, #20
 8008478:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800847c:	9202      	str	r2, [sp, #8]
 800847e:	1b3a      	subs	r2, r7, r4
 8008480:	3a15      	subs	r2, #21
 8008482:	f022 0203 	bic.w	r2, r2, #3
 8008486:	3204      	adds	r2, #4
 8008488:	f104 0115 	add.w	r1, r4, #21
 800848c:	428f      	cmp	r7, r1
 800848e:	bf38      	it	cc
 8008490:	2204      	movcc	r2, #4
 8008492:	9201      	str	r2, [sp, #4]
 8008494:	9a02      	ldr	r2, [sp, #8]
 8008496:	9303      	str	r3, [sp, #12]
 8008498:	429a      	cmp	r2, r3
 800849a:	d80c      	bhi.n	80084b6 <__multiply+0x9e>
 800849c:	2e00      	cmp	r6, #0
 800849e:	dd03      	ble.n	80084a8 <__multiply+0x90>
 80084a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d05a      	beq.n	800855e <__multiply+0x146>
 80084a8:	6106      	str	r6, [r0, #16]
 80084aa:	b005      	add	sp, #20
 80084ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b0:	f843 2b04 	str.w	r2, [r3], #4
 80084b4:	e7d8      	b.n	8008468 <__multiply+0x50>
 80084b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80084ba:	f1ba 0f00 	cmp.w	sl, #0
 80084be:	d024      	beq.n	800850a <__multiply+0xf2>
 80084c0:	f104 0e14 	add.w	lr, r4, #20
 80084c4:	46a9      	mov	r9, r5
 80084c6:	f04f 0c00 	mov.w	ip, #0
 80084ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80084ce:	f8d9 1000 	ldr.w	r1, [r9]
 80084d2:	fa1f fb82 	uxth.w	fp, r2
 80084d6:	b289      	uxth	r1, r1
 80084d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80084dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084e0:	f8d9 2000 	ldr.w	r2, [r9]
 80084e4:	4461      	add	r1, ip
 80084e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80084ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084f2:	b289      	uxth	r1, r1
 80084f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084f8:	4577      	cmp	r7, lr
 80084fa:	f849 1b04 	str.w	r1, [r9], #4
 80084fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008502:	d8e2      	bhi.n	80084ca <__multiply+0xb2>
 8008504:	9a01      	ldr	r2, [sp, #4]
 8008506:	f845 c002 	str.w	ip, [r5, r2]
 800850a:	9a03      	ldr	r2, [sp, #12]
 800850c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008510:	3304      	adds	r3, #4
 8008512:	f1b9 0f00 	cmp.w	r9, #0
 8008516:	d020      	beq.n	800855a <__multiply+0x142>
 8008518:	6829      	ldr	r1, [r5, #0]
 800851a:	f104 0c14 	add.w	ip, r4, #20
 800851e:	46ae      	mov	lr, r5
 8008520:	f04f 0a00 	mov.w	sl, #0
 8008524:	f8bc b000 	ldrh.w	fp, [ip]
 8008528:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800852c:	fb09 220b 	mla	r2, r9, fp, r2
 8008530:	4492      	add	sl, r2
 8008532:	b289      	uxth	r1, r1
 8008534:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008538:	f84e 1b04 	str.w	r1, [lr], #4
 800853c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008540:	f8be 1000 	ldrh.w	r1, [lr]
 8008544:	0c12      	lsrs	r2, r2, #16
 8008546:	fb09 1102 	mla	r1, r9, r2, r1
 800854a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800854e:	4567      	cmp	r7, ip
 8008550:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008554:	d8e6      	bhi.n	8008524 <__multiply+0x10c>
 8008556:	9a01      	ldr	r2, [sp, #4]
 8008558:	50a9      	str	r1, [r5, r2]
 800855a:	3504      	adds	r5, #4
 800855c:	e79a      	b.n	8008494 <__multiply+0x7c>
 800855e:	3e01      	subs	r6, #1
 8008560:	e79c      	b.n	800849c <__multiply+0x84>
 8008562:	bf00      	nop
 8008564:	080096ff 	.word	0x080096ff
 8008568:	08009770 	.word	0x08009770

0800856c <__pow5mult>:
 800856c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008570:	4615      	mov	r5, r2
 8008572:	f012 0203 	ands.w	r2, r2, #3
 8008576:	4606      	mov	r6, r0
 8008578:	460f      	mov	r7, r1
 800857a:	d007      	beq.n	800858c <__pow5mult+0x20>
 800857c:	4c25      	ldr	r4, [pc, #148]	; (8008614 <__pow5mult+0xa8>)
 800857e:	3a01      	subs	r2, #1
 8008580:	2300      	movs	r3, #0
 8008582:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008586:	f7ff fe9b 	bl	80082c0 <__multadd>
 800858a:	4607      	mov	r7, r0
 800858c:	10ad      	asrs	r5, r5, #2
 800858e:	d03d      	beq.n	800860c <__pow5mult+0xa0>
 8008590:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008592:	b97c      	cbnz	r4, 80085b4 <__pow5mult+0x48>
 8008594:	2010      	movs	r0, #16
 8008596:	f7ff fe29 	bl	80081ec <malloc>
 800859a:	4602      	mov	r2, r0
 800859c:	6270      	str	r0, [r6, #36]	; 0x24
 800859e:	b928      	cbnz	r0, 80085ac <__pow5mult+0x40>
 80085a0:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <__pow5mult+0xac>)
 80085a2:	481e      	ldr	r0, [pc, #120]	; (800861c <__pow5mult+0xb0>)
 80085a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80085a8:	f000 fdbe 	bl	8009128 <__assert_func>
 80085ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085b0:	6004      	str	r4, [r0, #0]
 80085b2:	60c4      	str	r4, [r0, #12]
 80085b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085bc:	b94c      	cbnz	r4, 80085d2 <__pow5mult+0x66>
 80085be:	f240 2171 	movw	r1, #625	; 0x271
 80085c2:	4630      	mov	r0, r6
 80085c4:	f7ff ff12 	bl	80083ec <__i2b>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80085ce:	4604      	mov	r4, r0
 80085d0:	6003      	str	r3, [r0, #0]
 80085d2:	f04f 0900 	mov.w	r9, #0
 80085d6:	07eb      	lsls	r3, r5, #31
 80085d8:	d50a      	bpl.n	80085f0 <__pow5mult+0x84>
 80085da:	4639      	mov	r1, r7
 80085dc:	4622      	mov	r2, r4
 80085de:	4630      	mov	r0, r6
 80085e0:	f7ff ff1a 	bl	8008418 <__multiply>
 80085e4:	4639      	mov	r1, r7
 80085e6:	4680      	mov	r8, r0
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff fe47 	bl	800827c <_Bfree>
 80085ee:	4647      	mov	r7, r8
 80085f0:	106d      	asrs	r5, r5, #1
 80085f2:	d00b      	beq.n	800860c <__pow5mult+0xa0>
 80085f4:	6820      	ldr	r0, [r4, #0]
 80085f6:	b938      	cbnz	r0, 8008608 <__pow5mult+0x9c>
 80085f8:	4622      	mov	r2, r4
 80085fa:	4621      	mov	r1, r4
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7ff ff0b 	bl	8008418 <__multiply>
 8008602:	6020      	str	r0, [r4, #0]
 8008604:	f8c0 9000 	str.w	r9, [r0]
 8008608:	4604      	mov	r4, r0
 800860a:	e7e4      	b.n	80085d6 <__pow5mult+0x6a>
 800860c:	4638      	mov	r0, r7
 800860e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008612:	bf00      	nop
 8008614:	080098c0 	.word	0x080098c0
 8008618:	0800968d 	.word	0x0800968d
 800861c:	08009770 	.word	0x08009770

08008620 <__lshift>:
 8008620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	6849      	ldr	r1, [r1, #4]
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800862e:	68a3      	ldr	r3, [r4, #8]
 8008630:	4607      	mov	r7, r0
 8008632:	4691      	mov	r9, r2
 8008634:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008638:	f108 0601 	add.w	r6, r8, #1
 800863c:	42b3      	cmp	r3, r6
 800863e:	db0b      	blt.n	8008658 <__lshift+0x38>
 8008640:	4638      	mov	r0, r7
 8008642:	f7ff fddb 	bl	80081fc <_Balloc>
 8008646:	4605      	mov	r5, r0
 8008648:	b948      	cbnz	r0, 800865e <__lshift+0x3e>
 800864a:	4602      	mov	r2, r0
 800864c:	4b2a      	ldr	r3, [pc, #168]	; (80086f8 <__lshift+0xd8>)
 800864e:	482b      	ldr	r0, [pc, #172]	; (80086fc <__lshift+0xdc>)
 8008650:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008654:	f000 fd68 	bl	8009128 <__assert_func>
 8008658:	3101      	adds	r1, #1
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	e7ee      	b.n	800863c <__lshift+0x1c>
 800865e:	2300      	movs	r3, #0
 8008660:	f100 0114 	add.w	r1, r0, #20
 8008664:	f100 0210 	add.w	r2, r0, #16
 8008668:	4618      	mov	r0, r3
 800866a:	4553      	cmp	r3, sl
 800866c:	db37      	blt.n	80086de <__lshift+0xbe>
 800866e:	6920      	ldr	r0, [r4, #16]
 8008670:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008674:	f104 0314 	add.w	r3, r4, #20
 8008678:	f019 091f 	ands.w	r9, r9, #31
 800867c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008680:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008684:	d02f      	beq.n	80086e6 <__lshift+0xc6>
 8008686:	f1c9 0e20 	rsb	lr, r9, #32
 800868a:	468a      	mov	sl, r1
 800868c:	f04f 0c00 	mov.w	ip, #0
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	fa02 f209 	lsl.w	r2, r2, r9
 8008696:	ea42 020c 	orr.w	r2, r2, ip
 800869a:	f84a 2b04 	str.w	r2, [sl], #4
 800869e:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a2:	4298      	cmp	r0, r3
 80086a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80086a8:	d8f2      	bhi.n	8008690 <__lshift+0x70>
 80086aa:	1b03      	subs	r3, r0, r4
 80086ac:	3b15      	subs	r3, #21
 80086ae:	f023 0303 	bic.w	r3, r3, #3
 80086b2:	3304      	adds	r3, #4
 80086b4:	f104 0215 	add.w	r2, r4, #21
 80086b8:	4290      	cmp	r0, r2
 80086ba:	bf38      	it	cc
 80086bc:	2304      	movcc	r3, #4
 80086be:	f841 c003 	str.w	ip, [r1, r3]
 80086c2:	f1bc 0f00 	cmp.w	ip, #0
 80086c6:	d001      	beq.n	80086cc <__lshift+0xac>
 80086c8:	f108 0602 	add.w	r6, r8, #2
 80086cc:	3e01      	subs	r6, #1
 80086ce:	4638      	mov	r0, r7
 80086d0:	612e      	str	r6, [r5, #16]
 80086d2:	4621      	mov	r1, r4
 80086d4:	f7ff fdd2 	bl	800827c <_Bfree>
 80086d8:	4628      	mov	r0, r5
 80086da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086de:	f842 0f04 	str.w	r0, [r2, #4]!
 80086e2:	3301      	adds	r3, #1
 80086e4:	e7c1      	b.n	800866a <__lshift+0x4a>
 80086e6:	3904      	subs	r1, #4
 80086e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80086f0:	4298      	cmp	r0, r3
 80086f2:	d8f9      	bhi.n	80086e8 <__lshift+0xc8>
 80086f4:	e7ea      	b.n	80086cc <__lshift+0xac>
 80086f6:	bf00      	nop
 80086f8:	080096ff 	.word	0x080096ff
 80086fc:	08009770 	.word	0x08009770

08008700 <__mcmp>:
 8008700:	b530      	push	{r4, r5, lr}
 8008702:	6902      	ldr	r2, [r0, #16]
 8008704:	690c      	ldr	r4, [r1, #16]
 8008706:	1b12      	subs	r2, r2, r4
 8008708:	d10e      	bne.n	8008728 <__mcmp+0x28>
 800870a:	f100 0314 	add.w	r3, r0, #20
 800870e:	3114      	adds	r1, #20
 8008710:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008714:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008718:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800871c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008720:	42a5      	cmp	r5, r4
 8008722:	d003      	beq.n	800872c <__mcmp+0x2c>
 8008724:	d305      	bcc.n	8008732 <__mcmp+0x32>
 8008726:	2201      	movs	r2, #1
 8008728:	4610      	mov	r0, r2
 800872a:	bd30      	pop	{r4, r5, pc}
 800872c:	4283      	cmp	r3, r0
 800872e:	d3f3      	bcc.n	8008718 <__mcmp+0x18>
 8008730:	e7fa      	b.n	8008728 <__mcmp+0x28>
 8008732:	f04f 32ff 	mov.w	r2, #4294967295
 8008736:	e7f7      	b.n	8008728 <__mcmp+0x28>

08008738 <__mdiff>:
 8008738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	4606      	mov	r6, r0
 8008740:	4611      	mov	r1, r2
 8008742:	4620      	mov	r0, r4
 8008744:	4690      	mov	r8, r2
 8008746:	f7ff ffdb 	bl	8008700 <__mcmp>
 800874a:	1e05      	subs	r5, r0, #0
 800874c:	d110      	bne.n	8008770 <__mdiff+0x38>
 800874e:	4629      	mov	r1, r5
 8008750:	4630      	mov	r0, r6
 8008752:	f7ff fd53 	bl	80081fc <_Balloc>
 8008756:	b930      	cbnz	r0, 8008766 <__mdiff+0x2e>
 8008758:	4b3a      	ldr	r3, [pc, #232]	; (8008844 <__mdiff+0x10c>)
 800875a:	4602      	mov	r2, r0
 800875c:	f240 2132 	movw	r1, #562	; 0x232
 8008760:	4839      	ldr	r0, [pc, #228]	; (8008848 <__mdiff+0x110>)
 8008762:	f000 fce1 	bl	8009128 <__assert_func>
 8008766:	2301      	movs	r3, #1
 8008768:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800876c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008770:	bfa4      	itt	ge
 8008772:	4643      	movge	r3, r8
 8008774:	46a0      	movge	r8, r4
 8008776:	4630      	mov	r0, r6
 8008778:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800877c:	bfa6      	itte	ge
 800877e:	461c      	movge	r4, r3
 8008780:	2500      	movge	r5, #0
 8008782:	2501      	movlt	r5, #1
 8008784:	f7ff fd3a 	bl	80081fc <_Balloc>
 8008788:	b920      	cbnz	r0, 8008794 <__mdiff+0x5c>
 800878a:	4b2e      	ldr	r3, [pc, #184]	; (8008844 <__mdiff+0x10c>)
 800878c:	4602      	mov	r2, r0
 800878e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008792:	e7e5      	b.n	8008760 <__mdiff+0x28>
 8008794:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008798:	6926      	ldr	r6, [r4, #16]
 800879a:	60c5      	str	r5, [r0, #12]
 800879c:	f104 0914 	add.w	r9, r4, #20
 80087a0:	f108 0514 	add.w	r5, r8, #20
 80087a4:	f100 0e14 	add.w	lr, r0, #20
 80087a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80087ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087b0:	f108 0210 	add.w	r2, r8, #16
 80087b4:	46f2      	mov	sl, lr
 80087b6:	2100      	movs	r1, #0
 80087b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80087bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80087c0:	fa1f f883 	uxth.w	r8, r3
 80087c4:	fa11 f18b 	uxtah	r1, r1, fp
 80087c8:	0c1b      	lsrs	r3, r3, #16
 80087ca:	eba1 0808 	sub.w	r8, r1, r8
 80087ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80087d6:	fa1f f888 	uxth.w	r8, r8
 80087da:	1419      	asrs	r1, r3, #16
 80087dc:	454e      	cmp	r6, r9
 80087de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087e2:	f84a 3b04 	str.w	r3, [sl], #4
 80087e6:	d8e7      	bhi.n	80087b8 <__mdiff+0x80>
 80087e8:	1b33      	subs	r3, r6, r4
 80087ea:	3b15      	subs	r3, #21
 80087ec:	f023 0303 	bic.w	r3, r3, #3
 80087f0:	3304      	adds	r3, #4
 80087f2:	3415      	adds	r4, #21
 80087f4:	42a6      	cmp	r6, r4
 80087f6:	bf38      	it	cc
 80087f8:	2304      	movcc	r3, #4
 80087fa:	441d      	add	r5, r3
 80087fc:	4473      	add	r3, lr
 80087fe:	469e      	mov	lr, r3
 8008800:	462e      	mov	r6, r5
 8008802:	4566      	cmp	r6, ip
 8008804:	d30e      	bcc.n	8008824 <__mdiff+0xec>
 8008806:	f10c 0203 	add.w	r2, ip, #3
 800880a:	1b52      	subs	r2, r2, r5
 800880c:	f022 0203 	bic.w	r2, r2, #3
 8008810:	3d03      	subs	r5, #3
 8008812:	45ac      	cmp	ip, r5
 8008814:	bf38      	it	cc
 8008816:	2200      	movcc	r2, #0
 8008818:	441a      	add	r2, r3
 800881a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800881e:	b17b      	cbz	r3, 8008840 <__mdiff+0x108>
 8008820:	6107      	str	r7, [r0, #16]
 8008822:	e7a3      	b.n	800876c <__mdiff+0x34>
 8008824:	f856 8b04 	ldr.w	r8, [r6], #4
 8008828:	fa11 f288 	uxtah	r2, r1, r8
 800882c:	1414      	asrs	r4, r2, #16
 800882e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008832:	b292      	uxth	r2, r2
 8008834:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008838:	f84e 2b04 	str.w	r2, [lr], #4
 800883c:	1421      	asrs	r1, r4, #16
 800883e:	e7e0      	b.n	8008802 <__mdiff+0xca>
 8008840:	3f01      	subs	r7, #1
 8008842:	e7ea      	b.n	800881a <__mdiff+0xe2>
 8008844:	080096ff 	.word	0x080096ff
 8008848:	08009770 	.word	0x08009770

0800884c <__d2b>:
 800884c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008850:	4689      	mov	r9, r1
 8008852:	2101      	movs	r1, #1
 8008854:	ec57 6b10 	vmov	r6, r7, d0
 8008858:	4690      	mov	r8, r2
 800885a:	f7ff fccf 	bl	80081fc <_Balloc>
 800885e:	4604      	mov	r4, r0
 8008860:	b930      	cbnz	r0, 8008870 <__d2b+0x24>
 8008862:	4602      	mov	r2, r0
 8008864:	4b25      	ldr	r3, [pc, #148]	; (80088fc <__d2b+0xb0>)
 8008866:	4826      	ldr	r0, [pc, #152]	; (8008900 <__d2b+0xb4>)
 8008868:	f240 310a 	movw	r1, #778	; 0x30a
 800886c:	f000 fc5c 	bl	8009128 <__assert_func>
 8008870:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008874:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008878:	bb35      	cbnz	r5, 80088c8 <__d2b+0x7c>
 800887a:	2e00      	cmp	r6, #0
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	d028      	beq.n	80088d2 <__d2b+0x86>
 8008880:	4668      	mov	r0, sp
 8008882:	9600      	str	r6, [sp, #0]
 8008884:	f7ff fd82 	bl	800838c <__lo0bits>
 8008888:	9900      	ldr	r1, [sp, #0]
 800888a:	b300      	cbz	r0, 80088ce <__d2b+0x82>
 800888c:	9a01      	ldr	r2, [sp, #4]
 800888e:	f1c0 0320 	rsb	r3, r0, #32
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	430b      	orrs	r3, r1
 8008898:	40c2      	lsrs	r2, r0
 800889a:	6163      	str	r3, [r4, #20]
 800889c:	9201      	str	r2, [sp, #4]
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	61a3      	str	r3, [r4, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bf14      	ite	ne
 80088a6:	2202      	movne	r2, #2
 80088a8:	2201      	moveq	r2, #1
 80088aa:	6122      	str	r2, [r4, #16]
 80088ac:	b1d5      	cbz	r5, 80088e4 <__d2b+0x98>
 80088ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088b2:	4405      	add	r5, r0
 80088b4:	f8c9 5000 	str.w	r5, [r9]
 80088b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088bc:	f8c8 0000 	str.w	r0, [r8]
 80088c0:	4620      	mov	r0, r4
 80088c2:	b003      	add	sp, #12
 80088c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088cc:	e7d5      	b.n	800887a <__d2b+0x2e>
 80088ce:	6161      	str	r1, [r4, #20]
 80088d0:	e7e5      	b.n	800889e <__d2b+0x52>
 80088d2:	a801      	add	r0, sp, #4
 80088d4:	f7ff fd5a 	bl	800838c <__lo0bits>
 80088d8:	9b01      	ldr	r3, [sp, #4]
 80088da:	6163      	str	r3, [r4, #20]
 80088dc:	2201      	movs	r2, #1
 80088de:	6122      	str	r2, [r4, #16]
 80088e0:	3020      	adds	r0, #32
 80088e2:	e7e3      	b.n	80088ac <__d2b+0x60>
 80088e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088ec:	f8c9 0000 	str.w	r0, [r9]
 80088f0:	6918      	ldr	r0, [r3, #16]
 80088f2:	f7ff fd2b 	bl	800834c <__hi0bits>
 80088f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088fa:	e7df      	b.n	80088bc <__d2b+0x70>
 80088fc:	080096ff 	.word	0x080096ff
 8008900:	08009770 	.word	0x08009770

08008904 <_calloc_r>:
 8008904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008906:	fba1 2402 	umull	r2, r4, r1, r2
 800890a:	b94c      	cbnz	r4, 8008920 <_calloc_r+0x1c>
 800890c:	4611      	mov	r1, r2
 800890e:	9201      	str	r2, [sp, #4]
 8008910:	f000 f87a 	bl	8008a08 <_malloc_r>
 8008914:	9a01      	ldr	r2, [sp, #4]
 8008916:	4605      	mov	r5, r0
 8008918:	b930      	cbnz	r0, 8008928 <_calloc_r+0x24>
 800891a:	4628      	mov	r0, r5
 800891c:	b003      	add	sp, #12
 800891e:	bd30      	pop	{r4, r5, pc}
 8008920:	220c      	movs	r2, #12
 8008922:	6002      	str	r2, [r0, #0]
 8008924:	2500      	movs	r5, #0
 8008926:	e7f8      	b.n	800891a <_calloc_r+0x16>
 8008928:	4621      	mov	r1, r4
 800892a:	f7fd fde1 	bl	80064f0 <memset>
 800892e:	e7f4      	b.n	800891a <_calloc_r+0x16>

08008930 <_free_r>:
 8008930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008932:	2900      	cmp	r1, #0
 8008934:	d044      	beq.n	80089c0 <_free_r+0x90>
 8008936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800893a:	9001      	str	r0, [sp, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f1a1 0404 	sub.w	r4, r1, #4
 8008942:	bfb8      	it	lt
 8008944:	18e4      	addlt	r4, r4, r3
 8008946:	f000 fc8f 	bl	8009268 <__malloc_lock>
 800894a:	4a1e      	ldr	r2, [pc, #120]	; (80089c4 <_free_r+0x94>)
 800894c:	9801      	ldr	r0, [sp, #4]
 800894e:	6813      	ldr	r3, [r2, #0]
 8008950:	b933      	cbnz	r3, 8008960 <_free_r+0x30>
 8008952:	6063      	str	r3, [r4, #4]
 8008954:	6014      	str	r4, [r2, #0]
 8008956:	b003      	add	sp, #12
 8008958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800895c:	f000 bc8a 	b.w	8009274 <__malloc_unlock>
 8008960:	42a3      	cmp	r3, r4
 8008962:	d908      	bls.n	8008976 <_free_r+0x46>
 8008964:	6825      	ldr	r5, [r4, #0]
 8008966:	1961      	adds	r1, r4, r5
 8008968:	428b      	cmp	r3, r1
 800896a:	bf01      	itttt	eq
 800896c:	6819      	ldreq	r1, [r3, #0]
 800896e:	685b      	ldreq	r3, [r3, #4]
 8008970:	1949      	addeq	r1, r1, r5
 8008972:	6021      	streq	r1, [r4, #0]
 8008974:	e7ed      	b.n	8008952 <_free_r+0x22>
 8008976:	461a      	mov	r2, r3
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	b10b      	cbz	r3, 8008980 <_free_r+0x50>
 800897c:	42a3      	cmp	r3, r4
 800897e:	d9fa      	bls.n	8008976 <_free_r+0x46>
 8008980:	6811      	ldr	r1, [r2, #0]
 8008982:	1855      	adds	r5, r2, r1
 8008984:	42a5      	cmp	r5, r4
 8008986:	d10b      	bne.n	80089a0 <_free_r+0x70>
 8008988:	6824      	ldr	r4, [r4, #0]
 800898a:	4421      	add	r1, r4
 800898c:	1854      	adds	r4, r2, r1
 800898e:	42a3      	cmp	r3, r4
 8008990:	6011      	str	r1, [r2, #0]
 8008992:	d1e0      	bne.n	8008956 <_free_r+0x26>
 8008994:	681c      	ldr	r4, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	6053      	str	r3, [r2, #4]
 800899a:	4421      	add	r1, r4
 800899c:	6011      	str	r1, [r2, #0]
 800899e:	e7da      	b.n	8008956 <_free_r+0x26>
 80089a0:	d902      	bls.n	80089a8 <_free_r+0x78>
 80089a2:	230c      	movs	r3, #12
 80089a4:	6003      	str	r3, [r0, #0]
 80089a6:	e7d6      	b.n	8008956 <_free_r+0x26>
 80089a8:	6825      	ldr	r5, [r4, #0]
 80089aa:	1961      	adds	r1, r4, r5
 80089ac:	428b      	cmp	r3, r1
 80089ae:	bf04      	itt	eq
 80089b0:	6819      	ldreq	r1, [r3, #0]
 80089b2:	685b      	ldreq	r3, [r3, #4]
 80089b4:	6063      	str	r3, [r4, #4]
 80089b6:	bf04      	itt	eq
 80089b8:	1949      	addeq	r1, r1, r5
 80089ba:	6021      	streq	r1, [r4, #0]
 80089bc:	6054      	str	r4, [r2, #4]
 80089be:	e7ca      	b.n	8008956 <_free_r+0x26>
 80089c0:	b003      	add	sp, #12
 80089c2:	bd30      	pop	{r4, r5, pc}
 80089c4:	20000460 	.word	0x20000460

080089c8 <sbrk_aligned>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	4e0e      	ldr	r6, [pc, #56]	; (8008a04 <sbrk_aligned+0x3c>)
 80089cc:	460c      	mov	r4, r1
 80089ce:	6831      	ldr	r1, [r6, #0]
 80089d0:	4605      	mov	r5, r0
 80089d2:	b911      	cbnz	r1, 80089da <sbrk_aligned+0x12>
 80089d4:	f000 fb42 	bl	800905c <_sbrk_r>
 80089d8:	6030      	str	r0, [r6, #0]
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 fb3d 	bl	800905c <_sbrk_r>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d00a      	beq.n	80089fc <sbrk_aligned+0x34>
 80089e6:	1cc4      	adds	r4, r0, #3
 80089e8:	f024 0403 	bic.w	r4, r4, #3
 80089ec:	42a0      	cmp	r0, r4
 80089ee:	d007      	beq.n	8008a00 <sbrk_aligned+0x38>
 80089f0:	1a21      	subs	r1, r4, r0
 80089f2:	4628      	mov	r0, r5
 80089f4:	f000 fb32 	bl	800905c <_sbrk_r>
 80089f8:	3001      	adds	r0, #1
 80089fa:	d101      	bne.n	8008a00 <sbrk_aligned+0x38>
 80089fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008a00:	4620      	mov	r0, r4
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	20000464 	.word	0x20000464

08008a08 <_malloc_r>:
 8008a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0c:	1ccd      	adds	r5, r1, #3
 8008a0e:	f025 0503 	bic.w	r5, r5, #3
 8008a12:	3508      	adds	r5, #8
 8008a14:	2d0c      	cmp	r5, #12
 8008a16:	bf38      	it	cc
 8008a18:	250c      	movcc	r5, #12
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	db01      	blt.n	8008a24 <_malloc_r+0x1c>
 8008a20:	42a9      	cmp	r1, r5
 8008a22:	d905      	bls.n	8008a30 <_malloc_r+0x28>
 8008a24:	230c      	movs	r3, #12
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	2600      	movs	r6, #0
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	4e2e      	ldr	r6, [pc, #184]	; (8008aec <_malloc_r+0xe4>)
 8008a32:	f000 fc19 	bl	8009268 <__malloc_lock>
 8008a36:	6833      	ldr	r3, [r6, #0]
 8008a38:	461c      	mov	r4, r3
 8008a3a:	bb34      	cbnz	r4, 8008a8a <_malloc_r+0x82>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4638      	mov	r0, r7
 8008a40:	f7ff ffc2 	bl	80089c8 <sbrk_aligned>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	4604      	mov	r4, r0
 8008a48:	d14d      	bne.n	8008ae6 <_malloc_r+0xde>
 8008a4a:	6834      	ldr	r4, [r6, #0]
 8008a4c:	4626      	mov	r6, r4
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d140      	bne.n	8008ad4 <_malloc_r+0xcc>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	4631      	mov	r1, r6
 8008a56:	4638      	mov	r0, r7
 8008a58:	eb04 0803 	add.w	r8, r4, r3
 8008a5c:	f000 fafe 	bl	800905c <_sbrk_r>
 8008a60:	4580      	cmp	r8, r0
 8008a62:	d13a      	bne.n	8008ada <_malloc_r+0xd2>
 8008a64:	6821      	ldr	r1, [r4, #0]
 8008a66:	3503      	adds	r5, #3
 8008a68:	1a6d      	subs	r5, r5, r1
 8008a6a:	f025 0503 	bic.w	r5, r5, #3
 8008a6e:	3508      	adds	r5, #8
 8008a70:	2d0c      	cmp	r5, #12
 8008a72:	bf38      	it	cc
 8008a74:	250c      	movcc	r5, #12
 8008a76:	4629      	mov	r1, r5
 8008a78:	4638      	mov	r0, r7
 8008a7a:	f7ff ffa5 	bl	80089c8 <sbrk_aligned>
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d02b      	beq.n	8008ada <_malloc_r+0xd2>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	442b      	add	r3, r5
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	e00e      	b.n	8008aa8 <_malloc_r+0xa0>
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	1b52      	subs	r2, r2, r5
 8008a8e:	d41e      	bmi.n	8008ace <_malloc_r+0xc6>
 8008a90:	2a0b      	cmp	r2, #11
 8008a92:	d916      	bls.n	8008ac2 <_malloc_r+0xba>
 8008a94:	1961      	adds	r1, r4, r5
 8008a96:	42a3      	cmp	r3, r4
 8008a98:	6025      	str	r5, [r4, #0]
 8008a9a:	bf18      	it	ne
 8008a9c:	6059      	strne	r1, [r3, #4]
 8008a9e:	6863      	ldr	r3, [r4, #4]
 8008aa0:	bf08      	it	eq
 8008aa2:	6031      	streq	r1, [r6, #0]
 8008aa4:	5162      	str	r2, [r4, r5]
 8008aa6:	604b      	str	r3, [r1, #4]
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	f104 060b 	add.w	r6, r4, #11
 8008aae:	f000 fbe1 	bl	8009274 <__malloc_unlock>
 8008ab2:	f026 0607 	bic.w	r6, r6, #7
 8008ab6:	1d23      	adds	r3, r4, #4
 8008ab8:	1af2      	subs	r2, r6, r3
 8008aba:	d0b6      	beq.n	8008a2a <_malloc_r+0x22>
 8008abc:	1b9b      	subs	r3, r3, r6
 8008abe:	50a3      	str	r3, [r4, r2]
 8008ac0:	e7b3      	b.n	8008a2a <_malloc_r+0x22>
 8008ac2:	6862      	ldr	r2, [r4, #4]
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	bf0c      	ite	eq
 8008ac8:	6032      	streq	r2, [r6, #0]
 8008aca:	605a      	strne	r2, [r3, #4]
 8008acc:	e7ec      	b.n	8008aa8 <_malloc_r+0xa0>
 8008ace:	4623      	mov	r3, r4
 8008ad0:	6864      	ldr	r4, [r4, #4]
 8008ad2:	e7b2      	b.n	8008a3a <_malloc_r+0x32>
 8008ad4:	4634      	mov	r4, r6
 8008ad6:	6876      	ldr	r6, [r6, #4]
 8008ad8:	e7b9      	b.n	8008a4e <_malloc_r+0x46>
 8008ada:	230c      	movs	r3, #12
 8008adc:	603b      	str	r3, [r7, #0]
 8008ade:	4638      	mov	r0, r7
 8008ae0:	f000 fbc8 	bl	8009274 <__malloc_unlock>
 8008ae4:	e7a1      	b.n	8008a2a <_malloc_r+0x22>
 8008ae6:	6025      	str	r5, [r4, #0]
 8008ae8:	e7de      	b.n	8008aa8 <_malloc_r+0xa0>
 8008aea:	bf00      	nop
 8008aec:	20000460 	.word	0x20000460

08008af0 <__ssputs_r>:
 8008af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af4:	688e      	ldr	r6, [r1, #8]
 8008af6:	429e      	cmp	r6, r3
 8008af8:	4682      	mov	sl, r0
 8008afa:	460c      	mov	r4, r1
 8008afc:	4690      	mov	r8, r2
 8008afe:	461f      	mov	r7, r3
 8008b00:	d838      	bhi.n	8008b74 <__ssputs_r+0x84>
 8008b02:	898a      	ldrh	r2, [r1, #12]
 8008b04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b08:	d032      	beq.n	8008b70 <__ssputs_r+0x80>
 8008b0a:	6825      	ldr	r5, [r4, #0]
 8008b0c:	6909      	ldr	r1, [r1, #16]
 8008b0e:	eba5 0901 	sub.w	r9, r5, r1
 8008b12:	6965      	ldr	r5, [r4, #20]
 8008b14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	444b      	add	r3, r9
 8008b20:	106d      	asrs	r5, r5, #1
 8008b22:	429d      	cmp	r5, r3
 8008b24:	bf38      	it	cc
 8008b26:	461d      	movcc	r5, r3
 8008b28:	0553      	lsls	r3, r2, #21
 8008b2a:	d531      	bpl.n	8008b90 <__ssputs_r+0xa0>
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	f7ff ff6b 	bl	8008a08 <_malloc_r>
 8008b32:	4606      	mov	r6, r0
 8008b34:	b950      	cbnz	r0, 8008b4c <__ssputs_r+0x5c>
 8008b36:	230c      	movs	r3, #12
 8008b38:	f8ca 3000 	str.w	r3, [sl]
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295
 8008b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4c:	6921      	ldr	r1, [r4, #16]
 8008b4e:	464a      	mov	r2, r9
 8008b50:	f7fd fcc0 	bl	80064d4 <memcpy>
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b5e:	81a3      	strh	r3, [r4, #12]
 8008b60:	6126      	str	r6, [r4, #16]
 8008b62:	6165      	str	r5, [r4, #20]
 8008b64:	444e      	add	r6, r9
 8008b66:	eba5 0509 	sub.w	r5, r5, r9
 8008b6a:	6026      	str	r6, [r4, #0]
 8008b6c:	60a5      	str	r5, [r4, #8]
 8008b6e:	463e      	mov	r6, r7
 8008b70:	42be      	cmp	r6, r7
 8008b72:	d900      	bls.n	8008b76 <__ssputs_r+0x86>
 8008b74:	463e      	mov	r6, r7
 8008b76:	6820      	ldr	r0, [r4, #0]
 8008b78:	4632      	mov	r2, r6
 8008b7a:	4641      	mov	r1, r8
 8008b7c:	f000 fb5a 	bl	8009234 <memmove>
 8008b80:	68a3      	ldr	r3, [r4, #8]
 8008b82:	1b9b      	subs	r3, r3, r6
 8008b84:	60a3      	str	r3, [r4, #8]
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	4433      	add	r3, r6
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	e7db      	b.n	8008b48 <__ssputs_r+0x58>
 8008b90:	462a      	mov	r2, r5
 8008b92:	f000 fb75 	bl	8009280 <_realloc_r>
 8008b96:	4606      	mov	r6, r0
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d1e1      	bne.n	8008b60 <__ssputs_r+0x70>
 8008b9c:	6921      	ldr	r1, [r4, #16]
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	f7ff fec6 	bl	8008930 <_free_r>
 8008ba4:	e7c7      	b.n	8008b36 <__ssputs_r+0x46>
	...

08008ba8 <_svfiprintf_r>:
 8008ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	4698      	mov	r8, r3
 8008bae:	898b      	ldrh	r3, [r1, #12]
 8008bb0:	061b      	lsls	r3, r3, #24
 8008bb2:	b09d      	sub	sp, #116	; 0x74
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	460d      	mov	r5, r1
 8008bb8:	4614      	mov	r4, r2
 8008bba:	d50e      	bpl.n	8008bda <_svfiprintf_r+0x32>
 8008bbc:	690b      	ldr	r3, [r1, #16]
 8008bbe:	b963      	cbnz	r3, 8008bda <_svfiprintf_r+0x32>
 8008bc0:	2140      	movs	r1, #64	; 0x40
 8008bc2:	f7ff ff21 	bl	8008a08 <_malloc_r>
 8008bc6:	6028      	str	r0, [r5, #0]
 8008bc8:	6128      	str	r0, [r5, #16]
 8008bca:	b920      	cbnz	r0, 8008bd6 <_svfiprintf_r+0x2e>
 8008bcc:	230c      	movs	r3, #12
 8008bce:	603b      	str	r3, [r7, #0]
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd4:	e0d1      	b.n	8008d7a <_svfiprintf_r+0x1d2>
 8008bd6:	2340      	movs	r3, #64	; 0x40
 8008bd8:	616b      	str	r3, [r5, #20]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bde:	2320      	movs	r3, #32
 8008be0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008be4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008be8:	2330      	movs	r3, #48	; 0x30
 8008bea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d94 <_svfiprintf_r+0x1ec>
 8008bee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bf2:	f04f 0901 	mov.w	r9, #1
 8008bf6:	4623      	mov	r3, r4
 8008bf8:	469a      	mov	sl, r3
 8008bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bfe:	b10a      	cbz	r2, 8008c04 <_svfiprintf_r+0x5c>
 8008c00:	2a25      	cmp	r2, #37	; 0x25
 8008c02:	d1f9      	bne.n	8008bf8 <_svfiprintf_r+0x50>
 8008c04:	ebba 0b04 	subs.w	fp, sl, r4
 8008c08:	d00b      	beq.n	8008c22 <_svfiprintf_r+0x7a>
 8008c0a:	465b      	mov	r3, fp
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4638      	mov	r0, r7
 8008c12:	f7ff ff6d 	bl	8008af0 <__ssputs_r>
 8008c16:	3001      	adds	r0, #1
 8008c18:	f000 80aa 	beq.w	8008d70 <_svfiprintf_r+0x1c8>
 8008c1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c1e:	445a      	add	r2, fp
 8008c20:	9209      	str	r2, [sp, #36]	; 0x24
 8008c22:	f89a 3000 	ldrb.w	r3, [sl]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 80a2 	beq.w	8008d70 <_svfiprintf_r+0x1c8>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c36:	f10a 0a01 	add.w	sl, sl, #1
 8008c3a:	9304      	str	r3, [sp, #16]
 8008c3c:	9307      	str	r3, [sp, #28]
 8008c3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c42:	931a      	str	r3, [sp, #104]	; 0x68
 8008c44:	4654      	mov	r4, sl
 8008c46:	2205      	movs	r2, #5
 8008c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4c:	4851      	ldr	r0, [pc, #324]	; (8008d94 <_svfiprintf_r+0x1ec>)
 8008c4e:	f7f7 facf 	bl	80001f0 <memchr>
 8008c52:	9a04      	ldr	r2, [sp, #16]
 8008c54:	b9d8      	cbnz	r0, 8008c8e <_svfiprintf_r+0xe6>
 8008c56:	06d0      	lsls	r0, r2, #27
 8008c58:	bf44      	itt	mi
 8008c5a:	2320      	movmi	r3, #32
 8008c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c60:	0711      	lsls	r1, r2, #28
 8008c62:	bf44      	itt	mi
 8008c64:	232b      	movmi	r3, #43	; 0x2b
 8008c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c70:	d015      	beq.n	8008c9e <_svfiprintf_r+0xf6>
 8008c72:	9a07      	ldr	r2, [sp, #28]
 8008c74:	4654      	mov	r4, sl
 8008c76:	2000      	movs	r0, #0
 8008c78:	f04f 0c0a 	mov.w	ip, #10
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c82:	3b30      	subs	r3, #48	; 0x30
 8008c84:	2b09      	cmp	r3, #9
 8008c86:	d94e      	bls.n	8008d26 <_svfiprintf_r+0x17e>
 8008c88:	b1b0      	cbz	r0, 8008cb8 <_svfiprintf_r+0x110>
 8008c8a:	9207      	str	r2, [sp, #28]
 8008c8c:	e014      	b.n	8008cb8 <_svfiprintf_r+0x110>
 8008c8e:	eba0 0308 	sub.w	r3, r0, r8
 8008c92:	fa09 f303 	lsl.w	r3, r9, r3
 8008c96:	4313      	orrs	r3, r2
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	46a2      	mov	sl, r4
 8008c9c:	e7d2      	b.n	8008c44 <_svfiprintf_r+0x9c>
 8008c9e:	9b03      	ldr	r3, [sp, #12]
 8008ca0:	1d19      	adds	r1, r3, #4
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	9103      	str	r1, [sp, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfbb      	ittet	lt
 8008caa:	425b      	neglt	r3, r3
 8008cac:	f042 0202 	orrlt.w	r2, r2, #2
 8008cb0:	9307      	strge	r3, [sp, #28]
 8008cb2:	9307      	strlt	r3, [sp, #28]
 8008cb4:	bfb8      	it	lt
 8008cb6:	9204      	strlt	r2, [sp, #16]
 8008cb8:	7823      	ldrb	r3, [r4, #0]
 8008cba:	2b2e      	cmp	r3, #46	; 0x2e
 8008cbc:	d10c      	bne.n	8008cd8 <_svfiprintf_r+0x130>
 8008cbe:	7863      	ldrb	r3, [r4, #1]
 8008cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc2:	d135      	bne.n	8008d30 <_svfiprintf_r+0x188>
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	1d1a      	adds	r2, r3, #4
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	9203      	str	r2, [sp, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	bfb8      	it	lt
 8008cd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cd4:	3402      	adds	r4, #2
 8008cd6:	9305      	str	r3, [sp, #20]
 8008cd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008da4 <_svfiprintf_r+0x1fc>
 8008cdc:	7821      	ldrb	r1, [r4, #0]
 8008cde:	2203      	movs	r2, #3
 8008ce0:	4650      	mov	r0, sl
 8008ce2:	f7f7 fa85 	bl	80001f0 <memchr>
 8008ce6:	b140      	cbz	r0, 8008cfa <_svfiprintf_r+0x152>
 8008ce8:	2340      	movs	r3, #64	; 0x40
 8008cea:	eba0 000a 	sub.w	r0, r0, sl
 8008cee:	fa03 f000 	lsl.w	r0, r3, r0
 8008cf2:	9b04      	ldr	r3, [sp, #16]
 8008cf4:	4303      	orrs	r3, r0
 8008cf6:	3401      	adds	r4, #1
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfe:	4826      	ldr	r0, [pc, #152]	; (8008d98 <_svfiprintf_r+0x1f0>)
 8008d00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d04:	2206      	movs	r2, #6
 8008d06:	f7f7 fa73 	bl	80001f0 <memchr>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d038      	beq.n	8008d80 <_svfiprintf_r+0x1d8>
 8008d0e:	4b23      	ldr	r3, [pc, #140]	; (8008d9c <_svfiprintf_r+0x1f4>)
 8008d10:	bb1b      	cbnz	r3, 8008d5a <_svfiprintf_r+0x1b2>
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	3307      	adds	r3, #7
 8008d16:	f023 0307 	bic.w	r3, r3, #7
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	9303      	str	r3, [sp, #12]
 8008d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d20:	4433      	add	r3, r6
 8008d22:	9309      	str	r3, [sp, #36]	; 0x24
 8008d24:	e767      	b.n	8008bf6 <_svfiprintf_r+0x4e>
 8008d26:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	2001      	movs	r0, #1
 8008d2e:	e7a5      	b.n	8008c7c <_svfiprintf_r+0xd4>
 8008d30:	2300      	movs	r3, #0
 8008d32:	3401      	adds	r4, #1
 8008d34:	9305      	str	r3, [sp, #20]
 8008d36:	4619      	mov	r1, r3
 8008d38:	f04f 0c0a 	mov.w	ip, #10
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d42:	3a30      	subs	r2, #48	; 0x30
 8008d44:	2a09      	cmp	r2, #9
 8008d46:	d903      	bls.n	8008d50 <_svfiprintf_r+0x1a8>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d0c5      	beq.n	8008cd8 <_svfiprintf_r+0x130>
 8008d4c:	9105      	str	r1, [sp, #20]
 8008d4e:	e7c3      	b.n	8008cd8 <_svfiprintf_r+0x130>
 8008d50:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d54:	4604      	mov	r4, r0
 8008d56:	2301      	movs	r3, #1
 8008d58:	e7f0      	b.n	8008d3c <_svfiprintf_r+0x194>
 8008d5a:	ab03      	add	r3, sp, #12
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	462a      	mov	r2, r5
 8008d60:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <_svfiprintf_r+0x1f8>)
 8008d62:	a904      	add	r1, sp, #16
 8008d64:	4638      	mov	r0, r7
 8008d66:	f7fd fc6b 	bl	8006640 <_printf_float>
 8008d6a:	1c42      	adds	r2, r0, #1
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	d1d6      	bne.n	8008d1e <_svfiprintf_r+0x176>
 8008d70:	89ab      	ldrh	r3, [r5, #12]
 8008d72:	065b      	lsls	r3, r3, #25
 8008d74:	f53f af2c 	bmi.w	8008bd0 <_svfiprintf_r+0x28>
 8008d78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d7a:	b01d      	add	sp, #116	; 0x74
 8008d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d80:	ab03      	add	r3, sp, #12
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	462a      	mov	r2, r5
 8008d86:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <_svfiprintf_r+0x1f8>)
 8008d88:	a904      	add	r1, sp, #16
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	f7fd fefc 	bl	8006b88 <_printf_i>
 8008d90:	e7eb      	b.n	8008d6a <_svfiprintf_r+0x1c2>
 8008d92:	bf00      	nop
 8008d94:	080098cc 	.word	0x080098cc
 8008d98:	080098d6 	.word	0x080098d6
 8008d9c:	08006641 	.word	0x08006641
 8008da0:	08008af1 	.word	0x08008af1
 8008da4:	080098d2 	.word	0x080098d2

08008da8 <__sfputc_r>:
 8008da8:	6893      	ldr	r3, [r2, #8]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	b410      	push	{r4}
 8008db0:	6093      	str	r3, [r2, #8]
 8008db2:	da08      	bge.n	8008dc6 <__sfputc_r+0x1e>
 8008db4:	6994      	ldr	r4, [r2, #24]
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	db01      	blt.n	8008dbe <__sfputc_r+0x16>
 8008dba:	290a      	cmp	r1, #10
 8008dbc:	d103      	bne.n	8008dc6 <__sfputc_r+0x1e>
 8008dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dc2:	f7fe b8b5 	b.w	8006f30 <__swbuf_r>
 8008dc6:	6813      	ldr	r3, [r2, #0]
 8008dc8:	1c58      	adds	r0, r3, #1
 8008dca:	6010      	str	r0, [r2, #0]
 8008dcc:	7019      	strb	r1, [r3, #0]
 8008dce:	4608      	mov	r0, r1
 8008dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <__sfputs_r>:
 8008dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd8:	4606      	mov	r6, r0
 8008dda:	460f      	mov	r7, r1
 8008ddc:	4614      	mov	r4, r2
 8008dde:	18d5      	adds	r5, r2, r3
 8008de0:	42ac      	cmp	r4, r5
 8008de2:	d101      	bne.n	8008de8 <__sfputs_r+0x12>
 8008de4:	2000      	movs	r0, #0
 8008de6:	e007      	b.n	8008df8 <__sfputs_r+0x22>
 8008de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dec:	463a      	mov	r2, r7
 8008dee:	4630      	mov	r0, r6
 8008df0:	f7ff ffda 	bl	8008da8 <__sfputc_r>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d1f3      	bne.n	8008de0 <__sfputs_r+0xa>
 8008df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dfc <_vfiprintf_r>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	460d      	mov	r5, r1
 8008e02:	b09d      	sub	sp, #116	; 0x74
 8008e04:	4614      	mov	r4, r2
 8008e06:	4698      	mov	r8, r3
 8008e08:	4606      	mov	r6, r0
 8008e0a:	b118      	cbz	r0, 8008e14 <_vfiprintf_r+0x18>
 8008e0c:	6983      	ldr	r3, [r0, #24]
 8008e0e:	b90b      	cbnz	r3, 8008e14 <_vfiprintf_r+0x18>
 8008e10:	f7ff f8e2 	bl	8007fd8 <__sinit>
 8008e14:	4b89      	ldr	r3, [pc, #548]	; (800903c <_vfiprintf_r+0x240>)
 8008e16:	429d      	cmp	r5, r3
 8008e18:	d11b      	bne.n	8008e52 <_vfiprintf_r+0x56>
 8008e1a:	6875      	ldr	r5, [r6, #4]
 8008e1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e1e:	07d9      	lsls	r1, r3, #31
 8008e20:	d405      	bmi.n	8008e2e <_vfiprintf_r+0x32>
 8008e22:	89ab      	ldrh	r3, [r5, #12]
 8008e24:	059a      	lsls	r2, r3, #22
 8008e26:	d402      	bmi.n	8008e2e <_vfiprintf_r+0x32>
 8008e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e2a:	f7ff f978 	bl	800811e <__retarget_lock_acquire_recursive>
 8008e2e:	89ab      	ldrh	r3, [r5, #12]
 8008e30:	071b      	lsls	r3, r3, #28
 8008e32:	d501      	bpl.n	8008e38 <_vfiprintf_r+0x3c>
 8008e34:	692b      	ldr	r3, [r5, #16]
 8008e36:	b9eb      	cbnz	r3, 8008e74 <_vfiprintf_r+0x78>
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7fe f8ca 	bl	8006fd4 <__swsetup_r>
 8008e40:	b1c0      	cbz	r0, 8008e74 <_vfiprintf_r+0x78>
 8008e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e44:	07dc      	lsls	r4, r3, #31
 8008e46:	d50e      	bpl.n	8008e66 <_vfiprintf_r+0x6a>
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4c:	b01d      	add	sp, #116	; 0x74
 8008e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e52:	4b7b      	ldr	r3, [pc, #492]	; (8009040 <_vfiprintf_r+0x244>)
 8008e54:	429d      	cmp	r5, r3
 8008e56:	d101      	bne.n	8008e5c <_vfiprintf_r+0x60>
 8008e58:	68b5      	ldr	r5, [r6, #8]
 8008e5a:	e7df      	b.n	8008e1c <_vfiprintf_r+0x20>
 8008e5c:	4b79      	ldr	r3, [pc, #484]	; (8009044 <_vfiprintf_r+0x248>)
 8008e5e:	429d      	cmp	r5, r3
 8008e60:	bf08      	it	eq
 8008e62:	68f5      	ldreq	r5, [r6, #12]
 8008e64:	e7da      	b.n	8008e1c <_vfiprintf_r+0x20>
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	0598      	lsls	r0, r3, #22
 8008e6a:	d4ed      	bmi.n	8008e48 <_vfiprintf_r+0x4c>
 8008e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e6e:	f7ff f957 	bl	8008120 <__retarget_lock_release_recursive>
 8008e72:	e7e9      	b.n	8008e48 <_vfiprintf_r+0x4c>
 8008e74:	2300      	movs	r3, #0
 8008e76:	9309      	str	r3, [sp, #36]	; 0x24
 8008e78:	2320      	movs	r3, #32
 8008e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e82:	2330      	movs	r3, #48	; 0x30
 8008e84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009048 <_vfiprintf_r+0x24c>
 8008e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e8c:	f04f 0901 	mov.w	r9, #1
 8008e90:	4623      	mov	r3, r4
 8008e92:	469a      	mov	sl, r3
 8008e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e98:	b10a      	cbz	r2, 8008e9e <_vfiprintf_r+0xa2>
 8008e9a:	2a25      	cmp	r2, #37	; 0x25
 8008e9c:	d1f9      	bne.n	8008e92 <_vfiprintf_r+0x96>
 8008e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8008ea2:	d00b      	beq.n	8008ebc <_vfiprintf_r+0xc0>
 8008ea4:	465b      	mov	r3, fp
 8008ea6:	4622      	mov	r2, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7ff ff93 	bl	8008dd6 <__sfputs_r>
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	f000 80aa 	beq.w	800900a <_vfiprintf_r+0x20e>
 8008eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb8:	445a      	add	r2, fp
 8008eba:	9209      	str	r2, [sp, #36]	; 0x24
 8008ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 80a2 	beq.w	800900a <_vfiprintf_r+0x20e>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ed0:	f10a 0a01 	add.w	sl, sl, #1
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	9307      	str	r3, [sp, #28]
 8008ed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008edc:	931a      	str	r3, [sp, #104]	; 0x68
 8008ede:	4654      	mov	r4, sl
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee6:	4858      	ldr	r0, [pc, #352]	; (8009048 <_vfiprintf_r+0x24c>)
 8008ee8:	f7f7 f982 	bl	80001f0 <memchr>
 8008eec:	9a04      	ldr	r2, [sp, #16]
 8008eee:	b9d8      	cbnz	r0, 8008f28 <_vfiprintf_r+0x12c>
 8008ef0:	06d1      	lsls	r1, r2, #27
 8008ef2:	bf44      	itt	mi
 8008ef4:	2320      	movmi	r3, #32
 8008ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008efa:	0713      	lsls	r3, r2, #28
 8008efc:	bf44      	itt	mi
 8008efe:	232b      	movmi	r3, #43	; 0x2b
 8008f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f04:	f89a 3000 	ldrb.w	r3, [sl]
 8008f08:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0a:	d015      	beq.n	8008f38 <_vfiprintf_r+0x13c>
 8008f0c:	9a07      	ldr	r2, [sp, #28]
 8008f0e:	4654      	mov	r4, sl
 8008f10:	2000      	movs	r0, #0
 8008f12:	f04f 0c0a 	mov.w	ip, #10
 8008f16:	4621      	mov	r1, r4
 8008f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f1c:	3b30      	subs	r3, #48	; 0x30
 8008f1e:	2b09      	cmp	r3, #9
 8008f20:	d94e      	bls.n	8008fc0 <_vfiprintf_r+0x1c4>
 8008f22:	b1b0      	cbz	r0, 8008f52 <_vfiprintf_r+0x156>
 8008f24:	9207      	str	r2, [sp, #28]
 8008f26:	e014      	b.n	8008f52 <_vfiprintf_r+0x156>
 8008f28:	eba0 0308 	sub.w	r3, r0, r8
 8008f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f30:	4313      	orrs	r3, r2
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	46a2      	mov	sl, r4
 8008f36:	e7d2      	b.n	8008ede <_vfiprintf_r+0xe2>
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	1d19      	adds	r1, r3, #4
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	9103      	str	r1, [sp, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	bfbb      	ittet	lt
 8008f44:	425b      	neglt	r3, r3
 8008f46:	f042 0202 	orrlt.w	r2, r2, #2
 8008f4a:	9307      	strge	r3, [sp, #28]
 8008f4c:	9307      	strlt	r3, [sp, #28]
 8008f4e:	bfb8      	it	lt
 8008f50:	9204      	strlt	r2, [sp, #16]
 8008f52:	7823      	ldrb	r3, [r4, #0]
 8008f54:	2b2e      	cmp	r3, #46	; 0x2e
 8008f56:	d10c      	bne.n	8008f72 <_vfiprintf_r+0x176>
 8008f58:	7863      	ldrb	r3, [r4, #1]
 8008f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5c:	d135      	bne.n	8008fca <_vfiprintf_r+0x1ce>
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	1d1a      	adds	r2, r3, #4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9203      	str	r2, [sp, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfb8      	it	lt
 8008f6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f6e:	3402      	adds	r4, #2
 8008f70:	9305      	str	r3, [sp, #20]
 8008f72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009058 <_vfiprintf_r+0x25c>
 8008f76:	7821      	ldrb	r1, [r4, #0]
 8008f78:	2203      	movs	r2, #3
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	f7f7 f938 	bl	80001f0 <memchr>
 8008f80:	b140      	cbz	r0, 8008f94 <_vfiprintf_r+0x198>
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	eba0 000a 	sub.w	r0, r0, sl
 8008f88:	fa03 f000 	lsl.w	r0, r3, r0
 8008f8c:	9b04      	ldr	r3, [sp, #16]
 8008f8e:	4303      	orrs	r3, r0
 8008f90:	3401      	adds	r4, #1
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f98:	482c      	ldr	r0, [pc, #176]	; (800904c <_vfiprintf_r+0x250>)
 8008f9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f9e:	2206      	movs	r2, #6
 8008fa0:	f7f7 f926 	bl	80001f0 <memchr>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d03f      	beq.n	8009028 <_vfiprintf_r+0x22c>
 8008fa8:	4b29      	ldr	r3, [pc, #164]	; (8009050 <_vfiprintf_r+0x254>)
 8008faa:	bb1b      	cbnz	r3, 8008ff4 <_vfiprintf_r+0x1f8>
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	3307      	adds	r3, #7
 8008fb0:	f023 0307 	bic.w	r3, r3, #7
 8008fb4:	3308      	adds	r3, #8
 8008fb6:	9303      	str	r3, [sp, #12]
 8008fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fba:	443b      	add	r3, r7
 8008fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008fbe:	e767      	b.n	8008e90 <_vfiprintf_r+0x94>
 8008fc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	e7a5      	b.n	8008f16 <_vfiprintf_r+0x11a>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	3401      	adds	r4, #1
 8008fce:	9305      	str	r3, [sp, #20]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	f04f 0c0a 	mov.w	ip, #10
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fdc:	3a30      	subs	r2, #48	; 0x30
 8008fde:	2a09      	cmp	r2, #9
 8008fe0:	d903      	bls.n	8008fea <_vfiprintf_r+0x1ee>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d0c5      	beq.n	8008f72 <_vfiprintf_r+0x176>
 8008fe6:	9105      	str	r1, [sp, #20]
 8008fe8:	e7c3      	b.n	8008f72 <_vfiprintf_r+0x176>
 8008fea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fee:	4604      	mov	r4, r0
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e7f0      	b.n	8008fd6 <_vfiprintf_r+0x1da>
 8008ff4:	ab03      	add	r3, sp, #12
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	462a      	mov	r2, r5
 8008ffa:	4b16      	ldr	r3, [pc, #88]	; (8009054 <_vfiprintf_r+0x258>)
 8008ffc:	a904      	add	r1, sp, #16
 8008ffe:	4630      	mov	r0, r6
 8009000:	f7fd fb1e 	bl	8006640 <_printf_float>
 8009004:	4607      	mov	r7, r0
 8009006:	1c78      	adds	r0, r7, #1
 8009008:	d1d6      	bne.n	8008fb8 <_vfiprintf_r+0x1bc>
 800900a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800900c:	07d9      	lsls	r1, r3, #31
 800900e:	d405      	bmi.n	800901c <_vfiprintf_r+0x220>
 8009010:	89ab      	ldrh	r3, [r5, #12]
 8009012:	059a      	lsls	r2, r3, #22
 8009014:	d402      	bmi.n	800901c <_vfiprintf_r+0x220>
 8009016:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009018:	f7ff f882 	bl	8008120 <__retarget_lock_release_recursive>
 800901c:	89ab      	ldrh	r3, [r5, #12]
 800901e:	065b      	lsls	r3, r3, #25
 8009020:	f53f af12 	bmi.w	8008e48 <_vfiprintf_r+0x4c>
 8009024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009026:	e711      	b.n	8008e4c <_vfiprintf_r+0x50>
 8009028:	ab03      	add	r3, sp, #12
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	462a      	mov	r2, r5
 800902e:	4b09      	ldr	r3, [pc, #36]	; (8009054 <_vfiprintf_r+0x258>)
 8009030:	a904      	add	r1, sp, #16
 8009032:	4630      	mov	r0, r6
 8009034:	f7fd fda8 	bl	8006b88 <_printf_i>
 8009038:	e7e4      	b.n	8009004 <_vfiprintf_r+0x208>
 800903a:	bf00      	nop
 800903c:	08009730 	.word	0x08009730
 8009040:	08009750 	.word	0x08009750
 8009044:	08009710 	.word	0x08009710
 8009048:	080098cc 	.word	0x080098cc
 800904c:	080098d6 	.word	0x080098d6
 8009050:	08006641 	.word	0x08006641
 8009054:	08008dd7 	.word	0x08008dd7
 8009058:	080098d2 	.word	0x080098d2

0800905c <_sbrk_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4d06      	ldr	r5, [pc, #24]	; (8009078 <_sbrk_r+0x1c>)
 8009060:	2300      	movs	r3, #0
 8009062:	4604      	mov	r4, r0
 8009064:	4608      	mov	r0, r1
 8009066:	602b      	str	r3, [r5, #0]
 8009068:	f7f8 ffac 	bl	8001fc4 <_sbrk>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_sbrk_r+0x1a>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	b103      	cbz	r3, 8009076 <_sbrk_r+0x1a>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	20000468 	.word	0x20000468

0800907c <__sread>:
 800907c:	b510      	push	{r4, lr}
 800907e:	460c      	mov	r4, r1
 8009080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009084:	f000 f92c 	bl	80092e0 <_read_r>
 8009088:	2800      	cmp	r0, #0
 800908a:	bfab      	itete	ge
 800908c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800908e:	89a3      	ldrhlt	r3, [r4, #12]
 8009090:	181b      	addge	r3, r3, r0
 8009092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009096:	bfac      	ite	ge
 8009098:	6563      	strge	r3, [r4, #84]	; 0x54
 800909a:	81a3      	strhlt	r3, [r4, #12]
 800909c:	bd10      	pop	{r4, pc}

0800909e <__swrite>:
 800909e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	461f      	mov	r7, r3
 80090a4:	898b      	ldrh	r3, [r1, #12]
 80090a6:	05db      	lsls	r3, r3, #23
 80090a8:	4605      	mov	r5, r0
 80090aa:	460c      	mov	r4, r1
 80090ac:	4616      	mov	r6, r2
 80090ae:	d505      	bpl.n	80090bc <__swrite+0x1e>
 80090b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b4:	2302      	movs	r3, #2
 80090b6:	2200      	movs	r2, #0
 80090b8:	f000 f898 	bl	80091ec <_lseek_r>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090c6:	81a3      	strh	r3, [r4, #12]
 80090c8:	4632      	mov	r2, r6
 80090ca:	463b      	mov	r3, r7
 80090cc:	4628      	mov	r0, r5
 80090ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090d2:	f000 b817 	b.w	8009104 <_write_r>

080090d6 <__sseek>:
 80090d6:	b510      	push	{r4, lr}
 80090d8:	460c      	mov	r4, r1
 80090da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090de:	f000 f885 	bl	80091ec <_lseek_r>
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	89a3      	ldrh	r3, [r4, #12]
 80090e6:	bf15      	itete	ne
 80090e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80090ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090f2:	81a3      	strheq	r3, [r4, #12]
 80090f4:	bf18      	it	ne
 80090f6:	81a3      	strhne	r3, [r4, #12]
 80090f8:	bd10      	pop	{r4, pc}

080090fa <__sclose>:
 80090fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090fe:	f000 b831 	b.w	8009164 <_close_r>
	...

08009104 <_write_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d07      	ldr	r5, [pc, #28]	; (8009124 <_write_r+0x20>)
 8009108:	4604      	mov	r4, r0
 800910a:	4608      	mov	r0, r1
 800910c:	4611      	mov	r1, r2
 800910e:	2200      	movs	r2, #0
 8009110:	602a      	str	r2, [r5, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	f7f8 ff05 	bl	8001f22 <_write>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_write_r+0x1e>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_write_r+0x1e>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	20000468 	.word	0x20000468

08009128 <__assert_func>:
 8009128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800912a:	4614      	mov	r4, r2
 800912c:	461a      	mov	r2, r3
 800912e:	4b09      	ldr	r3, [pc, #36]	; (8009154 <__assert_func+0x2c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4605      	mov	r5, r0
 8009134:	68d8      	ldr	r0, [r3, #12]
 8009136:	b14c      	cbz	r4, 800914c <__assert_func+0x24>
 8009138:	4b07      	ldr	r3, [pc, #28]	; (8009158 <__assert_func+0x30>)
 800913a:	9100      	str	r1, [sp, #0]
 800913c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009140:	4906      	ldr	r1, [pc, #24]	; (800915c <__assert_func+0x34>)
 8009142:	462b      	mov	r3, r5
 8009144:	f000 f81e 	bl	8009184 <fiprintf>
 8009148:	f000 f8e9 	bl	800931e <abort>
 800914c:	4b04      	ldr	r3, [pc, #16]	; (8009160 <__assert_func+0x38>)
 800914e:	461c      	mov	r4, r3
 8009150:	e7f3      	b.n	800913a <__assert_func+0x12>
 8009152:	bf00      	nop
 8009154:	20000018 	.word	0x20000018
 8009158:	080098dd 	.word	0x080098dd
 800915c:	080098ea 	.word	0x080098ea
 8009160:	08009918 	.word	0x08009918

08009164 <_close_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4d06      	ldr	r5, [pc, #24]	; (8009180 <_close_r+0x1c>)
 8009168:	2300      	movs	r3, #0
 800916a:	4604      	mov	r4, r0
 800916c:	4608      	mov	r0, r1
 800916e:	602b      	str	r3, [r5, #0]
 8009170:	f7f8 fef3 	bl	8001f5a <_close>
 8009174:	1c43      	adds	r3, r0, #1
 8009176:	d102      	bne.n	800917e <_close_r+0x1a>
 8009178:	682b      	ldr	r3, [r5, #0]
 800917a:	b103      	cbz	r3, 800917e <_close_r+0x1a>
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	bd38      	pop	{r3, r4, r5, pc}
 8009180:	20000468 	.word	0x20000468

08009184 <fiprintf>:
 8009184:	b40e      	push	{r1, r2, r3}
 8009186:	b503      	push	{r0, r1, lr}
 8009188:	4601      	mov	r1, r0
 800918a:	ab03      	add	r3, sp, #12
 800918c:	4805      	ldr	r0, [pc, #20]	; (80091a4 <fiprintf+0x20>)
 800918e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009192:	6800      	ldr	r0, [r0, #0]
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	f7ff fe31 	bl	8008dfc <_vfiprintf_r>
 800919a:	b002      	add	sp, #8
 800919c:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a0:	b003      	add	sp, #12
 80091a2:	4770      	bx	lr
 80091a4:	20000018 	.word	0x20000018

080091a8 <_fstat_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4d07      	ldr	r5, [pc, #28]	; (80091c8 <_fstat_r+0x20>)
 80091ac:	2300      	movs	r3, #0
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	4611      	mov	r1, r2
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	f7f8 fedc 	bl	8001f72 <_fstat>
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	d102      	bne.n	80091c4 <_fstat_r+0x1c>
 80091be:	682b      	ldr	r3, [r5, #0]
 80091c0:	b103      	cbz	r3, 80091c4 <_fstat_r+0x1c>
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	bd38      	pop	{r3, r4, r5, pc}
 80091c6:	bf00      	nop
 80091c8:	20000468 	.word	0x20000468

080091cc <_isatty_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d06      	ldr	r5, [pc, #24]	; (80091e8 <_isatty_r+0x1c>)
 80091d0:	2300      	movs	r3, #0
 80091d2:	4604      	mov	r4, r0
 80091d4:	4608      	mov	r0, r1
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	f7f8 fedb 	bl	8001f92 <_isatty>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d102      	bne.n	80091e6 <_isatty_r+0x1a>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	b103      	cbz	r3, 80091e6 <_isatty_r+0x1a>
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	20000468 	.word	0x20000468

080091ec <_lseek_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	4d07      	ldr	r5, [pc, #28]	; (800920c <_lseek_r+0x20>)
 80091f0:	4604      	mov	r4, r0
 80091f2:	4608      	mov	r0, r1
 80091f4:	4611      	mov	r1, r2
 80091f6:	2200      	movs	r2, #0
 80091f8:	602a      	str	r2, [r5, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	f7f8 fed4 	bl	8001fa8 <_lseek>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_lseek_r+0x1e>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_lseek_r+0x1e>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	20000468 	.word	0x20000468

08009210 <__ascii_mbtowc>:
 8009210:	b082      	sub	sp, #8
 8009212:	b901      	cbnz	r1, 8009216 <__ascii_mbtowc+0x6>
 8009214:	a901      	add	r1, sp, #4
 8009216:	b142      	cbz	r2, 800922a <__ascii_mbtowc+0x1a>
 8009218:	b14b      	cbz	r3, 800922e <__ascii_mbtowc+0x1e>
 800921a:	7813      	ldrb	r3, [r2, #0]
 800921c:	600b      	str	r3, [r1, #0]
 800921e:	7812      	ldrb	r2, [r2, #0]
 8009220:	1e10      	subs	r0, r2, #0
 8009222:	bf18      	it	ne
 8009224:	2001      	movne	r0, #1
 8009226:	b002      	add	sp, #8
 8009228:	4770      	bx	lr
 800922a:	4610      	mov	r0, r2
 800922c:	e7fb      	b.n	8009226 <__ascii_mbtowc+0x16>
 800922e:	f06f 0001 	mvn.w	r0, #1
 8009232:	e7f8      	b.n	8009226 <__ascii_mbtowc+0x16>

08009234 <memmove>:
 8009234:	4288      	cmp	r0, r1
 8009236:	b510      	push	{r4, lr}
 8009238:	eb01 0402 	add.w	r4, r1, r2
 800923c:	d902      	bls.n	8009244 <memmove+0x10>
 800923e:	4284      	cmp	r4, r0
 8009240:	4623      	mov	r3, r4
 8009242:	d807      	bhi.n	8009254 <memmove+0x20>
 8009244:	1e43      	subs	r3, r0, #1
 8009246:	42a1      	cmp	r1, r4
 8009248:	d008      	beq.n	800925c <memmove+0x28>
 800924a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800924e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009252:	e7f8      	b.n	8009246 <memmove+0x12>
 8009254:	4402      	add	r2, r0
 8009256:	4601      	mov	r1, r0
 8009258:	428a      	cmp	r2, r1
 800925a:	d100      	bne.n	800925e <memmove+0x2a>
 800925c:	bd10      	pop	{r4, pc}
 800925e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009266:	e7f7      	b.n	8009258 <memmove+0x24>

08009268 <__malloc_lock>:
 8009268:	4801      	ldr	r0, [pc, #4]	; (8009270 <__malloc_lock+0x8>)
 800926a:	f7fe bf58 	b.w	800811e <__retarget_lock_acquire_recursive>
 800926e:	bf00      	nop
 8009270:	2000045c 	.word	0x2000045c

08009274 <__malloc_unlock>:
 8009274:	4801      	ldr	r0, [pc, #4]	; (800927c <__malloc_unlock+0x8>)
 8009276:	f7fe bf53 	b.w	8008120 <__retarget_lock_release_recursive>
 800927a:	bf00      	nop
 800927c:	2000045c 	.word	0x2000045c

08009280 <_realloc_r>:
 8009280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009284:	4680      	mov	r8, r0
 8009286:	4614      	mov	r4, r2
 8009288:	460e      	mov	r6, r1
 800928a:	b921      	cbnz	r1, 8009296 <_realloc_r+0x16>
 800928c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009290:	4611      	mov	r1, r2
 8009292:	f7ff bbb9 	b.w	8008a08 <_malloc_r>
 8009296:	b92a      	cbnz	r2, 80092a4 <_realloc_r+0x24>
 8009298:	f7ff fb4a 	bl	8008930 <_free_r>
 800929c:	4625      	mov	r5, r4
 800929e:	4628      	mov	r0, r5
 80092a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a4:	f000 f842 	bl	800932c <_malloc_usable_size_r>
 80092a8:	4284      	cmp	r4, r0
 80092aa:	4607      	mov	r7, r0
 80092ac:	d802      	bhi.n	80092b4 <_realloc_r+0x34>
 80092ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092b2:	d812      	bhi.n	80092da <_realloc_r+0x5a>
 80092b4:	4621      	mov	r1, r4
 80092b6:	4640      	mov	r0, r8
 80092b8:	f7ff fba6 	bl	8008a08 <_malloc_r>
 80092bc:	4605      	mov	r5, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d0ed      	beq.n	800929e <_realloc_r+0x1e>
 80092c2:	42bc      	cmp	r4, r7
 80092c4:	4622      	mov	r2, r4
 80092c6:	4631      	mov	r1, r6
 80092c8:	bf28      	it	cs
 80092ca:	463a      	movcs	r2, r7
 80092cc:	f7fd f902 	bl	80064d4 <memcpy>
 80092d0:	4631      	mov	r1, r6
 80092d2:	4640      	mov	r0, r8
 80092d4:	f7ff fb2c 	bl	8008930 <_free_r>
 80092d8:	e7e1      	b.n	800929e <_realloc_r+0x1e>
 80092da:	4635      	mov	r5, r6
 80092dc:	e7df      	b.n	800929e <_realloc_r+0x1e>
	...

080092e0 <_read_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d07      	ldr	r5, [pc, #28]	; (8009300 <_read_r+0x20>)
 80092e4:	4604      	mov	r4, r0
 80092e6:	4608      	mov	r0, r1
 80092e8:	4611      	mov	r1, r2
 80092ea:	2200      	movs	r2, #0
 80092ec:	602a      	str	r2, [r5, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	f7f8 fdfa 	bl	8001ee8 <_read>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d102      	bne.n	80092fe <_read_r+0x1e>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	b103      	cbz	r3, 80092fe <_read_r+0x1e>
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	20000468 	.word	0x20000468

08009304 <__ascii_wctomb>:
 8009304:	b149      	cbz	r1, 800931a <__ascii_wctomb+0x16>
 8009306:	2aff      	cmp	r2, #255	; 0xff
 8009308:	bf85      	ittet	hi
 800930a:	238a      	movhi	r3, #138	; 0x8a
 800930c:	6003      	strhi	r3, [r0, #0]
 800930e:	700a      	strbls	r2, [r1, #0]
 8009310:	f04f 30ff 	movhi.w	r0, #4294967295
 8009314:	bf98      	it	ls
 8009316:	2001      	movls	r0, #1
 8009318:	4770      	bx	lr
 800931a:	4608      	mov	r0, r1
 800931c:	4770      	bx	lr

0800931e <abort>:
 800931e:	b508      	push	{r3, lr}
 8009320:	2006      	movs	r0, #6
 8009322:	f000 f833 	bl	800938c <raise>
 8009326:	2001      	movs	r0, #1
 8009328:	f7f8 fdd4 	bl	8001ed4 <_exit>

0800932c <_malloc_usable_size_r>:
 800932c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009330:	1f18      	subs	r0, r3, #4
 8009332:	2b00      	cmp	r3, #0
 8009334:	bfbc      	itt	lt
 8009336:	580b      	ldrlt	r3, [r1, r0]
 8009338:	18c0      	addlt	r0, r0, r3
 800933a:	4770      	bx	lr

0800933c <_raise_r>:
 800933c:	291f      	cmp	r1, #31
 800933e:	b538      	push	{r3, r4, r5, lr}
 8009340:	4604      	mov	r4, r0
 8009342:	460d      	mov	r5, r1
 8009344:	d904      	bls.n	8009350 <_raise_r+0x14>
 8009346:	2316      	movs	r3, #22
 8009348:	6003      	str	r3, [r0, #0]
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009352:	b112      	cbz	r2, 800935a <_raise_r+0x1e>
 8009354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009358:	b94b      	cbnz	r3, 800936e <_raise_r+0x32>
 800935a:	4620      	mov	r0, r4
 800935c:	f000 f830 	bl	80093c0 <_getpid_r>
 8009360:	462a      	mov	r2, r5
 8009362:	4601      	mov	r1, r0
 8009364:	4620      	mov	r0, r4
 8009366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800936a:	f000 b817 	b.w	800939c <_kill_r>
 800936e:	2b01      	cmp	r3, #1
 8009370:	d00a      	beq.n	8009388 <_raise_r+0x4c>
 8009372:	1c59      	adds	r1, r3, #1
 8009374:	d103      	bne.n	800937e <_raise_r+0x42>
 8009376:	2316      	movs	r3, #22
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	2001      	movs	r0, #1
 800937c:	e7e7      	b.n	800934e <_raise_r+0x12>
 800937e:	2400      	movs	r4, #0
 8009380:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009384:	4628      	mov	r0, r5
 8009386:	4798      	blx	r3
 8009388:	2000      	movs	r0, #0
 800938a:	e7e0      	b.n	800934e <_raise_r+0x12>

0800938c <raise>:
 800938c:	4b02      	ldr	r3, [pc, #8]	; (8009398 <raise+0xc>)
 800938e:	4601      	mov	r1, r0
 8009390:	6818      	ldr	r0, [r3, #0]
 8009392:	f7ff bfd3 	b.w	800933c <_raise_r>
 8009396:	bf00      	nop
 8009398:	20000018 	.word	0x20000018

0800939c <_kill_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4d07      	ldr	r5, [pc, #28]	; (80093bc <_kill_r+0x20>)
 80093a0:	2300      	movs	r3, #0
 80093a2:	4604      	mov	r4, r0
 80093a4:	4608      	mov	r0, r1
 80093a6:	4611      	mov	r1, r2
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	f7f8 fd83 	bl	8001eb4 <_kill>
 80093ae:	1c43      	adds	r3, r0, #1
 80093b0:	d102      	bne.n	80093b8 <_kill_r+0x1c>
 80093b2:	682b      	ldr	r3, [r5, #0]
 80093b4:	b103      	cbz	r3, 80093b8 <_kill_r+0x1c>
 80093b6:	6023      	str	r3, [r4, #0]
 80093b8:	bd38      	pop	{r3, r4, r5, pc}
 80093ba:	bf00      	nop
 80093bc:	20000468 	.word	0x20000468

080093c0 <_getpid_r>:
 80093c0:	f7f8 bd70 	b.w	8001ea4 <_getpid>

080093c4 <_init>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	bf00      	nop
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr

080093d0 <_fini>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	bf00      	nop
 80093d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d6:	bc08      	pop	{r3}
 80093d8:	469e      	mov	lr, r3
 80093da:	4770      	bx	lr
