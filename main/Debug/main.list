
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c124  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  0800c2c8  0800c2c8  0001c2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9dc  0800c9dc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9dc  0800c9dc  0001c9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9e4  0800c9e4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9e4  0800c9e4  0001c9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9e8  0800c9e8  0001c9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c9ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001f8  0800cbe4  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  0800cbe4  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015114  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003191  00000000  00000000  0003533c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  000384d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00039710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019afd  00000000  00000000  0003a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017aad  00000000  00000000  000542fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093feb  00000000  00000000  0006bdaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffd95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061bc  00000000  00000000  000ffde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c2ac 	.word	0x0800c2ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800c2ac 	.word	0x0800c2ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_DMA_Init+0x3c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <MX_DMA_Init+0x3c>)
 8001018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_DMA_Init+0x3c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2010      	movs	r0, #16
 8001030:	f001 ff15 	bl	8002e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001034:	2010      	movs	r0, #16
 8001036:	f001 ff2e 	bl	8002e96 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b39      	ldr	r3, [pc, #228]	; (8001148 <MX_GPIO_Init+0x100>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a38      	ldr	r2, [pc, #224]	; (8001148 <MX_GPIO_Init+0x100>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <MX_GPIO_Init+0x100>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b32      	ldr	r3, [pc, #200]	; (8001148 <MX_GPIO_Init+0x100>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a31      	ldr	r2, [pc, #196]	; (8001148 <MX_GPIO_Init+0x100>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <MX_GPIO_Init+0x100>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <MX_GPIO_Init+0x100>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <MX_GPIO_Init+0x100>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MX_GPIO_Init+0x100>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2120      	movs	r1, #32
 80010b6:	4825      	ldr	r0, [pc, #148]	; (800114c <MX_GPIO_Init+0x104>)
 80010b8:	f002 fc8e 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010bc:	2320      	movs	r3, #32
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	481e      	ldr	r0, [pc, #120]	; (800114c <MX_GPIO_Init+0x104>)
 80010d4:	f002 fafc 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FUNC_Button_Pin|START_Button_Pin;
 80010d8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4619      	mov	r1, r3
 80010ee:	4818      	ldr	r0, [pc, #96]	; (8001150 <MX_GPIO_Init+0x108>)
 80010f0:	f002 faee 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STOP_Button_Pin;
 80010f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STOP_Button_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	4810      	ldr	r0, [pc, #64]	; (800114c <MX_GPIO_Init+0x104>)
 800110c:	f002 fae0 	bl	80036d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	200a      	movs	r0, #10
 8001116:	f001 fea2 	bl	8002e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800111a:	200a      	movs	r0, #10
 800111c:	f001 febb 	bl	8002e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2017      	movs	r0, #23
 8001126:	f001 fe9a 	bl	8002e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800112a:	2017      	movs	r0, #23
 800112c:	f001 feb3 	bl	8002e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2028      	movs	r0, #40	; 0x28
 8001136:	f001 fe92 	bl	8002e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f001 feab 	bl	8002e96 <HAL_NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400

08001154 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_I2C1_Init+0x50>)
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <MX_I2C1_Init+0x54>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_I2C1_Init+0x58>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001176:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_I2C1_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001192:	f002 fc6d 	bl	8003a70 <HAL_I2C_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 fb84 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000214 	.word	0x20000214
 80011a8:	40005400 	.word	0x40005400
 80011ac:	00061a80 	.word	0x00061a80

080011b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_I2C_MspInit+0x84>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d12c      	bne.n	800122c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_I2C_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <HAL_I2C_MspInit+0x88>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_I2C_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80011ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f4:	2312      	movs	r3, #18
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001200:	2304      	movs	r3, #4
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <HAL_I2C_MspInit+0x8c>)
 800120c:	f002 fa60 	bl	80036d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_I2C_MspInit+0x88>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_I2C_MspInit+0x88>)
 800121a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_I2C_MspInit+0x88>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40005400 	.word	0x40005400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020400 	.word	0x40020400

08001240 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <bno055_assignI2C+0x1c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000268 	.word	0x20000268

08001260 <bno055_delay>:

void bno055_delay(int time) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fcf8 	bl	8002c60 <HAL_Delay>
#endif
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af02      	add	r7, sp, #8
 800127e:	4603      	mov	r3, r0
 8001280:	460a      	mov	r2, r1
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4613      	mov	r3, r2
 8001286:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	733b      	strb	r3, [r7, #12]
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001290:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <bno055_writeData+0x184>)
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	f107 020c 	add.w	r2, r7, #12
 8001298:	230a      	movs	r3, #10
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2302      	movs	r3, #2
 800129e:	2150      	movs	r1, #80	; 0x50
 80012a0:	f002 fd2a 	bl	8003cf8 <HAL_I2C_Master_Transmit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80a0 	beq.w	80013f0 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d103      	bne.n	80012be <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80012b6:	4852      	ldr	r0, [pc, #328]	; (8001400 <bno055_writeData+0x188>)
 80012b8:	f007 fa0a 	bl	80086d0 <puts>
 80012bc:	e012      	b.n	80012e4 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d103      	bne.n	80012cc <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80012c4:	484f      	ldr	r0, [pc, #316]	; (8001404 <bno055_writeData+0x18c>)
 80012c6:	f007 fa03 	bl	80086d0 <puts>
 80012ca:	e00b      	b.n	80012e4 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d103      	bne.n	80012da <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80012d2:	484d      	ldr	r0, [pc, #308]	; (8001408 <bno055_writeData+0x190>)
 80012d4:	f007 f9fc 	bl	80086d0 <puts>
 80012d8:	e004      	b.n	80012e4 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	4619      	mov	r1, r3
 80012de:	484b      	ldr	r0, [pc, #300]	; (800140c <bno055_writeData+0x194>)
 80012e0:	f007 f970 	bl	80085c4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80012e4:	4b45      	ldr	r3, [pc, #276]	; (80013fc <bno055_writeData+0x184>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 f837 	bl	800435c <HAL_I2C_GetError>
 80012ee:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d07e      	beq.n	80013f4 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d103      	bne.n	8001304 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80012fc:	4844      	ldr	r0, [pc, #272]	; (8001410 <bno055_writeData+0x198>)
 80012fe:	f007 f9e7 	bl	80086d0 <puts>
 8001302:	e021      	b.n	8001348 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d103      	bne.n	8001312 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800130a:	4842      	ldr	r0, [pc, #264]	; (8001414 <bno055_writeData+0x19c>)
 800130c:	f007 f9e0 	bl	80086d0 <puts>
 8001310:	e01a      	b.n	8001348 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d103      	bne.n	8001320 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001318:	483f      	ldr	r0, [pc, #252]	; (8001418 <bno055_writeData+0x1a0>)
 800131a:	f007 f9d9 	bl	80086d0 <puts>
 800131e:	e013      	b.n	8001348 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	2b08      	cmp	r3, #8
 8001324:	d103      	bne.n	800132e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001326:	483d      	ldr	r0, [pc, #244]	; (800141c <bno055_writeData+0x1a4>)
 8001328:	f007 f9d2 	bl	80086d0 <puts>
 800132c:	e00c      	b.n	8001348 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	2b10      	cmp	r3, #16
 8001332:	d103      	bne.n	800133c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001334:	483a      	ldr	r0, [pc, #232]	; (8001420 <bno055_writeData+0x1a8>)
 8001336:	f007 f9cb 	bl	80086d0 <puts>
 800133a:	e005      	b.n	8001348 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b20      	cmp	r3, #32
 8001340:	d102      	bne.n	8001348 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001342:	4838      	ldr	r0, [pc, #224]	; (8001424 <bno055_writeData+0x1ac>)
 8001344:	f007 f9c4 	bl	80086d0 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001348:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <bno055_writeData+0x184>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f002 fff7 	bl	8004340 <HAL_I2C_GetState>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d103      	bne.n	8001364 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 800135c:	4832      	ldr	r0, [pc, #200]	; (8001428 <bno055_writeData+0x1b0>)
 800135e:	f007 f9b7 	bl	80086d0 <puts>
 8001362:	e048      	b.n	80013f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b20      	cmp	r3, #32
 8001368:	d103      	bne.n	8001372 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800136a:	482f      	ldr	r0, [pc, #188]	; (8001428 <bno055_writeData+0x1b0>)
 800136c:	f007 f9b0 	bl	80086d0 <puts>
 8001370:	e041      	b.n	80013f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	2b24      	cmp	r3, #36	; 0x24
 8001376:	d103      	bne.n	8001380 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001378:	482c      	ldr	r0, [pc, #176]	; (800142c <bno055_writeData+0x1b4>)
 800137a:	f007 f9a9 	bl	80086d0 <puts>
 800137e:	e03a      	b.n	80013f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b21      	cmp	r3, #33	; 0x21
 8001384:	d103      	bne.n	800138e <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001386:	482a      	ldr	r0, [pc, #168]	; (8001430 <bno055_writeData+0x1b8>)
 8001388:	f007 f9a2 	bl	80086d0 <puts>
 800138c:	e033      	b.n	80013f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	2b22      	cmp	r3, #34	; 0x22
 8001392:	d103      	bne.n	800139c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001394:	4827      	ldr	r0, [pc, #156]	; (8001434 <bno055_writeData+0x1bc>)
 8001396:	f007 f99b 	bl	80086d0 <puts>
 800139a:	e02c      	b.n	80013f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b28      	cmp	r3, #40	; 0x28
 80013a0:	d103      	bne.n	80013aa <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80013a2:	4825      	ldr	r0, [pc, #148]	; (8001438 <bno055_writeData+0x1c0>)
 80013a4:	f007 f994 	bl	80086d0 <puts>
 80013a8:	e025      	b.n	80013f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b29      	cmp	r3, #41	; 0x29
 80013ae:	d103      	bne.n	80013b8 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80013b0:	4822      	ldr	r0, [pc, #136]	; (800143c <bno055_writeData+0x1c4>)
 80013b2:	f007 f98d 	bl	80086d0 <puts>
 80013b6:	e01e      	b.n	80013f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b2a      	cmp	r3, #42	; 0x2a
 80013bc:	d103      	bne.n	80013c6 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80013be:	4820      	ldr	r0, [pc, #128]	; (8001440 <bno055_writeData+0x1c8>)
 80013c0:	f007 f986 	bl	80086d0 <puts>
 80013c4:	e017      	b.n	80013f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b60      	cmp	r3, #96	; 0x60
 80013ca:	d103      	bne.n	80013d4 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80013cc:	481d      	ldr	r0, [pc, #116]	; (8001444 <bno055_writeData+0x1cc>)
 80013ce:	f007 f97f 	bl	80086d0 <puts>
 80013d2:	e010      	b.n	80013f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2ba0      	cmp	r3, #160	; 0xa0
 80013d8:	d103      	bne.n	80013e2 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80013da:	481b      	ldr	r0, [pc, #108]	; (8001448 <bno055_writeData+0x1d0>)
 80013dc:	f007 f978 	bl	80086d0 <puts>
 80013e0:	e009      	b.n	80013f6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	2be0      	cmp	r3, #224	; 0xe0
 80013e6:	d106      	bne.n	80013f6 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80013e8:	4818      	ldr	r0, [pc, #96]	; (800144c <bno055_writeData+0x1d4>)
 80013ea:	f007 f971 	bl	80086d0 <puts>
 80013ee:	e002      	b.n	80013f6 <bno055_writeData+0x17e>
    return;
 80013f0:	bf00      	nop
 80013f2:	e000      	b.n	80013f6 <bno055_writeData+0x17e>
    return;
 80013f4:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000268 	.word	0x20000268
 8001400:	0800c2c8 	.word	0x0800c2c8
 8001404:	0800c2ec 	.word	0x0800c2ec
 8001408:	0800c314 	.word	0x0800c314
 800140c:	0800c338 	.word	0x0800c338
 8001410:	0800c350 	.word	0x0800c350
 8001414:	0800c364 	.word	0x0800c364
 8001418:	0800c378 	.word	0x0800c378
 800141c:	0800c38c 	.word	0x0800c38c
 8001420:	0800c3a0 	.word	0x0800c3a0
 8001424:	0800c3b4 	.word	0x0800c3b4
 8001428:	0800c3cc 	.word	0x0800c3cc
 800142c:	0800c3e4 	.word	0x0800c3e4
 8001430:	0800c3f8 	.word	0x0800c3f8
 8001434:	0800c410 	.word	0x0800c410
 8001438:	0800c428 	.word	0x0800c428
 800143c:	0800c440 	.word	0x0800c440
 8001440:	0800c460 	.word	0x0800c460
 8001444:	0800c480 	.word	0x0800c480
 8001448:	0800c498 	.word	0x0800c498
 800144c:	0800c4b0 	.word	0x0800c4b0

08001450 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af02      	add	r7, sp, #8
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
 800145c:	4613      	mov	r3, r2
 800145e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <bno055_readData+0x40>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	1dfa      	adds	r2, r7, #7
 8001466:	2364      	movs	r3, #100	; 0x64
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	2150      	movs	r1, #80	; 0x50
 800146e:	f002 fc43 	bl	8003cf8 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <bno055_readData+0x40>)
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	79bb      	ldrb	r3, [r7, #6]
 8001478:	b29b      	uxth	r3, r3
 800147a:	2264      	movs	r2, #100	; 0x64
 800147c:	9200      	str	r2, [sp, #0]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	2150      	movs	r1, #80	; 0x50
 8001482:	f002 fd37 	bl	8003ef4 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000268 	.word	0x20000268

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001498:	f001 fb70 	bl	8002b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149c:	f000 f850 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a0:	f7ff fdd2 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 80014a4:	f7ff fdb0 	bl	8001008 <MX_DMA_Init>
  MX_TIM1_Init();
 80014a8:	f000 fb64 	bl	8001b74 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014ac:	f000 fbb4 	bl	8001c18 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014b0:	f000 fc28 	bl	8001d04 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80014b4:	f000 fd4e 	bl	8001f54 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014b8:	f7ff fe4c 	bl	8001154 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	/*************** ESC ***************/
	ESC_Init(&Esc, 100, -10, 25);
 80014bc:	2319      	movs	r3, #25
 80014be:	f06f 0209 	mvn.w	r2, #9
 80014c2:	2164      	movs	r1, #100	; 0x64
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <main+0x90>)
 80014c6:	f000 fe2d 	bl	8002124 <ESC_Init>
//	TIM3->CCR2 = 100;

	/************** SERVO **************/
	SERVO_Init(&Servo, 75, -25, 25);
 80014ca:	2319      	movs	r3, #25
 80014cc:	f06f 0218 	mvn.w	r2, #24
 80014d0:	214b      	movs	r1, #75	; 0x4b
 80014d2:	4815      	ldr	r0, [pc, #84]	; (8001528 <main+0x94>)
 80014d4:	f001 f9be 	bl	8002854 <SERVO_Init>
//	TIM2->CCR2 = 90;

	/*************** IMU ***************/
	  bno055_assignI2C(&hi2c1);
 80014d8:	4814      	ldr	r0, [pc, #80]	; (800152c <main+0x98>)
 80014da:	f7ff feb1 	bl	8001240 <bno055_assignI2C>
	  bno055_setup();
 80014de:	f001 f809 	bl	80024f4 <bno055_setup>
	  bno055_setOperationModeNDOF();
 80014e2:	f000 fff4 	bl	80024ce <bno055_setOperationModeNDOF>

	/************** TIMER **************/
	HAL_TIM_Base_Start_IT(&htim1);
 80014e6:	4812      	ldr	r0, [pc, #72]	; (8001530 <main+0x9c>)
 80014e8:	f003 ff5a 	bl	80053a0 <HAL_TIM_Base_Start_IT>

	/************** COMMUNICATION **************/
	while (HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 4) != HAL_OK) HAL_UART_DMAStop(&huart2);
 80014ec:	e002      	b.n	80014f4 <main+0x60>
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <main+0xa0>)
 80014f0:	f004 ffee 	bl	80064d0 <HAL_UART_DMAStop>
 80014f4:	2204      	movs	r2, #4
 80014f6:	4910      	ldr	r1, [pc, #64]	; (8001538 <main+0xa4>)
 80014f8:	480e      	ldr	r0, [pc, #56]	; (8001534 <main+0xa0>)
 80014fa:	f005 f868 	bl	80065ce <HAL_UARTEx_ReceiveToIdle_DMA>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f4      	bne.n	80014ee <main+0x5a>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <main+0xa8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <main+0xa8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0208 	bic.w	r2, r2, #8
 8001512:	601a      	str	r2, [r3, #0]
	log_Init(&huart2);
 8001514:	4807      	ldr	r0, [pc, #28]	; (8001534 <main+0xa0>)
 8001516:	f001 fac7 	bl	8002aa8 <log_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    HAL_Delay(100);
 800151a:	2064      	movs	r0, #100	; 0x64
 800151c:	f001 fba0 	bl	8002c60 <HAL_Delay>
 8001520:	e7fb      	b.n	800151a <main+0x86>
 8001522:	bf00      	nop
 8001524:	2000026c 	.word	0x2000026c
 8001528:	20000278 	.word	0x20000278
 800152c:	20000214 	.word	0x20000214
 8001530:	200002e4 	.word	0x200002e4
 8001534:	200003bc 	.word	0x200003bc
 8001538:	20000280 	.word	0x20000280
 800153c:	20000400 	.word	0x20000400

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b094      	sub	sp, #80	; 0x50
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2230      	movs	r2, #48	; 0x30
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f006 f9b6 	bl	80078c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <SystemClock_Config+0xc8>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	4a26      	ldr	r2, [pc, #152]	; (8001608 <SystemClock_Config+0xc8>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <SystemClock_Config+0xc8>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <SystemClock_Config+0xcc>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a20      	ldr	r2, [pc, #128]	; (800160c <SystemClock_Config+0xcc>)
 800158a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <SystemClock_Config+0xcc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800159c:	2301      	movs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a6:	2302      	movs	r3, #2
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015b0:	2304      	movs	r3, #4
 80015b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80015b4:	2364      	movs	r3, #100	; 0x64
 80015b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015bc:	2304      	movs	r3, #4
 80015be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 fa03 	bl	80049d0 <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015d0:	f000 f96a 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d4:	230f      	movs	r3, #15
 80015d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	2103      	movs	r1, #3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fc65 	bl	8004ec0 <HAL_RCC_ClockConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015fc:	f000 f954 	bl	80018a8 <Error_Handler>
  }
}
 8001600:	bf00      	nop
 8001602:	3750      	adds	r7, #80	; 0x50
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000

08001610 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	log_TransmitCompleteHandle(huart);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f001 fa55 	bl	8002ac8 <log_TransmitCompleteHandle>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_TIM_PeriodElapsedCallback>:


uint16_t i = 100;

/*********************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a44      	ldr	r2, [pc, #272]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001636:	4293      	cmp	r3, r2
 8001638:	f040 8082 	bne.w	8001740 <HAL_TIM_PeriodElapsedCallback+0x118>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800163c:	2120      	movs	r1, #32
 800163e:	4843      	ldr	r0, [pc, #268]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001640:	f002 f9e3 	bl	8003a0a <HAL_GPIO_TogglePin>

		/************ UART Transmit ***********/
		v = bno055_getVectorEuler();
 8001644:	f001 f8c2 	bl	80027cc <bno055_getVectorEuler>
 8001648:	eeb0 4a40 	vmov.f32	s8, s0
 800164c:	eef0 4a60 	vmov.f32	s9, s1
 8001650:	eeb0 5a41 	vmov.f32	s10, s2
 8001654:	eef0 5a61 	vmov.f32	s11, s3
 8001658:	eeb0 6a42 	vmov.f32	s12, s4
 800165c:	eef0 6a62 	vmov.f32	s13, s5
 8001660:	eeb0 7a43 	vmov.f32	s14, s6
 8001664:	eef0 7a63 	vmov.f32	s15, s7
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800166a:	ed83 4b00 	vstr	d4, [r3]
 800166e:	ed83 5b02 	vstr	d5, [r3, #8]
 8001672:	ed83 6b04 	vstr	d6, [r3, #16]
 8001676:	ed83 7b06 	vstr	d7, [r3, #24]
		data[0] = (uint8_t)v.x;
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800167c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fa98 	bl	8000bb8 <__aeabi_d2uiz>
 8001688:	4603      	mov	r3, r0
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b31      	ldr	r3, [pc, #196]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800168e:	701a      	strb	r2, [r3, #0]
		data[1] = (uint8_t)v.y;
 8001690:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001692:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff fa8d 	bl	8000bb8 <__aeabi_d2uiz>
 800169e:	4603      	mov	r3, r0
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80016a4:	705a      	strb	r2, [r3, #1]
		data[2] = (uint8_t)v.z;
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff fa82 	bl	8000bb8 <__aeabi_d2uiz>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80016ba:	709a      	strb	r2, [r3, #2]
		log_AddArgumentToBuffer_float((float)v.x);
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff fa97 	bl	8000bf8 <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	ee00 3a10 	vmov	s0, r3
 80016d0:	f001 fa38 	bl	8002b44 <log_AddArgumentToBuffer_float>
		log_AddArgumentToBuffer_float((float)v.y);
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa8b 	bl	8000bf8 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	ee00 3a10 	vmov	s0, r3
 80016e8:	f001 fa2c 	bl	8002b44 <log_AddArgumentToBuffer_float>
		log_AddArgumentToBuffer_float((float)v.z);
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016ee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa7f 	bl	8000bf8 <__aeabi_d2f>
 80016fa:	4603      	mov	r3, r0
 80016fc:	ee00 3a10 	vmov	s0, r3
 8001700:	f001 fa20 	bl	8002b44 <log_AddArgumentToBuffer_float>
		log_SendString();
 8001704:	f001 f9fc 	bl	8002b00 <log_SendString>

		HAL_UART_Transmit(&huart2, data, 50, 1000);
 8001708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170c:	2232      	movs	r2, #50	; 0x32
 800170e:	4911      	ldr	r1, [pc, #68]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001710:	4811      	ldr	r0, [pc, #68]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001712:	f004 fe06 	bl	8006322 <HAL_UART_Transmit>
//		if (i>=100) i-=1;
		/*************************************/

		/************* Control *************/
//		Run(&Esc, &Servo, -10, 0);
		if (flag_button == 0) Run(&Esc, &Servo, 0, 0); // Speed, Angle
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d106      	bne.n	800172c <HAL_TIM_PeriodElapsedCallback+0x104>
 800171e:	2300      	movs	r3, #0
 8001720:	2200      	movs	r2, #0
 8001722:	490f      	ldr	r1, [pc, #60]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001724:	480f      	ldr	r0, [pc, #60]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001726:	f001 f923 	bl	8002970 <Run>
		else Run(&Esc, &Servo, receive_speed, receive_angle);  // Run(&Esc, &Servo, -10, 0); // Speed, Angle
		}
}
 800172a:	e009      	b.n	8001740 <HAL_TIM_PeriodElapsedCallback+0x118>
		else Run(&Esc, &Servo, receive_speed, receive_angle);  // Run(&Esc, &Servo, -10, 0); // Speed, Angle
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800172e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001734:	f993 3000 	ldrsb.w	r3, [r3]
 8001738:	4909      	ldr	r1, [pc, #36]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800173a:	480a      	ldr	r0, [pc, #40]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800173c:	f001 f918 	bl	8002970 <Run>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40010000 	.word	0x40010000
 800174c:	40020000 	.word	0x40020000
 8001750:	200002c0 	.word	0x200002c0
 8001754:	20000284 	.word	0x20000284
 8001758:	200003bc 	.word	0x200003bc
 800175c:	200002b9 	.word	0x200002b9
 8001760:	20000278 	.word	0x20000278
 8001764:	2000026c 	.word	0x2000026c
 8001768:	200002b6 	.word	0x200002b6
 800176c:	200002b8 	.word	0x200002b8

08001770 <HAL_UARTEx_RxEventCallback>:

/*********************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART2) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <HAL_UARTEx_RxEventCallback+0x84>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d131      	bne.n	80017ea <HAL_UARTEx_RxEventCallback+0x7a>
	  while (HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 4) != HAL_OK) HAL_UART_DMAStop(&huart2);
 8001786:	e002      	b.n	800178e <HAL_UARTEx_RxEventCallback+0x1e>
 8001788:	481b      	ldr	r0, [pc, #108]	; (80017f8 <HAL_UARTEx_RxEventCallback+0x88>)
 800178a:	f004 fea1 	bl	80064d0 <HAL_UART_DMAStop>
 800178e:	2204      	movs	r2, #4
 8001790:	491a      	ldr	r1, [pc, #104]	; (80017fc <HAL_UARTEx_RxEventCallback+0x8c>)
 8001792:	4819      	ldr	r0, [pc, #100]	; (80017f8 <HAL_UARTEx_RxEventCallback+0x88>)
 8001794:	f004 ff1b 	bl	80065ce <HAL_UARTEx_ReceiveToIdle_DMA>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f4      	bne.n	8001788 <HAL_UARTEx_RxEventCallback+0x18>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_UARTEx_RxEventCallback+0x90>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_UARTEx_RxEventCallback+0x90>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0208 	bic.w	r2, r2, #8
 80017ac:	601a      	str	r2, [r3, #0]
		if (Size == 4) {
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d11a      	bne.n	80017ea <HAL_UARTEx_RxEventCallback+0x7a>
			if (rxdata[3] == 25) {
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_UARTEx_RxEventCallback+0x8c>)
 80017b6:	78db      	ldrb	r3, [r3, #3]
 80017b8:	2b19      	cmp	r3, #25
 80017ba:	d110      	bne.n	80017de <HAL_UARTEx_RxEventCallback+0x6e>
				receive_speed = ((int16_t)rxdata[1]<<8)|rxdata[0];
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_UARTEx_RxEventCallback+0x8c>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_UARTEx_RxEventCallback+0x8c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21a      	sxth	r2, r3
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_UARTEx_RxEventCallback+0x94>)
 80017d0:	801a      	strh	r2, [r3, #0]
				receive_angle = rxdata[2];
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_UARTEx_RxEventCallback+0x8c>)
 80017d4:	789b      	ldrb	r3, [r3, #2]
 80017d6:	b25a      	sxtb	r2, r3
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_UARTEx_RxEventCallback+0x98>)
 80017da:	701a      	strb	r2, [r3, #0]
			/**** CHECK DATA ****/
//			if (receive_speed == 100 && receive_angle == 0) HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
//			else HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
		}
  }
}
 80017dc:	e005      	b.n	80017ea <HAL_UARTEx_RxEventCallback+0x7a>
				receive_speed = 0;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_UARTEx_RxEventCallback+0x94>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	801a      	strh	r2, [r3, #0]
				receive_angle = 0;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_UARTEx_RxEventCallback+0x98>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40004400 	.word	0x40004400
 80017f8:	200003bc 	.word	0x200003bc
 80017fc:	20000280 	.word	0x20000280
 8001800:	20000400 	.word	0x20000400
 8001804:	200002b6 	.word	0x200002b6
 8001808:	200002b8 	.word	0x200002b8

0800180c <HAL_UART_ErrorCallback>:

/*********************************************************/
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_UART_ErrorCallback+0x44>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d113      	bne.n	8001846 <HAL_UART_ErrorCallback+0x3a>
		while (HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 4) != HAL_OK) HAL_UART_DMAStop(&huart2);
 800181e:	e002      	b.n	8001826 <HAL_UART_ErrorCallback+0x1a>
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <HAL_UART_ErrorCallback+0x48>)
 8001822:	f004 fe55 	bl	80064d0 <HAL_UART_DMAStop>
 8001826:	2204      	movs	r2, #4
 8001828:	490b      	ldr	r1, [pc, #44]	; (8001858 <HAL_UART_ErrorCallback+0x4c>)
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <HAL_UART_ErrorCallback+0x48>)
 800182c:	f004 fecf 	bl	80065ce <HAL_UARTEx_ReceiveToIdle_DMA>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f4      	bne.n	8001820 <HAL_UART_ErrorCallback+0x14>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_UART_ErrorCallback+0x50>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_UART_ErrorCallback+0x50>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0208 	bic.w	r2, r2, #8
 8001844:	601a      	str	r2, [r3, #0]
	}
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40004400 	.word	0x40004400
 8001854:	200003bc 	.word	0x200003bc
 8001858:	20000280 	.word	0x20000280
 800185c:	20000400 	.word	0x20000400

08001860 <HAL_GPIO_EXTI_Callback>:

/************************SETUP ESC************************/
uint16_t setup_pwm;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == STOP_Button_Pin) {
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001870:	d103      	bne.n	800187a <HAL_GPIO_EXTI_Callback+0x1a>
		flag_button=0;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x44>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
	else if (GPIO_Pin == START_Button_Pin) {
		flag_button=2;
//		setup_pwm = 235; // 235 (100Hz) - 115 (50Hz)
//		TIM3->CCR2 = setup_pwm;
	}
}
 8001878:	e00d      	b.n	8001896 <HAL_GPIO_EXTI_Callback+0x36>
	else if (GPIO_Pin == FUNC_Button_Pin) {
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001880:	d103      	bne.n	800188a <HAL_GPIO_EXTI_Callback+0x2a>
		flag_button=1;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x44>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
}
 8001888:	e005      	b.n	8001896 <HAL_GPIO_EXTI_Callback+0x36>
	else if (GPIO_Pin == START_Button_Pin) {
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	2b10      	cmp	r3, #16
 800188e:	d102      	bne.n	8001896 <HAL_GPIO_EXTI_Callback+0x36>
		flag_button=2;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x44>)
 8001892:	2202      	movs	r2, #2
 8001894:	701a      	strb	r2, [r3, #0]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	200002b9 	.word	0x200002b9

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <Error_Handler+0x8>
	...

080018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_MspInit+0x4c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <HAL_MspInit+0x4c>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_MspInit+0x4c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_MspInit+0x4c>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f001 f966 	bl	8002c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Button_Pin);
 800195c:	2010      	movs	r0, #16
 800195e:	f002 f86f 	bl	8003a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <DMA1_Stream5_IRQHandler+0x10>)
 800196e:	f001 fc45 	bl	80031fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000400 	.word	0x20000400

0800197c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STOP_Button_Pin);
 8001980:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001984:	f002 f85c 	bl	8003a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001992:	f003 fe71 	bl	8005678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200002e4 	.word	0x200002e4

080019a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <USART2_IRQHandler+0x10>)
 80019a6:	f004 fe77 	bl	8006698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200003bc 	.word	0x200003bc

080019b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FUNC_Button_Pin);
 80019b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019bc:	f002 f840 	bl	8003a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_kill>:

int _kill(int pid, int sig)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019de:	f005 ff37 	bl	8007850 <__errno>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2216      	movs	r2, #22
 80019e6:	601a      	str	r2, [r3, #0]
  return -1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_exit>:

void _exit (int status)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ffe7 	bl	80019d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a06:	e7fe      	b.n	8001a06 <_exit+0x12>

08001a08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e00a      	b.n	8001a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a1a:	f3af 8000 	nop.w
 8001a1e:	4601      	mov	r1, r0
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60ba      	str	r2, [r7, #8]
 8001a26:	b2ca      	uxtb	r2, r1
 8001a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbf0      	blt.n	8001a1a <_read+0x12>
  }

  return len;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e009      	b.n	8001a68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	60ba      	str	r2, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3301      	adds	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dbf1      	blt.n	8001a54 <_write+0x12>
  }
  return len;
 8001a70:	687b      	ldr	r3, [r7, #4]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_close>:

int _close(int file)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa2:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_isatty>:

int _isatty(int file)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <_sbrk+0x5c>)
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <_sbrk+0x60>)
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <_sbrk+0x64>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <_sbrk+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d207      	bcs.n	8001b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b14:	f005 fe9c 	bl	8007850 <__errno>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	e009      	b.n	8001b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <_sbrk+0x64>)
 8001b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20020000 	.word	0x20020000
 8001b44:	00000400 	.word	0x00000400
 8001b48:	200002e0 	.word	0x200002e0
 8001b4c:	200004e8 	.word	0x200004e8

08001b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <SystemInit+0x20>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <SystemInit+0x20>)
 8001b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <MX_TIM1_Init+0x9c>)
 8001b92:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <MX_TIM1_Init+0xa0>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <MX_TIM1_Init+0x9c>)
 8001b98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <MX_TIM1_Init+0x9c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_TIM1_Init+0x9c>)
 8001ba6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001baa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_TIM1_Init+0x9c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_TIM1_Init+0x9c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_TIM1_Init+0x9c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bbe:	4814      	ldr	r0, [pc, #80]	; (8001c10 <MX_TIM1_Init+0x9c>)
 8001bc0:	f003 fb9e 	bl	8005300 <HAL_TIM_Base_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001bca:	f7ff fe6d 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480d      	ldr	r0, [pc, #52]	; (8001c10 <MX_TIM1_Init+0x9c>)
 8001bdc:	f003 ff16 	bl	8005a0c <HAL_TIM_ConfigClockSource>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001be6:	f7ff fe5f 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <MX_TIM1_Init+0x9c>)
 8001bf8:	f004 fac4 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c02:	f7ff fe51 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200002e4 	.word	0x200002e4
 8001c14:	40010000 	.word	0x40010000

08001c18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08e      	sub	sp, #56	; 0x38
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000-1;
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c52:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001c56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001c5e:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c72:	4823      	ldr	r0, [pc, #140]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c74:	f003 fb44 	bl	8005300 <HAL_TIM_Base_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c7e:	f7ff fe13 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	481c      	ldr	r0, [pc, #112]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001c90:	f003 febc 	bl	8005a0c <HAL_TIM_ConfigClockSource>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001c9a:	f7ff fe05 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c9e:	4818      	ldr	r0, [pc, #96]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001ca0:	f003 fbe0 	bl	8005464 <HAL_TIM_PWM_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001caa:	f7ff fdfd 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cb6:	f107 0320 	add.w	r3, r7, #32
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4810      	ldr	r0, [pc, #64]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001cbe:	f004 fa61 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cc8:	f7ff fdee 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ccc:	2360      	movs	r3, #96	; 0x60
 8001cce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2204      	movs	r2, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001ce4:	f003 fdd0 	bl	8005888 <HAL_TIM_PWM_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001cee:	f7ff fddb 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cf2:	4803      	ldr	r0, [pc, #12]	; (8001d00 <MX_TIM2_Init+0xe8>)
 8001cf4:	f000 f8d0 	bl	8001e98 <HAL_TIM_MspPostInit>

}
 8001cf8:	bf00      	nop
 8001cfa:	3738      	adds	r7, #56	; 0x38
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000032c 	.word	0x2000032c

08001d04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
 8001d30:	615a      	str	r2, [r3, #20]
 8001d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001d36:	4a2e      	ldr	r2, [pc, #184]	; (8001df0 <MX_TIM3_Init+0xec>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001d4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d5c:	4823      	ldr	r0, [pc, #140]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001d5e:	f003 facf 	bl	8005300 <HAL_TIM_Base_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001d68:	f7ff fd9e 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d76:	4619      	mov	r1, r3
 8001d78:	481c      	ldr	r0, [pc, #112]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001d7a:	f003 fe47 	bl	8005a0c <HAL_TIM_ConfigClockSource>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d84:	f7ff fd90 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d88:	4818      	ldr	r0, [pc, #96]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001d8a:	f003 fb6b 	bl	8005464 <HAL_TIM_PWM_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d94:	f7ff fd88 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001da0:	f107 0320 	add.w	r3, r7, #32
 8001da4:	4619      	mov	r1, r3
 8001da6:	4811      	ldr	r0, [pc, #68]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001da8:	f004 f9ec 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001db2:	f7ff fd79 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db6:	2360      	movs	r3, #96	; 0x60
 8001db8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2204      	movs	r2, #4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4807      	ldr	r0, [pc, #28]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001dce:	f003 fd5b 	bl	8005888 <HAL_TIM_PWM_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001dd8:	f7ff fd66 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <MX_TIM3_Init+0xe8>)
 8001dde:	f000 f85b 	bl	8001e98 <HAL_TIM_MspPostInit>

}
 8001de2:	bf00      	nop
 8001de4:	3738      	adds	r7, #56	; 0x38
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000374 	.word	0x20000374
 8001df0:	40000400 	.word	0x40000400

08001df4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_TIM_Base_MspInit+0x98>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d116      	bne.n	8001e34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2019      	movs	r0, #25
 8001e28:	f001 f819 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e2c:	2019      	movs	r0, #25
 8001e2e:	f001 f832 	bl	8002e96 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e32:	e026      	b.n	8001e82 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3c:	d10e      	bne.n	8001e5c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
}
 8001e5a:	e012      	b.n	8001e82 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <HAL_TIM_Base_MspInit+0xa0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d10d      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_TIM_Base_MspInit+0x9c>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40000400 	.word	0x40000400

08001e98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb8:	d11e      	bne.n	8001ef8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4816      	ldr	r0, [pc, #88]	; (8001f4c <HAL_TIM_MspPostInit+0xb4>)
 8001ef2:	f001 fbed 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ef6:	e022      	b.n	8001f3e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_TIM_MspPostInit+0xb8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d11d      	bne.n	8001f3e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_TIM_MspPostInit+0xb0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Pin;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_GPIO_Port, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4804      	ldr	r0, [pc, #16]	; (8001f4c <HAL_TIM_MspPostInit+0xb4>)
 8001f3a:	f001 fbc9 	bl	80036d0 <HAL_GPIO_Init>
}
 8001f3e:	bf00      	nop
 8001f40:	3728      	adds	r7, #40	; 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40000400 	.word	0x40000400

08001f54 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <MX_USART2_UART_Init+0x50>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_USART2_UART_Init+0x4c>)
 8001f8c:	f004 f97c 	bl	8006288 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f96:	f7ff fc87 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200003bc 	.word	0x200003bc
 8001fa4:	40004400 	.word	0x40004400

08001fa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a3d      	ldr	r2, [pc, #244]	; (80020bc <HAL_UART_MspInit+0x114>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d173      	bne.n	80020b2 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <HAL_UART_MspInit+0x118>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a3b      	ldr	r2, [pc, #236]	; (80020c0 <HAL_UART_MspInit+0x118>)
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <HAL_UART_MspInit+0x118>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_UART_MspInit+0x118>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <HAL_UART_MspInit+0x118>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b32      	ldr	r3, [pc, #200]	; (80020c0 <HAL_UART_MspInit+0x118>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8002002:	2304      	movs	r3, #4
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002012:	2307      	movs	r3, #7
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4829      	ldr	r0, [pc, #164]	; (80020c4 <HAL_UART_MspInit+0x11c>)
 800201e:	f001 fb57 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8002022:	2308      	movs	r3, #8
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202a:	2301      	movs	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002032:	2307      	movs	r3, #7
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4821      	ldr	r0, [pc, #132]	; (80020c4 <HAL_UART_MspInit+0x11c>)
 800203e:	f001 fb47 	bl	80036d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <HAL_UART_MspInit+0x120>)
 8002044:	4a21      	ldr	r2, [pc, #132]	; (80020cc <HAL_UART_MspInit+0x124>)
 8002046:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_UART_MspInit+0x120>)
 800204a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800204e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_UART_MspInit+0x120>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_UART_MspInit+0x120>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_UART_MspInit+0x120>)
 800205e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002062:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_UART_MspInit+0x120>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_UART_MspInit+0x120>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_UART_MspInit+0x120>)
 8002072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002076:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_UART_MspInit+0x120>)
 800207a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800207e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_UART_MspInit+0x120>)
 8002082:	2200      	movs	r2, #0
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002086:	4810      	ldr	r0, [pc, #64]	; (80020c8 <HAL_UART_MspInit+0x120>)
 8002088:	f000 ff20 	bl	8002ecc <HAL_DMA_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8002092:	f7ff fc09 	bl	80018a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <HAL_UART_MspInit+0x120>)
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_UART_MspInit+0x120>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2026      	movs	r0, #38	; 0x26
 80020a8:	f000 fed9 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ac:	2026      	movs	r0, #38	; 0x26
 80020ae:	f000 fef2 	bl	8002e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40004400 	.word	0x40004400
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020000 	.word	0x40020000
 80020c8:	20000400 	.word	0x20000400
 80020cc:	40026088 	.word	0x40026088

080020d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020d6:	490e      	ldr	r1, [pc, #56]	; (8002110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020ec:	4c0b      	ldr	r4, [pc, #44]	; (800211c <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020fa:	f7ff fd29 	bl	8001b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020fe:	f005 fbad 	bl	800785c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002102:	f7ff f9c7 	bl	8001494 <main>
  bx  lr    
 8002106:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002110:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002114:	0800c9ec 	.word	0x0800c9ec
  ldr r2, =_sbss
 8002118:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800211c:	200004e4 	.word	0x200004e4

08002120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC_IRQHandler>
	...

08002124 <ESC_Init>:

/*******************************/
double T=0.1;

/*******************************/
void ESC_Init(esc *Esc, uint16_t home, int16_t OutMin, int16_t OutMax) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	461a      	mov	r2, r3
 8002132:	4603      	mov	r3, r0
 8002134:	817b      	strh	r3, [r7, #10]
 8002136:	460b      	mov	r3, r1
 8002138:	813b      	strh	r3, [r7, #8]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800213e:	2104      	movs	r1, #4
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <ESC_Init+0x4c>)
 8002142:	f003 f9e9 	bl	8005518 <HAL_TIM_PWM_Start>

	Esc->Min = OutMin;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	893a      	ldrh	r2, [r7, #8]
 800214a:	805a      	strh	r2, [r3, #2]
  Esc->Max = OutMax;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	801a      	strh	r2, [r3, #0]

	/******* SET HOME *******/
	Esc->Output = home;
 8002152:	897b      	ldrh	r3, [r7, #10]
 8002154:	ee07 3a90 	vmov	s15, r3
 8002158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	edc3 7a02 	vstr	s15, [r3, #8]
	TIM3->CCR2 = home;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <ESC_Init+0x50>)
 8002164:	897b      	ldrh	r3, [r7, #10]
 8002166:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000374 	.word	0x20000374
 8002174:	40000400 	.word	0x40000400

08002178 <Acceleration>:

/************************/
void Acceleration(float V_want, float *vout, float _acc, float _dcc) {
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002182:	60b8      	str	r0, [r7, #8]
 8002184:	edc7 0a01 	vstr	s1, [r7, #4]
 8002188:	ed87 1a00 	vstr	s2, [r7]
	if(fabs(*vout) < fabs(V_want)) {
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	edd3 7a00 	vldr	s15, [r3]
 8002192:	eeb0 7ae7 	vabs.f32	s14, s15
 8002196:	edd7 7a03 	vldr	s15, [r7, #12]
 800219a:	eef0 7ae7 	vabs.f32	s15, s15
 800219e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	d52e      	bpl.n	8002206 <Acceleration+0x8e>
    *vout += _acc*T;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d3 	bl	8000558 <__aeabi_f2d>
 80021b2:	4604      	mov	r4, r0
 80021b4:	460d      	mov	r5, r1
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe f9ce 	bl	8000558 <__aeabi_f2d>
 80021bc:	4b3c      	ldr	r3, [pc, #240]	; (80022b0 <Acceleration+0x138>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe fa21 	bl	8000608 <__aeabi_dmul>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4620      	mov	r0, r4
 80021cc:	4629      	mov	r1, r5
 80021ce:	f7fe f865 	bl	800029c <__adddf3>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fd0d 	bl	8000bf8 <__aeabi_d2f>
 80021de:	4602      	mov	r2, r0
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	601a      	str	r2, [r3, #0]
		if(fabs(*vout) >= fabs(V_want)) *vout = V_want;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	eeb0 7ae7 	vabs.f32	s14, s15
 80021ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80021f2:	eef0 7ae7 	vabs.f32	s15, s15
 80021f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	db02      	blt.n	8002206 <Acceleration+0x8e>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	601a      	str	r2, [r3, #0]
   }
  if(fabs(*vout) > fabs(V_want)) {
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002210:	edd7 7a03 	vldr	s15, [r7, #12]
 8002214:	eef0 7ae7 	vabs.f32	s15, s15
 8002218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	dc00      	bgt.n	8002224 <Acceleration+0xac>
		if (_dcc >= 0) {
			if(*vout <= V_want) *vout = V_want;
		}
		else if(*vout >= V_want) *vout = V_want;
  }
}
 8002222:	e041      	b.n	80022a8 <Acceleration+0x130>
     *vout -= _dcc*T;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f995 	bl	8000558 <__aeabi_f2d>
 800222e:	4604      	mov	r4, r0
 8002230:	460d      	mov	r5, r1
 8002232:	6838      	ldr	r0, [r7, #0]
 8002234:	f7fe f990 	bl	8000558 <__aeabi_f2d>
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <Acceleration+0x138>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f9e3 	bl	8000608 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4620      	mov	r0, r4
 8002248:	4629      	mov	r1, r5
 800224a:	f7fe f825 	bl	8000298 <__aeabi_dsub>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	f7fe fccf 	bl	8000bf8 <__aeabi_d2f>
 800225a:	4602      	mov	r2, r0
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	601a      	str	r2, [r3, #0]
		if (_dcc >= 0) {
 8002260:	edd7 7a00 	vldr	s15, [r7]
 8002264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226c:	db0e      	blt.n	800228c <Acceleration+0x114>
			if(*vout <= V_want) *vout = V_want;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ed97 7a03 	vldr	s14, [r7, #12]
 8002278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002280:	da00      	bge.n	8002284 <Acceleration+0x10c>
}
 8002282:	e011      	b.n	80022a8 <Acceleration+0x130>
			if(*vout <= V_want) *vout = V_want;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	601a      	str	r2, [r3, #0]
}
 800228a:	e00d      	b.n	80022a8 <Acceleration+0x130>
		else if(*vout >= V_want) *vout = V_want;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ed97 7a03 	vldr	s14, [r7, #12]
 8002296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	d900      	bls.n	80022a2 <Acceleration+0x12a>
}
 80022a0:	e002      	b.n	80022a8 <Acceleration+0x130>
		else if(*vout >= V_want) *vout = V_want;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	601a      	str	r2, [r3, #0]
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bdb0      	pop	{r4, r5, r7, pc}
 80022b0:	20000008 	.word	0x20000008

080022b4 <ESC_Caliration>:

float ESC_Caliration(float speed) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	ed87 0a01 	vstr	s0, [r7, #4]
	float esc_speed;

	esc_speed =  0.5 * (double)speed + 100; // 65 (reverse) - 100 (stop) - 235 (drive)
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe f94a 	bl	8000558 <__aeabi_f2d>
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <ESC_Caliration+0x4c>)
 80022ca:	f7fe f99d 	bl	8000608 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <ESC_Caliration+0x50>)
 80022dc:	f7fd ffde 	bl	800029c <__adddf3>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fc86 	bl	8000bf8 <__aeabi_d2f>
 80022ec:	4603      	mov	r3, r0
 80022ee:	60fb      	str	r3, [r7, #12]

	return esc_speed;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	ee07 3a90 	vmov	s15, r3
}
 80022f6:	eeb0 0a67 	vmov.f32	s0, s15
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	3fe00000 	.word	0x3fe00000
 8002304:	40590000 	.word	0x40590000

08002308 <ESC_Run>:

/************************/
void ESC_Run(esc *Esc, float speed) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	ed87 0a00 	vstr	s0, [r7]
	float acc = 10, dcc = 10;
 8002314:	4b55      	ldr	r3, [pc, #340]	; (800246c <ESC_Run+0x164>)
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	4b54      	ldr	r3, [pc, #336]	; (800246c <ESC_Run+0x164>)
 800231a:	60bb      	str	r3, [r7, #8]

	/******* Saturation *******/
	if (speed >= Esc->Max) speed=Esc->Max;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800232a:	ed97 7a00 	vldr	s14, [r7]
 800232e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	db09      	blt.n	800234c <ESC_Run+0x44>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002346:	edc7 7a00 	vstr	s15, [r7]
 800234a:	e016      	b.n	800237a <ESC_Run+0x72>
	else if (speed <= Esc->Min) speed=Esc->Min;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235a:	ed97 7a00 	vldr	s14, [r7]
 800235e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	d808      	bhi.n	800237a <ESC_Run+0x72>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002376:	edc7 7a00 	vstr	s15, [r7]

	/******* Calibration *******/
	Esc->Set = ESC_Caliration(speed);
 800237a:	ed97 0a00 	vldr	s0, [r7]
 800237e:	f7ff ff99 	bl	80022b4 <ESC_Caliration>
 8002382:	eef0 7a40 	vmov.f32	s15, s0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	edc3 7a01 	vstr	s15, [r3, #4]

	/******* Processing *******/
	if (Esc->Set > 0) Acceleration(Esc->Set, &Esc->Output, acc, dcc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239a:	dd0e      	ble.n	80023ba <ESC_Run+0xb2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	edd3 7a01 	vldr	s15, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3308      	adds	r3, #8
 80023a6:	ed97 1a02 	vldr	s2, [r7, #8]
 80023aa:	edd7 0a03 	vldr	s1, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	eeb0 0a67 	vmov.f32	s0, s15
 80023b4:	f7ff fee0 	bl	8002178 <Acceleration>
 80023b8:	e04b      	b.n	8002452 <ESC_Run+0x14a>
	else if (Esc->Set < 0) Acceleration(Esc->Set, &Esc->Output, -acc, -dcc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80023c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	d516      	bpl.n	80023f8 <ESC_Run+0xf0>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3308      	adds	r3, #8
 80023d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023d8:	eef1 6a67 	vneg.f32	s13, s15
 80023dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80023e0:	eef1 7a67 	vneg.f32	s15, s15
 80023e4:	eeb0 1a67 	vmov.f32	s2, s15
 80023e8:	eef0 0a66 	vmov.f32	s1, s13
 80023ec:	4618      	mov	r0, r3
 80023ee:	eeb0 0a47 	vmov.f32	s0, s14
 80023f2:	f7ff fec1 	bl	8002178 <Acceleration>
 80023f6:	e02c      	b.n	8002452 <ESC_Run+0x14a>
	else {
		if (Esc->Output < 0) Acceleration(Esc->Set, &Esc->Output, -acc, -dcc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80023fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	d516      	bpl.n	8002436 <ESC_Run+0x12e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	ed93 7a01 	vldr	s14, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3308      	adds	r3, #8
 8002412:	edd7 7a03 	vldr	s15, [r7, #12]
 8002416:	eef1 6a67 	vneg.f32	s13, s15
 800241a:	edd7 7a02 	vldr	s15, [r7, #8]
 800241e:	eef1 7a67 	vneg.f32	s15, s15
 8002422:	eeb0 1a67 	vmov.f32	s2, s15
 8002426:	eef0 0a66 	vmov.f32	s1, s13
 800242a:	4618      	mov	r0, r3
 800242c:	eeb0 0a47 	vmov.f32	s0, s14
 8002430:	f7ff fea2 	bl	8002178 <Acceleration>
 8002434:	e00d      	b.n	8002452 <ESC_Run+0x14a>
		else Acceleration(Esc->Set, &Esc->Output, acc, dcc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	edd3 7a01 	vldr	s15, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3308      	adds	r3, #8
 8002440:	ed97 1a02 	vldr	s2, [r7, #8]
 8002444:	edd7 0a03 	vldr	s1, [r7, #12]
 8002448:	4618      	mov	r0, r3
 800244a:	eeb0 0a67 	vmov.f32	s0, s15
 800244e:	f7ff fe93 	bl	8002178 <Acceleration>
	}

	/******* PWM *******/
	TIM3->CCR2 = (int)Esc->Output;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	edd3 7a02 	vldr	s15, [r3, #8]
 8002458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <ESC_Run+0x168>)
 800245e:	ee17 2a90 	vmov	r2, s15
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	41200000 	.word	0x41200000
 8002470:	40000400 	.word	0x40000400

08002474 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	4619      	mov	r1, r3
 8002482:	2007      	movs	r0, #7
 8002484:	f7fe fef8 	bl	8001278 <bno055_writeData>
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4619      	mov	r1, r3
 800249e:	203d      	movs	r0, #61	; 0x3d
 80024a0:	f7fe feea 	bl	8001278 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80024aa:	2013      	movs	r0, #19
 80024ac:	f7fe fed8 	bl	8001260 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80024b0:	e002      	b.n	80024b8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80024b2:	2007      	movs	r0, #7
 80024b4:	f7fe fed4 	bl	8001260 <bno055_delay>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7ff ffe3 	bl	8002490 <bno055_setOperationMode>
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}

080024ce <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80024ce:	b580      	push	{r7, lr}
 80024d0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80024d2:	200c      	movs	r0, #12
 80024d4:	f7ff ffdc 	bl	8002490 <bno055_setOperationMode>
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}

080024dc <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80024e0:	2120      	movs	r1, #32
 80024e2:	203f      	movs	r0, #63	; 0x3f
 80024e4:	f7fe fec8 	bl	8001278 <bno055_writeData>
  bno055_delay(700);
 80024e8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80024ec:	f7fe feb8 	bl	8001260 <bno055_delay>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  bno055_reset();
 80024fa:	f7ff ffef 	bl	80024dc <bno055_reset>

  uint8_t id = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8002502:	1dfb      	adds	r3, r7, #7
 8002504:	2201      	movs	r2, #1
 8002506:	4619      	mov	r1, r3
 8002508:	2000      	movs	r0, #0
 800250a:	f7fe ffa1 	bl	8001450 <bno055_readData>
  if (id != BNO055_ID) {
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2ba0      	cmp	r3, #160	; 0xa0
 8002512:	d004      	beq.n	800251e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	4619      	mov	r1, r3
 8002518:	4809      	ldr	r0, [pc, #36]	; (8002540 <bno055_setup+0x4c>)
 800251a:	f006 f853 	bl	80085c4 <iprintf>
  }
  bno055_setPage(0);
 800251e:	2000      	movs	r0, #0
 8002520:	f7ff ffa8 	bl	8002474 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8002524:	2100      	movs	r1, #0
 8002526:	203f      	movs	r0, #63	; 0x3f
 8002528:	f7fe fea6 	bl	8001278 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800252c:	f7ff ffc8 	bl	80024c0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8002530:	200a      	movs	r0, #10
 8002532:	f7fe fe95 	bl	8001260 <bno055_delay>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	0800c4c8 	.word	0x0800c4c8

08002544 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8002544:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002548:	b09e      	sub	sp, #120	; 0x78
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8002552:	2000      	movs	r0, #0
 8002554:	f7ff ff8e 	bl	8002474 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8002558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800255c:	2b20      	cmp	r3, #32
 800255e:	d108      	bne.n	8002572 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8002560:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002568:	2208      	movs	r2, #8
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe ff70 	bl	8001450 <bno055_readData>
 8002570:	e007      	b.n	8002582 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8002572:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800257a:	2206      	movs	r2, #6
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe ff67 	bl	8001450 <bno055_readData>

  double scale = 1;
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	4b8b      	ldr	r3, [pc, #556]	; (80027b4 <bno055_getVector+0x270>)
 8002588:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800258c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002590:	2b0e      	cmp	r3, #14
 8002592:	d109      	bne.n	80025a8 <bno055_getVector+0x64>
    scale = magScale;
 8002594:	4b88      	ldr	r3, [pc, #544]	; (80027b8 <bno055_getVector+0x274>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ffbb 	bl	8000514 <__aeabi_ui2d>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80025a6:	e03e      	b.n	8002626 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80025a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d007      	beq.n	80025c0 <bno055_getVector+0x7c>
 80025b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025b4:	2b28      	cmp	r3, #40	; 0x28
 80025b6:	d003      	beq.n	80025c0 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80025b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025bc:	2b2e      	cmp	r3, #46	; 0x2e
 80025be:	d109      	bne.n	80025d4 <bno055_getVector+0x90>
    scale = accelScale;
 80025c0:	4b7e      	ldr	r3, [pc, #504]	; (80027bc <bno055_getVector+0x278>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ffa5 	bl	8000514 <__aeabi_ui2d>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80025d2:	e028      	b.n	8002626 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80025d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025d8:	2b14      	cmp	r3, #20
 80025da:	d109      	bne.n	80025f0 <bno055_getVector+0xac>
    scale = angularRateScale;
 80025dc:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <bno055_getVector+0x27c>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ff97 	bl	8000514 <__aeabi_ui2d>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80025ee:	e01a      	b.n	8002626 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80025f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f4:	2b1a      	cmp	r3, #26
 80025f6:	d109      	bne.n	800260c <bno055_getVector+0xc8>
    scale = eulerScale;
 80025f8:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <bno055_getVector+0x280>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ff89 	bl	8000514 <__aeabi_ui2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800260a:	e00c      	b.n	8002626 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800260c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002610:	2b20      	cmp	r3, #32
 8002612:	d108      	bne.n	8002626 <bno055_getVector+0xe2>
    scale = quaScale;
 8002614:	4b6c      	ldr	r3, [pc, #432]	; (80027c8 <bno055_getVector+0x284>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff7b 	bl	8000514 <__aeabi_ui2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8002626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800262a:	2220      	movs	r2, #32
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f005 f946 	bl	80078c0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002638:	2b20      	cmp	r3, #32
 800263a:	d150      	bne.n	80026de <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800263c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	b21a      	sxth	r2, r3
 8002644:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002648:	b21b      	sxth	r3, r3
 800264a:	4313      	orrs	r3, r2
 800264c:	b21b      	sxth	r3, r3
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff70 	bl	8000534 <__aeabi_i2d>
 8002654:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002658:	f7fe f900 	bl	800085c <__aeabi_ddiv>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002664:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	b21a      	sxth	r2, r3
 800266c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002670:	b21b      	sxth	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	b21b      	sxth	r3, r3
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff5c 	bl	8000534 <__aeabi_i2d>
 800267c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002680:	f7fe f8ec 	bl	800085c <__aeabi_ddiv>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800268c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	b21a      	sxth	r2, r3
 8002694:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002698:	b21b      	sxth	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b21b      	sxth	r3, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd ff48 	bl	8000534 <__aeabi_i2d>
 80026a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026a8:	f7fe f8d8 	bl	800085c <__aeabi_ddiv>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80026b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	b21a      	sxth	r2, r3
 80026bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd ff34 	bl	8000534 <__aeabi_i2d>
 80026cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026d0:	f7fe f8c4 	bl	800085c <__aeabi_ddiv>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80026dc:	e03b      	b.n	8002756 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80026de:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd ff1f 	bl	8000534 <__aeabi_i2d>
 80026f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026fa:	f7fe f8af 	bl	800085c <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002706:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	b21a      	sxth	r2, r3
 800270e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002712:	b21b      	sxth	r3, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	b21b      	sxth	r3, r3
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ff0b 	bl	8000534 <__aeabi_i2d>
 800271e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002722:	f7fe f89b 	bl	800085c <__aeabi_ddiv>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800272e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	b21a      	sxth	r2, r3
 8002736:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800273a:	b21b      	sxth	r3, r3
 800273c:	4313      	orrs	r3, r2
 800273e:	b21b      	sxth	r3, r3
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd fef7 	bl	8000534 <__aeabi_i2d>
 8002746:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800274a:	f7fe f887 	bl	800085c <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8002756:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800275a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800275e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002762:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002766:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800276a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800276e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002772:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002776:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800277a:	ec49 8b14 	vmov	d4, r8, r9
 800277e:	ec45 4b15 	vmov	d5, r4, r5
 8002782:	ec41 0b16 	vmov	d6, r0, r1
 8002786:	ec43 2b17 	vmov	d7, r2, r3
}
 800278a:	eeb0 0a44 	vmov.f32	s0, s8
 800278e:	eef0 0a64 	vmov.f32	s1, s9
 8002792:	eeb0 1a45 	vmov.f32	s2, s10
 8002796:	eef0 1a65 	vmov.f32	s3, s11
 800279a:	eeb0 2a46 	vmov.f32	s4, s12
 800279e:	eef0 2a66 	vmov.f32	s5, s13
 80027a2:	eeb0 3a47 	vmov.f32	s6, s14
 80027a6:	eef0 3a67 	vmov.f32	s7, s15
 80027aa:	3778      	adds	r7, #120	; 0x78
 80027ac:	46bd      	mov	sp, r7
 80027ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027b2:	bf00      	nop
 80027b4:	3ff00000 	.word	0x3ff00000
 80027b8:	20000016 	.word	0x20000016
 80027bc:	20000010 	.word	0x20000010
 80027c0:	20000012 	.word	0x20000012
 80027c4:	20000014 	.word	0x20000014
 80027c8:	20000018 	.word	0x20000018

080027cc <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80027cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027d0:	b090      	sub	sp, #64	; 0x40
 80027d2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80027d4:	201a      	movs	r0, #26
 80027d6:	f7ff feb5 	bl	8002544 <bno055_getVector>
 80027da:	eeb0 4a40 	vmov.f32	s8, s0
 80027de:	eef0 4a60 	vmov.f32	s9, s1
 80027e2:	eeb0 5a41 	vmov.f32	s10, s2
 80027e6:	eef0 5a61 	vmov.f32	s11, s3
 80027ea:	eeb0 6a42 	vmov.f32	s12, s4
 80027ee:	eef0 6a62 	vmov.f32	s13, s5
 80027f2:	eeb0 7a43 	vmov.f32	s14, s6
 80027f6:	eef0 7a63 	vmov.f32	s15, s7
 80027fa:	ed87 4b08 	vstr	d4, [r7, #32]
 80027fe:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8002802:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8002806:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800280a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800280e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002812:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002816:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800281a:	ec49 8b14 	vmov	d4, r8, r9
 800281e:	ec45 4b15 	vmov	d5, r4, r5
 8002822:	ec41 0b16 	vmov	d6, r0, r1
 8002826:	ec43 2b17 	vmov	d7, r2, r3
}
 800282a:	eeb0 0a44 	vmov.f32	s0, s8
 800282e:	eef0 0a64 	vmov.f32	s1, s9
 8002832:	eeb0 1a45 	vmov.f32	s2, s10
 8002836:	eef0 1a65 	vmov.f32	s3, s11
 800283a:	eeb0 2a46 	vmov.f32	s4, s12
 800283e:	eef0 2a66 	vmov.f32	s5, s13
 8002842:	eeb0 3a47 	vmov.f32	s6, s14
 8002846:	eef0 3a67 	vmov.f32	s7, s15
 800284a:	3740      	adds	r7, #64	; 0x40
 800284c:	46bd      	mov	sp, r7
 800284e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002854 <SERVO_Init>:
#include "servo.h"

/*******************************/
void SERVO_Init(servo *Servo, uint16_t home, int8_t OutMin, int8_t OutMax) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	461a      	mov	r2, r3
 8002862:	4603      	mov	r3, r0
 8002864:	807b      	strh	r3, [r7, #2]
 8002866:	460b      	mov	r3, r1
 8002868:	707b      	strb	r3, [r7, #1]
 800286a:	4613      	mov	r3, r2
 800286c:	703b      	strb	r3, [r7, #0]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800286e:	2104      	movs	r1, #4
 8002870:	4808      	ldr	r0, [pc, #32]	; (8002894 <SERVO_Init+0x40>)
 8002872:	f002 fe51 	bl	8005518 <HAL_TIM_PWM_Start>

	Servo->Min = OutMin;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	787a      	ldrb	r2, [r7, #1]
 800287a:	705a      	strb	r2, [r3, #1]
  Servo->Max = OutMax;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	783a      	ldrb	r2, [r7, #0]
 8002880:	701a      	strb	r2, [r3, #0]

	/******* SET HOME *******/
	TIM2->CCR2 = home; // from 45 to 115
 8002882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002886:	887b      	ldrh	r3, [r7, #2]
 8002888:	6393      	str	r3, [r2, #56]	; 0x38
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	2000032c 	.word	0x2000032c

08002898 <SERVO_Caliration>:

/*******************************/
float SERVO_Caliration(float angle) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	ed87 0a01 	vstr	s0, [r7, #4]
	float angle_pwm=0;
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]

	// 0 do: 75
	// 25 do: 90 -> phai
	// -25 do: 60 -> trai
	angle_pwm =  0.6 * (double)angle + 75; //from 45 to 250
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7fd fe55 	bl	8000558 <__aeabi_f2d>
 80028ae:	a310      	add	r3, pc, #64	; (adr r3, 80028f0 <SERVO_Caliration+0x58>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f7fd fea8 	bl	8000608 <__aeabi_dmul>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	a30d      	add	r3, pc, #52	; (adr r3, 80028f8 <SERVO_Caliration+0x60>)
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	f7fd fce9 	bl	800029c <__adddf3>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	f7fe f991 	bl	8000bf8 <__aeabi_d2f>
 80028d6:	4603      	mov	r3, r0
 80028d8:	60fb      	str	r3, [r7, #12]

	return angle_pwm;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	ee07 3a90 	vmov	s15, r3
}
 80028e0:	eeb0 0a67 	vmov.f32	s0, s15
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	f3af 8000 	nop.w
 80028f0:	33333333 	.word	0x33333333
 80028f4:	3fe33333 	.word	0x3fe33333
 80028f8:	00000000 	.word	0x00000000
 80028fc:	4052c000 	.word	0x4052c000

08002900 <SERVO_Run>:

/*******************************/
void SERVO_Run(servo *Servo, int8_t angle) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	70fb      	strb	r3, [r7, #3]
	/******* Saturation *******/
	if (angle >= Servo->Max) angle=Servo->Max;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f993 3000 	ldrsb.w	r3, [r3]
 8002912:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8002916:	429a      	cmp	r2, r3
 8002918:	db03      	blt.n	8002922 <SERVO_Run+0x22>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	70fb      	strb	r3, [r7, #3]
 8002920:	e009      	b.n	8002936 <SERVO_Run+0x36>
	else if (angle <= Servo->Min) angle=Servo->Min;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002928:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800292c:	429a      	cmp	r2, r3
 800292e:	dc02      	bgt.n	8002936 <SERVO_Run+0x36>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	785b      	ldrb	r3, [r3, #1]
 8002934:	70fb      	strb	r3, [r7, #3]

	/******* Calibration *******/
	Servo->PWM = SERVO_Caliration(angle);
 8002936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002942:	eeb0 0a67 	vmov.f32	s0, s15
 8002946:	f7ff ffa7 	bl	8002898 <SERVO_Caliration>
 800294a:	eef0 7a40 	vmov.f32	s15, s0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	edc3 7a01 	vstr	s15, [r3, #4]

	/******* PWM *******/
	TIM2->CCR2 = (int)Servo->PWM;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	edd3 7a01 	vldr	s15, [r3, #4]
 800295a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800295e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002962:	ee17 2a90 	vmov	r2, s15
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <Run>:
/*********************/
uint8_t status=0;
double count = 0;

/*********************/
void Run(esc *Esc, servo *Servo, int16_t speed, int8_t angle) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	4611      	mov	r1, r2
 800297c:	461a      	mov	r2, r3
 800297e:	460b      	mov	r3, r1
 8002980:	80fb      	strh	r3, [r7, #6]
 8002982:	4613      	mov	r3, r2
 8002984:	717b      	strb	r3, [r7, #5]
	/*********** Reverse Mode ***********/
	if (speed < 0 && count<=500) {
 8002986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298a:	2b00      	cmp	r3, #0
 800298c:	da4f      	bge.n	8002a2e <Run+0xbe>
 800298e:	4b3a      	ldr	r3, [pc, #232]	; (8002a78 <Run+0x108>)
 8002990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <Run+0x10c>)
 800299a:	f7fe f8b1 	bl	8000b00 <__aeabi_dcmple>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d044      	beq.n	8002a2e <Run+0xbe>
		while (count <= 80) {
 80029a4:	e00f      	b.n	80029c6 <Run+0x56>
			TIM3->CCR2 = 80;
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <Run+0x110>)
 80029a8:	2250      	movs	r2, #80	; 0x50
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
			count += 0.001;
 80029ac:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <Run+0x108>)
 80029ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b2:	a32f      	add	r3, pc, #188	; (adr r3, 8002a70 <Run+0x100>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fc70 	bl	800029c <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	492d      	ldr	r1, [pc, #180]	; (8002a78 <Run+0x108>)
 80029c2:	e9c1 2300 	strd	r2, r3, [r1]
		while (count <= 80) {
 80029c6:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <Run+0x108>)
 80029c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <Run+0x114>)
 80029d2:	f7fe f895 	bl	8000b00 <__aeabi_dcmple>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1e4      	bne.n	80029a6 <Run+0x36>
		}

		while (count >= 80 && count <= 500) {
 80029dc:	e00f      	b.n	80029fe <Run+0x8e>
			TIM3->CCR2 = 100;
 80029de:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <Run+0x110>)
 80029e0:	2264      	movs	r2, #100	; 0x64
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
			count += 0.001;
 80029e4:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <Run+0x108>)
 80029e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ea:	a321      	add	r3, pc, #132	; (adr r3, 8002a70 <Run+0x100>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fd fc54 	bl	800029c <__adddf3>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	491f      	ldr	r1, [pc, #124]	; (8002a78 <Run+0x108>)
 80029fa:	e9c1 2300 	strd	r2, r3, [r1]
		while (count >= 80 && count <= 500) {
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <Run+0x108>)
 8002a00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <Run+0x114>)
 8002a0a:	f7fe f883 	bl	8000b14 <__aeabi_dcmpge>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d100      	bne.n	8002a16 <Run+0xa6>
	if (speed < 0 && count<=500) {
 8002a14:	e016      	b.n	8002a44 <Run+0xd4>
		while (count >= 80 && count <= 500) {
 8002a16:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <Run+0x108>)
 8002a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <Run+0x10c>)
 8002a22:	f7fe f86d 	bl	8000b00 <__aeabi_dcmple>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1d8      	bne.n	80029de <Run+0x6e>
	if (speed < 0 && count<=500) {
 8002a2c:	e00a      	b.n	8002a44 <Run+0xd4>
		}
	}
	else if (speed > 0) count=0;
 8002a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	dd06      	ble.n	8002a44 <Run+0xd4>
 8002a36:	4910      	ldr	r1, [pc, #64]	; (8002a78 <Run+0x108>)
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9c1 2300 	strd	r2, r3, [r1]

	/*********** Controller ***********/
	ESC_Run(Esc, speed);
 8002a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a50:	eeb0 0a67 	vmov.f32	s0, s15
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff fc57 	bl	8002308 <ESC_Run>
	SERVO_Run(Servo, angle);
 8002a5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	68b8      	ldr	r0, [r7, #8]
 8002a62:	f7ff ff4d 	bl	8002900 <SERVO_Run>
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a74:	3f50624d 	.word	0x3f50624d
 8002a78:	20000460 	.word	0x20000460
 8002a7c:	407f4000 	.word	0x407f4000
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40540000 	.word	0x40540000

08002a88 <checkNull>:
#include "log.h"

char txLogBuffer[100] = {0};
UART_HandleTypeDef *targetUART;

static HAL_StatusTypeDef checkNull(){
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
	if(targetUART != NULL) return HAL_OK;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <checkNull+0x1c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <checkNull+0x10>
 8002a94:	2300      	movs	r3, #0
 8002a96:	e000      	b.n	8002a9a <checkNull+0x12>
	return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	200004cc 	.word	0x200004cc

08002aa8 <log_Init>:

void log_Init(UART_HandleTypeDef *huart){
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

	targetUART = huart;
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <log_Init+0x1c>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	200004cc 	.word	0x200004cc

08002ac8 <log_TransmitCompleteHandle>:

void log_TransmitCompleteHandle(UART_HandleTypeDef *huart){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	if(huart != targetUART) return;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <log_TransmitCompleteHandle+0x30>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d109      	bne.n	8002aee <log_TransmitCompleteHandle+0x26>
	memset(txLogBuffer,0,strlen(txLogBuffer));
 8002ada:	4808      	ldr	r0, [pc, #32]	; (8002afc <log_TransmitCompleteHandle+0x34>)
 8002adc:	f7fd fb80 	bl	80001e0 <strlen>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4805      	ldr	r0, [pc, #20]	; (8002afc <log_TransmitCompleteHandle+0x34>)
 8002ae8:	f004 feea 	bl	80078c0 <memset>
 8002aec:	e000      	b.n	8002af0 <log_TransmitCompleteHandle+0x28>
	if(huart != targetUART) return;
 8002aee:	bf00      	nop

}
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200004cc 	.word	0x200004cc
 8002afc:	20000468 	.word	0x20000468

08002b00 <log_SendString>:

void log_SendString(){
 8002b00:	b598      	push	{r3, r4, r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	if(checkNull() != HAL_OK) return;
 8002b04:	f7ff ffc0 	bl	8002a88 <checkNull>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d114      	bne.n	8002b38 <log_SendString+0x38>
	txLogBuffer[strlen(txLogBuffer) -1] = '\n';  //xóa dấu phẩy cuối cùng, thay bằng \n
 8002b0e:	480b      	ldr	r0, [pc, #44]	; (8002b3c <log_SendString+0x3c>)
 8002b10:	f7fd fb66 	bl	80001e0 <strlen>
 8002b14:	4603      	mov	r3, r0
 8002b16:	3b01      	subs	r3, #1
 8002b18:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <log_SendString+0x3c>)
 8002b1a:	210a      	movs	r1, #10
 8002b1c:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_IT(targetUART, (uint8_t*)txLogBuffer, strlen(txLogBuffer));
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <log_SendString+0x40>)
 8002b20:	681c      	ldr	r4, [r3, #0]
 8002b22:	4806      	ldr	r0, [pc, #24]	; (8002b3c <log_SendString+0x3c>)
 8002b24:	f7fd fb5c 	bl	80001e0 <strlen>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4903      	ldr	r1, [pc, #12]	; (8002b3c <log_SendString+0x3c>)
 8002b30:	4620      	mov	r0, r4
 8002b32:	f003 fc88 	bl	8006446 <HAL_UART_Transmit_IT>
 8002b36:	e000      	b.n	8002b3a <log_SendString+0x3a>
	if(checkNull() != HAL_OK) return;
 8002b38:	bf00      	nop
}
 8002b3a:	bd98      	pop	{r3, r4, r7, pc}
 8002b3c:	20000468 	.word	0x20000468
 8002b40:	200004cc 	.word	0x200004cc

08002b44 <log_AddArgumentToBuffer_float>:
	char s[10] = {0};
	strcpy(s,name);
	sprintf(txLogBuffer+strlen(txLogBuffer),"%s,",s);
}

void log_AddArgumentToBuffer_float(float data){
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(txLogBuffer+strlen(txLogBuffer),"%.2f,",data);
 8002b4e:	4809      	ldr	r0, [pc, #36]	; (8002b74 <log_AddArgumentToBuffer_float+0x30>)
 8002b50:	f7fd fb46 	bl	80001e0 <strlen>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <log_AddArgumentToBuffer_float+0x30>)
 8002b58:	189c      	adds	r4, r3, r2
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fd fcfc 	bl	8000558 <__aeabi_f2d>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4904      	ldr	r1, [pc, #16]	; (8002b78 <log_AddArgumentToBuffer_float+0x34>)
 8002b66:	4620      	mov	r0, r4
 8002b68:	f005 fdc0 	bl	80086ec <siprintf>
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd90      	pop	{r4, r7, pc}
 8002b74:	20000468 	.word	0x20000468
 8002b78:	0800c508 	.word	0x0800c508

08002b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <HAL_Init+0x40>)
 8002b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <HAL_Init+0x40>)
 8002b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <HAL_Init+0x40>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f000 f94f 	bl	8002e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002baa:	200f      	movs	r0, #15
 8002bac:	f000 f808 	bl	8002bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb0:	f7fe fe80 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00

08002bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_InitTick+0x54>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x58>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f967 	bl	8002eb2 <HAL_SYSTICK_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00e      	b.n	8002c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	d80a      	bhi.n	8002c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f000 f92f 	bl	8002e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c00:	4a06      	ldr	r2, [pc, #24]	; (8002c1c <HAL_InitTick+0x5c>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000020 	.word	0x20000020
 8002c1c:	2000001c 	.word	0x2000001c

08002c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_IncTick+0x20>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x24>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_IncTick+0x24>)
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000020 	.word	0x20000020
 8002c44:	200004d0 	.word	0x200004d0

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	200004d0 	.word	0x200004d0

08002c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff ffee 	bl	8002c48 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d005      	beq.n	8002c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_Delay+0x44>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c86:	bf00      	nop
 8002c88:	f7ff ffde 	bl	8002c48 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d8f7      	bhi.n	8002c88 <HAL_Delay+0x28>
  {
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000020 	.word	0x20000020

08002ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cda:	4a04      	ldr	r2, [pc, #16]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	60d3      	str	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 0307 	and.w	r3, r3, #7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db0b      	blt.n	8002d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <__NVIC_EnableIRQ+0x38>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000e100 	.word	0xe000e100

08002d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db0a      	blt.n	8002d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <__NVIC_SetPriority+0x4c>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d70:	e00a      	b.n	8002d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <__NVIC_SetPriority+0x50>)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	3b04      	subs	r3, #4
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	440b      	add	r3, r1
 8002d86:	761a      	strb	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	bf28      	it	cs
 8002dba:	2304      	movcs	r3, #4
 8002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d902      	bls.n	8002dcc <NVIC_EncodePriority+0x30>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3b03      	subs	r3, #3
 8002dca:	e000      	b.n	8002dce <NVIC_EncodePriority+0x32>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	4313      	orrs	r3, r2
         );
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e14:	d301      	bcc.n	8002e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00f      	b.n	8002e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <SysTick_Config+0x40>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e22:	210f      	movs	r1, #15
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	f7ff ff8e 	bl	8002d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <SysTick_Config+0x40>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <SysTick_Config+0x40>)
 8002e34:	2207      	movs	r2, #7
 8002e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	e000e010 	.word	0xe000e010

08002e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ff29 	bl	8002ca8 <__NVIC_SetPriorityGrouping>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e70:	f7ff ff3e 	bl	8002cf0 <__NVIC_GetPriorityGrouping>
 8002e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f7ff ff8e 	bl	8002d9c <NVIC_EncodePriority>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff5d 	bl	8002d48 <__NVIC_SetPriority>
}
 8002e8e:	bf00      	nop
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff31 	bl	8002d0c <__NVIC_EnableIRQ>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ffa2 	bl	8002e04 <SysTick_Config>
 8002ec0:	4603      	mov	r3, r0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff feb6 	bl	8002c48 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e099      	b.n	800301c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f08:	e00f      	b.n	8002f2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f0a:	f7ff fe9d 	bl	8002c48 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d908      	bls.n	8002f2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e078      	b.n	800301c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e8      	bne.n	8002f0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4b38      	ldr	r3, [pc, #224]	; (8003024 <HAL_DMA_Init+0x158>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d107      	bne.n	8002f94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0307 	bic.w	r3, r3, #7
 8002faa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d117      	bne.n	8002fee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fb01 	bl	80035d8 <DMA_CheckFifoParam>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fea:	2301      	movs	r3, #1
 8002fec:	e016      	b.n	800301c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fab8 	bl	800356c <DMA_CalcBaseAndBitshift>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	223f      	movs	r2, #63	; 0x3f
 8003006:	409a      	lsls	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	f010803f 	.word	0xf010803f

08003028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_DMA_Start_IT+0x26>
 800304a:	2302      	movs	r3, #2
 800304c:	e040      	b.n	80030d0 <HAL_DMA_Start_IT+0xa8>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d12f      	bne.n	80030c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fa4a 	bl	8003510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	223f      	movs	r2, #63	; 0x3f
 8003082:	409a      	lsls	r2, r3
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0216 	orr.w	r2, r2, #22
 8003096:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0208 	orr.w	r2, r2, #8
 80030ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e005      	b.n	80030ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
 80030cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030e6:	f7ff fdaf 	bl	8002c48 <HAL_GetTick>
 80030ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d008      	beq.n	800310a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e052      	b.n	80031b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0216 	bic.w	r2, r2, #22
 8003118:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003128:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <HAL_DMA_Abort+0x62>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0208 	bic.w	r2, r2, #8
 8003148:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800315a:	e013      	b.n	8003184 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800315c:	f7ff fd74 	bl	8002c48 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b05      	cmp	r3, #5
 8003168:	d90c      	bls.n	8003184 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e015      	b.n	80031b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e4      	bne.n	800315c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	223f      	movs	r2, #63	; 0x3f
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d004      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00c      	b.n	80031f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2205      	movs	r2, #5
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003208:	4b8e      	ldr	r3, [pc, #568]	; (8003444 <HAL_DMA_IRQHandler+0x248>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a8e      	ldr	r2, [pc, #568]	; (8003448 <HAL_DMA_IRQHandler+0x24c>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0a9b      	lsrs	r3, r3, #10
 8003214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	2208      	movs	r2, #8
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01a      	beq.n	8003268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0204 	bic.w	r2, r2, #4
 800324e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2208      	movs	r2, #8
 8003256:	409a      	lsls	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d012      	beq.n	800329e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2201      	movs	r2, #1
 800328c:	409a      	lsls	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	f043 0202 	orr.w	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	2204      	movs	r2, #4
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	2204      	movs	r2, #4
 80032c2:	409a      	lsls	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f043 0204 	orr.w	r2, r3, #4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2210      	movs	r2, #16
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d043      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d03c      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2210      	movs	r2, #16
 80032f8:	409a      	lsls	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d018      	beq.n	800333e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d108      	bne.n	800332c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d024      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
 800332a:	e01f      	b.n	800336c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
 800333c:	e016      	b.n	800336c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0208 	bic.w	r2, r2, #8
 800335a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	2220      	movs	r2, #32
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 808f 	beq.w	800349c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8087 	beq.w	800349c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2220      	movs	r2, #32
 8003394:	409a      	lsls	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d136      	bne.n	8003414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0216 	bic.w	r2, r2, #22
 80033b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <HAL_DMA_IRQHandler+0x1da>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0208 	bic.w	r2, r2, #8
 80033e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	223f      	movs	r2, #63	; 0x3f
 80033ec:	409a      	lsls	r2, r3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	2b00      	cmp	r3, #0
 8003408:	d07e      	beq.n	8003508 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
        }
        return;
 8003412:	e079      	b.n	8003508 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01d      	beq.n	800345e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	2b00      	cmp	r3, #0
 8003436:	d031      	beq.n	800349c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
 8003440:	e02c      	b.n	800349c <HAL_DMA_IRQHandler+0x2a0>
 8003442:	bf00      	nop
 8003444:	20000000 	.word	0x20000000
 8003448:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d023      	beq.n	800349c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
 800345c:	e01e      	b.n	800349c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10f      	bne.n	800348c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0210 	bic.w	r2, r2, #16
 800347a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d032      	beq.n	800350a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d022      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2205      	movs	r2, #5
 80034b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	3301      	adds	r3, #1
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d307      	bcc.n	80034e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f2      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x2cc>
 80034e2:	e000      	b.n	80034e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
 8003506:	e000      	b.n	800350a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003508:	bf00      	nop
    }
  }
}
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800352c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d108      	bne.n	8003550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800354e:	e007      	b.n	8003560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	60da      	str	r2, [r3, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3b10      	subs	r3, #16
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <DMA_CalcBaseAndBitshift+0x64>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003586:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d909      	bls.n	80035ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58
 80035ac:	e007      	b.n	80035be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	aaaaaaab 	.word	0xaaaaaaab
 80035d4:	0800c528 	.word	0x0800c528

080035d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d11f      	bne.n	8003632 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d856      	bhi.n	80036a6 <DMA_CheckFifoParam+0xce>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <DMA_CheckFifoParam+0x28>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003611 	.word	0x08003611
 8003604:	08003623 	.word	0x08003623
 8003608:	08003611 	.word	0x08003611
 800360c:	080036a7 	.word	0x080036a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d046      	beq.n	80036aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003620:	e043      	b.n	80036aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800362a:	d140      	bne.n	80036ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e03d      	b.n	80036ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363a:	d121      	bne.n	8003680 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d837      	bhi.n	80036b2 <DMA_CheckFifoParam+0xda>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <DMA_CheckFifoParam+0x70>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	08003659 	.word	0x08003659
 800364c:	0800365f 	.word	0x0800365f
 8003650:	08003659 	.word	0x08003659
 8003654:	08003671 	.word	0x08003671
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e030      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d025      	beq.n	80036b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366e:	e022      	b.n	80036b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003678:	d11f      	bne.n	80036ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800367e:	e01c      	b.n	80036ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d903      	bls.n	800368e <DMA_CheckFifoParam+0xb6>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d003      	beq.n	8003694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800368c:	e018      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      break;
 8003692:	e015      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e00b      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036a6:	bf00      	nop
 80036a8:	e00a      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e008      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e006      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e004      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e002      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
    }
  } 
  
  return status; 
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop

080036d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	e159      	b.n	80039a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036ec:	2201      	movs	r2, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	429a      	cmp	r2, r3
 8003706:	f040 8148 	bne.w	800399a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d005      	beq.n	8003722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371e:	2b02      	cmp	r3, #2
 8003720:	d130      	bne.n	8003784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	2203      	movs	r2, #3
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003758:	2201      	movs	r2, #1
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 0201 	and.w	r2, r3, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b03      	cmp	r3, #3
 800378e:	d017      	beq.n	80037c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d123      	bne.n	8003814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	08da      	lsrs	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3208      	adds	r2, #8
 80037d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	220f      	movs	r2, #15
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	08da      	lsrs	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3208      	adds	r2, #8
 800380e:	69b9      	ldr	r1, [r7, #24]
 8003810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0203 	and.w	r2, r3, #3
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a2 	beq.w	800399a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b57      	ldr	r3, [pc, #348]	; (80039b8 <HAL_GPIO_Init+0x2e8>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	4a56      	ldr	r2, [pc, #344]	; (80039b8 <HAL_GPIO_Init+0x2e8>)
 8003860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003864:	6453      	str	r3, [r2, #68]	; 0x44
 8003866:	4b54      	ldr	r3, [pc, #336]	; (80039b8 <HAL_GPIO_Init+0x2e8>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003872:	4a52      	ldr	r2, [pc, #328]	; (80039bc <HAL_GPIO_Init+0x2ec>)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	3302      	adds	r3, #2
 800387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	220f      	movs	r2, #15
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a49      	ldr	r2, [pc, #292]	; (80039c0 <HAL_GPIO_Init+0x2f0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d019      	beq.n	80038d2 <HAL_GPIO_Init+0x202>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a48      	ldr	r2, [pc, #288]	; (80039c4 <HAL_GPIO_Init+0x2f4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_GPIO_Init+0x1fe>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a47      	ldr	r2, [pc, #284]	; (80039c8 <HAL_GPIO_Init+0x2f8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00d      	beq.n	80038ca <HAL_GPIO_Init+0x1fa>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a46      	ldr	r2, [pc, #280]	; (80039cc <HAL_GPIO_Init+0x2fc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <HAL_GPIO_Init+0x1f6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a45      	ldr	r2, [pc, #276]	; (80039d0 <HAL_GPIO_Init+0x300>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_GPIO_Init+0x1f2>
 80038be:	2304      	movs	r3, #4
 80038c0:	e008      	b.n	80038d4 <HAL_GPIO_Init+0x204>
 80038c2:	2307      	movs	r3, #7
 80038c4:	e006      	b.n	80038d4 <HAL_GPIO_Init+0x204>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e004      	b.n	80038d4 <HAL_GPIO_Init+0x204>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e002      	b.n	80038d4 <HAL_GPIO_Init+0x204>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_GPIO_Init+0x204>
 80038d2:	2300      	movs	r3, #0
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	f002 0203 	and.w	r2, r2, #3
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	4093      	lsls	r3, r2
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e4:	4935      	ldr	r1, [pc, #212]	; (80039bc <HAL_GPIO_Init+0x2ec>)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	3302      	adds	r3, #2
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038f2:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_GPIO_Init+0x304>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003916:	4a2f      	ldr	r2, [pc, #188]	; (80039d4 <HAL_GPIO_Init+0x304>)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800391c:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <HAL_GPIO_Init+0x304>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003940:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <HAL_GPIO_Init+0x304>)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_GPIO_Init+0x304>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_GPIO_Init+0x304>)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003970:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <HAL_GPIO_Init+0x304>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003994:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <HAL_GPIO_Init+0x304>)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3301      	adds	r3, #1
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	2b0f      	cmp	r3, #15
 80039a4:	f67f aea2 	bls.w	80036ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3724      	adds	r7, #36	; 0x24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40013800 	.word	0x40013800
 80039c0:	40020000 	.word	0x40020000
 80039c4:	40020400 	.word	0x40020400
 80039c8:	40020800 	.word	0x40020800
 80039cc:	40020c00 	.word	0x40020c00
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40013c00 	.word	0x40013c00

080039d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e8:	787b      	ldrb	r3, [r7, #1]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039f4:	e003      	b.n	80039fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039f6:	887b      	ldrh	r3, [r7, #2]
 80039f8:	041a      	lsls	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	619a      	str	r2, [r3, #24]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a1c:	887a      	ldrh	r2, [r7, #2]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4013      	ands	r3, r2
 8003a22:	041a      	lsls	r2, r3, #16
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	43d9      	mvns	r1, r3
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	400b      	ands	r3, r1
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	619a      	str	r2, [r3, #24]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fefe 	bl	8001860 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40013c00 	.word	0x40013c00

08003a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e12b      	b.n	8003cda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fb8a 	bl	80011b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ad4:	f001 fbec 	bl	80052b0 <HAL_RCC_GetPCLK1Freq>
 8003ad8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4a81      	ldr	r2, [pc, #516]	; (8003ce4 <HAL_I2C_Init+0x274>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d807      	bhi.n	8003af4 <HAL_I2C_Init+0x84>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a80      	ldr	r2, [pc, #512]	; (8003ce8 <HAL_I2C_Init+0x278>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	bf94      	ite	ls
 8003aec:	2301      	movls	r3, #1
 8003aee:	2300      	movhi	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e006      	b.n	8003b02 <HAL_I2C_Init+0x92>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a7d      	ldr	r2, [pc, #500]	; (8003cec <HAL_I2C_Init+0x27c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	bf94      	ite	ls
 8003afc:	2301      	movls	r3, #1
 8003afe:	2300      	movhi	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0e7      	b.n	8003cda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a78      	ldr	r2, [pc, #480]	; (8003cf0 <HAL_I2C_Init+0x280>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	0c9b      	lsrs	r3, r3, #18
 8003b14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a6a      	ldr	r2, [pc, #424]	; (8003ce4 <HAL_I2C_Init+0x274>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d802      	bhi.n	8003b44 <HAL_I2C_Init+0xd4>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3301      	adds	r3, #1
 8003b42:	e009      	b.n	8003b58 <HAL_I2C_Init+0xe8>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	4a69      	ldr	r2, [pc, #420]	; (8003cf4 <HAL_I2C_Init+0x284>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	3301      	adds	r3, #1
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	495c      	ldr	r1, [pc, #368]	; (8003ce4 <HAL_I2C_Init+0x274>)
 8003b74:	428b      	cmp	r3, r1
 8003b76:	d819      	bhi.n	8003bac <HAL_I2C_Init+0x13c>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e59      	subs	r1, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b86:	1c59      	adds	r1, r3, #1
 8003b88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b8c:	400b      	ands	r3, r1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_I2C_Init+0x138>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1e59      	subs	r1, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba6:	e051      	b.n	8003c4c <HAL_I2C_Init+0x1dc>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	e04f      	b.n	8003c4c <HAL_I2C_Init+0x1dc>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d111      	bne.n	8003bd8 <HAL_I2C_Init+0x168>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1e58      	subs	r0, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	440b      	add	r3, r1
 8003bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	e012      	b.n	8003bfe <HAL_I2C_Init+0x18e>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1e58      	subs	r0, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	0099      	lsls	r1, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Init+0x196>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e022      	b.n	8003c4c <HAL_I2C_Init+0x1dc>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10e      	bne.n	8003c2c <HAL_I2C_Init+0x1bc>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1e58      	subs	r0, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6859      	ldr	r1, [r3, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	440b      	add	r3, r1
 8003c1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c20:	3301      	adds	r3, #1
 8003c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2a:	e00f      	b.n	8003c4c <HAL_I2C_Init+0x1dc>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1e58      	subs	r0, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	0099      	lsls	r1, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	6809      	ldr	r1, [r1, #0]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6911      	ldr	r1, [r2, #16]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	68d2      	ldr	r2, [r2, #12]
 8003c86:	4311      	orrs	r1, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	000186a0 	.word	0x000186a0
 8003ce8:	001e847f 	.word	0x001e847f
 8003cec:	003d08ff 	.word	0x003d08ff
 8003cf0:	431bde83 	.word	0x431bde83
 8003cf4:	10624dd3 	.word	0x10624dd3

08003cf8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	461a      	mov	r2, r3
 8003d04:	460b      	mov	r3, r1
 8003d06:	817b      	strh	r3, [r7, #10]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d0c:	f7fe ff9c 	bl	8002c48 <HAL_GetTick>
 8003d10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	f040 80e0 	bne.w	8003ee0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2319      	movs	r3, #25
 8003d26:	2201      	movs	r2, #1
 8003d28:	4970      	ldr	r1, [pc, #448]	; (8003eec <HAL_I2C_Master_Transmit+0x1f4>)
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fc72 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0d3      	b.n	8003ee2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_I2C_Master_Transmit+0x50>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e0cc      	b.n	8003ee2 <HAL_I2C_Master_Transmit+0x1ea>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d007      	beq.n	8003d6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2221      	movs	r2, #33	; 0x21
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2210      	movs	r2, #16
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	893a      	ldrh	r2, [r7, #8]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4a50      	ldr	r2, [pc, #320]	; (8003ef0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003dae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003db0:	8979      	ldrh	r1, [r7, #10]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	6a3a      	ldr	r2, [r7, #32]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fadc 	bl	8004374 <I2C_MasterRequestWrite>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e08d      	b.n	8003ee2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ddc:	e066      	b.n	8003eac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	6a39      	ldr	r1, [r7, #32]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fcec 	bl	80047c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d107      	bne.n	8003e06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e06b      	b.n	8003ee2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	781a      	ldrb	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d11b      	bne.n	8003e80 <HAL_I2C_Master_Transmit+0x188>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d017      	beq.n	8003e80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	6a39      	ldr	r1, [r7, #32]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fcdc 	bl	8004842 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00d      	beq.n	8003eac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d107      	bne.n	8003ea8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e01a      	b.n	8003ee2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d194      	bne.n	8003dde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	00100002 	.word	0x00100002
 8003ef0:	ffff0000 	.word	0xffff0000

08003ef4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	; 0x30
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	461a      	mov	r2, r3
 8003f00:	460b      	mov	r3, r1
 8003f02:	817b      	strh	r3, [r7, #10]
 8003f04:	4613      	mov	r3, r2
 8003f06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f08:	f7fe fe9e 	bl	8002c48 <HAL_GetTick>
 8003f0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	f040 820b 	bne.w	8004332 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	2319      	movs	r3, #25
 8003f22:	2201      	movs	r2, #1
 8003f24:	497c      	ldr	r1, [pc, #496]	; (8004118 <HAL_I2C_Master_Receive+0x224>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fb74 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	e1fe      	b.n	8004334 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_I2C_Master_Receive+0x50>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e1f7      	b.n	8004334 <HAL_I2C_Master_Receive+0x440>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d007      	beq.n	8003f6a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2222      	movs	r2, #34	; 0x22
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2210      	movs	r2, #16
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	893a      	ldrh	r2, [r7, #8]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a5c      	ldr	r2, [pc, #368]	; (800411c <HAL_I2C_Master_Receive+0x228>)
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fac:	8979      	ldrh	r1, [r7, #10]
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fa60 	bl	8004478 <I2C_MasterRequestRead>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e1b8      	b.n	8004334 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e18c      	b.n	800430c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d11b      	bne.n	8004032 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e16c      	b.n	800430c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004036:	2b02      	cmp	r3, #2
 8004038:	d11b      	bne.n	8004072 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004048:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	e14c      	b.n	800430c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004098:	e138      	b.n	800430c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	2b03      	cmp	r3, #3
 80040a0:	f200 80f1 	bhi.w	8004286 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d123      	bne.n	80040f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fc07 	bl	80048c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e139      	b.n	8004334 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f2:	e10b      	b.n	800430c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d14e      	bne.n	800419a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	2200      	movs	r2, #0
 8004104:	4906      	ldr	r1, [pc, #24]	; (8004120 <HAL_I2C_Master_Receive+0x22c>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fa84 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e10e      	b.n	8004334 <HAL_I2C_Master_Receive+0x440>
 8004116:	bf00      	nop
 8004118:	00100002 	.word	0x00100002
 800411c:	ffff0000 	.word	0xffff0000
 8004120:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004198:	e0b8      	b.n	800430c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	2200      	movs	r2, #0
 80041a2:	4966      	ldr	r1, [pc, #408]	; (800433c <HAL_I2C_Master_Receive+0x448>)
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fa35 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0bf      	b.n	8004334 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	2200      	movs	r2, #0
 80041fe:	494f      	ldr	r1, [pc, #316]	; (800433c <HAL_I2C_Master_Receive+0x448>)
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fa07 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e091      	b.n	8004334 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004284:	e042      	b.n	800430c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fb1a 	bl	80048c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e04c      	b.n	8004334 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d118      	bne.n	800430c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	f47f aec2 	bne.w	800409a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3728      	adds	r7, #40	; 0x28
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	00010004 	.word	0x00010004

08004340 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434e:	b2db      	uxtb	r3, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	460b      	mov	r3, r1
 8004382:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d006      	beq.n	800439e <I2C_MasterRequestWrite+0x2a>
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d003      	beq.n	800439e <I2C_MasterRequestWrite+0x2a>
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800439c:	d108      	bne.n	80043b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e00b      	b.n	80043c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	2b12      	cmp	r3, #18
 80043b6:	d107      	bne.n	80043c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f91d 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ee:	d103      	bne.n	80043f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e035      	b.n	8004468 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004404:	d108      	bne.n	8004418 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004406:	897b      	ldrh	r3, [r7, #10]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004414:	611a      	str	r2, [r3, #16]
 8004416:	e01b      	b.n	8004450 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004418:	897b      	ldrh	r3, [r7, #10]
 800441a:	11db      	asrs	r3, r3, #7
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 0306 	and.w	r3, r3, #6
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f063 030f 	orn	r3, r3, #15
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	490e      	ldr	r1, [pc, #56]	; (8004470 <I2C_MasterRequestWrite+0xfc>)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f943 	bl	80046c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e010      	b.n	8004468 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004446:	897b      	ldrh	r3, [r7, #10]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4907      	ldr	r1, [pc, #28]	; (8004474 <I2C_MasterRequestWrite+0x100>)
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f933 	bl	80046c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	00010008 	.word	0x00010008
 8004474:	00010002 	.word	0x00010002

08004478 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	460b      	mov	r3, r1
 8004486:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800449c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d006      	beq.n	80044b2 <I2C_MasterRequestRead+0x3a>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d003      	beq.n	80044b2 <I2C_MasterRequestRead+0x3a>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044b0:	d108      	bne.n	80044c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e00b      	b.n	80044dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	2b11      	cmp	r3, #17
 80044ca:	d107      	bne.n	80044dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f893 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004502:	d103      	bne.n	800450c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e079      	b.n	8004604 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004518:	d108      	bne.n	800452c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800451a:	897b      	ldrh	r3, [r7, #10]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	b2da      	uxtb	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	611a      	str	r2, [r3, #16]
 800452a:	e05f      	b.n	80045ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800452c:	897b      	ldrh	r3, [r7, #10]
 800452e:	11db      	asrs	r3, r3, #7
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0306 	and.w	r3, r3, #6
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f063 030f 	orn	r3, r3, #15
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4930      	ldr	r1, [pc, #192]	; (800460c <I2C_MasterRequestRead+0x194>)
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f8b9 	bl	80046c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e054      	b.n	8004604 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800455a:	897b      	ldrh	r3, [r7, #10]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4929      	ldr	r1, [pc, #164]	; (8004610 <I2C_MasterRequestRead+0x198>)
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f8a9 	bl	80046c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e044      	b.n	8004604 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800459e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f831 	bl	8004614 <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00d      	beq.n	80045d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c6:	d103      	bne.n	80045d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e017      	b.n	8004604 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80045d4:	897b      	ldrh	r3, [r7, #10]
 80045d6:	11db      	asrs	r3, r3, #7
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f003 0306 	and.w	r3, r3, #6
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f063 030e 	orn	r3, r3, #14
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4907      	ldr	r1, [pc, #28]	; (8004610 <I2C_MasterRequestRead+0x198>)
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f865 	bl	80046c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	00010008 	.word	0x00010008
 8004610:	00010002 	.word	0x00010002

08004614 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	4613      	mov	r3, r2
 8004622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004624:	e025      	b.n	8004672 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d021      	beq.n	8004672 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462e:	f7fe fb0b 	bl	8002c48 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <I2C_WaitOnFlagUntilTimeout+0x30>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d116      	bne.n	8004672 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f043 0220 	orr.w	r2, r3, #32
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e023      	b.n	80046ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d10d      	bne.n	8004698 <I2C_WaitOnFlagUntilTimeout+0x84>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	43da      	mvns	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4013      	ands	r3, r2
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf0c      	ite	eq
 800468e:	2301      	moveq	r3, #1
 8004690:	2300      	movne	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	e00c      	b.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4013      	ands	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf0c      	ite	eq
 80046aa:	2301      	moveq	r3, #1
 80046ac:	2300      	movne	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	461a      	mov	r2, r3
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d0b6      	beq.n	8004626 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046d0:	e051      	b.n	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e0:	d123      	bne.n	800472a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f043 0204 	orr.w	r2, r3, #4
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e046      	b.n	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d021      	beq.n	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004732:	f7fe fa89 	bl	8002c48 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	429a      	cmp	r2, r3
 8004740:	d302      	bcc.n	8004748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d116      	bne.n	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f043 0220 	orr.w	r2, r3, #32
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e020      	b.n	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d10c      	bne.n	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	43da      	mvns	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4013      	ands	r3, r2
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e00b      	b.n	80047b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	43da      	mvns	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d18d      	bne.n	80046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047cc:	e02d      	b.n	800482a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f8ce 	bl	8004970 <I2C_IsAcknowledgeFailed>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e02d      	b.n	800483a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d021      	beq.n	800482a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e6:	f7fe fa2f 	bl	8002c48 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d116      	bne.n	800482a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e007      	b.n	800483a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b80      	cmp	r3, #128	; 0x80
 8004836:	d1ca      	bne.n	80047ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800484e:	e02d      	b.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f88d 	bl	8004970 <I2C_IsAcknowledgeFailed>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e02d      	b.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d021      	beq.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004868:	f7fe f9ee 	bl	8002c48 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	429a      	cmp	r2, r3
 8004876:	d302      	bcc.n	800487e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d116      	bne.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	f043 0220 	orr.w	r2, r3, #32
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e007      	b.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d1ca      	bne.n	8004850 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048d0:	e042      	b.n	8004958 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d119      	bne.n	8004914 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0210 	mvn.w	r2, #16
 80048e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e029      	b.n	8004968 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004914:	f7fe f998 	bl	8002c48 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	429a      	cmp	r2, r3
 8004922:	d302      	bcc.n	800492a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d116      	bne.n	8004958 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e007      	b.n	8004968 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d1b5      	bne.n	80048d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	d11b      	bne.n	80049c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004990:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	f043 0204 	orr.w	r2, r3, #4
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e267      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d075      	beq.n	8004ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ee:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d00c      	beq.n	8004a14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fa:	4b85      	ldr	r3, [pc, #532]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d112      	bne.n	8004a2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a06:	4b82      	ldr	r3, [pc, #520]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a12:	d10b      	bne.n	8004a2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	4b7e      	ldr	r3, [pc, #504]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05b      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x108>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d157      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e242      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a34:	d106      	bne.n	8004a44 <HAL_RCC_OscConfig+0x74>
 8004a36:	4b76      	ldr	r3, [pc, #472]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a75      	ldr	r2, [pc, #468]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e01d      	b.n	8004a80 <HAL_RCC_OscConfig+0xb0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x98>
 8004a4e:	4b70      	ldr	r3, [pc, #448]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6f      	ldr	r2, [pc, #444]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b6d      	ldr	r3, [pc, #436]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a6c      	ldr	r2, [pc, #432]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e00b      	b.n	8004a80 <HAL_RCC_OscConfig+0xb0>
 8004a68:	4b69      	ldr	r3, [pc, #420]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a68      	ldr	r2, [pc, #416]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	4b66      	ldr	r3, [pc, #408]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a65      	ldr	r2, [pc, #404]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d013      	beq.n	8004ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fe f8de 	bl	8002c48 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a90:	f7fe f8da 	bl	8002c48 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	; 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e207      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0xc0>
 8004aae:	e014      	b.n	8004ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7fe f8ca 	bl	8002c48 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fe f8c6 	bl	8002c48 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e1f3      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aca:	4b51      	ldr	r3, [pc, #324]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCC_OscConfig+0xe8>
 8004ad6:	e000      	b.n	8004ada <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d063      	beq.n	8004bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ae6:	4b4a      	ldr	r3, [pc, #296]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af2:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d11c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004afe:	4b44      	ldr	r3, [pc, #272]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d116      	bne.n	8004b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0a:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_RCC_OscConfig+0x152>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e1c7      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b22:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4937      	ldr	r1, [pc, #220]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b36:	e03a      	b.n	8004bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d020      	beq.n	8004b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b40:	4b34      	ldr	r3, [pc, #208]	; (8004c14 <HAL_RCC_OscConfig+0x244>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fe f87f 	bl	8002c48 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b4e:	f7fe f87b 	bl	8002c48 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e1a8      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b60:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6c:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4925      	ldr	r1, [pc, #148]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]
 8004b80:	e015      	b.n	8004bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <HAL_RCC_OscConfig+0x244>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fe f85e 	bl	8002c48 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b90:	f7fe f85a 	bl	8002c48 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e187      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d036      	beq.n	8004c28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d016      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <HAL_RCC_OscConfig+0x248>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fe f83e 	bl	8002c48 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd0:	f7fe f83a 	bl	8002c48 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e167      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be2:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x200>
 8004bee:	e01b      	b.n	8004c28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <HAL_RCC_OscConfig+0x248>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf6:	f7fe f827 	bl	8002c48 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bfc:	e00e      	b.n	8004c1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bfe:	f7fe f823 	bl	8002c48 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d907      	bls.n	8004c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e150      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
 8004c10:	40023800 	.word	0x40023800
 8004c14:	42470000 	.word	0x42470000
 8004c18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c1c:	4b88      	ldr	r3, [pc, #544]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1ea      	bne.n	8004bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8097 	beq.w	8004d64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c36:	2300      	movs	r3, #0
 8004c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3a:	4b81      	ldr	r3, [pc, #516]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10f      	bne.n	8004c66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	4b7d      	ldr	r3, [pc, #500]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	4a7c      	ldr	r2, [pc, #496]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c54:	6413      	str	r3, [r2, #64]	; 0x40
 8004c56:	4b7a      	ldr	r3, [pc, #488]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c66:	4b77      	ldr	r3, [pc, #476]	; (8004e44 <HAL_RCC_OscConfig+0x474>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d118      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c72:	4b74      	ldr	r3, [pc, #464]	; (8004e44 <HAL_RCC_OscConfig+0x474>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a73      	ldr	r2, [pc, #460]	; (8004e44 <HAL_RCC_OscConfig+0x474>)
 8004c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c7e:	f7fd ffe3 	bl	8002c48 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c86:	f7fd ffdf 	bl	8002c48 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e10c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c98:	4b6a      	ldr	r3, [pc, #424]	; (8004e44 <HAL_RCC_OscConfig+0x474>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d106      	bne.n	8004cba <HAL_RCC_OscConfig+0x2ea>
 8004cac:	4b64      	ldr	r3, [pc, #400]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	4a63      	ldr	r2, [pc, #396]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb8:	e01c      	b.n	8004cf4 <HAL_RCC_OscConfig+0x324>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b05      	cmp	r3, #5
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x30c>
 8004cc2:	4b5f      	ldr	r3, [pc, #380]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	4a5e      	ldr	r2, [pc, #376]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cce:	4b5c      	ldr	r3, [pc, #368]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	4a5b      	ldr	r2, [pc, #364]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCC_OscConfig+0x324>
 8004cdc:	4b58      	ldr	r3, [pc, #352]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	4a57      	ldr	r2, [pc, #348]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce8:	4b55      	ldr	r3, [pc, #340]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cec:	4a54      	ldr	r2, [pc, #336]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cee:	f023 0304 	bic.w	r3, r3, #4
 8004cf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d015      	beq.n	8004d28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fd ffa4 	bl	8002c48 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d04:	f7fd ffa0 	bl	8002c48 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e0cb      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	4b49      	ldr	r3, [pc, #292]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0ee      	beq.n	8004d04 <HAL_RCC_OscConfig+0x334>
 8004d26:	e014      	b.n	8004d52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d28:	f7fd ff8e 	bl	8002c48 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d30:	f7fd ff8a 	bl	8002c48 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e0b5      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d46:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1ee      	bne.n	8004d30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d52:	7dfb      	ldrb	r3, [r7, #23]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d105      	bne.n	8004d64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d58:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	4a38      	ldr	r2, [pc, #224]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80a1 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d6e:	4b34      	ldr	r3, [pc, #208]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d05c      	beq.n	8004e34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d141      	bne.n	8004e06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d82:	4b31      	ldr	r3, [pc, #196]	; (8004e48 <HAL_RCC_OscConfig+0x478>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7fd ff5e 	bl	8002c48 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d90:	f7fd ff5a 	bl	8002c48 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e087      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da2:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	019b      	lsls	r3, r3, #6
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	491b      	ldr	r1, [pc, #108]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd8:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <HAL_RCC_OscConfig+0x478>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fd ff33 	bl	8002c48 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de6:	f7fd ff2f 	bl	8002c48 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e05c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df8:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x416>
 8004e04:	e054      	b.n	8004eb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <HAL_RCC_OscConfig+0x478>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fd ff1c 	bl	8002c48 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fd ff18 	bl	8002c48 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e045      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x444>
 8004e32:	e03d      	b.n	8004eb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e038      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40007000 	.word	0x40007000
 8004e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <HAL_RCC_OscConfig+0x4ec>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d028      	beq.n	8004eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d121      	bne.n	8004eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d11a      	bne.n	8004eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d111      	bne.n	8004eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	3b01      	subs	r3, #1
 8004e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d107      	bne.n	8004eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40023800 	.word	0x40023800

08004ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0cc      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b68      	ldr	r3, [pc, #416]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d90c      	bls.n	8004efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b65      	ldr	r3, [pc, #404]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eea:	4b63      	ldr	r3, [pc, #396]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0b8      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d020      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f14:	4b59      	ldr	r3, [pc, #356]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a58      	ldr	r2, [pc, #352]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f2c:	4b53      	ldr	r3, [pc, #332]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a52      	ldr	r2, [pc, #328]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f38:	4b50      	ldr	r3, [pc, #320]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	494d      	ldr	r1, [pc, #308]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d044      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d107      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5e:	4b47      	ldr	r3, [pc, #284]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d119      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e07f      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d003      	beq.n	8004f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7e:	4b3f      	ldr	r3, [pc, #252]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e06f      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8e:	4b3b      	ldr	r3, [pc, #236]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e067      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f9e:	4b37      	ldr	r3, [pc, #220]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f023 0203 	bic.w	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4934      	ldr	r1, [pc, #208]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb0:	f7fd fe4a 	bl	8002c48 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb8:	f7fd fe46 	bl	8002c48 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e04f      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	4b2b      	ldr	r3, [pc, #172]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 020c 	and.w	r2, r3, #12
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d1eb      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d20c      	bcs.n	8005008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b22      	ldr	r3, [pc, #136]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b20      	ldr	r3, [pc, #128]	; (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e032      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005014:	4b19      	ldr	r3, [pc, #100]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4916      	ldr	r1, [pc, #88]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	490e      	ldr	r1, [pc, #56]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005046:	f000 f821 	bl	800508c <HAL_RCC_GetSysClockFreq>
 800504a:	4602      	mov	r2, r0
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	490a      	ldr	r1, [pc, #40]	; (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	5ccb      	ldrb	r3, [r1, r3]
 800505a:	fa22 f303 	lsr.w	r3, r2, r3
 800505e:	4a09      	ldr	r2, [pc, #36]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8005060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <HAL_RCC_ClockConfig+0x1c8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7fd fdaa 	bl	8002bc0 <HAL_InitTick>

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023c00 	.word	0x40023c00
 800507c:	40023800 	.word	0x40023800
 8005080:	0800c510 	.word	0x0800c510
 8005084:	20000000 	.word	0x20000000
 8005088:	2000001c 	.word	0x2000001c

0800508c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800508c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005090:	b094      	sub	sp, #80	; 0x50
 8005092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	647b      	str	r3, [r7, #68]	; 0x44
 8005098:	2300      	movs	r3, #0
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800509c:	2300      	movs	r3, #0
 800509e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050a4:	4b79      	ldr	r3, [pc, #484]	; (800528c <HAL_RCC_GetSysClockFreq+0x200>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d00d      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0x40>
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	f200 80e1 	bhi.w	8005278 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <HAL_RCC_GetSysClockFreq+0x34>
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d003      	beq.n	80050c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80050be:	e0db      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050c0:	4b73      	ldr	r3, [pc, #460]	; (8005290 <HAL_RCC_GetSysClockFreq+0x204>)
 80050c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80050c4:	e0db      	b.n	800527e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050c6:	4b73      	ldr	r3, [pc, #460]	; (8005294 <HAL_RCC_GetSysClockFreq+0x208>)
 80050c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050ca:	e0d8      	b.n	800527e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050cc:	4b6f      	ldr	r3, [pc, #444]	; (800528c <HAL_RCC_GetSysClockFreq+0x200>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050d6:	4b6d      	ldr	r3, [pc, #436]	; (800528c <HAL_RCC_GetSysClockFreq+0x200>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d063      	beq.n	80051aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e2:	4b6a      	ldr	r3, [pc, #424]	; (800528c <HAL_RCC_GetSysClockFreq+0x200>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	2200      	movs	r2, #0
 80050ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f4:	633b      	str	r3, [r7, #48]	; 0x30
 80050f6:	2300      	movs	r3, #0
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
 80050fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050fe:	4622      	mov	r2, r4
 8005100:	462b      	mov	r3, r5
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f04f 0100 	mov.w	r1, #0
 800510a:	0159      	lsls	r1, r3, #5
 800510c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005110:	0150      	lsls	r0, r2, #5
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4621      	mov	r1, r4
 8005118:	1a51      	subs	r1, r2, r1
 800511a:	6139      	str	r1, [r7, #16]
 800511c:	4629      	mov	r1, r5
 800511e:	eb63 0301 	sbc.w	r3, r3, r1
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005130:	4659      	mov	r1, fp
 8005132:	018b      	lsls	r3, r1, #6
 8005134:	4651      	mov	r1, sl
 8005136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800513a:	4651      	mov	r1, sl
 800513c:	018a      	lsls	r2, r1, #6
 800513e:	4651      	mov	r1, sl
 8005140:	ebb2 0801 	subs.w	r8, r2, r1
 8005144:	4659      	mov	r1, fp
 8005146:	eb63 0901 	sbc.w	r9, r3, r1
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800515a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800515e:	4690      	mov	r8, r2
 8005160:	4699      	mov	r9, r3
 8005162:	4623      	mov	r3, r4
 8005164:	eb18 0303 	adds.w	r3, r8, r3
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	462b      	mov	r3, r5
 800516c:	eb49 0303 	adc.w	r3, r9, r3
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800517e:	4629      	mov	r1, r5
 8005180:	024b      	lsls	r3, r1, #9
 8005182:	4621      	mov	r1, r4
 8005184:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005188:	4621      	mov	r1, r4
 800518a:	024a      	lsls	r2, r1, #9
 800518c:	4610      	mov	r0, r2
 800518e:	4619      	mov	r1, r3
 8005190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005192:	2200      	movs	r2, #0
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
 8005196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800519c:	f7fb fd7c 	bl	8000c98 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4613      	mov	r3, r2
 80051a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a8:	e058      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051aa:	4b38      	ldr	r3, [pc, #224]	; (800528c <HAL_RCC_GetSysClockFreq+0x200>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	099b      	lsrs	r3, r3, #6
 80051b0:	2200      	movs	r2, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	4611      	mov	r1, r2
 80051b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ba:	623b      	str	r3, [r7, #32]
 80051bc:	2300      	movs	r3, #0
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	f04f 0000 	mov.w	r0, #0
 80051cc:	f04f 0100 	mov.w	r1, #0
 80051d0:	0159      	lsls	r1, r3, #5
 80051d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051d6:	0150      	lsls	r0, r2, #5
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4641      	mov	r1, r8
 80051de:	ebb2 0a01 	subs.w	sl, r2, r1
 80051e2:	4649      	mov	r1, r9
 80051e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051fc:	ebb2 040a 	subs.w	r4, r2, sl
 8005200:	eb63 050b 	sbc.w	r5, r3, fp
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	00eb      	lsls	r3, r5, #3
 800520e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005212:	00e2      	lsls	r2, r4, #3
 8005214:	4614      	mov	r4, r2
 8005216:	461d      	mov	r5, r3
 8005218:	4643      	mov	r3, r8
 800521a:	18e3      	adds	r3, r4, r3
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	464b      	mov	r3, r9
 8005220:	eb45 0303 	adc.w	r3, r5, r3
 8005224:	607b      	str	r3, [r7, #4]
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005232:	4629      	mov	r1, r5
 8005234:	028b      	lsls	r3, r1, #10
 8005236:	4621      	mov	r1, r4
 8005238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800523c:	4621      	mov	r1, r4
 800523e:	028a      	lsls	r2, r1, #10
 8005240:	4610      	mov	r0, r2
 8005242:	4619      	mov	r1, r3
 8005244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005246:	2200      	movs	r2, #0
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	61fa      	str	r2, [r7, #28]
 800524c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005250:	f7fb fd22 	bl	8000c98 <__aeabi_uldivmod>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4613      	mov	r3, r2
 800525a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_RCC_GetSysClockFreq+0x200>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	0c1b      	lsrs	r3, r3, #16
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	3301      	adds	r3, #1
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800526c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800526e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005276:	e002      	b.n	800527e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCC_GetSysClockFreq+0x204>)
 800527a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800527c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800527e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005280:	4618      	mov	r0, r3
 8005282:	3750      	adds	r7, #80	; 0x50
 8005284:	46bd      	mov	sp, r7
 8005286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800528a:	bf00      	nop
 800528c:	40023800 	.word	0x40023800
 8005290:	00f42400 	.word	0x00f42400
 8005294:	007a1200 	.word	0x007a1200

08005298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800529c:	4b03      	ldr	r3, [pc, #12]	; (80052ac <HAL_RCC_GetHCLKFreq+0x14>)
 800529e:	681b      	ldr	r3, [r3, #0]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000000 	.word	0x20000000

080052b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052b4:	f7ff fff0 	bl	8005298 <HAL_RCC_GetHCLKFreq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	0a9b      	lsrs	r3, r3, #10
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	4903      	ldr	r1, [pc, #12]	; (80052d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052c6:	5ccb      	ldrb	r3, [r1, r3]
 80052c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40023800 	.word	0x40023800
 80052d4:	0800c520 	.word	0x0800c520

080052d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052dc:	f7ff ffdc 	bl	8005298 <HAL_RCC_GetHCLKFreq>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	0b5b      	lsrs	r3, r3, #13
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	4903      	ldr	r1, [pc, #12]	; (80052fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ee:	5ccb      	ldrb	r3, [r1, r3]
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40023800 	.word	0x40023800
 80052fc:	0800c520 	.word	0x0800c520

08005300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e041      	b.n	8005396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc fd64 	bl	8001df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	4619      	mov	r1, r3
 800533e:	4610      	mov	r0, r2
 8005340:	f000 fc54 	bl	8005bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d001      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e044      	b.n	8005442 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <HAL_TIM_Base_Start_IT+0xb0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d018      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x6c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e2:	d013      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x6c>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1a      	ldr	r2, [pc, #104]	; (8005454 <HAL_TIM_Base_Start_IT+0xb4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x6c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a19      	ldr	r2, [pc, #100]	; (8005458 <HAL_TIM_Base_Start_IT+0xb8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x6c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a17      	ldr	r2, [pc, #92]	; (800545c <HAL_TIM_Base_Start_IT+0xbc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x6c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a16      	ldr	r2, [pc, #88]	; (8005460 <HAL_TIM_Base_Start_IT+0xc0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d111      	bne.n	8005430 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b06      	cmp	r3, #6
 800541c:	d010      	beq.n	8005440 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0201 	orr.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542e:	e007      	b.n	8005440 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40010000 	.word	0x40010000
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800
 800545c:	40000c00 	.word	0x40000c00
 8005460:	40014000 	.word	0x40014000

08005464 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e041      	b.n	80054fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f839 	bl	8005502 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3304      	adds	r3, #4
 80054a0:	4619      	mov	r1, r3
 80054a2:	4610      	mov	r0, r2
 80054a4:	f000 fba2 	bl	8005bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <HAL_TIM_PWM_Start+0x24>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e022      	b.n	8005582 <HAL_TIM_PWM_Start+0x6a>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b04      	cmp	r3, #4
 8005540:	d109      	bne.n	8005556 <HAL_TIM_PWM_Start+0x3e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	e015      	b.n	8005582 <HAL_TIM_PWM_Start+0x6a>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d109      	bne.n	8005570 <HAL_TIM_PWM_Start+0x58>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e008      	b.n	8005582 <HAL_TIM_PWM_Start+0x6a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e068      	b.n	800565c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Start+0x82>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005598:	e013      	b.n	80055c2 <HAL_TIM_PWM_Start+0xaa>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b04      	cmp	r3, #4
 800559e:	d104      	bne.n	80055aa <HAL_TIM_PWM_Start+0x92>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a8:	e00b      	b.n	80055c2 <HAL_TIM_PWM_Start+0xaa>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Start+0xa2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b8:	e003      	b.n	80055c2 <HAL_TIM_PWM_Start+0xaa>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fdb4 	bl	8006138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a23      	ldr	r2, [pc, #140]	; (8005664 <HAL_TIM_PWM_Start+0x14c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d107      	bne.n	80055ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <HAL_TIM_PWM_Start+0x14c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <HAL_TIM_PWM_Start+0x10e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fc:	d013      	beq.n	8005626 <HAL_TIM_PWM_Start+0x10e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a19      	ldr	r2, [pc, #100]	; (8005668 <HAL_TIM_PWM_Start+0x150>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_TIM_PWM_Start+0x10e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a17      	ldr	r2, [pc, #92]	; (800566c <HAL_TIM_PWM_Start+0x154>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_TIM_PWM_Start+0x10e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a16      	ldr	r2, [pc, #88]	; (8005670 <HAL_TIM_PWM_Start+0x158>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_TIM_PWM_Start+0x10e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a14      	ldr	r2, [pc, #80]	; (8005674 <HAL_TIM_PWM_Start+0x15c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d111      	bne.n	800564a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b06      	cmp	r3, #6
 8005636:	d010      	beq.n	800565a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005648:	e007      	b.n	800565a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40010000 	.word	0x40010000
 8005668:	40000400 	.word	0x40000400
 800566c:	40000800 	.word	0x40000800
 8005670:	40000c00 	.word	0x40000c00
 8005674:	40014000 	.word	0x40014000

08005678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b02      	cmp	r3, #2
 800568c:	d122      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b02      	cmp	r3, #2
 800569a:	d11b      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0202 	mvn.w	r2, #2
 80056a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa77 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fa69 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fa7a 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d122      	bne.n	8005728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d11b      	bne.n	8005728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0204 	mvn.w	r2, #4
 80056f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2202      	movs	r2, #2
 80056fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa4d 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 8005714:	e005      	b.n	8005722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa3f 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fa50 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b08      	cmp	r3, #8
 8005734:	d122      	bne.n	800577c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b08      	cmp	r3, #8
 8005742:	d11b      	bne.n	800577c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0208 	mvn.w	r2, #8
 800574c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2204      	movs	r2, #4
 8005752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa23 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 8005768:	e005      	b.n	8005776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa15 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fa26 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b10      	cmp	r3, #16
 8005788:	d122      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b10      	cmp	r3, #16
 8005796:	d11b      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0210 	mvn.w	r2, #16
 80057a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2208      	movs	r2, #8
 80057a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f9f9 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f9eb 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f9fc 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d10e      	bne.n	80057fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d107      	bne.n	80057fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0201 	mvn.w	r2, #1
 80057f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fb ff16 	bl	8001628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005806:	2b80      	cmp	r3, #128	; 0x80
 8005808:	d10e      	bne.n	8005828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005814:	2b80      	cmp	r3, #128	; 0x80
 8005816:	d107      	bne.n	8005828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fd26 	bl	8006274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005832:	2b40      	cmp	r3, #64	; 0x40
 8005834:	d10e      	bne.n	8005854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d107      	bne.n	8005854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800584c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f9c1 	bl	8005bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b20      	cmp	r3, #32
 8005860:	d10e      	bne.n	8005880 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b20      	cmp	r3, #32
 800586e:	d107      	bne.n	8005880 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0220 	mvn.w	r2, #32
 8005878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fcf0 	bl	8006260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e0ae      	b.n	8005a04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b0c      	cmp	r3, #12
 80058b2:	f200 809f 	bhi.w	80059f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058f1 	.word	0x080058f1
 80058c0:	080059f5 	.word	0x080059f5
 80058c4:	080059f5 	.word	0x080059f5
 80058c8:	080059f5 	.word	0x080059f5
 80058cc:	08005931 	.word	0x08005931
 80058d0:	080059f5 	.word	0x080059f5
 80058d4:	080059f5 	.word	0x080059f5
 80058d8:	080059f5 	.word	0x080059f5
 80058dc:	08005973 	.word	0x08005973
 80058e0:	080059f5 	.word	0x080059f5
 80058e4:	080059f5 	.word	0x080059f5
 80058e8:	080059f5 	.word	0x080059f5
 80058ec:	080059b3 	.word	0x080059b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 f9f8 	bl	8005cec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0208 	orr.w	r2, r2, #8
 800590a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6999      	ldr	r1, [r3, #24]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	619a      	str	r2, [r3, #24]
      break;
 800592e:	e064      	b.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fa3e 	bl	8005db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6999      	ldr	r1, [r3, #24]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	619a      	str	r2, [r3, #24]
      break;
 8005970:	e043      	b.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fa89 	bl	8005e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0208 	orr.w	r2, r2, #8
 800598c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0204 	bic.w	r2, r2, #4
 800599c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69d9      	ldr	r1, [r3, #28]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	61da      	str	r2, [r3, #28]
      break;
 80059b0:	e023      	b.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fad3 	bl	8005f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69d9      	ldr	r1, [r3, #28]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	021a      	lsls	r2, r3, #8
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	61da      	str	r2, [r3, #28]
      break;
 80059f2:	e002      	b.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	75fb      	strb	r3, [r7, #23]
      break;
 80059f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_TIM_ConfigClockSource+0x1c>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e0b4      	b.n	8005b92 <HAL_TIM_ConfigClockSource+0x186>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a60:	d03e      	beq.n	8005ae0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a66:	f200 8087 	bhi.w	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6e:	f000 8086 	beq.w	8005b7e <HAL_TIM_ConfigClockSource+0x172>
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a76:	d87f      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b70      	cmp	r3, #112	; 0x70
 8005a7a:	d01a      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0xa6>
 8005a7c:	2b70      	cmp	r3, #112	; 0x70
 8005a7e:	d87b      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a80:	2b60      	cmp	r3, #96	; 0x60
 8005a82:	d050      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x11a>
 8005a84:	2b60      	cmp	r3, #96	; 0x60
 8005a86:	d877      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b50      	cmp	r3, #80	; 0x50
 8005a8a:	d03c      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0xfa>
 8005a8c:	2b50      	cmp	r3, #80	; 0x50
 8005a8e:	d873      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d058      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x13a>
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	d86f      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b30      	cmp	r3, #48	; 0x30
 8005a9a:	d064      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x15a>
 8005a9c:	2b30      	cmp	r3, #48	; 0x30
 8005a9e:	d86b      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d060      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x15a>
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d867      	bhi.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d05c      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x15a>
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d05a      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x15a>
 8005ab0:	e062      	b.n	8005b78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6899      	ldr	r1, [r3, #8]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f000 fb19 	bl	80060f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	609a      	str	r2, [r3, #8]
      break;
 8005ade:	e04f      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	6899      	ldr	r1, [r3, #8]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f000 fb02 	bl	80060f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b02:	609a      	str	r2, [r3, #8]
      break;
 8005b04:	e03c      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6859      	ldr	r1, [r3, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	461a      	mov	r2, r3
 8005b14:	f000 fa76 	bl	8006004 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2150      	movs	r1, #80	; 0x50
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 facf 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005b24:	e02c      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6859      	ldr	r1, [r3, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f000 fa95 	bl	8006062 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2160      	movs	r1, #96	; 0x60
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fabf 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005b44:	e01c      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6859      	ldr	r1, [r3, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	461a      	mov	r2, r3
 8005b54:	f000 fa56 	bl	8006004 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2140      	movs	r1, #64	; 0x40
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 faaf 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005b64:	e00c      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f000 faa6 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005b76:	e003      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b7c:	e000      	b.n	8005b80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a34      	ldr	r2, [pc, #208]	; (8005cd0 <TIM_Base_SetConfig+0xe4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00f      	beq.n	8005c24 <TIM_Base_SetConfig+0x38>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0a:	d00b      	beq.n	8005c24 <TIM_Base_SetConfig+0x38>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a31      	ldr	r2, [pc, #196]	; (8005cd4 <TIM_Base_SetConfig+0xe8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_Base_SetConfig+0x38>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a30      	ldr	r2, [pc, #192]	; (8005cd8 <TIM_Base_SetConfig+0xec>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_Base_SetConfig+0x38>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a2f      	ldr	r2, [pc, #188]	; (8005cdc <TIM_Base_SetConfig+0xf0>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d108      	bne.n	8005c36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a25      	ldr	r2, [pc, #148]	; (8005cd0 <TIM_Base_SetConfig+0xe4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01b      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d017      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a22      	ldr	r2, [pc, #136]	; (8005cd4 <TIM_Base_SetConfig+0xe8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a21      	ldr	r2, [pc, #132]	; (8005cd8 <TIM_Base_SetConfig+0xec>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00f      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a20      	ldr	r2, [pc, #128]	; (8005cdc <TIM_Base_SetConfig+0xf0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00b      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <TIM_Base_SetConfig+0xf4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1e      	ldr	r2, [pc, #120]	; (8005ce4 <TIM_Base_SetConfig+0xf8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_Base_SetConfig+0x8a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a1d      	ldr	r2, [pc, #116]	; (8005ce8 <TIM_Base_SetConfig+0xfc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d108      	bne.n	8005c88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <TIM_Base_SetConfig+0xe4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d103      	bne.n	8005cbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	615a      	str	r2, [r3, #20]
}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800

08005cec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f023 0201 	bic.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0303 	bic.w	r3, r3, #3
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f023 0302 	bic.w	r3, r3, #2
 8005d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <TIM_OC1_SetConfig+0xc8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d10c      	bne.n	8005d62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f023 0308 	bic.w	r3, r3, #8
 8005d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 0304 	bic.w	r3, r3, #4
 8005d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a13      	ldr	r2, [pc, #76]	; (8005db4 <TIM_OC1_SetConfig+0xc8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d111      	bne.n	8005d8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	621a      	str	r2, [r3, #32]
}
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40010000 	.word	0x40010000

08005db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0210 	bic.w	r2, r3, #16
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0320 	bic.w	r3, r3, #32
 8005e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a1e      	ldr	r2, [pc, #120]	; (8005e8c <TIM_OC2_SetConfig+0xd4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d10d      	bne.n	8005e34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a15      	ldr	r2, [pc, #84]	; (8005e8c <TIM_OC2_SetConfig+0xd4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d113      	bne.n	8005e64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000

08005e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <TIM_OC3_SetConfig+0xd0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d10d      	bne.n	8005f0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a14      	ldr	r2, [pc, #80]	; (8005f60 <TIM_OC3_SetConfig+0xd0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d113      	bne.n	8005f3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	621a      	str	r2, [r3, #32]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	40010000 	.word	0x40010000

08005f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a10      	ldr	r2, [pc, #64]	; (8006000 <TIM_OC4_SetConfig+0x9c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d109      	bne.n	8005fd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	019b      	lsls	r3, r3, #6
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	621a      	str	r2, [r3, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40010000 	.word	0x40010000

08006004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0201 	bic.w	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800602e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 030a 	bic.w	r3, r3, #10
 8006040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006062:	b480      	push	{r7}
 8006064:	b087      	sub	sp, #28
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f023 0210 	bic.w	r2, r3, #16
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800608c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800609e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	f043 0307 	orr.w	r3, r3, #7
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	021a      	lsls	r2, r3, #8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	431a      	orrs	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	2201      	movs	r2, #1
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a1a      	ldr	r2, [r3, #32]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	43db      	mvns	r3, r3
 800615a:	401a      	ands	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1a      	ldr	r2, [r3, #32]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	fa01 f303 	lsl.w	r3, r1, r3
 8006170:	431a      	orrs	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006198:	2302      	movs	r3, #2
 800619a:	e050      	b.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1c      	ldr	r2, [pc, #112]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d018      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e8:	d013      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a18      	ldr	r2, [pc, #96]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00e      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a16      	ldr	r2, [pc, #88]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d009      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a15      	ldr	r2, [pc, #84]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a13      	ldr	r2, [pc, #76]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d10c      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	4313      	orrs	r3, r2
 8006222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40010000 	.word	0x40010000
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40014000 	.word	0x40014000

08006260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e03f      	b.n	800631a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fb fe7a 	bl	8001fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2224      	movs	r2, #36	; 0x24
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 f84b 	bl	8007368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	695a      	ldr	r2, [r3, #20]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b08a      	sub	sp, #40	; 0x28
 8006326:	af02      	add	r7, sp, #8
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	603b      	str	r3, [r7, #0]
 800632e:	4613      	mov	r3, r2
 8006330:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b20      	cmp	r3, #32
 8006340:	d17c      	bne.n	800643c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <HAL_UART_Transmit+0x2c>
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e075      	b.n	800643e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_UART_Transmit+0x3e>
 800635c:	2302      	movs	r3, #2
 800635e:	e06e      	b.n	800643e <HAL_UART_Transmit+0x11c>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2221      	movs	r2, #33	; 0x21
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006376:	f7fc fc67 	bl	8002c48 <HAL_GetTick>
 800637a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	88fa      	ldrh	r2, [r7, #6]
 8006380:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	88fa      	ldrh	r2, [r7, #6]
 8006386:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006390:	d108      	bne.n	80063a4 <HAL_UART_Transmit+0x82>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	e003      	b.n	80063ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063b4:	e02a      	b.n	800640c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2200      	movs	r2, #0
 80063be:	2180      	movs	r1, #128	; 0x80
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fd03 	bl	8006dcc <UART_WaitOnFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e036      	b.n	800643e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	3302      	adds	r3, #2
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	e007      	b.n	80063fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1cf      	bne.n	80063b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	2140      	movs	r1, #64	; 0x40
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fcd3 	bl	8006dcc <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e006      	b.n	800643e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e000      	b.n	800643e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800643c:	2302      	movs	r3, #2
  }
}
 800643e:	4618      	mov	r0, r3
 8006440:	3720      	adds	r7, #32
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b20      	cmp	r3, #32
 800645e:	d130      	bne.n	80064c2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_UART_Transmit_IT+0x26>
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e029      	b.n	80064c4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_UART_Transmit_IT+0x38>
 800647a:	2302      	movs	r3, #2
 800647c:	e022      	b.n	80064c4 <HAL_UART_Transmit_IT+0x7e>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	88fa      	ldrh	r2, [r7, #6]
 8006496:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2221      	movs	r2, #33	; 0x21
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	e000      	b.n	80064c4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80064c2:	2302      	movs	r3, #2
  }
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b090      	sub	sp, #64	; 0x40
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064d8:	2300      	movs	r3, #0
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e6:	2b80      	cmp	r3, #128	; 0x80
 80064e8:	bf0c      	ite	eq
 80064ea:	2301      	moveq	r3, #1
 80064ec:	2300      	movne	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b21      	cmp	r3, #33	; 0x21
 80064fc:	d128      	bne.n	8006550 <HAL_UART_DMAStop+0x80>
 80064fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d025      	beq.n	8006550 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3314      	adds	r3, #20
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	623b      	str	r3, [r7, #32]
   return(result);
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651a:	63bb      	str	r3, [r7, #56]	; 0x38
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3314      	adds	r3, #20
 8006522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006524:	633a      	str	r2, [r7, #48]	; 0x30
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800652a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e5      	bne.n	8006504 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653c:	2b00      	cmp	r3, #0
 800653e:	d004      	beq.n	800654a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006544:	4618      	mov	r0, r3
 8006546:	f7fc fdc7 	bl	80030d8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fd4a 	bl	8006fe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	bf0c      	ite	eq
 800655e:	2301      	moveq	r3, #1
 8006560:	2300      	movne	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b22      	cmp	r3, #34	; 0x22
 8006570:	d128      	bne.n	80065c4 <HAL_UART_DMAStop+0xf4>
 8006572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d025      	beq.n	80065c4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3314      	adds	r3, #20
 800657e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	60fb      	str	r3, [r7, #12]
   return(result);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006598:	61fa      	str	r2, [r7, #28]
 800659a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	69b9      	ldr	r1, [r7, #24]
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	617b      	str	r3, [r7, #20]
   return(result);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fc fd8d 	bl	80030d8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fd38 	bl	8007034 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3740      	adds	r7, #64	; 0x40
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b08c      	sub	sp, #48	; 0x30
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	4613      	mov	r3, r2
 80065da:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d152      	bne.n	800668e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e04b      	b.n	8006690 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006602:	2302      	movs	r3, #2
 8006604:	e044      	b.n	8006690 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	461a      	mov	r2, r3
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 fc44 	bl	8006ea8 <UART_Start_Receive_DMA>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800662a:	2b00      	cmp	r3, #0
 800662c:	d12c      	bne.n	8006688 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006632:	2b01      	cmp	r3, #1
 8006634:	d125      	bne.n	8006682 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	330c      	adds	r3, #12
 8006652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	617b      	str	r3, [r7, #20]
   return(result);
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f043 0310 	orr.w	r3, r3, #16
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	330c      	adds	r3, #12
 800666a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666c:	627a      	str	r2, [r7, #36]	; 0x24
 800666e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6a39      	ldr	r1, [r7, #32]
 8006672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	61fb      	str	r3, [r7, #28]
   return(result);
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e5      	bne.n	800664c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006680:	e002      	b.n	8006688 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800668c:	e000      	b.n	8006690 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800668e:	2302      	movs	r3, #2
  }
}
 8006690:	4618      	mov	r0, r3
 8006692:	3730      	adds	r7, #48	; 0x30
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b0ba      	sub	sp, #232	; 0xe8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80066be:	2300      	movs	r3, #0
 80066c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80066d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10f      	bne.n	80066fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d009      	beq.n	80066fe <HAL_UART_IRQHandler+0x66>
 80066ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fd7b 	bl	80071f2 <UART_Receive_IT>
      return;
 80066fc:	e256      	b.n	8006bac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 80de 	beq.w	80068c4 <HAL_UART_IRQHandler+0x22c>
 8006708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d106      	bne.n	8006722 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006718:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80d1 	beq.w	80068c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <HAL_UART_IRQHandler+0xae>
 800672e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f043 0201 	orr.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00b      	beq.n	800676a <HAL_UART_IRQHandler+0xd2>
 8006752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	f043 0202 	orr.w	r2, r3, #2
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <HAL_UART_IRQHandler+0xf6>
 8006776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	f043 0204 	orr.w	r2, r3, #4
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800678e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d011      	beq.n	80067be <HAL_UART_IRQHandler+0x126>
 800679a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d105      	bne.n	80067b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f043 0208 	orr.w	r2, r3, #8
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 81ed 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <HAL_UART_IRQHandler+0x14e>
 80067d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fd06 	bl	80071f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d103      	bne.n	8006812 <HAL_UART_IRQHandler+0x17a>
 800680a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800680e:	2b00      	cmp	r3, #0
 8006810:	d04f      	beq.n	80068b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fc0e 	bl	8007034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b40      	cmp	r3, #64	; 0x40
 8006824:	d141      	bne.n	80068aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3314      	adds	r3, #20
 800682c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800683c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3314      	adds	r3, #20
 800684e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006852:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800685e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800686a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1d9      	bne.n	8006826 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	2b00      	cmp	r3, #0
 8006878:	d013      	beq.n	80068a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	4a7d      	ldr	r2, [pc, #500]	; (8006a74 <HAL_UART_IRQHandler+0x3dc>)
 8006880:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	4618      	mov	r0, r3
 8006888:	f7fc fc96 	bl	80031b8 <HAL_DMA_Abort_IT>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d016      	beq.n	80068c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800689c:	4610      	mov	r0, r2
 800689e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a0:	e00e      	b.n	80068c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fa ffb2 	bl	800180c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a8:	e00a      	b.n	80068c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fa ffae 	bl	800180c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b0:	e006      	b.n	80068c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fa ffaa 	bl	800180c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80068be:	e170      	b.n	8006ba2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	bf00      	nop
    return;
 80068c2:	e16e      	b.n	8006ba2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	f040 814a 	bne.w	8006b62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	f003 0310 	and.w	r3, r3, #16
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8143 	beq.w	8006b62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 813c 	beq.w	8006b62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b40      	cmp	r3, #64	; 0x40
 800690c:	f040 80b4 	bne.w	8006a78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800691c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8140 	beq.w	8006ba6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800692a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800692e:	429a      	cmp	r2, r3
 8006930:	f080 8139 	bcs.w	8006ba6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800693a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006946:	f000 8088 	beq.w	8006a5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	330c      	adds	r3, #12
 8006972:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006976:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800697a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006982:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800698e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1d9      	bne.n	800694a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3314      	adds	r3, #20
 800699c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a8:	f023 0301 	bic.w	r3, r3, #1
 80069ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3314      	adds	r3, #20
 80069b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e1      	bne.n	8006996 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3314      	adds	r3, #20
 80069f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e3      	bne.n	80069d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a2a:	f023 0310 	bic.w	r3, r3, #16
 8006a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e3      	bne.n	8006a18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fc fb3f 	bl	80030d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fa fe80 	bl	8001770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a70:	e099      	b.n	8006ba6 <HAL_UART_IRQHandler+0x50e>
 8006a72:	bf00      	nop
 8006a74:	080070fb 	.word	0x080070fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 808b 	beq.w	8006baa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 8086 	beq.w	8006baa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	330c      	adds	r3, #12
 8006aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	330c      	adds	r3, #12
 8006abe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ac2:	647a      	str	r2, [r7, #68]	; 0x44
 8006ac4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e3      	bne.n	8006a9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3314      	adds	r3, #20
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3314      	adds	r3, #20
 8006af6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006afa:	633a      	str	r2, [r7, #48]	; 0x30
 8006afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e3      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0310 	bic.w	r3, r3, #16
 8006b32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b40:	61fa      	str	r2, [r7, #28]
 8006b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	69b9      	ldr	r1, [r7, #24]
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e3      	bne.n	8006b1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fa fe08 	bl	8001770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b60:	e023      	b.n	8006baa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <HAL_UART_IRQHandler+0x4ea>
 8006b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fad1 	bl	8007122 <UART_Transmit_IT>
    return;
 8006b80:	e014      	b.n	8006bac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00e      	beq.n	8006bac <HAL_UART_IRQHandler+0x514>
 8006b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d008      	beq.n	8006bac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fb11 	bl	80071c2 <UART_EndTransmit_IT>
    return;
 8006ba0:	e004      	b.n	8006bac <HAL_UART_IRQHandler+0x514>
    return;
 8006ba2:	bf00      	nop
 8006ba4:	e002      	b.n	8006bac <HAL_UART_IRQHandler+0x514>
      return;
 8006ba6:	bf00      	nop
 8006ba8:	e000      	b.n	8006bac <HAL_UART_IRQHandler+0x514>
      return;
 8006baa:	bf00      	nop
  }
}
 8006bac:	37e8      	adds	r7, #232	; 0xe8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop

08006bb4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b09c      	sub	sp, #112	; 0x70
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d172      	bne.n	8006cde <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c14:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e5      	bne.n	8006bfe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3314      	adds	r3, #20
 8006c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c44:	f023 0301 	bic.w	r3, r3, #1
 8006c48:	667b      	str	r3, [r7, #100]	; 0x64
 8006c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3314      	adds	r3, #20
 8006c50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c52:	647a      	str	r2, [r7, #68]	; 0x44
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e5      	bne.n	8006c32 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3314      	adds	r3, #20
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	623b      	str	r3, [r7, #32]
   return(result);
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3314      	adds	r3, #20
 8006c84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c86:	633a      	str	r2, [r7, #48]	; 0x30
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e5      	bne.n	8006c66 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d119      	bne.n	8006cde <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	330c      	adds	r3, #12
 8006cb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f023 0310 	bic.w	r3, r3, #16
 8006cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	330c      	adds	r3, #12
 8006cc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cca:	61fa      	str	r2, [r7, #28]
 8006ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	69b9      	ldr	r1, [r7, #24]
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e5      	bne.n	8006caa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d106      	bne.n	8006cf4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cea:	4619      	mov	r1, r3
 8006cec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cee:	f7fa fd3f 	bl	8001770 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cf2:	e002      	b.n	8006cfa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006cf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cf6:	f7ff ff5d 	bl	8006bb4 <HAL_UART_RxCpltCallback>
}
 8006cfa:	bf00      	nop
 8006cfc:	3770      	adds	r7, #112	; 0x70
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d108      	bne.n	8006d2a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d1c:	085b      	lsrs	r3, r3, #1
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	4619      	mov	r1, r3
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7fa fd24 	bl	8001770 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d28:	e002      	b.n	8006d30 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff ff4c 	bl	8006bc8 <HAL_UART_RxHalfCpltCallback>
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d54:	2b80      	cmp	r3, #128	; 0x80
 8006d56:	bf0c      	ite	eq
 8006d58:	2301      	moveq	r3, #1
 8006d5a:	2300      	movne	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b21      	cmp	r3, #33	; 0x21
 8006d6a:	d108      	bne.n	8006d7e <UART_DMAError+0x46>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d78:	68b8      	ldr	r0, [r7, #8]
 8006d7a:	f000 f933 	bl	8006fe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	bf0c      	ite	eq
 8006d8c:	2301      	moveq	r3, #1
 8006d8e:	2300      	movne	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b22      	cmp	r3, #34	; 0x22
 8006d9e:	d108      	bne.n	8006db2 <UART_DMAError+0x7a>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006dac:	68b8      	ldr	r0, [r7, #8]
 8006dae:	f000 f941 	bl	8007034 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	f043 0210 	orr.w	r2, r3, #16
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dbe:	68b8      	ldr	r0, [r7, #8]
 8006dc0:	f7fa fd24 	bl	800180c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b090      	sub	sp, #64	; 0x40
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ddc:	e050      	b.n	8006e80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d04c      	beq.n	8006e80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8006dec:	f7fb ff2c 	bl	8002c48 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d241      	bcs.n	8006e80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	330c      	adds	r3, #12
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e1c:	637a      	str	r2, [r7, #52]	; 0x34
 8006e1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e5      	bne.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3314      	adds	r3, #20
 8006e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f023 0301 	bic.w	r3, r3, #1
 8006e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3314      	adds	r3, #20
 8006e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e50:	623a      	str	r2, [r7, #32]
 8006e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	69f9      	ldr	r1, [r7, #28]
 8006e56:	6a3a      	ldr	r2, [r7, #32]
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e5      	bne.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e00f      	b.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	bf0c      	ite	eq
 8006e90:	2301      	moveq	r3, #1
 8006e92:	2300      	movne	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d09f      	beq.n	8006dde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3740      	adds	r7, #64	; 0x40
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b098      	sub	sp, #96	; 0x60
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	88fa      	ldrh	r2, [r7, #6]
 8006ec0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2222      	movs	r2, #34	; 0x22
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	4a40      	ldr	r2, [pc, #256]	; (8006fd8 <UART_Start_Receive_DMA+0x130>)
 8006ed6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	4a3f      	ldr	r2, [pc, #252]	; (8006fdc <UART_Start_Receive_DMA+0x134>)
 8006ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	4a3e      	ldr	r2, [pc, #248]	; (8006fe0 <UART_Start_Receive_DMA+0x138>)
 8006ee6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	2200      	movs	r2, #0
 8006eee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ef0:	f107 0308 	add.w	r3, r7, #8
 8006ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	88fb      	ldrh	r3, [r7, #6]
 8006f08:	f7fc f88e 	bl	8003028 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d019      	beq.n	8006f66 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	330c      	adds	r3, #12
 8006f38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f52:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006f54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e5      	bne.n	8006f32 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3314      	adds	r3, #20
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	f043 0301 	orr.w	r3, r3, #1
 8006f7c:	657b      	str	r3, [r7, #84]	; 0x54
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3314      	adds	r3, #20
 8006f84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f86:	63ba      	str	r2, [r7, #56]	; 0x38
 8006f88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e5      	bne.n	8006f66 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3314      	adds	r3, #20
 8006fa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb0:	653b      	str	r3, [r7, #80]	; 0x50
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3314      	adds	r3, #20
 8006fb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fba:	627a      	str	r2, [r7, #36]	; 0x24
 8006fbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6a39      	ldr	r1, [r7, #32]
 8006fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e5      	bne.n	8006f9a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3760      	adds	r7, #96	; 0x60
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	08006bdd 	.word	0x08006bdd
 8006fdc:	08006d03 	.word	0x08006d03
 8006fe0:	08006d39 	.word	0x08006d39

08006fe4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b089      	sub	sp, #36	; 0x24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	330c      	adds	r3, #12
 8006ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	61ba      	str	r2, [r7, #24]
 800700e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6979      	ldr	r1, [r7, #20]
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	613b      	str	r3, [r7, #16]
   return(result);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e5      	bne.n	8006fec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007028:	bf00      	nop
 800702a:	3724      	adds	r7, #36	; 0x24
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007034:	b480      	push	{r7}
 8007036:	b095      	sub	sp, #84	; 0x54
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	330c      	adds	r3, #12
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800705c:	643a      	str	r2, [r7, #64]	; 0x40
 800705e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e5      	bne.n	800703c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	f023 0301 	bic.w	r3, r3, #1
 8007086:	64bb      	str	r3, [r7, #72]	; 0x48
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3314      	adds	r3, #20
 800708e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007090:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e5      	bne.n	8007070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d119      	bne.n	80070e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f023 0310 	bic.w	r3, r3, #16
 80070c2:	647b      	str	r3, [r7, #68]	; 0x44
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070cc:	61ba      	str	r2, [r7, #24]
 80070ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6979      	ldr	r1, [r7, #20]
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	613b      	str	r3, [r7, #16]
   return(result);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e5      	bne.n	80070ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070ee:	bf00      	nop
 80070f0:	3754      	adds	r7, #84	; 0x54
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7fa fb79 	bl	800180c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b21      	cmp	r3, #33	; 0x21
 8007134:	d13e      	bne.n	80071b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800713e:	d114      	bne.n	800716a <UART_Transmit_IT+0x48>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d110      	bne.n	800716a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800715c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	1c9a      	adds	r2, r3, #2
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	621a      	str	r2, [r3, #32]
 8007168:	e008      	b.n	800717c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	1c59      	adds	r1, r3, #1
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6211      	str	r1, [r2, #32]
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29b      	uxth	r3, r3
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	4619      	mov	r1, r3
 800718a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10f      	bne.n	80071b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800719e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	e000      	b.n	80071b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071b4:	2302      	movs	r3, #2
  }
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fa fa14 	bl	8001610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b08c      	sub	sp, #48	; 0x30
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b22      	cmp	r3, #34	; 0x22
 8007204:	f040 80ab 	bne.w	800735e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007210:	d117      	bne.n	8007242 <UART_Receive_IT+0x50>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d113      	bne.n	8007242 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	b29b      	uxth	r3, r3
 800722c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007230:	b29a      	uxth	r2, r3
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723a:	1c9a      	adds	r2, r3, #2
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	629a      	str	r2, [r3, #40]	; 0x28
 8007240:	e026      	b.n	8007290 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007246:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007248:	2300      	movs	r3, #0
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007254:	d007      	beq.n	8007266 <UART_Receive_IT+0x74>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10a      	bne.n	8007274 <UART_Receive_IT+0x82>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d106      	bne.n	8007274 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	b2da      	uxtb	r2, r3
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	e008      	b.n	8007286 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007280:	b2da      	uxtb	r2, r3
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b01      	subs	r3, #1
 8007298:	b29b      	uxth	r3, r3
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	4619      	mov	r1, r3
 800729e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d15a      	bne.n	800735a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0220 	bic.w	r2, r2, #32
 80072b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695a      	ldr	r2, [r3, #20]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0201 	bic.w	r2, r2, #1
 80072d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d135      	bne.n	8007350 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	330c      	adds	r3, #12
 80072f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	613b      	str	r3, [r7, #16]
   return(result);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f023 0310 	bic.w	r3, r3, #16
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	330c      	adds	r3, #12
 8007308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730a:	623a      	str	r2, [r7, #32]
 800730c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	69f9      	ldr	r1, [r7, #28]
 8007310:	6a3a      	ldr	r2, [r7, #32]
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	61bb      	str	r3, [r7, #24]
   return(result);
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e5      	bne.n	80072ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	2b10      	cmp	r3, #16
 800732a:	d10a      	bne.n	8007342 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7fa fa11 	bl	8001770 <HAL_UARTEx_RxEventCallback>
 800734e:	e002      	b.n	8007356 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff fc2f 	bl	8006bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	e002      	b.n	8007360 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	e000      	b.n	8007360 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800735e:	2302      	movs	r3, #2
  }
}
 8007360:	4618      	mov	r0, r3
 8007362:	3730      	adds	r7, #48	; 0x30
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800736c:	b0c0      	sub	sp, #256	; 0x100
 800736e:	af00      	add	r7, sp, #0
 8007370:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007384:	68d9      	ldr	r1, [r3, #12]
 8007386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	ea40 0301 	orr.w	r3, r0, r1
 8007390:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	431a      	orrs	r2, r3
 80073a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	431a      	orrs	r2, r3
 80073a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073c0:	f021 010c 	bic.w	r1, r1, #12
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073ce:	430b      	orrs	r3, r1
 80073d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e2:	6999      	ldr	r1, [r3, #24]
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	ea40 0301 	orr.w	r3, r0, r1
 80073ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	4b8f      	ldr	r3, [pc, #572]	; (8007634 <UART_SetConfig+0x2cc>)
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d005      	beq.n	8007408 <UART_SetConfig+0xa0>
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	4b8d      	ldr	r3, [pc, #564]	; (8007638 <UART_SetConfig+0x2d0>)
 8007404:	429a      	cmp	r2, r3
 8007406:	d104      	bne.n	8007412 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007408:	f7fd ff66 	bl	80052d8 <HAL_RCC_GetPCLK2Freq>
 800740c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007410:	e003      	b.n	800741a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007412:	f7fd ff4d 	bl	80052b0 <HAL_RCC_GetPCLK1Freq>
 8007416:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800741a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007424:	f040 810c 	bne.w	8007640 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800742c:	2200      	movs	r2, #0
 800742e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007432:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007436:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800743a:	4622      	mov	r2, r4
 800743c:	462b      	mov	r3, r5
 800743e:	1891      	adds	r1, r2, r2
 8007440:	65b9      	str	r1, [r7, #88]	; 0x58
 8007442:	415b      	adcs	r3, r3
 8007444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007446:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800744a:	4621      	mov	r1, r4
 800744c:	eb12 0801 	adds.w	r8, r2, r1
 8007450:	4629      	mov	r1, r5
 8007452:	eb43 0901 	adc.w	r9, r3, r1
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	f04f 0300 	mov.w	r3, #0
 800745e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800746a:	4690      	mov	r8, r2
 800746c:	4699      	mov	r9, r3
 800746e:	4623      	mov	r3, r4
 8007470:	eb18 0303 	adds.w	r3, r8, r3
 8007474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007478:	462b      	mov	r3, r5
 800747a:	eb49 0303 	adc.w	r3, r9, r3
 800747e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800748e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007496:	460b      	mov	r3, r1
 8007498:	18db      	adds	r3, r3, r3
 800749a:	653b      	str	r3, [r7, #80]	; 0x50
 800749c:	4613      	mov	r3, r2
 800749e:	eb42 0303 	adc.w	r3, r2, r3
 80074a2:	657b      	str	r3, [r7, #84]	; 0x54
 80074a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80074a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80074ac:	f7f9 fbf4 	bl	8000c98 <__aeabi_uldivmod>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4b61      	ldr	r3, [pc, #388]	; (800763c <UART_SetConfig+0x2d4>)
 80074b6:	fba3 2302 	umull	r2, r3, r3, r2
 80074ba:	095b      	lsrs	r3, r3, #5
 80074bc:	011c      	lsls	r4, r3, #4
 80074be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80074cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80074d0:	4642      	mov	r2, r8
 80074d2:	464b      	mov	r3, r9
 80074d4:	1891      	adds	r1, r2, r2
 80074d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80074d8:	415b      	adcs	r3, r3
 80074da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074e0:	4641      	mov	r1, r8
 80074e2:	eb12 0a01 	adds.w	sl, r2, r1
 80074e6:	4649      	mov	r1, r9
 80074e8:	eb43 0b01 	adc.w	fp, r3, r1
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007500:	4692      	mov	sl, r2
 8007502:	469b      	mov	fp, r3
 8007504:	4643      	mov	r3, r8
 8007506:	eb1a 0303 	adds.w	r3, sl, r3
 800750a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800750e:	464b      	mov	r3, r9
 8007510:	eb4b 0303 	adc.w	r3, fp, r3
 8007514:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007524:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007528:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800752c:	460b      	mov	r3, r1
 800752e:	18db      	adds	r3, r3, r3
 8007530:	643b      	str	r3, [r7, #64]	; 0x40
 8007532:	4613      	mov	r3, r2
 8007534:	eb42 0303 	adc.w	r3, r2, r3
 8007538:	647b      	str	r3, [r7, #68]	; 0x44
 800753a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800753e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007542:	f7f9 fba9 	bl	8000c98 <__aeabi_uldivmod>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4611      	mov	r1, r2
 800754c:	4b3b      	ldr	r3, [pc, #236]	; (800763c <UART_SetConfig+0x2d4>)
 800754e:	fba3 2301 	umull	r2, r3, r3, r1
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	2264      	movs	r2, #100	; 0x64
 8007556:	fb02 f303 	mul.w	r3, r2, r3
 800755a:	1acb      	subs	r3, r1, r3
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007562:	4b36      	ldr	r3, [pc, #216]	; (800763c <UART_SetConfig+0x2d4>)
 8007564:	fba3 2302 	umull	r2, r3, r3, r2
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007570:	441c      	add	r4, r3
 8007572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007576:	2200      	movs	r2, #0
 8007578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800757c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007580:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007584:	4642      	mov	r2, r8
 8007586:	464b      	mov	r3, r9
 8007588:	1891      	adds	r1, r2, r2
 800758a:	63b9      	str	r1, [r7, #56]	; 0x38
 800758c:	415b      	adcs	r3, r3
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007594:	4641      	mov	r1, r8
 8007596:	1851      	adds	r1, r2, r1
 8007598:	6339      	str	r1, [r7, #48]	; 0x30
 800759a:	4649      	mov	r1, r9
 800759c:	414b      	adcs	r3, r1
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	f04f 0300 	mov.w	r3, #0
 80075a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80075ac:	4659      	mov	r1, fp
 80075ae:	00cb      	lsls	r3, r1, #3
 80075b0:	4651      	mov	r1, sl
 80075b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075b6:	4651      	mov	r1, sl
 80075b8:	00ca      	lsls	r2, r1, #3
 80075ba:	4610      	mov	r0, r2
 80075bc:	4619      	mov	r1, r3
 80075be:	4603      	mov	r3, r0
 80075c0:	4642      	mov	r2, r8
 80075c2:	189b      	adds	r3, r3, r2
 80075c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075c8:	464b      	mov	r3, r9
 80075ca:	460a      	mov	r2, r1
 80075cc:	eb42 0303 	adc.w	r3, r2, r3
 80075d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80075e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075e8:	460b      	mov	r3, r1
 80075ea:	18db      	adds	r3, r3, r3
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ee:	4613      	mov	r3, r2
 80075f0:	eb42 0303 	adc.w	r3, r2, r3
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075fe:	f7f9 fb4b 	bl	8000c98 <__aeabi_uldivmod>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4b0d      	ldr	r3, [pc, #52]	; (800763c <UART_SetConfig+0x2d4>)
 8007608:	fba3 1302 	umull	r1, r3, r3, r2
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	2164      	movs	r1, #100	; 0x64
 8007610:	fb01 f303 	mul.w	r3, r1, r3
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	3332      	adds	r3, #50	; 0x32
 800761a:	4a08      	ldr	r2, [pc, #32]	; (800763c <UART_SetConfig+0x2d4>)
 800761c:	fba2 2303 	umull	r2, r3, r2, r3
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	f003 0207 	and.w	r2, r3, #7
 8007626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4422      	add	r2, r4
 800762e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007630:	e105      	b.n	800783e <UART_SetConfig+0x4d6>
 8007632:	bf00      	nop
 8007634:	40011000 	.word	0x40011000
 8007638:	40011400 	.word	0x40011400
 800763c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007644:	2200      	movs	r2, #0
 8007646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800764a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800764e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007652:	4642      	mov	r2, r8
 8007654:	464b      	mov	r3, r9
 8007656:	1891      	adds	r1, r2, r2
 8007658:	6239      	str	r1, [r7, #32]
 800765a:	415b      	adcs	r3, r3
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
 800765e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007662:	4641      	mov	r1, r8
 8007664:	1854      	adds	r4, r2, r1
 8007666:	4649      	mov	r1, r9
 8007668:	eb43 0501 	adc.w	r5, r3, r1
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	00eb      	lsls	r3, r5, #3
 8007676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800767a:	00e2      	lsls	r2, r4, #3
 800767c:	4614      	mov	r4, r2
 800767e:	461d      	mov	r5, r3
 8007680:	4643      	mov	r3, r8
 8007682:	18e3      	adds	r3, r4, r3
 8007684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007688:	464b      	mov	r3, r9
 800768a:	eb45 0303 	adc.w	r3, r5, r3
 800768e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800769e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076a2:	f04f 0200 	mov.w	r2, #0
 80076a6:	f04f 0300 	mov.w	r3, #0
 80076aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80076ae:	4629      	mov	r1, r5
 80076b0:	008b      	lsls	r3, r1, #2
 80076b2:	4621      	mov	r1, r4
 80076b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076b8:	4621      	mov	r1, r4
 80076ba:	008a      	lsls	r2, r1, #2
 80076bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80076c0:	f7f9 faea 	bl	8000c98 <__aeabi_uldivmod>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4b60      	ldr	r3, [pc, #384]	; (800784c <UART_SetConfig+0x4e4>)
 80076ca:	fba3 2302 	umull	r2, r3, r3, r2
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	011c      	lsls	r4, r3, #4
 80076d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80076e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80076e4:	4642      	mov	r2, r8
 80076e6:	464b      	mov	r3, r9
 80076e8:	1891      	adds	r1, r2, r2
 80076ea:	61b9      	str	r1, [r7, #24]
 80076ec:	415b      	adcs	r3, r3
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076f4:	4641      	mov	r1, r8
 80076f6:	1851      	adds	r1, r2, r1
 80076f8:	6139      	str	r1, [r7, #16]
 80076fa:	4649      	mov	r1, r9
 80076fc:	414b      	adcs	r3, r1
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800770c:	4659      	mov	r1, fp
 800770e:	00cb      	lsls	r3, r1, #3
 8007710:	4651      	mov	r1, sl
 8007712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007716:	4651      	mov	r1, sl
 8007718:	00ca      	lsls	r2, r1, #3
 800771a:	4610      	mov	r0, r2
 800771c:	4619      	mov	r1, r3
 800771e:	4603      	mov	r3, r0
 8007720:	4642      	mov	r2, r8
 8007722:	189b      	adds	r3, r3, r2
 8007724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007728:	464b      	mov	r3, r9
 800772a:	460a      	mov	r2, r1
 800772c:	eb42 0303 	adc.w	r3, r2, r3
 8007730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	67bb      	str	r3, [r7, #120]	; 0x78
 800773e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007740:	f04f 0200 	mov.w	r2, #0
 8007744:	f04f 0300 	mov.w	r3, #0
 8007748:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800774c:	4649      	mov	r1, r9
 800774e:	008b      	lsls	r3, r1, #2
 8007750:	4641      	mov	r1, r8
 8007752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007756:	4641      	mov	r1, r8
 8007758:	008a      	lsls	r2, r1, #2
 800775a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800775e:	f7f9 fa9b 	bl	8000c98 <__aeabi_uldivmod>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4b39      	ldr	r3, [pc, #228]	; (800784c <UART_SetConfig+0x4e4>)
 8007768:	fba3 1302 	umull	r1, r3, r3, r2
 800776c:	095b      	lsrs	r3, r3, #5
 800776e:	2164      	movs	r1, #100	; 0x64
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	3332      	adds	r3, #50	; 0x32
 800777a:	4a34      	ldr	r2, [pc, #208]	; (800784c <UART_SetConfig+0x4e4>)
 800777c:	fba2 2303 	umull	r2, r3, r2, r3
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007786:	441c      	add	r4, r3
 8007788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800778c:	2200      	movs	r2, #0
 800778e:	673b      	str	r3, [r7, #112]	; 0x70
 8007790:	677a      	str	r2, [r7, #116]	; 0x74
 8007792:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007796:	4642      	mov	r2, r8
 8007798:	464b      	mov	r3, r9
 800779a:	1891      	adds	r1, r2, r2
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	415b      	adcs	r3, r3
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077a6:	4641      	mov	r1, r8
 80077a8:	1851      	adds	r1, r2, r1
 80077aa:	6039      	str	r1, [r7, #0]
 80077ac:	4649      	mov	r1, r9
 80077ae:	414b      	adcs	r3, r1
 80077b0:	607b      	str	r3, [r7, #4]
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	f04f 0300 	mov.w	r3, #0
 80077ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077be:	4659      	mov	r1, fp
 80077c0:	00cb      	lsls	r3, r1, #3
 80077c2:	4651      	mov	r1, sl
 80077c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077c8:	4651      	mov	r1, sl
 80077ca:	00ca      	lsls	r2, r1, #3
 80077cc:	4610      	mov	r0, r2
 80077ce:	4619      	mov	r1, r3
 80077d0:	4603      	mov	r3, r0
 80077d2:	4642      	mov	r2, r8
 80077d4:	189b      	adds	r3, r3, r2
 80077d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80077d8:	464b      	mov	r3, r9
 80077da:	460a      	mov	r2, r1
 80077dc:	eb42 0303 	adc.w	r3, r2, r3
 80077e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	663b      	str	r3, [r7, #96]	; 0x60
 80077ec:	667a      	str	r2, [r7, #100]	; 0x64
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80077fa:	4649      	mov	r1, r9
 80077fc:	008b      	lsls	r3, r1, #2
 80077fe:	4641      	mov	r1, r8
 8007800:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007804:	4641      	mov	r1, r8
 8007806:	008a      	lsls	r2, r1, #2
 8007808:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800780c:	f7f9 fa44 	bl	8000c98 <__aeabi_uldivmod>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <UART_SetConfig+0x4e4>)
 8007816:	fba3 1302 	umull	r1, r3, r3, r2
 800781a:	095b      	lsrs	r3, r3, #5
 800781c:	2164      	movs	r1, #100	; 0x64
 800781e:	fb01 f303 	mul.w	r3, r1, r3
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	011b      	lsls	r3, r3, #4
 8007826:	3332      	adds	r3, #50	; 0x32
 8007828:	4a08      	ldr	r2, [pc, #32]	; (800784c <UART_SetConfig+0x4e4>)
 800782a:	fba2 2303 	umull	r2, r3, r2, r3
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	f003 020f 	and.w	r2, r3, #15
 8007834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4422      	add	r2, r4
 800783c:	609a      	str	r2, [r3, #8]
}
 800783e:	bf00      	nop
 8007840:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007844:	46bd      	mov	sp, r7
 8007846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800784a:	bf00      	nop
 800784c:	51eb851f 	.word	0x51eb851f

08007850 <__errno>:
 8007850:	4b01      	ldr	r3, [pc, #4]	; (8007858 <__errno+0x8>)
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	20000024 	.word	0x20000024

0800785c <__libc_init_array>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	4d0d      	ldr	r5, [pc, #52]	; (8007894 <__libc_init_array+0x38>)
 8007860:	4c0d      	ldr	r4, [pc, #52]	; (8007898 <__libc_init_array+0x3c>)
 8007862:	1b64      	subs	r4, r4, r5
 8007864:	10a4      	asrs	r4, r4, #2
 8007866:	2600      	movs	r6, #0
 8007868:	42a6      	cmp	r6, r4
 800786a:	d109      	bne.n	8007880 <__libc_init_array+0x24>
 800786c:	4d0b      	ldr	r5, [pc, #44]	; (800789c <__libc_init_array+0x40>)
 800786e:	4c0c      	ldr	r4, [pc, #48]	; (80078a0 <__libc_init_array+0x44>)
 8007870:	f004 fd1c 	bl	800c2ac <_init>
 8007874:	1b64      	subs	r4, r4, r5
 8007876:	10a4      	asrs	r4, r4, #2
 8007878:	2600      	movs	r6, #0
 800787a:	42a6      	cmp	r6, r4
 800787c:	d105      	bne.n	800788a <__libc_init_array+0x2e>
 800787e:	bd70      	pop	{r4, r5, r6, pc}
 8007880:	f855 3b04 	ldr.w	r3, [r5], #4
 8007884:	4798      	blx	r3
 8007886:	3601      	adds	r6, #1
 8007888:	e7ee      	b.n	8007868 <__libc_init_array+0xc>
 800788a:	f855 3b04 	ldr.w	r3, [r5], #4
 800788e:	4798      	blx	r3
 8007890:	3601      	adds	r6, #1
 8007892:	e7f2      	b.n	800787a <__libc_init_array+0x1e>
 8007894:	0800c9e4 	.word	0x0800c9e4
 8007898:	0800c9e4 	.word	0x0800c9e4
 800789c:	0800c9e4 	.word	0x0800c9e4
 80078a0:	0800c9e8 	.word	0x0800c9e8

080078a4 <memcpy>:
 80078a4:	440a      	add	r2, r1
 80078a6:	4291      	cmp	r1, r2
 80078a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ac:	d100      	bne.n	80078b0 <memcpy+0xc>
 80078ae:	4770      	bx	lr
 80078b0:	b510      	push	{r4, lr}
 80078b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ba:	4291      	cmp	r1, r2
 80078bc:	d1f9      	bne.n	80078b2 <memcpy+0xe>
 80078be:	bd10      	pop	{r4, pc}

080078c0 <memset>:
 80078c0:	4402      	add	r2, r0
 80078c2:	4603      	mov	r3, r0
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d100      	bne.n	80078ca <memset+0xa>
 80078c8:	4770      	bx	lr
 80078ca:	f803 1b01 	strb.w	r1, [r3], #1
 80078ce:	e7f9      	b.n	80078c4 <memset+0x4>

080078d0 <__cvt>:
 80078d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078d4:	ec55 4b10 	vmov	r4, r5, d0
 80078d8:	2d00      	cmp	r5, #0
 80078da:	460e      	mov	r6, r1
 80078dc:	4619      	mov	r1, r3
 80078de:	462b      	mov	r3, r5
 80078e0:	bfbb      	ittet	lt
 80078e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078e6:	461d      	movlt	r5, r3
 80078e8:	2300      	movge	r3, #0
 80078ea:	232d      	movlt	r3, #45	; 0x2d
 80078ec:	700b      	strb	r3, [r1, #0]
 80078ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078f4:	4691      	mov	r9, r2
 80078f6:	f023 0820 	bic.w	r8, r3, #32
 80078fa:	bfbc      	itt	lt
 80078fc:	4622      	movlt	r2, r4
 80078fe:	4614      	movlt	r4, r2
 8007900:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007904:	d005      	beq.n	8007912 <__cvt+0x42>
 8007906:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800790a:	d100      	bne.n	800790e <__cvt+0x3e>
 800790c:	3601      	adds	r6, #1
 800790e:	2102      	movs	r1, #2
 8007910:	e000      	b.n	8007914 <__cvt+0x44>
 8007912:	2103      	movs	r1, #3
 8007914:	ab03      	add	r3, sp, #12
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	ab02      	add	r3, sp, #8
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	ec45 4b10 	vmov	d0, r4, r5
 8007920:	4653      	mov	r3, sl
 8007922:	4632      	mov	r2, r6
 8007924:	f001 fefc 	bl	8009720 <_dtoa_r>
 8007928:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800792c:	4607      	mov	r7, r0
 800792e:	d102      	bne.n	8007936 <__cvt+0x66>
 8007930:	f019 0f01 	tst.w	r9, #1
 8007934:	d022      	beq.n	800797c <__cvt+0xac>
 8007936:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800793a:	eb07 0906 	add.w	r9, r7, r6
 800793e:	d110      	bne.n	8007962 <__cvt+0x92>
 8007940:	783b      	ldrb	r3, [r7, #0]
 8007942:	2b30      	cmp	r3, #48	; 0x30
 8007944:	d10a      	bne.n	800795c <__cvt+0x8c>
 8007946:	2200      	movs	r2, #0
 8007948:	2300      	movs	r3, #0
 800794a:	4620      	mov	r0, r4
 800794c:	4629      	mov	r1, r5
 800794e:	f7f9 f8c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007952:	b918      	cbnz	r0, 800795c <__cvt+0x8c>
 8007954:	f1c6 0601 	rsb	r6, r6, #1
 8007958:	f8ca 6000 	str.w	r6, [sl]
 800795c:	f8da 3000 	ldr.w	r3, [sl]
 8007960:	4499      	add	r9, r3
 8007962:	2200      	movs	r2, #0
 8007964:	2300      	movs	r3, #0
 8007966:	4620      	mov	r0, r4
 8007968:	4629      	mov	r1, r5
 800796a:	f7f9 f8b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800796e:	b108      	cbz	r0, 8007974 <__cvt+0xa4>
 8007970:	f8cd 900c 	str.w	r9, [sp, #12]
 8007974:	2230      	movs	r2, #48	; 0x30
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	454b      	cmp	r3, r9
 800797a:	d307      	bcc.n	800798c <__cvt+0xbc>
 800797c:	9b03      	ldr	r3, [sp, #12]
 800797e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007980:	1bdb      	subs	r3, r3, r7
 8007982:	4638      	mov	r0, r7
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	b004      	add	sp, #16
 8007988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798c:	1c59      	adds	r1, r3, #1
 800798e:	9103      	str	r1, [sp, #12]
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e7f0      	b.n	8007976 <__cvt+0xa6>

08007994 <__exponent>:
 8007994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007996:	4603      	mov	r3, r0
 8007998:	2900      	cmp	r1, #0
 800799a:	bfb8      	it	lt
 800799c:	4249      	neglt	r1, r1
 800799e:	f803 2b02 	strb.w	r2, [r3], #2
 80079a2:	bfb4      	ite	lt
 80079a4:	222d      	movlt	r2, #45	; 0x2d
 80079a6:	222b      	movge	r2, #43	; 0x2b
 80079a8:	2909      	cmp	r1, #9
 80079aa:	7042      	strb	r2, [r0, #1]
 80079ac:	dd2a      	ble.n	8007a04 <__exponent+0x70>
 80079ae:	f10d 0407 	add.w	r4, sp, #7
 80079b2:	46a4      	mov	ip, r4
 80079b4:	270a      	movs	r7, #10
 80079b6:	46a6      	mov	lr, r4
 80079b8:	460a      	mov	r2, r1
 80079ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80079be:	fb07 1516 	mls	r5, r7, r6, r1
 80079c2:	3530      	adds	r5, #48	; 0x30
 80079c4:	2a63      	cmp	r2, #99	; 0x63
 80079c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80079ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079ce:	4631      	mov	r1, r6
 80079d0:	dcf1      	bgt.n	80079b6 <__exponent+0x22>
 80079d2:	3130      	adds	r1, #48	; 0x30
 80079d4:	f1ae 0502 	sub.w	r5, lr, #2
 80079d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079dc:	1c44      	adds	r4, r0, #1
 80079de:	4629      	mov	r1, r5
 80079e0:	4561      	cmp	r1, ip
 80079e2:	d30a      	bcc.n	80079fa <__exponent+0x66>
 80079e4:	f10d 0209 	add.w	r2, sp, #9
 80079e8:	eba2 020e 	sub.w	r2, r2, lr
 80079ec:	4565      	cmp	r5, ip
 80079ee:	bf88      	it	hi
 80079f0:	2200      	movhi	r2, #0
 80079f2:	4413      	add	r3, r2
 80079f4:	1a18      	subs	r0, r3, r0
 80079f6:	b003      	add	sp, #12
 80079f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a02:	e7ed      	b.n	80079e0 <__exponent+0x4c>
 8007a04:	2330      	movs	r3, #48	; 0x30
 8007a06:	3130      	adds	r1, #48	; 0x30
 8007a08:	7083      	strb	r3, [r0, #2]
 8007a0a:	70c1      	strb	r1, [r0, #3]
 8007a0c:	1d03      	adds	r3, r0, #4
 8007a0e:	e7f1      	b.n	80079f4 <__exponent+0x60>

08007a10 <_printf_float>:
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	ed2d 8b02 	vpush	{d8}
 8007a18:	b08d      	sub	sp, #52	; 0x34
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a20:	4616      	mov	r6, r2
 8007a22:	461f      	mov	r7, r3
 8007a24:	4605      	mov	r5, r0
 8007a26:	f003 f98f 	bl	800ad48 <_localeconv_r>
 8007a2a:	f8d0 a000 	ldr.w	sl, [r0]
 8007a2e:	4650      	mov	r0, sl
 8007a30:	f7f8 fbd6 	bl	80001e0 <strlen>
 8007a34:	2300      	movs	r3, #0
 8007a36:	930a      	str	r3, [sp, #40]	; 0x28
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	9305      	str	r3, [sp, #20]
 8007a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a44:	3307      	adds	r3, #7
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	f103 0208 	add.w	r2, r3, #8
 8007a4e:	f8c8 2000 	str.w	r2, [r8]
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a62:	9307      	str	r3, [sp, #28]
 8007a64:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a68:	ee08 0a10 	vmov	s16, r0
 8007a6c:	4b9f      	ldr	r3, [pc, #636]	; (8007cec <_printf_float+0x2dc>)
 8007a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a72:	f04f 32ff 	mov.w	r2, #4294967295
 8007a76:	f7f9 f861 	bl	8000b3c <__aeabi_dcmpun>
 8007a7a:	bb88      	cbnz	r0, 8007ae0 <_printf_float+0xd0>
 8007a7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a80:	4b9a      	ldr	r3, [pc, #616]	; (8007cec <_printf_float+0x2dc>)
 8007a82:	f04f 32ff 	mov.w	r2, #4294967295
 8007a86:	f7f9 f83b 	bl	8000b00 <__aeabi_dcmple>
 8007a8a:	bb48      	cbnz	r0, 8007ae0 <_printf_float+0xd0>
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2300      	movs	r3, #0
 8007a90:	4640      	mov	r0, r8
 8007a92:	4649      	mov	r1, r9
 8007a94:	f7f9 f82a 	bl	8000aec <__aeabi_dcmplt>
 8007a98:	b110      	cbz	r0, 8007aa0 <_printf_float+0x90>
 8007a9a:	232d      	movs	r3, #45	; 0x2d
 8007a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa0:	4b93      	ldr	r3, [pc, #588]	; (8007cf0 <_printf_float+0x2e0>)
 8007aa2:	4894      	ldr	r0, [pc, #592]	; (8007cf4 <_printf_float+0x2e4>)
 8007aa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007aa8:	bf94      	ite	ls
 8007aaa:	4698      	movls	r8, r3
 8007aac:	4680      	movhi	r8, r0
 8007aae:	2303      	movs	r3, #3
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	9b05      	ldr	r3, [sp, #20]
 8007ab4:	f023 0204 	bic.w	r2, r3, #4
 8007ab8:	6022      	str	r2, [r4, #0]
 8007aba:	f04f 0900 	mov.w	r9, #0
 8007abe:	9700      	str	r7, [sp, #0]
 8007ac0:	4633      	mov	r3, r6
 8007ac2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f000 f9d8 	bl	8007e7c <_printf_common>
 8007acc:	3001      	adds	r0, #1
 8007ace:	f040 8090 	bne.w	8007bf2 <_printf_float+0x1e2>
 8007ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad6:	b00d      	add	sp, #52	; 0x34
 8007ad8:	ecbd 8b02 	vpop	{d8}
 8007adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	f7f9 f828 	bl	8000b3c <__aeabi_dcmpun>
 8007aec:	b140      	cbz	r0, 8007b00 <_printf_float+0xf0>
 8007aee:	464b      	mov	r3, r9
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bfbc      	itt	lt
 8007af4:	232d      	movlt	r3, #45	; 0x2d
 8007af6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007afa:	487f      	ldr	r0, [pc, #508]	; (8007cf8 <_printf_float+0x2e8>)
 8007afc:	4b7f      	ldr	r3, [pc, #508]	; (8007cfc <_printf_float+0x2ec>)
 8007afe:	e7d1      	b.n	8007aa4 <_printf_float+0x94>
 8007b00:	6863      	ldr	r3, [r4, #4]
 8007b02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b06:	9206      	str	r2, [sp, #24]
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	d13f      	bne.n	8007b8c <_printf_float+0x17c>
 8007b0c:	2306      	movs	r3, #6
 8007b0e:	6063      	str	r3, [r4, #4]
 8007b10:	9b05      	ldr	r3, [sp, #20]
 8007b12:	6861      	ldr	r1, [r4, #4]
 8007b14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b18:	2300      	movs	r3, #0
 8007b1a:	9303      	str	r3, [sp, #12]
 8007b1c:	ab0a      	add	r3, sp, #40	; 0x28
 8007b1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b22:	ab09      	add	r3, sp, #36	; 0x24
 8007b24:	ec49 8b10 	vmov	d0, r8, r9
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	6022      	str	r2, [r4, #0]
 8007b2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b30:	4628      	mov	r0, r5
 8007b32:	f7ff fecd 	bl	80078d0 <__cvt>
 8007b36:	9b06      	ldr	r3, [sp, #24]
 8007b38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b3a:	2b47      	cmp	r3, #71	; 0x47
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	d108      	bne.n	8007b52 <_printf_float+0x142>
 8007b40:	1cc8      	adds	r0, r1, #3
 8007b42:	db02      	blt.n	8007b4a <_printf_float+0x13a>
 8007b44:	6863      	ldr	r3, [r4, #4]
 8007b46:	4299      	cmp	r1, r3
 8007b48:	dd41      	ble.n	8007bce <_printf_float+0x1be>
 8007b4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b4e:	fa5f fb8b 	uxtb.w	fp, fp
 8007b52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b56:	d820      	bhi.n	8007b9a <_printf_float+0x18a>
 8007b58:	3901      	subs	r1, #1
 8007b5a:	465a      	mov	r2, fp
 8007b5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b60:	9109      	str	r1, [sp, #36]	; 0x24
 8007b62:	f7ff ff17 	bl	8007994 <__exponent>
 8007b66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b68:	1813      	adds	r3, r2, r0
 8007b6a:	2a01      	cmp	r2, #1
 8007b6c:	4681      	mov	r9, r0
 8007b6e:	6123      	str	r3, [r4, #16]
 8007b70:	dc02      	bgt.n	8007b78 <_printf_float+0x168>
 8007b72:	6822      	ldr	r2, [r4, #0]
 8007b74:	07d2      	lsls	r2, r2, #31
 8007b76:	d501      	bpl.n	8007b7c <_printf_float+0x16c>
 8007b78:	3301      	adds	r3, #1
 8007b7a:	6123      	str	r3, [r4, #16]
 8007b7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d09c      	beq.n	8007abe <_printf_float+0xae>
 8007b84:	232d      	movs	r3, #45	; 0x2d
 8007b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b8a:	e798      	b.n	8007abe <_printf_float+0xae>
 8007b8c:	9a06      	ldr	r2, [sp, #24]
 8007b8e:	2a47      	cmp	r2, #71	; 0x47
 8007b90:	d1be      	bne.n	8007b10 <_printf_float+0x100>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1bc      	bne.n	8007b10 <_printf_float+0x100>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e7b9      	b.n	8007b0e <_printf_float+0xfe>
 8007b9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b9e:	d118      	bne.n	8007bd2 <_printf_float+0x1c2>
 8007ba0:	2900      	cmp	r1, #0
 8007ba2:	6863      	ldr	r3, [r4, #4]
 8007ba4:	dd0b      	ble.n	8007bbe <_printf_float+0x1ae>
 8007ba6:	6121      	str	r1, [r4, #16]
 8007ba8:	b913      	cbnz	r3, 8007bb0 <_printf_float+0x1a0>
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	07d0      	lsls	r0, r2, #31
 8007bae:	d502      	bpl.n	8007bb6 <_printf_float+0x1a6>
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	440b      	add	r3, r1
 8007bb4:	6123      	str	r3, [r4, #16]
 8007bb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bb8:	f04f 0900 	mov.w	r9, #0
 8007bbc:	e7de      	b.n	8007b7c <_printf_float+0x16c>
 8007bbe:	b913      	cbnz	r3, 8007bc6 <_printf_float+0x1b6>
 8007bc0:	6822      	ldr	r2, [r4, #0]
 8007bc2:	07d2      	lsls	r2, r2, #31
 8007bc4:	d501      	bpl.n	8007bca <_printf_float+0x1ba>
 8007bc6:	3302      	adds	r3, #2
 8007bc8:	e7f4      	b.n	8007bb4 <_printf_float+0x1a4>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e7f2      	b.n	8007bb4 <_printf_float+0x1a4>
 8007bce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd4:	4299      	cmp	r1, r3
 8007bd6:	db05      	blt.n	8007be4 <_printf_float+0x1d4>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	6121      	str	r1, [r4, #16]
 8007bdc:	07d8      	lsls	r0, r3, #31
 8007bde:	d5ea      	bpl.n	8007bb6 <_printf_float+0x1a6>
 8007be0:	1c4b      	adds	r3, r1, #1
 8007be2:	e7e7      	b.n	8007bb4 <_printf_float+0x1a4>
 8007be4:	2900      	cmp	r1, #0
 8007be6:	bfd4      	ite	le
 8007be8:	f1c1 0202 	rsble	r2, r1, #2
 8007bec:	2201      	movgt	r2, #1
 8007bee:	4413      	add	r3, r2
 8007bf0:	e7e0      	b.n	8007bb4 <_printf_float+0x1a4>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	055a      	lsls	r2, r3, #21
 8007bf6:	d407      	bmi.n	8007c08 <_printf_float+0x1f8>
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	4642      	mov	r2, r8
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b8      	blx	r7
 8007c02:	3001      	adds	r0, #1
 8007c04:	d12c      	bne.n	8007c60 <_printf_float+0x250>
 8007c06:	e764      	b.n	8007ad2 <_printf_float+0xc2>
 8007c08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c0c:	f240 80e0 	bls.w	8007dd0 <_printf_float+0x3c0>
 8007c10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c14:	2200      	movs	r2, #0
 8007c16:	2300      	movs	r3, #0
 8007c18:	f7f8 ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d034      	beq.n	8007c8a <_printf_float+0x27a>
 8007c20:	4a37      	ldr	r2, [pc, #220]	; (8007d00 <_printf_float+0x2f0>)
 8007c22:	2301      	movs	r3, #1
 8007c24:	4631      	mov	r1, r6
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b8      	blx	r7
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	f43f af51 	beq.w	8007ad2 <_printf_float+0xc2>
 8007c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c34:	429a      	cmp	r2, r3
 8007c36:	db02      	blt.n	8007c3e <_printf_float+0x22e>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	07d8      	lsls	r0, r3, #31
 8007c3c:	d510      	bpl.n	8007c60 <_printf_float+0x250>
 8007c3e:	ee18 3a10 	vmov	r3, s16
 8007c42:	4652      	mov	r2, sl
 8007c44:	4631      	mov	r1, r6
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b8      	blx	r7
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	f43f af41 	beq.w	8007ad2 <_printf_float+0xc2>
 8007c50:	f04f 0800 	mov.w	r8, #0
 8007c54:	f104 091a 	add.w	r9, r4, #26
 8007c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	4543      	cmp	r3, r8
 8007c5e:	dc09      	bgt.n	8007c74 <_printf_float+0x264>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	079b      	lsls	r3, r3, #30
 8007c64:	f100 8105 	bmi.w	8007e72 <_printf_float+0x462>
 8007c68:	68e0      	ldr	r0, [r4, #12]
 8007c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c6c:	4298      	cmp	r0, r3
 8007c6e:	bfb8      	it	lt
 8007c70:	4618      	movlt	r0, r3
 8007c72:	e730      	b.n	8007ad6 <_printf_float+0xc6>
 8007c74:	2301      	movs	r3, #1
 8007c76:	464a      	mov	r2, r9
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f43f af27 	beq.w	8007ad2 <_printf_float+0xc2>
 8007c84:	f108 0801 	add.w	r8, r8, #1
 8007c88:	e7e6      	b.n	8007c58 <_printf_float+0x248>
 8007c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dc39      	bgt.n	8007d04 <_printf_float+0x2f4>
 8007c90:	4a1b      	ldr	r2, [pc, #108]	; (8007d00 <_printf_float+0x2f0>)
 8007c92:	2301      	movs	r3, #1
 8007c94:	4631      	mov	r1, r6
 8007c96:	4628      	mov	r0, r5
 8007c98:	47b8      	blx	r7
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	f43f af19 	beq.w	8007ad2 <_printf_float+0xc2>
 8007ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	d102      	bne.n	8007cae <_printf_float+0x29e>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	07d9      	lsls	r1, r3, #31
 8007cac:	d5d8      	bpl.n	8007c60 <_printf_float+0x250>
 8007cae:	ee18 3a10 	vmov	r3, s16
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	f43f af09 	beq.w	8007ad2 <_printf_float+0xc2>
 8007cc0:	f04f 0900 	mov.w	r9, #0
 8007cc4:	f104 0a1a 	add.w	sl, r4, #26
 8007cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cca:	425b      	negs	r3, r3
 8007ccc:	454b      	cmp	r3, r9
 8007cce:	dc01      	bgt.n	8007cd4 <_printf_float+0x2c4>
 8007cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd2:	e792      	b.n	8007bfa <_printf_float+0x1ea>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	4652      	mov	r2, sl
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f aef7 	beq.w	8007ad2 <_printf_float+0xc2>
 8007ce4:	f109 0901 	add.w	r9, r9, #1
 8007ce8:	e7ee      	b.n	8007cc8 <_printf_float+0x2b8>
 8007cea:	bf00      	nop
 8007cec:	7fefffff 	.word	0x7fefffff
 8007cf0:	0800c534 	.word	0x0800c534
 8007cf4:	0800c538 	.word	0x0800c538
 8007cf8:	0800c540 	.word	0x0800c540
 8007cfc:	0800c53c 	.word	0x0800c53c
 8007d00:	0800c544 	.word	0x0800c544
 8007d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	bfa8      	it	ge
 8007d0c:	461a      	movge	r2, r3
 8007d0e:	2a00      	cmp	r2, #0
 8007d10:	4691      	mov	r9, r2
 8007d12:	dc37      	bgt.n	8007d84 <_printf_float+0x374>
 8007d14:	f04f 0b00 	mov.w	fp, #0
 8007d18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d1c:	f104 021a 	add.w	r2, r4, #26
 8007d20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d22:	9305      	str	r3, [sp, #20]
 8007d24:	eba3 0309 	sub.w	r3, r3, r9
 8007d28:	455b      	cmp	r3, fp
 8007d2a:	dc33      	bgt.n	8007d94 <_printf_float+0x384>
 8007d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d30:	429a      	cmp	r2, r3
 8007d32:	db3b      	blt.n	8007dac <_printf_float+0x39c>
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	07da      	lsls	r2, r3, #31
 8007d38:	d438      	bmi.n	8007dac <_printf_float+0x39c>
 8007d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3c:	9a05      	ldr	r2, [sp, #20]
 8007d3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d40:	1a9a      	subs	r2, r3, r2
 8007d42:	eba3 0901 	sub.w	r9, r3, r1
 8007d46:	4591      	cmp	r9, r2
 8007d48:	bfa8      	it	ge
 8007d4a:	4691      	movge	r9, r2
 8007d4c:	f1b9 0f00 	cmp.w	r9, #0
 8007d50:	dc35      	bgt.n	8007dbe <_printf_float+0x3ae>
 8007d52:	f04f 0800 	mov.w	r8, #0
 8007d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d5a:	f104 0a1a 	add.w	sl, r4, #26
 8007d5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	eba3 0309 	sub.w	r3, r3, r9
 8007d68:	4543      	cmp	r3, r8
 8007d6a:	f77f af79 	ble.w	8007c60 <_printf_float+0x250>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4652      	mov	r2, sl
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f43f aeaa 	beq.w	8007ad2 <_printf_float+0xc2>
 8007d7e:	f108 0801 	add.w	r8, r8, #1
 8007d82:	e7ec      	b.n	8007d5e <_printf_float+0x34e>
 8007d84:	4613      	mov	r3, r2
 8007d86:	4631      	mov	r1, r6
 8007d88:	4642      	mov	r2, r8
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b8      	blx	r7
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d1c0      	bne.n	8007d14 <_printf_float+0x304>
 8007d92:	e69e      	b.n	8007ad2 <_printf_float+0xc2>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4631      	mov	r1, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	9205      	str	r2, [sp, #20]
 8007d9c:	47b8      	blx	r7
 8007d9e:	3001      	adds	r0, #1
 8007da0:	f43f ae97 	beq.w	8007ad2 <_printf_float+0xc2>
 8007da4:	9a05      	ldr	r2, [sp, #20]
 8007da6:	f10b 0b01 	add.w	fp, fp, #1
 8007daa:	e7b9      	b.n	8007d20 <_printf_float+0x310>
 8007dac:	ee18 3a10 	vmov	r3, s16
 8007db0:	4652      	mov	r2, sl
 8007db2:	4631      	mov	r1, r6
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b8      	blx	r7
 8007db8:	3001      	adds	r0, #1
 8007dba:	d1be      	bne.n	8007d3a <_printf_float+0x32a>
 8007dbc:	e689      	b.n	8007ad2 <_printf_float+0xc2>
 8007dbe:	9a05      	ldr	r2, [sp, #20]
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	4442      	add	r2, r8
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	47b8      	blx	r7
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d1c1      	bne.n	8007d52 <_printf_float+0x342>
 8007dce:	e680      	b.n	8007ad2 <_printf_float+0xc2>
 8007dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd2:	2a01      	cmp	r2, #1
 8007dd4:	dc01      	bgt.n	8007dda <_printf_float+0x3ca>
 8007dd6:	07db      	lsls	r3, r3, #31
 8007dd8:	d538      	bpl.n	8007e4c <_printf_float+0x43c>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4642      	mov	r2, r8
 8007dde:	4631      	mov	r1, r6
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	f43f ae74 	beq.w	8007ad2 <_printf_float+0xc2>
 8007dea:	ee18 3a10 	vmov	r3, s16
 8007dee:	4652      	mov	r2, sl
 8007df0:	4631      	mov	r1, r6
 8007df2:	4628      	mov	r0, r5
 8007df4:	47b8      	blx	r7
 8007df6:	3001      	adds	r0, #1
 8007df8:	f43f ae6b 	beq.w	8007ad2 <_printf_float+0xc2>
 8007dfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e00:	2200      	movs	r2, #0
 8007e02:	2300      	movs	r3, #0
 8007e04:	f7f8 fe68 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e08:	b9d8      	cbnz	r0, 8007e42 <_printf_float+0x432>
 8007e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e0c:	f108 0201 	add.w	r2, r8, #1
 8007e10:	3b01      	subs	r3, #1
 8007e12:	4631      	mov	r1, r6
 8007e14:	4628      	mov	r0, r5
 8007e16:	47b8      	blx	r7
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d10e      	bne.n	8007e3a <_printf_float+0x42a>
 8007e1c:	e659      	b.n	8007ad2 <_printf_float+0xc2>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	4652      	mov	r2, sl
 8007e22:	4631      	mov	r1, r6
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b8      	blx	r7
 8007e28:	3001      	adds	r0, #1
 8007e2a:	f43f ae52 	beq.w	8007ad2 <_printf_float+0xc2>
 8007e2e:	f108 0801 	add.w	r8, r8, #1
 8007e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e34:	3b01      	subs	r3, #1
 8007e36:	4543      	cmp	r3, r8
 8007e38:	dcf1      	bgt.n	8007e1e <_printf_float+0x40e>
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e40:	e6dc      	b.n	8007bfc <_printf_float+0x1ec>
 8007e42:	f04f 0800 	mov.w	r8, #0
 8007e46:	f104 0a1a 	add.w	sl, r4, #26
 8007e4a:	e7f2      	b.n	8007e32 <_printf_float+0x422>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	4642      	mov	r2, r8
 8007e50:	e7df      	b.n	8007e12 <_printf_float+0x402>
 8007e52:	2301      	movs	r3, #1
 8007e54:	464a      	mov	r2, r9
 8007e56:	4631      	mov	r1, r6
 8007e58:	4628      	mov	r0, r5
 8007e5a:	47b8      	blx	r7
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	f43f ae38 	beq.w	8007ad2 <_printf_float+0xc2>
 8007e62:	f108 0801 	add.w	r8, r8, #1
 8007e66:	68e3      	ldr	r3, [r4, #12]
 8007e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e6a:	1a5b      	subs	r3, r3, r1
 8007e6c:	4543      	cmp	r3, r8
 8007e6e:	dcf0      	bgt.n	8007e52 <_printf_float+0x442>
 8007e70:	e6fa      	b.n	8007c68 <_printf_float+0x258>
 8007e72:	f04f 0800 	mov.w	r8, #0
 8007e76:	f104 0919 	add.w	r9, r4, #25
 8007e7a:	e7f4      	b.n	8007e66 <_printf_float+0x456>

08007e7c <_printf_common>:
 8007e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e80:	4616      	mov	r6, r2
 8007e82:	4699      	mov	r9, r3
 8007e84:	688a      	ldr	r2, [r1, #8]
 8007e86:	690b      	ldr	r3, [r1, #16]
 8007e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	bfb8      	it	lt
 8007e90:	4613      	movlt	r3, r2
 8007e92:	6033      	str	r3, [r6, #0]
 8007e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e98:	4607      	mov	r7, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	b10a      	cbz	r2, 8007ea2 <_printf_common+0x26>
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	6033      	str	r3, [r6, #0]
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	0699      	lsls	r1, r3, #26
 8007ea6:	bf42      	ittt	mi
 8007ea8:	6833      	ldrmi	r3, [r6, #0]
 8007eaa:	3302      	addmi	r3, #2
 8007eac:	6033      	strmi	r3, [r6, #0]
 8007eae:	6825      	ldr	r5, [r4, #0]
 8007eb0:	f015 0506 	ands.w	r5, r5, #6
 8007eb4:	d106      	bne.n	8007ec4 <_printf_common+0x48>
 8007eb6:	f104 0a19 	add.w	sl, r4, #25
 8007eba:	68e3      	ldr	r3, [r4, #12]
 8007ebc:	6832      	ldr	r2, [r6, #0]
 8007ebe:	1a9b      	subs	r3, r3, r2
 8007ec0:	42ab      	cmp	r3, r5
 8007ec2:	dc26      	bgt.n	8007f12 <_printf_common+0x96>
 8007ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ec8:	1e13      	subs	r3, r2, #0
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	bf18      	it	ne
 8007ece:	2301      	movne	r3, #1
 8007ed0:	0692      	lsls	r2, r2, #26
 8007ed2:	d42b      	bmi.n	8007f2c <_printf_common+0xb0>
 8007ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ed8:	4649      	mov	r1, r9
 8007eda:	4638      	mov	r0, r7
 8007edc:	47c0      	blx	r8
 8007ede:	3001      	adds	r0, #1
 8007ee0:	d01e      	beq.n	8007f20 <_printf_common+0xa4>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	68e5      	ldr	r5, [r4, #12]
 8007ee6:	6832      	ldr	r2, [r6, #0]
 8007ee8:	f003 0306 	and.w	r3, r3, #6
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	bf08      	it	eq
 8007ef0:	1aad      	subeq	r5, r5, r2
 8007ef2:	68a3      	ldr	r3, [r4, #8]
 8007ef4:	6922      	ldr	r2, [r4, #16]
 8007ef6:	bf0c      	ite	eq
 8007ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007efc:	2500      	movne	r5, #0
 8007efe:	4293      	cmp	r3, r2
 8007f00:	bfc4      	itt	gt
 8007f02:	1a9b      	subgt	r3, r3, r2
 8007f04:	18ed      	addgt	r5, r5, r3
 8007f06:	2600      	movs	r6, #0
 8007f08:	341a      	adds	r4, #26
 8007f0a:	42b5      	cmp	r5, r6
 8007f0c:	d11a      	bne.n	8007f44 <_printf_common+0xc8>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	e008      	b.n	8007f24 <_printf_common+0xa8>
 8007f12:	2301      	movs	r3, #1
 8007f14:	4652      	mov	r2, sl
 8007f16:	4649      	mov	r1, r9
 8007f18:	4638      	mov	r0, r7
 8007f1a:	47c0      	blx	r8
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d103      	bne.n	8007f28 <_printf_common+0xac>
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f28:	3501      	adds	r5, #1
 8007f2a:	e7c6      	b.n	8007eba <_printf_common+0x3e>
 8007f2c:	18e1      	adds	r1, r4, r3
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	2030      	movs	r0, #48	; 0x30
 8007f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f36:	4422      	add	r2, r4
 8007f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f40:	3302      	adds	r3, #2
 8007f42:	e7c7      	b.n	8007ed4 <_printf_common+0x58>
 8007f44:	2301      	movs	r3, #1
 8007f46:	4622      	mov	r2, r4
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	47c0      	blx	r8
 8007f4e:	3001      	adds	r0, #1
 8007f50:	d0e6      	beq.n	8007f20 <_printf_common+0xa4>
 8007f52:	3601      	adds	r6, #1
 8007f54:	e7d9      	b.n	8007f0a <_printf_common+0x8e>
	...

08007f58 <_printf_i>:
 8007f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5c:	7e0f      	ldrb	r7, [r1, #24]
 8007f5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f60:	2f78      	cmp	r7, #120	; 0x78
 8007f62:	4691      	mov	r9, r2
 8007f64:	4680      	mov	r8, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	469a      	mov	sl, r3
 8007f6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f6e:	d807      	bhi.n	8007f80 <_printf_i+0x28>
 8007f70:	2f62      	cmp	r7, #98	; 0x62
 8007f72:	d80a      	bhi.n	8007f8a <_printf_i+0x32>
 8007f74:	2f00      	cmp	r7, #0
 8007f76:	f000 80d8 	beq.w	800812a <_printf_i+0x1d2>
 8007f7a:	2f58      	cmp	r7, #88	; 0x58
 8007f7c:	f000 80a3 	beq.w	80080c6 <_printf_i+0x16e>
 8007f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f88:	e03a      	b.n	8008000 <_printf_i+0xa8>
 8007f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f8e:	2b15      	cmp	r3, #21
 8007f90:	d8f6      	bhi.n	8007f80 <_printf_i+0x28>
 8007f92:	a101      	add	r1, pc, #4	; (adr r1, 8007f98 <_printf_i+0x40>)
 8007f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f98:	08007ff1 	.word	0x08007ff1
 8007f9c:	08008005 	.word	0x08008005
 8007fa0:	08007f81 	.word	0x08007f81
 8007fa4:	08007f81 	.word	0x08007f81
 8007fa8:	08007f81 	.word	0x08007f81
 8007fac:	08007f81 	.word	0x08007f81
 8007fb0:	08008005 	.word	0x08008005
 8007fb4:	08007f81 	.word	0x08007f81
 8007fb8:	08007f81 	.word	0x08007f81
 8007fbc:	08007f81 	.word	0x08007f81
 8007fc0:	08007f81 	.word	0x08007f81
 8007fc4:	08008111 	.word	0x08008111
 8007fc8:	08008035 	.word	0x08008035
 8007fcc:	080080f3 	.word	0x080080f3
 8007fd0:	08007f81 	.word	0x08007f81
 8007fd4:	08007f81 	.word	0x08007f81
 8007fd8:	08008133 	.word	0x08008133
 8007fdc:	08007f81 	.word	0x08007f81
 8007fe0:	08008035 	.word	0x08008035
 8007fe4:	08007f81 	.word	0x08007f81
 8007fe8:	08007f81 	.word	0x08007f81
 8007fec:	080080fb 	.word	0x080080fb
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	1d1a      	adds	r2, r3, #4
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	602a      	str	r2, [r5, #0]
 8007ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008000:	2301      	movs	r3, #1
 8008002:	e0a3      	b.n	800814c <_printf_i+0x1f4>
 8008004:	6820      	ldr	r0, [r4, #0]
 8008006:	6829      	ldr	r1, [r5, #0]
 8008008:	0606      	lsls	r6, r0, #24
 800800a:	f101 0304 	add.w	r3, r1, #4
 800800e:	d50a      	bpl.n	8008026 <_printf_i+0xce>
 8008010:	680e      	ldr	r6, [r1, #0]
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	2e00      	cmp	r6, #0
 8008016:	da03      	bge.n	8008020 <_printf_i+0xc8>
 8008018:	232d      	movs	r3, #45	; 0x2d
 800801a:	4276      	negs	r6, r6
 800801c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008020:	485e      	ldr	r0, [pc, #376]	; (800819c <_printf_i+0x244>)
 8008022:	230a      	movs	r3, #10
 8008024:	e019      	b.n	800805a <_printf_i+0x102>
 8008026:	680e      	ldr	r6, [r1, #0]
 8008028:	602b      	str	r3, [r5, #0]
 800802a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800802e:	bf18      	it	ne
 8008030:	b236      	sxthne	r6, r6
 8008032:	e7ef      	b.n	8008014 <_printf_i+0xbc>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	6820      	ldr	r0, [r4, #0]
 8008038:	1d19      	adds	r1, r3, #4
 800803a:	6029      	str	r1, [r5, #0]
 800803c:	0601      	lsls	r1, r0, #24
 800803e:	d501      	bpl.n	8008044 <_printf_i+0xec>
 8008040:	681e      	ldr	r6, [r3, #0]
 8008042:	e002      	b.n	800804a <_printf_i+0xf2>
 8008044:	0646      	lsls	r6, r0, #25
 8008046:	d5fb      	bpl.n	8008040 <_printf_i+0xe8>
 8008048:	881e      	ldrh	r6, [r3, #0]
 800804a:	4854      	ldr	r0, [pc, #336]	; (800819c <_printf_i+0x244>)
 800804c:	2f6f      	cmp	r7, #111	; 0x6f
 800804e:	bf0c      	ite	eq
 8008050:	2308      	moveq	r3, #8
 8008052:	230a      	movne	r3, #10
 8008054:	2100      	movs	r1, #0
 8008056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800805a:	6865      	ldr	r5, [r4, #4]
 800805c:	60a5      	str	r5, [r4, #8]
 800805e:	2d00      	cmp	r5, #0
 8008060:	bfa2      	ittt	ge
 8008062:	6821      	ldrge	r1, [r4, #0]
 8008064:	f021 0104 	bicge.w	r1, r1, #4
 8008068:	6021      	strge	r1, [r4, #0]
 800806a:	b90e      	cbnz	r6, 8008070 <_printf_i+0x118>
 800806c:	2d00      	cmp	r5, #0
 800806e:	d04d      	beq.n	800810c <_printf_i+0x1b4>
 8008070:	4615      	mov	r5, r2
 8008072:	fbb6 f1f3 	udiv	r1, r6, r3
 8008076:	fb03 6711 	mls	r7, r3, r1, r6
 800807a:	5dc7      	ldrb	r7, [r0, r7]
 800807c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008080:	4637      	mov	r7, r6
 8008082:	42bb      	cmp	r3, r7
 8008084:	460e      	mov	r6, r1
 8008086:	d9f4      	bls.n	8008072 <_printf_i+0x11a>
 8008088:	2b08      	cmp	r3, #8
 800808a:	d10b      	bne.n	80080a4 <_printf_i+0x14c>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	07de      	lsls	r6, r3, #31
 8008090:	d508      	bpl.n	80080a4 <_printf_i+0x14c>
 8008092:	6923      	ldr	r3, [r4, #16]
 8008094:	6861      	ldr	r1, [r4, #4]
 8008096:	4299      	cmp	r1, r3
 8008098:	bfde      	ittt	le
 800809a:	2330      	movle	r3, #48	; 0x30
 800809c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080a4:	1b52      	subs	r2, r2, r5
 80080a6:	6122      	str	r2, [r4, #16]
 80080a8:	f8cd a000 	str.w	sl, [sp]
 80080ac:	464b      	mov	r3, r9
 80080ae:	aa03      	add	r2, sp, #12
 80080b0:	4621      	mov	r1, r4
 80080b2:	4640      	mov	r0, r8
 80080b4:	f7ff fee2 	bl	8007e7c <_printf_common>
 80080b8:	3001      	adds	r0, #1
 80080ba:	d14c      	bne.n	8008156 <_printf_i+0x1fe>
 80080bc:	f04f 30ff 	mov.w	r0, #4294967295
 80080c0:	b004      	add	sp, #16
 80080c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c6:	4835      	ldr	r0, [pc, #212]	; (800819c <_printf_i+0x244>)
 80080c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080cc:	6829      	ldr	r1, [r5, #0]
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80080d4:	6029      	str	r1, [r5, #0]
 80080d6:	061d      	lsls	r5, r3, #24
 80080d8:	d514      	bpl.n	8008104 <_printf_i+0x1ac>
 80080da:	07df      	lsls	r7, r3, #31
 80080dc:	bf44      	itt	mi
 80080de:	f043 0320 	orrmi.w	r3, r3, #32
 80080e2:	6023      	strmi	r3, [r4, #0]
 80080e4:	b91e      	cbnz	r6, 80080ee <_printf_i+0x196>
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	f023 0320 	bic.w	r3, r3, #32
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	2310      	movs	r3, #16
 80080f0:	e7b0      	b.n	8008054 <_printf_i+0xfc>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	f043 0320 	orr.w	r3, r3, #32
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	2378      	movs	r3, #120	; 0x78
 80080fc:	4828      	ldr	r0, [pc, #160]	; (80081a0 <_printf_i+0x248>)
 80080fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008102:	e7e3      	b.n	80080cc <_printf_i+0x174>
 8008104:	0659      	lsls	r1, r3, #25
 8008106:	bf48      	it	mi
 8008108:	b2b6      	uxthmi	r6, r6
 800810a:	e7e6      	b.n	80080da <_printf_i+0x182>
 800810c:	4615      	mov	r5, r2
 800810e:	e7bb      	b.n	8008088 <_printf_i+0x130>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	6826      	ldr	r6, [r4, #0]
 8008114:	6961      	ldr	r1, [r4, #20]
 8008116:	1d18      	adds	r0, r3, #4
 8008118:	6028      	str	r0, [r5, #0]
 800811a:	0635      	lsls	r5, r6, #24
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	d501      	bpl.n	8008124 <_printf_i+0x1cc>
 8008120:	6019      	str	r1, [r3, #0]
 8008122:	e002      	b.n	800812a <_printf_i+0x1d2>
 8008124:	0670      	lsls	r0, r6, #25
 8008126:	d5fb      	bpl.n	8008120 <_printf_i+0x1c8>
 8008128:	8019      	strh	r1, [r3, #0]
 800812a:	2300      	movs	r3, #0
 800812c:	6123      	str	r3, [r4, #16]
 800812e:	4615      	mov	r5, r2
 8008130:	e7ba      	b.n	80080a8 <_printf_i+0x150>
 8008132:	682b      	ldr	r3, [r5, #0]
 8008134:	1d1a      	adds	r2, r3, #4
 8008136:	602a      	str	r2, [r5, #0]
 8008138:	681d      	ldr	r5, [r3, #0]
 800813a:	6862      	ldr	r2, [r4, #4]
 800813c:	2100      	movs	r1, #0
 800813e:	4628      	mov	r0, r5
 8008140:	f7f8 f856 	bl	80001f0 <memchr>
 8008144:	b108      	cbz	r0, 800814a <_printf_i+0x1f2>
 8008146:	1b40      	subs	r0, r0, r5
 8008148:	6060      	str	r0, [r4, #4]
 800814a:	6863      	ldr	r3, [r4, #4]
 800814c:	6123      	str	r3, [r4, #16]
 800814e:	2300      	movs	r3, #0
 8008150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008154:	e7a8      	b.n	80080a8 <_printf_i+0x150>
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	462a      	mov	r2, r5
 800815a:	4649      	mov	r1, r9
 800815c:	4640      	mov	r0, r8
 800815e:	47d0      	blx	sl
 8008160:	3001      	adds	r0, #1
 8008162:	d0ab      	beq.n	80080bc <_printf_i+0x164>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	079b      	lsls	r3, r3, #30
 8008168:	d413      	bmi.n	8008192 <_printf_i+0x23a>
 800816a:	68e0      	ldr	r0, [r4, #12]
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	4298      	cmp	r0, r3
 8008170:	bfb8      	it	lt
 8008172:	4618      	movlt	r0, r3
 8008174:	e7a4      	b.n	80080c0 <_printf_i+0x168>
 8008176:	2301      	movs	r3, #1
 8008178:	4632      	mov	r2, r6
 800817a:	4649      	mov	r1, r9
 800817c:	4640      	mov	r0, r8
 800817e:	47d0      	blx	sl
 8008180:	3001      	adds	r0, #1
 8008182:	d09b      	beq.n	80080bc <_printf_i+0x164>
 8008184:	3501      	adds	r5, #1
 8008186:	68e3      	ldr	r3, [r4, #12]
 8008188:	9903      	ldr	r1, [sp, #12]
 800818a:	1a5b      	subs	r3, r3, r1
 800818c:	42ab      	cmp	r3, r5
 800818e:	dcf2      	bgt.n	8008176 <_printf_i+0x21e>
 8008190:	e7eb      	b.n	800816a <_printf_i+0x212>
 8008192:	2500      	movs	r5, #0
 8008194:	f104 0619 	add.w	r6, r4, #25
 8008198:	e7f5      	b.n	8008186 <_printf_i+0x22e>
 800819a:	bf00      	nop
 800819c:	0800c546 	.word	0x0800c546
 80081a0:	0800c557 	.word	0x0800c557

080081a4 <_scanf_float>:
 80081a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	b087      	sub	sp, #28
 80081aa:	4617      	mov	r7, r2
 80081ac:	9303      	str	r3, [sp, #12]
 80081ae:	688b      	ldr	r3, [r1, #8]
 80081b0:	1e5a      	subs	r2, r3, #1
 80081b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80081b6:	bf83      	ittte	hi
 80081b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80081bc:	195b      	addhi	r3, r3, r5
 80081be:	9302      	strhi	r3, [sp, #8]
 80081c0:	2300      	movls	r3, #0
 80081c2:	bf86      	itte	hi
 80081c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80081c8:	608b      	strhi	r3, [r1, #8]
 80081ca:	9302      	strls	r3, [sp, #8]
 80081cc:	680b      	ldr	r3, [r1, #0]
 80081ce:	468b      	mov	fp, r1
 80081d0:	2500      	movs	r5, #0
 80081d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80081d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80081da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081de:	4680      	mov	r8, r0
 80081e0:	460c      	mov	r4, r1
 80081e2:	465e      	mov	r6, fp
 80081e4:	46aa      	mov	sl, r5
 80081e6:	46a9      	mov	r9, r5
 80081e8:	9501      	str	r5, [sp, #4]
 80081ea:	68a2      	ldr	r2, [r4, #8]
 80081ec:	b152      	cbz	r2, 8008204 <_scanf_float+0x60>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b4e      	cmp	r3, #78	; 0x4e
 80081f4:	d864      	bhi.n	80082c0 <_scanf_float+0x11c>
 80081f6:	2b40      	cmp	r3, #64	; 0x40
 80081f8:	d83c      	bhi.n	8008274 <_scanf_float+0xd0>
 80081fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80081fe:	b2c8      	uxtb	r0, r1
 8008200:	280e      	cmp	r0, #14
 8008202:	d93a      	bls.n	800827a <_scanf_float+0xd6>
 8008204:	f1b9 0f00 	cmp.w	r9, #0
 8008208:	d003      	beq.n	8008212 <_scanf_float+0x6e>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008216:	f1ba 0f01 	cmp.w	sl, #1
 800821a:	f200 8113 	bhi.w	8008444 <_scanf_float+0x2a0>
 800821e:	455e      	cmp	r6, fp
 8008220:	f200 8105 	bhi.w	800842e <_scanf_float+0x28a>
 8008224:	2501      	movs	r5, #1
 8008226:	4628      	mov	r0, r5
 8008228:	b007      	add	sp, #28
 800822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008232:	2a0d      	cmp	r2, #13
 8008234:	d8e6      	bhi.n	8008204 <_scanf_float+0x60>
 8008236:	a101      	add	r1, pc, #4	; (adr r1, 800823c <_scanf_float+0x98>)
 8008238:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800823c:	0800837b 	.word	0x0800837b
 8008240:	08008205 	.word	0x08008205
 8008244:	08008205 	.word	0x08008205
 8008248:	08008205 	.word	0x08008205
 800824c:	080083db 	.word	0x080083db
 8008250:	080083b3 	.word	0x080083b3
 8008254:	08008205 	.word	0x08008205
 8008258:	08008205 	.word	0x08008205
 800825c:	08008389 	.word	0x08008389
 8008260:	08008205 	.word	0x08008205
 8008264:	08008205 	.word	0x08008205
 8008268:	08008205 	.word	0x08008205
 800826c:	08008205 	.word	0x08008205
 8008270:	08008341 	.word	0x08008341
 8008274:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008278:	e7db      	b.n	8008232 <_scanf_float+0x8e>
 800827a:	290e      	cmp	r1, #14
 800827c:	d8c2      	bhi.n	8008204 <_scanf_float+0x60>
 800827e:	a001      	add	r0, pc, #4	; (adr r0, 8008284 <_scanf_float+0xe0>)
 8008280:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008284:	08008333 	.word	0x08008333
 8008288:	08008205 	.word	0x08008205
 800828c:	08008333 	.word	0x08008333
 8008290:	080083c7 	.word	0x080083c7
 8008294:	08008205 	.word	0x08008205
 8008298:	080082e1 	.word	0x080082e1
 800829c:	0800831d 	.word	0x0800831d
 80082a0:	0800831d 	.word	0x0800831d
 80082a4:	0800831d 	.word	0x0800831d
 80082a8:	0800831d 	.word	0x0800831d
 80082ac:	0800831d 	.word	0x0800831d
 80082b0:	0800831d 	.word	0x0800831d
 80082b4:	0800831d 	.word	0x0800831d
 80082b8:	0800831d 	.word	0x0800831d
 80082bc:	0800831d 	.word	0x0800831d
 80082c0:	2b6e      	cmp	r3, #110	; 0x6e
 80082c2:	d809      	bhi.n	80082d8 <_scanf_float+0x134>
 80082c4:	2b60      	cmp	r3, #96	; 0x60
 80082c6:	d8b2      	bhi.n	800822e <_scanf_float+0x8a>
 80082c8:	2b54      	cmp	r3, #84	; 0x54
 80082ca:	d077      	beq.n	80083bc <_scanf_float+0x218>
 80082cc:	2b59      	cmp	r3, #89	; 0x59
 80082ce:	d199      	bne.n	8008204 <_scanf_float+0x60>
 80082d0:	2d07      	cmp	r5, #7
 80082d2:	d197      	bne.n	8008204 <_scanf_float+0x60>
 80082d4:	2508      	movs	r5, #8
 80082d6:	e029      	b.n	800832c <_scanf_float+0x188>
 80082d8:	2b74      	cmp	r3, #116	; 0x74
 80082da:	d06f      	beq.n	80083bc <_scanf_float+0x218>
 80082dc:	2b79      	cmp	r3, #121	; 0x79
 80082de:	e7f6      	b.n	80082ce <_scanf_float+0x12a>
 80082e0:	6821      	ldr	r1, [r4, #0]
 80082e2:	05c8      	lsls	r0, r1, #23
 80082e4:	d51a      	bpl.n	800831c <_scanf_float+0x178>
 80082e6:	9b02      	ldr	r3, [sp, #8]
 80082e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80082ec:	6021      	str	r1, [r4, #0]
 80082ee:	f109 0901 	add.w	r9, r9, #1
 80082f2:	b11b      	cbz	r3, 80082fc <_scanf_float+0x158>
 80082f4:	3b01      	subs	r3, #1
 80082f6:	3201      	adds	r2, #1
 80082f8:	9302      	str	r3, [sp, #8]
 80082fa:	60a2      	str	r2, [r4, #8]
 80082fc:	68a3      	ldr	r3, [r4, #8]
 80082fe:	3b01      	subs	r3, #1
 8008300:	60a3      	str	r3, [r4, #8]
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	3301      	adds	r3, #1
 8008306:	6123      	str	r3, [r4, #16]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3b01      	subs	r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	607b      	str	r3, [r7, #4]
 8008310:	f340 8084 	ble.w	800841c <_scanf_float+0x278>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	3301      	adds	r3, #1
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	e766      	b.n	80081ea <_scanf_float+0x46>
 800831c:	eb1a 0f05 	cmn.w	sl, r5
 8008320:	f47f af70 	bne.w	8008204 <_scanf_float+0x60>
 8008324:	6822      	ldr	r2, [r4, #0]
 8008326:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800832a:	6022      	str	r2, [r4, #0]
 800832c:	f806 3b01 	strb.w	r3, [r6], #1
 8008330:	e7e4      	b.n	80082fc <_scanf_float+0x158>
 8008332:	6822      	ldr	r2, [r4, #0]
 8008334:	0610      	lsls	r0, r2, #24
 8008336:	f57f af65 	bpl.w	8008204 <_scanf_float+0x60>
 800833a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800833e:	e7f4      	b.n	800832a <_scanf_float+0x186>
 8008340:	f1ba 0f00 	cmp.w	sl, #0
 8008344:	d10e      	bne.n	8008364 <_scanf_float+0x1c0>
 8008346:	f1b9 0f00 	cmp.w	r9, #0
 800834a:	d10e      	bne.n	800836a <_scanf_float+0x1c6>
 800834c:	6822      	ldr	r2, [r4, #0]
 800834e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008352:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008356:	d108      	bne.n	800836a <_scanf_float+0x1c6>
 8008358:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800835c:	6022      	str	r2, [r4, #0]
 800835e:	f04f 0a01 	mov.w	sl, #1
 8008362:	e7e3      	b.n	800832c <_scanf_float+0x188>
 8008364:	f1ba 0f02 	cmp.w	sl, #2
 8008368:	d055      	beq.n	8008416 <_scanf_float+0x272>
 800836a:	2d01      	cmp	r5, #1
 800836c:	d002      	beq.n	8008374 <_scanf_float+0x1d0>
 800836e:	2d04      	cmp	r5, #4
 8008370:	f47f af48 	bne.w	8008204 <_scanf_float+0x60>
 8008374:	3501      	adds	r5, #1
 8008376:	b2ed      	uxtb	r5, r5
 8008378:	e7d8      	b.n	800832c <_scanf_float+0x188>
 800837a:	f1ba 0f01 	cmp.w	sl, #1
 800837e:	f47f af41 	bne.w	8008204 <_scanf_float+0x60>
 8008382:	f04f 0a02 	mov.w	sl, #2
 8008386:	e7d1      	b.n	800832c <_scanf_float+0x188>
 8008388:	b97d      	cbnz	r5, 80083aa <_scanf_float+0x206>
 800838a:	f1b9 0f00 	cmp.w	r9, #0
 800838e:	f47f af3c 	bne.w	800820a <_scanf_float+0x66>
 8008392:	6822      	ldr	r2, [r4, #0]
 8008394:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008398:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800839c:	f47f af39 	bne.w	8008212 <_scanf_float+0x6e>
 80083a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083a4:	6022      	str	r2, [r4, #0]
 80083a6:	2501      	movs	r5, #1
 80083a8:	e7c0      	b.n	800832c <_scanf_float+0x188>
 80083aa:	2d03      	cmp	r5, #3
 80083ac:	d0e2      	beq.n	8008374 <_scanf_float+0x1d0>
 80083ae:	2d05      	cmp	r5, #5
 80083b0:	e7de      	b.n	8008370 <_scanf_float+0x1cc>
 80083b2:	2d02      	cmp	r5, #2
 80083b4:	f47f af26 	bne.w	8008204 <_scanf_float+0x60>
 80083b8:	2503      	movs	r5, #3
 80083ba:	e7b7      	b.n	800832c <_scanf_float+0x188>
 80083bc:	2d06      	cmp	r5, #6
 80083be:	f47f af21 	bne.w	8008204 <_scanf_float+0x60>
 80083c2:	2507      	movs	r5, #7
 80083c4:	e7b2      	b.n	800832c <_scanf_float+0x188>
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	0591      	lsls	r1, r2, #22
 80083ca:	f57f af1b 	bpl.w	8008204 <_scanf_float+0x60>
 80083ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80083d2:	6022      	str	r2, [r4, #0]
 80083d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80083d8:	e7a8      	b.n	800832c <_scanf_float+0x188>
 80083da:	6822      	ldr	r2, [r4, #0]
 80083dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80083e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80083e4:	d006      	beq.n	80083f4 <_scanf_float+0x250>
 80083e6:	0550      	lsls	r0, r2, #21
 80083e8:	f57f af0c 	bpl.w	8008204 <_scanf_float+0x60>
 80083ec:	f1b9 0f00 	cmp.w	r9, #0
 80083f0:	f43f af0f 	beq.w	8008212 <_scanf_float+0x6e>
 80083f4:	0591      	lsls	r1, r2, #22
 80083f6:	bf58      	it	pl
 80083f8:	9901      	ldrpl	r1, [sp, #4]
 80083fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083fe:	bf58      	it	pl
 8008400:	eba9 0101 	subpl.w	r1, r9, r1
 8008404:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008408:	bf58      	it	pl
 800840a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800840e:	6022      	str	r2, [r4, #0]
 8008410:	f04f 0900 	mov.w	r9, #0
 8008414:	e78a      	b.n	800832c <_scanf_float+0x188>
 8008416:	f04f 0a03 	mov.w	sl, #3
 800841a:	e787      	b.n	800832c <_scanf_float+0x188>
 800841c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008420:	4639      	mov	r1, r7
 8008422:	4640      	mov	r0, r8
 8008424:	4798      	blx	r3
 8008426:	2800      	cmp	r0, #0
 8008428:	f43f aedf 	beq.w	80081ea <_scanf_float+0x46>
 800842c:	e6ea      	b.n	8008204 <_scanf_float+0x60>
 800842e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008432:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008436:	463a      	mov	r2, r7
 8008438:	4640      	mov	r0, r8
 800843a:	4798      	blx	r3
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	3b01      	subs	r3, #1
 8008440:	6123      	str	r3, [r4, #16]
 8008442:	e6ec      	b.n	800821e <_scanf_float+0x7a>
 8008444:	1e6b      	subs	r3, r5, #1
 8008446:	2b06      	cmp	r3, #6
 8008448:	d825      	bhi.n	8008496 <_scanf_float+0x2f2>
 800844a:	2d02      	cmp	r5, #2
 800844c:	d836      	bhi.n	80084bc <_scanf_float+0x318>
 800844e:	455e      	cmp	r6, fp
 8008450:	f67f aee8 	bls.w	8008224 <_scanf_float+0x80>
 8008454:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008458:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800845c:	463a      	mov	r2, r7
 800845e:	4640      	mov	r0, r8
 8008460:	4798      	blx	r3
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	3b01      	subs	r3, #1
 8008466:	6123      	str	r3, [r4, #16]
 8008468:	e7f1      	b.n	800844e <_scanf_float+0x2aa>
 800846a:	9802      	ldr	r0, [sp, #8]
 800846c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008470:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008474:	9002      	str	r0, [sp, #8]
 8008476:	463a      	mov	r2, r7
 8008478:	4640      	mov	r0, r8
 800847a:	4798      	blx	r3
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	3b01      	subs	r3, #1
 8008480:	6123      	str	r3, [r4, #16]
 8008482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008486:	fa5f fa8a 	uxtb.w	sl, sl
 800848a:	f1ba 0f02 	cmp.w	sl, #2
 800848e:	d1ec      	bne.n	800846a <_scanf_float+0x2c6>
 8008490:	3d03      	subs	r5, #3
 8008492:	b2ed      	uxtb	r5, r5
 8008494:	1b76      	subs	r6, r6, r5
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	05da      	lsls	r2, r3, #23
 800849a:	d52f      	bpl.n	80084fc <_scanf_float+0x358>
 800849c:	055b      	lsls	r3, r3, #21
 800849e:	d510      	bpl.n	80084c2 <_scanf_float+0x31e>
 80084a0:	455e      	cmp	r6, fp
 80084a2:	f67f aebf 	bls.w	8008224 <_scanf_float+0x80>
 80084a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084ae:	463a      	mov	r2, r7
 80084b0:	4640      	mov	r0, r8
 80084b2:	4798      	blx	r3
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	e7f1      	b.n	80084a0 <_scanf_float+0x2fc>
 80084bc:	46aa      	mov	sl, r5
 80084be:	9602      	str	r6, [sp, #8]
 80084c0:	e7df      	b.n	8008482 <_scanf_float+0x2de>
 80084c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084c6:	6923      	ldr	r3, [r4, #16]
 80084c8:	2965      	cmp	r1, #101	; 0x65
 80084ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80084ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80084d2:	6123      	str	r3, [r4, #16]
 80084d4:	d00c      	beq.n	80084f0 <_scanf_float+0x34c>
 80084d6:	2945      	cmp	r1, #69	; 0x45
 80084d8:	d00a      	beq.n	80084f0 <_scanf_float+0x34c>
 80084da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084de:	463a      	mov	r2, r7
 80084e0:	4640      	mov	r0, r8
 80084e2:	4798      	blx	r3
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	1eb5      	subs	r5, r6, #2
 80084ee:	6123      	str	r3, [r4, #16]
 80084f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084f4:	463a      	mov	r2, r7
 80084f6:	4640      	mov	r0, r8
 80084f8:	4798      	blx	r3
 80084fa:	462e      	mov	r6, r5
 80084fc:	6825      	ldr	r5, [r4, #0]
 80084fe:	f015 0510 	ands.w	r5, r5, #16
 8008502:	d159      	bne.n	80085b8 <_scanf_float+0x414>
 8008504:	7035      	strb	r5, [r6, #0]
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800850c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008510:	d11b      	bne.n	800854a <_scanf_float+0x3a6>
 8008512:	9b01      	ldr	r3, [sp, #4]
 8008514:	454b      	cmp	r3, r9
 8008516:	eba3 0209 	sub.w	r2, r3, r9
 800851a:	d123      	bne.n	8008564 <_scanf_float+0x3c0>
 800851c:	2200      	movs	r2, #0
 800851e:	4659      	mov	r1, fp
 8008520:	4640      	mov	r0, r8
 8008522:	f000 ff27 	bl	8009374 <_strtod_r>
 8008526:	6822      	ldr	r2, [r4, #0]
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	f012 0f02 	tst.w	r2, #2
 800852e:	ec57 6b10 	vmov	r6, r7, d0
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	d021      	beq.n	800857a <_scanf_float+0x3d6>
 8008536:	9903      	ldr	r1, [sp, #12]
 8008538:	1d1a      	adds	r2, r3, #4
 800853a:	600a      	str	r2, [r1, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	e9c3 6700 	strd	r6, r7, [r3]
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	3301      	adds	r3, #1
 8008546:	60e3      	str	r3, [r4, #12]
 8008548:	e66d      	b.n	8008226 <_scanf_float+0x82>
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0e5      	beq.n	800851c <_scanf_float+0x378>
 8008550:	9905      	ldr	r1, [sp, #20]
 8008552:	230a      	movs	r3, #10
 8008554:	462a      	mov	r2, r5
 8008556:	3101      	adds	r1, #1
 8008558:	4640      	mov	r0, r8
 800855a:	f000 ff93 	bl	8009484 <_strtol_r>
 800855e:	9b04      	ldr	r3, [sp, #16]
 8008560:	9e05      	ldr	r6, [sp, #20]
 8008562:	1ac2      	subs	r2, r0, r3
 8008564:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008568:	429e      	cmp	r6, r3
 800856a:	bf28      	it	cs
 800856c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008570:	4912      	ldr	r1, [pc, #72]	; (80085bc <_scanf_float+0x418>)
 8008572:	4630      	mov	r0, r6
 8008574:	f000 f8ba 	bl	80086ec <siprintf>
 8008578:	e7d0      	b.n	800851c <_scanf_float+0x378>
 800857a:	9903      	ldr	r1, [sp, #12]
 800857c:	f012 0f04 	tst.w	r2, #4
 8008580:	f103 0204 	add.w	r2, r3, #4
 8008584:	600a      	str	r2, [r1, #0]
 8008586:	d1d9      	bne.n	800853c <_scanf_float+0x398>
 8008588:	f8d3 8000 	ldr.w	r8, [r3]
 800858c:	ee10 2a10 	vmov	r2, s0
 8008590:	ee10 0a10 	vmov	r0, s0
 8008594:	463b      	mov	r3, r7
 8008596:	4639      	mov	r1, r7
 8008598:	f7f8 fad0 	bl	8000b3c <__aeabi_dcmpun>
 800859c:	b128      	cbz	r0, 80085aa <_scanf_float+0x406>
 800859e:	4808      	ldr	r0, [pc, #32]	; (80085c0 <_scanf_float+0x41c>)
 80085a0:	f000 f89e 	bl	80086e0 <nanf>
 80085a4:	ed88 0a00 	vstr	s0, [r8]
 80085a8:	e7cb      	b.n	8008542 <_scanf_float+0x39e>
 80085aa:	4630      	mov	r0, r6
 80085ac:	4639      	mov	r1, r7
 80085ae:	f7f8 fb23 	bl	8000bf8 <__aeabi_d2f>
 80085b2:	f8c8 0000 	str.w	r0, [r8]
 80085b6:	e7c4      	b.n	8008542 <_scanf_float+0x39e>
 80085b8:	2500      	movs	r5, #0
 80085ba:	e634      	b.n	8008226 <_scanf_float+0x82>
 80085bc:	0800c568 	.word	0x0800c568
 80085c0:	0800c9d8 	.word	0x0800c9d8

080085c4 <iprintf>:
 80085c4:	b40f      	push	{r0, r1, r2, r3}
 80085c6:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <iprintf+0x2c>)
 80085c8:	b513      	push	{r0, r1, r4, lr}
 80085ca:	681c      	ldr	r4, [r3, #0]
 80085cc:	b124      	cbz	r4, 80085d8 <iprintf+0x14>
 80085ce:	69a3      	ldr	r3, [r4, #24]
 80085d0:	b913      	cbnz	r3, 80085d8 <iprintf+0x14>
 80085d2:	4620      	mov	r0, r4
 80085d4:	f001 ffac 	bl	800a530 <__sinit>
 80085d8:	ab05      	add	r3, sp, #20
 80085da:	9a04      	ldr	r2, [sp, #16]
 80085dc:	68a1      	ldr	r1, [r4, #8]
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	4620      	mov	r0, r4
 80085e2:	f003 fb75 	bl	800bcd0 <_vfiprintf_r>
 80085e6:	b002      	add	sp, #8
 80085e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ec:	b004      	add	sp, #16
 80085ee:	4770      	bx	lr
 80085f0:	20000024 	.word	0x20000024

080085f4 <_puts_r>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	460e      	mov	r6, r1
 80085f8:	4605      	mov	r5, r0
 80085fa:	b118      	cbz	r0, 8008604 <_puts_r+0x10>
 80085fc:	6983      	ldr	r3, [r0, #24]
 80085fe:	b90b      	cbnz	r3, 8008604 <_puts_r+0x10>
 8008600:	f001 ff96 	bl	800a530 <__sinit>
 8008604:	69ab      	ldr	r3, [r5, #24]
 8008606:	68ac      	ldr	r4, [r5, #8]
 8008608:	b913      	cbnz	r3, 8008610 <_puts_r+0x1c>
 800860a:	4628      	mov	r0, r5
 800860c:	f001 ff90 	bl	800a530 <__sinit>
 8008610:	4b2c      	ldr	r3, [pc, #176]	; (80086c4 <_puts_r+0xd0>)
 8008612:	429c      	cmp	r4, r3
 8008614:	d120      	bne.n	8008658 <_puts_r+0x64>
 8008616:	686c      	ldr	r4, [r5, #4]
 8008618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800861a:	07db      	lsls	r3, r3, #31
 800861c:	d405      	bmi.n	800862a <_puts_r+0x36>
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	0598      	lsls	r0, r3, #22
 8008622:	d402      	bmi.n	800862a <_puts_r+0x36>
 8008624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008626:	f002 fb94 	bl	800ad52 <__retarget_lock_acquire_recursive>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	0719      	lsls	r1, r3, #28
 800862e:	d51d      	bpl.n	800866c <_puts_r+0x78>
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	b1db      	cbz	r3, 800866c <_puts_r+0x78>
 8008634:	3e01      	subs	r6, #1
 8008636:	68a3      	ldr	r3, [r4, #8]
 8008638:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800863c:	3b01      	subs	r3, #1
 800863e:	60a3      	str	r3, [r4, #8]
 8008640:	bb39      	cbnz	r1, 8008692 <_puts_r+0x9e>
 8008642:	2b00      	cmp	r3, #0
 8008644:	da38      	bge.n	80086b8 <_puts_r+0xc4>
 8008646:	4622      	mov	r2, r4
 8008648:	210a      	movs	r1, #10
 800864a:	4628      	mov	r0, r5
 800864c:	f000 ff1c 	bl	8009488 <__swbuf_r>
 8008650:	3001      	adds	r0, #1
 8008652:	d011      	beq.n	8008678 <_puts_r+0x84>
 8008654:	250a      	movs	r5, #10
 8008656:	e011      	b.n	800867c <_puts_r+0x88>
 8008658:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <_puts_r+0xd4>)
 800865a:	429c      	cmp	r4, r3
 800865c:	d101      	bne.n	8008662 <_puts_r+0x6e>
 800865e:	68ac      	ldr	r4, [r5, #8]
 8008660:	e7da      	b.n	8008618 <_puts_r+0x24>
 8008662:	4b1a      	ldr	r3, [pc, #104]	; (80086cc <_puts_r+0xd8>)
 8008664:	429c      	cmp	r4, r3
 8008666:	bf08      	it	eq
 8008668:	68ec      	ldreq	r4, [r5, #12]
 800866a:	e7d5      	b.n	8008618 <_puts_r+0x24>
 800866c:	4621      	mov	r1, r4
 800866e:	4628      	mov	r0, r5
 8008670:	f000 ff5c 	bl	800952c <__swsetup_r>
 8008674:	2800      	cmp	r0, #0
 8008676:	d0dd      	beq.n	8008634 <_puts_r+0x40>
 8008678:	f04f 35ff 	mov.w	r5, #4294967295
 800867c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800867e:	07da      	lsls	r2, r3, #31
 8008680:	d405      	bmi.n	800868e <_puts_r+0x9a>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	059b      	lsls	r3, r3, #22
 8008686:	d402      	bmi.n	800868e <_puts_r+0x9a>
 8008688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800868a:	f002 fb63 	bl	800ad54 <__retarget_lock_release_recursive>
 800868e:	4628      	mov	r0, r5
 8008690:	bd70      	pop	{r4, r5, r6, pc}
 8008692:	2b00      	cmp	r3, #0
 8008694:	da04      	bge.n	80086a0 <_puts_r+0xac>
 8008696:	69a2      	ldr	r2, [r4, #24]
 8008698:	429a      	cmp	r2, r3
 800869a:	dc06      	bgt.n	80086aa <_puts_r+0xb6>
 800869c:	290a      	cmp	r1, #10
 800869e:	d004      	beq.n	80086aa <_puts_r+0xb6>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	6022      	str	r2, [r4, #0]
 80086a6:	7019      	strb	r1, [r3, #0]
 80086a8:	e7c5      	b.n	8008636 <_puts_r+0x42>
 80086aa:	4622      	mov	r2, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 feeb 	bl	8009488 <__swbuf_r>
 80086b2:	3001      	adds	r0, #1
 80086b4:	d1bf      	bne.n	8008636 <_puts_r+0x42>
 80086b6:	e7df      	b.n	8008678 <_puts_r+0x84>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	250a      	movs	r5, #10
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	6022      	str	r2, [r4, #0]
 80086c0:	701d      	strb	r5, [r3, #0]
 80086c2:	e7db      	b.n	800867c <_puts_r+0x88>
 80086c4:	0800c774 	.word	0x0800c774
 80086c8:	0800c794 	.word	0x0800c794
 80086cc:	0800c754 	.word	0x0800c754

080086d0 <puts>:
 80086d0:	4b02      	ldr	r3, [pc, #8]	; (80086dc <puts+0xc>)
 80086d2:	4601      	mov	r1, r0
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f7ff bf8d 	b.w	80085f4 <_puts_r>
 80086da:	bf00      	nop
 80086dc:	20000024 	.word	0x20000024

080086e0 <nanf>:
 80086e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086e8 <nanf+0x8>
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	7fc00000 	.word	0x7fc00000

080086ec <siprintf>:
 80086ec:	b40e      	push	{r1, r2, r3}
 80086ee:	b500      	push	{lr}
 80086f0:	b09c      	sub	sp, #112	; 0x70
 80086f2:	ab1d      	add	r3, sp, #116	; 0x74
 80086f4:	9002      	str	r0, [sp, #8]
 80086f6:	9006      	str	r0, [sp, #24]
 80086f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086fc:	4809      	ldr	r0, [pc, #36]	; (8008724 <siprintf+0x38>)
 80086fe:	9107      	str	r1, [sp, #28]
 8008700:	9104      	str	r1, [sp, #16]
 8008702:	4909      	ldr	r1, [pc, #36]	; (8008728 <siprintf+0x3c>)
 8008704:	f853 2b04 	ldr.w	r2, [r3], #4
 8008708:	9105      	str	r1, [sp, #20]
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	a902      	add	r1, sp, #8
 8008710:	f003 f9b4 	bl	800ba7c <_svfiprintf_r>
 8008714:	9b02      	ldr	r3, [sp, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	b01c      	add	sp, #112	; 0x70
 800871c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008720:	b003      	add	sp, #12
 8008722:	4770      	bx	lr
 8008724:	20000024 	.word	0x20000024
 8008728:	ffff0208 	.word	0xffff0208

0800872c <sulp>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	4604      	mov	r4, r0
 8008730:	460d      	mov	r5, r1
 8008732:	ec45 4b10 	vmov	d0, r4, r5
 8008736:	4616      	mov	r6, r2
 8008738:	f002 fefe 	bl	800b538 <__ulp>
 800873c:	ec51 0b10 	vmov	r0, r1, d0
 8008740:	b17e      	cbz	r6, 8008762 <sulp+0x36>
 8008742:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008746:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800874a:	2b00      	cmp	r3, #0
 800874c:	dd09      	ble.n	8008762 <sulp+0x36>
 800874e:	051b      	lsls	r3, r3, #20
 8008750:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008754:	2400      	movs	r4, #0
 8008756:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800875a:	4622      	mov	r2, r4
 800875c:	462b      	mov	r3, r5
 800875e:	f7f7 ff53 	bl	8000608 <__aeabi_dmul>
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	0000      	movs	r0, r0
	...

08008768 <_strtod_l>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	ed2d 8b02 	vpush	{d8}
 8008770:	b09d      	sub	sp, #116	; 0x74
 8008772:	461f      	mov	r7, r3
 8008774:	2300      	movs	r3, #0
 8008776:	9318      	str	r3, [sp, #96]	; 0x60
 8008778:	4ba2      	ldr	r3, [pc, #648]	; (8008a04 <_strtod_l+0x29c>)
 800877a:	9213      	str	r2, [sp, #76]	; 0x4c
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	9305      	str	r3, [sp, #20]
 8008780:	4604      	mov	r4, r0
 8008782:	4618      	mov	r0, r3
 8008784:	4688      	mov	r8, r1
 8008786:	f7f7 fd2b 	bl	80001e0 <strlen>
 800878a:	f04f 0a00 	mov.w	sl, #0
 800878e:	4605      	mov	r5, r0
 8008790:	f04f 0b00 	mov.w	fp, #0
 8008794:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	2a2b      	cmp	r2, #43	; 0x2b
 800879e:	d04e      	beq.n	800883e <_strtod_l+0xd6>
 80087a0:	d83b      	bhi.n	800881a <_strtod_l+0xb2>
 80087a2:	2a0d      	cmp	r2, #13
 80087a4:	d834      	bhi.n	8008810 <_strtod_l+0xa8>
 80087a6:	2a08      	cmp	r2, #8
 80087a8:	d834      	bhi.n	8008814 <_strtod_l+0xac>
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	d03e      	beq.n	800882c <_strtod_l+0xc4>
 80087ae:	2300      	movs	r3, #0
 80087b0:	930a      	str	r3, [sp, #40]	; 0x28
 80087b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80087b4:	7833      	ldrb	r3, [r6, #0]
 80087b6:	2b30      	cmp	r3, #48	; 0x30
 80087b8:	f040 80b0 	bne.w	800891c <_strtod_l+0x1b4>
 80087bc:	7873      	ldrb	r3, [r6, #1]
 80087be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087c2:	2b58      	cmp	r3, #88	; 0x58
 80087c4:	d168      	bne.n	8008898 <_strtod_l+0x130>
 80087c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	ab18      	add	r3, sp, #96	; 0x60
 80087cc:	9702      	str	r7, [sp, #8]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	4a8d      	ldr	r2, [pc, #564]	; (8008a08 <_strtod_l+0x2a0>)
 80087d2:	ab19      	add	r3, sp, #100	; 0x64
 80087d4:	a917      	add	r1, sp, #92	; 0x5c
 80087d6:	4620      	mov	r0, r4
 80087d8:	f001 ffae 	bl	800a738 <__gethex>
 80087dc:	f010 0707 	ands.w	r7, r0, #7
 80087e0:	4605      	mov	r5, r0
 80087e2:	d005      	beq.n	80087f0 <_strtod_l+0x88>
 80087e4:	2f06      	cmp	r7, #6
 80087e6:	d12c      	bne.n	8008842 <_strtod_l+0xda>
 80087e8:	3601      	adds	r6, #1
 80087ea:	2300      	movs	r3, #0
 80087ec:	9617      	str	r6, [sp, #92]	; 0x5c
 80087ee:	930a      	str	r3, [sp, #40]	; 0x28
 80087f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f040 8590 	bne.w	8009318 <_strtod_l+0xbb0>
 80087f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087fa:	b1eb      	cbz	r3, 8008838 <_strtod_l+0xd0>
 80087fc:	4652      	mov	r2, sl
 80087fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008802:	ec43 2b10 	vmov	d0, r2, r3
 8008806:	b01d      	add	sp, #116	; 0x74
 8008808:	ecbd 8b02 	vpop	{d8}
 800880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008810:	2a20      	cmp	r2, #32
 8008812:	d1cc      	bne.n	80087ae <_strtod_l+0x46>
 8008814:	3301      	adds	r3, #1
 8008816:	9317      	str	r3, [sp, #92]	; 0x5c
 8008818:	e7be      	b.n	8008798 <_strtod_l+0x30>
 800881a:	2a2d      	cmp	r2, #45	; 0x2d
 800881c:	d1c7      	bne.n	80087ae <_strtod_l+0x46>
 800881e:	2201      	movs	r2, #1
 8008820:	920a      	str	r2, [sp, #40]	; 0x28
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	9217      	str	r2, [sp, #92]	; 0x5c
 8008826:	785b      	ldrb	r3, [r3, #1]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1c2      	bne.n	80087b2 <_strtod_l+0x4a>
 800882c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800882e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008832:	2b00      	cmp	r3, #0
 8008834:	f040 856e 	bne.w	8009314 <_strtod_l+0xbac>
 8008838:	4652      	mov	r2, sl
 800883a:	465b      	mov	r3, fp
 800883c:	e7e1      	b.n	8008802 <_strtod_l+0x9a>
 800883e:	2200      	movs	r2, #0
 8008840:	e7ee      	b.n	8008820 <_strtod_l+0xb8>
 8008842:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008844:	b13a      	cbz	r2, 8008856 <_strtod_l+0xee>
 8008846:	2135      	movs	r1, #53	; 0x35
 8008848:	a81a      	add	r0, sp, #104	; 0x68
 800884a:	f002 ff80 	bl	800b74e <__copybits>
 800884e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008850:	4620      	mov	r0, r4
 8008852:	f002 fb3f 	bl	800aed4 <_Bfree>
 8008856:	3f01      	subs	r7, #1
 8008858:	2f04      	cmp	r7, #4
 800885a:	d806      	bhi.n	800886a <_strtod_l+0x102>
 800885c:	e8df f007 	tbb	[pc, r7]
 8008860:	1714030a 	.word	0x1714030a
 8008864:	0a          	.byte	0x0a
 8008865:	00          	.byte	0x00
 8008866:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800886a:	0728      	lsls	r0, r5, #28
 800886c:	d5c0      	bpl.n	80087f0 <_strtod_l+0x88>
 800886e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008872:	e7bd      	b.n	80087f0 <_strtod_l+0x88>
 8008874:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008878:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800887a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800887e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008882:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008886:	e7f0      	b.n	800886a <_strtod_l+0x102>
 8008888:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008a0c <_strtod_l+0x2a4>
 800888c:	e7ed      	b.n	800886a <_strtod_l+0x102>
 800888e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008892:	f04f 3aff 	mov.w	sl, #4294967295
 8008896:	e7e8      	b.n	800886a <_strtod_l+0x102>
 8008898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	9217      	str	r2, [sp, #92]	; 0x5c
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b30      	cmp	r3, #48	; 0x30
 80088a2:	d0f9      	beq.n	8008898 <_strtod_l+0x130>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d0a3      	beq.n	80087f0 <_strtod_l+0x88>
 80088a8:	2301      	movs	r3, #1
 80088aa:	f04f 0900 	mov.w	r9, #0
 80088ae:	9304      	str	r3, [sp, #16]
 80088b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088b2:	9308      	str	r3, [sp, #32]
 80088b4:	f8cd 901c 	str.w	r9, [sp, #28]
 80088b8:	464f      	mov	r7, r9
 80088ba:	220a      	movs	r2, #10
 80088bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80088be:	7806      	ldrb	r6, [r0, #0]
 80088c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80088c4:	b2d9      	uxtb	r1, r3
 80088c6:	2909      	cmp	r1, #9
 80088c8:	d92a      	bls.n	8008920 <_strtod_l+0x1b8>
 80088ca:	9905      	ldr	r1, [sp, #20]
 80088cc:	462a      	mov	r2, r5
 80088ce:	f003 fb8a 	bl	800bfe6 <strncmp>
 80088d2:	b398      	cbz	r0, 800893c <_strtod_l+0x1d4>
 80088d4:	2000      	movs	r0, #0
 80088d6:	4632      	mov	r2, r6
 80088d8:	463d      	mov	r5, r7
 80088da:	9005      	str	r0, [sp, #20]
 80088dc:	4603      	mov	r3, r0
 80088de:	2a65      	cmp	r2, #101	; 0x65
 80088e0:	d001      	beq.n	80088e6 <_strtod_l+0x17e>
 80088e2:	2a45      	cmp	r2, #69	; 0x45
 80088e4:	d118      	bne.n	8008918 <_strtod_l+0x1b0>
 80088e6:	b91d      	cbnz	r5, 80088f0 <_strtod_l+0x188>
 80088e8:	9a04      	ldr	r2, [sp, #16]
 80088ea:	4302      	orrs	r2, r0
 80088ec:	d09e      	beq.n	800882c <_strtod_l+0xc4>
 80088ee:	2500      	movs	r5, #0
 80088f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80088f4:	f108 0201 	add.w	r2, r8, #1
 80088f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80088fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80088fe:	2a2b      	cmp	r2, #43	; 0x2b
 8008900:	d075      	beq.n	80089ee <_strtod_l+0x286>
 8008902:	2a2d      	cmp	r2, #45	; 0x2d
 8008904:	d07b      	beq.n	80089fe <_strtod_l+0x296>
 8008906:	f04f 0c00 	mov.w	ip, #0
 800890a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800890e:	2909      	cmp	r1, #9
 8008910:	f240 8082 	bls.w	8008a18 <_strtod_l+0x2b0>
 8008914:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008918:	2600      	movs	r6, #0
 800891a:	e09d      	b.n	8008a58 <_strtod_l+0x2f0>
 800891c:	2300      	movs	r3, #0
 800891e:	e7c4      	b.n	80088aa <_strtod_l+0x142>
 8008920:	2f08      	cmp	r7, #8
 8008922:	bfd8      	it	le
 8008924:	9907      	ldrle	r1, [sp, #28]
 8008926:	f100 0001 	add.w	r0, r0, #1
 800892a:	bfda      	itte	le
 800892c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008930:	9307      	strle	r3, [sp, #28]
 8008932:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008936:	3701      	adds	r7, #1
 8008938:	9017      	str	r0, [sp, #92]	; 0x5c
 800893a:	e7bf      	b.n	80088bc <_strtod_l+0x154>
 800893c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800893e:	195a      	adds	r2, r3, r5
 8008940:	9217      	str	r2, [sp, #92]	; 0x5c
 8008942:	5d5a      	ldrb	r2, [r3, r5]
 8008944:	2f00      	cmp	r7, #0
 8008946:	d037      	beq.n	80089b8 <_strtod_l+0x250>
 8008948:	9005      	str	r0, [sp, #20]
 800894a:	463d      	mov	r5, r7
 800894c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008950:	2b09      	cmp	r3, #9
 8008952:	d912      	bls.n	800897a <_strtod_l+0x212>
 8008954:	2301      	movs	r3, #1
 8008956:	e7c2      	b.n	80088de <_strtod_l+0x176>
 8008958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	9217      	str	r2, [sp, #92]	; 0x5c
 800895e:	785a      	ldrb	r2, [r3, #1]
 8008960:	3001      	adds	r0, #1
 8008962:	2a30      	cmp	r2, #48	; 0x30
 8008964:	d0f8      	beq.n	8008958 <_strtod_l+0x1f0>
 8008966:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800896a:	2b08      	cmp	r3, #8
 800896c:	f200 84d9 	bhi.w	8009322 <_strtod_l+0xbba>
 8008970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008972:	9005      	str	r0, [sp, #20]
 8008974:	2000      	movs	r0, #0
 8008976:	9308      	str	r3, [sp, #32]
 8008978:	4605      	mov	r5, r0
 800897a:	3a30      	subs	r2, #48	; 0x30
 800897c:	f100 0301 	add.w	r3, r0, #1
 8008980:	d014      	beq.n	80089ac <_strtod_l+0x244>
 8008982:	9905      	ldr	r1, [sp, #20]
 8008984:	4419      	add	r1, r3
 8008986:	9105      	str	r1, [sp, #20]
 8008988:	462b      	mov	r3, r5
 800898a:	eb00 0e05 	add.w	lr, r0, r5
 800898e:	210a      	movs	r1, #10
 8008990:	4573      	cmp	r3, lr
 8008992:	d113      	bne.n	80089bc <_strtod_l+0x254>
 8008994:	182b      	adds	r3, r5, r0
 8008996:	2b08      	cmp	r3, #8
 8008998:	f105 0501 	add.w	r5, r5, #1
 800899c:	4405      	add	r5, r0
 800899e:	dc1c      	bgt.n	80089da <_strtod_l+0x272>
 80089a0:	9907      	ldr	r1, [sp, #28]
 80089a2:	230a      	movs	r3, #10
 80089a4:	fb03 2301 	mla	r3, r3, r1, r2
 80089a8:	9307      	str	r3, [sp, #28]
 80089aa:	2300      	movs	r3, #0
 80089ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089ae:	1c51      	adds	r1, r2, #1
 80089b0:	9117      	str	r1, [sp, #92]	; 0x5c
 80089b2:	7852      	ldrb	r2, [r2, #1]
 80089b4:	4618      	mov	r0, r3
 80089b6:	e7c9      	b.n	800894c <_strtod_l+0x1e4>
 80089b8:	4638      	mov	r0, r7
 80089ba:	e7d2      	b.n	8008962 <_strtod_l+0x1fa>
 80089bc:	2b08      	cmp	r3, #8
 80089be:	dc04      	bgt.n	80089ca <_strtod_l+0x262>
 80089c0:	9e07      	ldr	r6, [sp, #28]
 80089c2:	434e      	muls	r6, r1
 80089c4:	9607      	str	r6, [sp, #28]
 80089c6:	3301      	adds	r3, #1
 80089c8:	e7e2      	b.n	8008990 <_strtod_l+0x228>
 80089ca:	f103 0c01 	add.w	ip, r3, #1
 80089ce:	f1bc 0f10 	cmp.w	ip, #16
 80089d2:	bfd8      	it	le
 80089d4:	fb01 f909 	mulle.w	r9, r1, r9
 80089d8:	e7f5      	b.n	80089c6 <_strtod_l+0x25e>
 80089da:	2d10      	cmp	r5, #16
 80089dc:	bfdc      	itt	le
 80089de:	230a      	movle	r3, #10
 80089e0:	fb03 2909 	mlale	r9, r3, r9, r2
 80089e4:	e7e1      	b.n	80089aa <_strtod_l+0x242>
 80089e6:	2300      	movs	r3, #0
 80089e8:	9305      	str	r3, [sp, #20]
 80089ea:	2301      	movs	r3, #1
 80089ec:	e77c      	b.n	80088e8 <_strtod_l+0x180>
 80089ee:	f04f 0c00 	mov.w	ip, #0
 80089f2:	f108 0202 	add.w	r2, r8, #2
 80089f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80089f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80089fc:	e785      	b.n	800890a <_strtod_l+0x1a2>
 80089fe:	f04f 0c01 	mov.w	ip, #1
 8008a02:	e7f6      	b.n	80089f2 <_strtod_l+0x28a>
 8008a04:	0800c81c 	.word	0x0800c81c
 8008a08:	0800c570 	.word	0x0800c570
 8008a0c:	7ff00000 	.word	0x7ff00000
 8008a10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a12:	1c51      	adds	r1, r2, #1
 8008a14:	9117      	str	r1, [sp, #92]	; 0x5c
 8008a16:	7852      	ldrb	r2, [r2, #1]
 8008a18:	2a30      	cmp	r2, #48	; 0x30
 8008a1a:	d0f9      	beq.n	8008a10 <_strtod_l+0x2a8>
 8008a1c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008a20:	2908      	cmp	r1, #8
 8008a22:	f63f af79 	bhi.w	8008918 <_strtod_l+0x1b0>
 8008a26:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008a2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a2c:	9206      	str	r2, [sp, #24]
 8008a2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a30:	1c51      	adds	r1, r2, #1
 8008a32:	9117      	str	r1, [sp, #92]	; 0x5c
 8008a34:	7852      	ldrb	r2, [r2, #1]
 8008a36:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008a3a:	2e09      	cmp	r6, #9
 8008a3c:	d937      	bls.n	8008aae <_strtod_l+0x346>
 8008a3e:	9e06      	ldr	r6, [sp, #24]
 8008a40:	1b89      	subs	r1, r1, r6
 8008a42:	2908      	cmp	r1, #8
 8008a44:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008a48:	dc02      	bgt.n	8008a50 <_strtod_l+0x2e8>
 8008a4a:	4576      	cmp	r6, lr
 8008a4c:	bfa8      	it	ge
 8008a4e:	4676      	movge	r6, lr
 8008a50:	f1bc 0f00 	cmp.w	ip, #0
 8008a54:	d000      	beq.n	8008a58 <_strtod_l+0x2f0>
 8008a56:	4276      	negs	r6, r6
 8008a58:	2d00      	cmp	r5, #0
 8008a5a:	d14d      	bne.n	8008af8 <_strtod_l+0x390>
 8008a5c:	9904      	ldr	r1, [sp, #16]
 8008a5e:	4301      	orrs	r1, r0
 8008a60:	f47f aec6 	bne.w	80087f0 <_strtod_l+0x88>
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f47f aee1 	bne.w	800882c <_strtod_l+0xc4>
 8008a6a:	2a69      	cmp	r2, #105	; 0x69
 8008a6c:	d027      	beq.n	8008abe <_strtod_l+0x356>
 8008a6e:	dc24      	bgt.n	8008aba <_strtod_l+0x352>
 8008a70:	2a49      	cmp	r2, #73	; 0x49
 8008a72:	d024      	beq.n	8008abe <_strtod_l+0x356>
 8008a74:	2a4e      	cmp	r2, #78	; 0x4e
 8008a76:	f47f aed9 	bne.w	800882c <_strtod_l+0xc4>
 8008a7a:	499f      	ldr	r1, [pc, #636]	; (8008cf8 <_strtod_l+0x590>)
 8008a7c:	a817      	add	r0, sp, #92	; 0x5c
 8008a7e:	f002 f8b3 	bl	800abe8 <__match>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	f43f aed2 	beq.w	800882c <_strtod_l+0xc4>
 8008a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b28      	cmp	r3, #40	; 0x28
 8008a8e:	d12d      	bne.n	8008aec <_strtod_l+0x384>
 8008a90:	499a      	ldr	r1, [pc, #616]	; (8008cfc <_strtod_l+0x594>)
 8008a92:	aa1a      	add	r2, sp, #104	; 0x68
 8008a94:	a817      	add	r0, sp, #92	; 0x5c
 8008a96:	f002 f8bb 	bl	800ac10 <__hexnan>
 8008a9a:	2805      	cmp	r0, #5
 8008a9c:	d126      	bne.n	8008aec <_strtod_l+0x384>
 8008a9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008aa0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008aa4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008aa8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008aac:	e6a0      	b.n	80087f0 <_strtod_l+0x88>
 8008aae:	210a      	movs	r1, #10
 8008ab0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008ab4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008ab8:	e7b9      	b.n	8008a2e <_strtod_l+0x2c6>
 8008aba:	2a6e      	cmp	r2, #110	; 0x6e
 8008abc:	e7db      	b.n	8008a76 <_strtod_l+0x30e>
 8008abe:	4990      	ldr	r1, [pc, #576]	; (8008d00 <_strtod_l+0x598>)
 8008ac0:	a817      	add	r0, sp, #92	; 0x5c
 8008ac2:	f002 f891 	bl	800abe8 <__match>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f43f aeb0 	beq.w	800882c <_strtod_l+0xc4>
 8008acc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ace:	498d      	ldr	r1, [pc, #564]	; (8008d04 <_strtod_l+0x59c>)
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	a817      	add	r0, sp, #92	; 0x5c
 8008ad4:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ad6:	f002 f887 	bl	800abe8 <__match>
 8008ada:	b910      	cbnz	r0, 8008ae2 <_strtod_l+0x37a>
 8008adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ade:	3301      	adds	r3, #1
 8008ae0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ae2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008d14 <_strtod_l+0x5ac>
 8008ae6:	f04f 0a00 	mov.w	sl, #0
 8008aea:	e681      	b.n	80087f0 <_strtod_l+0x88>
 8008aec:	4886      	ldr	r0, [pc, #536]	; (8008d08 <_strtod_l+0x5a0>)
 8008aee:	f003 fa1f 	bl	800bf30 <nan>
 8008af2:	ec5b ab10 	vmov	sl, fp, d0
 8008af6:	e67b      	b.n	80087f0 <_strtod_l+0x88>
 8008af8:	9b05      	ldr	r3, [sp, #20]
 8008afa:	9807      	ldr	r0, [sp, #28]
 8008afc:	1af3      	subs	r3, r6, r3
 8008afe:	2f00      	cmp	r7, #0
 8008b00:	bf08      	it	eq
 8008b02:	462f      	moveq	r7, r5
 8008b04:	2d10      	cmp	r5, #16
 8008b06:	9306      	str	r3, [sp, #24]
 8008b08:	46a8      	mov	r8, r5
 8008b0a:	bfa8      	it	ge
 8008b0c:	f04f 0810 	movge.w	r8, #16
 8008b10:	f7f7 fd00 	bl	8000514 <__aeabi_ui2d>
 8008b14:	2d09      	cmp	r5, #9
 8008b16:	4682      	mov	sl, r0
 8008b18:	468b      	mov	fp, r1
 8008b1a:	dd13      	ble.n	8008b44 <_strtod_l+0x3dc>
 8008b1c:	4b7b      	ldr	r3, [pc, #492]	; (8008d0c <_strtod_l+0x5a4>)
 8008b1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008b22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008b26:	f7f7 fd6f 	bl	8000608 <__aeabi_dmul>
 8008b2a:	4682      	mov	sl, r0
 8008b2c:	4648      	mov	r0, r9
 8008b2e:	468b      	mov	fp, r1
 8008b30:	f7f7 fcf0 	bl	8000514 <__aeabi_ui2d>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4650      	mov	r0, sl
 8008b3a:	4659      	mov	r1, fp
 8008b3c:	f7f7 fbae 	bl	800029c <__adddf3>
 8008b40:	4682      	mov	sl, r0
 8008b42:	468b      	mov	fp, r1
 8008b44:	2d0f      	cmp	r5, #15
 8008b46:	dc38      	bgt.n	8008bba <_strtod_l+0x452>
 8008b48:	9b06      	ldr	r3, [sp, #24]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f43f ae50 	beq.w	80087f0 <_strtod_l+0x88>
 8008b50:	dd24      	ble.n	8008b9c <_strtod_l+0x434>
 8008b52:	2b16      	cmp	r3, #22
 8008b54:	dc0b      	bgt.n	8008b6e <_strtod_l+0x406>
 8008b56:	496d      	ldr	r1, [pc, #436]	; (8008d0c <_strtod_l+0x5a4>)
 8008b58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b60:	4652      	mov	r2, sl
 8008b62:	465b      	mov	r3, fp
 8008b64:	f7f7 fd50 	bl	8000608 <__aeabi_dmul>
 8008b68:	4682      	mov	sl, r0
 8008b6a:	468b      	mov	fp, r1
 8008b6c:	e640      	b.n	80087f0 <_strtod_l+0x88>
 8008b6e:	9a06      	ldr	r2, [sp, #24]
 8008b70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008b74:	4293      	cmp	r3, r2
 8008b76:	db20      	blt.n	8008bba <_strtod_l+0x452>
 8008b78:	4c64      	ldr	r4, [pc, #400]	; (8008d0c <_strtod_l+0x5a4>)
 8008b7a:	f1c5 050f 	rsb	r5, r5, #15
 8008b7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008b82:	4652      	mov	r2, sl
 8008b84:	465b      	mov	r3, fp
 8008b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b8a:	f7f7 fd3d 	bl	8000608 <__aeabi_dmul>
 8008b8e:	9b06      	ldr	r3, [sp, #24]
 8008b90:	1b5d      	subs	r5, r3, r5
 8008b92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008b96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b9a:	e7e3      	b.n	8008b64 <_strtod_l+0x3fc>
 8008b9c:	9b06      	ldr	r3, [sp, #24]
 8008b9e:	3316      	adds	r3, #22
 8008ba0:	db0b      	blt.n	8008bba <_strtod_l+0x452>
 8008ba2:	9b05      	ldr	r3, [sp, #20]
 8008ba4:	1b9e      	subs	r6, r3, r6
 8008ba6:	4b59      	ldr	r3, [pc, #356]	; (8008d0c <_strtod_l+0x5a4>)
 8008ba8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008bac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bb0:	4650      	mov	r0, sl
 8008bb2:	4659      	mov	r1, fp
 8008bb4:	f7f7 fe52 	bl	800085c <__aeabi_ddiv>
 8008bb8:	e7d6      	b.n	8008b68 <_strtod_l+0x400>
 8008bba:	9b06      	ldr	r3, [sp, #24]
 8008bbc:	eba5 0808 	sub.w	r8, r5, r8
 8008bc0:	4498      	add	r8, r3
 8008bc2:	f1b8 0f00 	cmp.w	r8, #0
 8008bc6:	dd74      	ble.n	8008cb2 <_strtod_l+0x54a>
 8008bc8:	f018 030f 	ands.w	r3, r8, #15
 8008bcc:	d00a      	beq.n	8008be4 <_strtod_l+0x47c>
 8008bce:	494f      	ldr	r1, [pc, #316]	; (8008d0c <_strtod_l+0x5a4>)
 8008bd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bd4:	4652      	mov	r2, sl
 8008bd6:	465b      	mov	r3, fp
 8008bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bdc:	f7f7 fd14 	bl	8000608 <__aeabi_dmul>
 8008be0:	4682      	mov	sl, r0
 8008be2:	468b      	mov	fp, r1
 8008be4:	f038 080f 	bics.w	r8, r8, #15
 8008be8:	d04f      	beq.n	8008c8a <_strtod_l+0x522>
 8008bea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008bee:	dd22      	ble.n	8008c36 <_strtod_l+0x4ce>
 8008bf0:	2500      	movs	r5, #0
 8008bf2:	462e      	mov	r6, r5
 8008bf4:	9507      	str	r5, [sp, #28]
 8008bf6:	9505      	str	r5, [sp, #20]
 8008bf8:	2322      	movs	r3, #34	; 0x22
 8008bfa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008d14 <_strtod_l+0x5ac>
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	f04f 0a00 	mov.w	sl, #0
 8008c04:	9b07      	ldr	r3, [sp, #28]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f43f adf2 	beq.w	80087f0 <_strtod_l+0x88>
 8008c0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f002 f960 	bl	800aed4 <_Bfree>
 8008c14:	9905      	ldr	r1, [sp, #20]
 8008c16:	4620      	mov	r0, r4
 8008c18:	f002 f95c 	bl	800aed4 <_Bfree>
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f002 f958 	bl	800aed4 <_Bfree>
 8008c24:	9907      	ldr	r1, [sp, #28]
 8008c26:	4620      	mov	r0, r4
 8008c28:	f002 f954 	bl	800aed4 <_Bfree>
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f002 f950 	bl	800aed4 <_Bfree>
 8008c34:	e5dc      	b.n	80087f0 <_strtod_l+0x88>
 8008c36:	4b36      	ldr	r3, [pc, #216]	; (8008d10 <_strtod_l+0x5a8>)
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008c40:	4650      	mov	r0, sl
 8008c42:	4659      	mov	r1, fp
 8008c44:	4699      	mov	r9, r3
 8008c46:	f1b8 0f01 	cmp.w	r8, #1
 8008c4a:	dc21      	bgt.n	8008c90 <_strtod_l+0x528>
 8008c4c:	b10b      	cbz	r3, 8008c52 <_strtod_l+0x4ea>
 8008c4e:	4682      	mov	sl, r0
 8008c50:	468b      	mov	fp, r1
 8008c52:	4b2f      	ldr	r3, [pc, #188]	; (8008d10 <_strtod_l+0x5a8>)
 8008c54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008c58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008c5c:	4652      	mov	r2, sl
 8008c5e:	465b      	mov	r3, fp
 8008c60:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008c64:	f7f7 fcd0 	bl	8000608 <__aeabi_dmul>
 8008c68:	4b2a      	ldr	r3, [pc, #168]	; (8008d14 <_strtod_l+0x5ac>)
 8008c6a:	460a      	mov	r2, r1
 8008c6c:	400b      	ands	r3, r1
 8008c6e:	492a      	ldr	r1, [pc, #168]	; (8008d18 <_strtod_l+0x5b0>)
 8008c70:	428b      	cmp	r3, r1
 8008c72:	4682      	mov	sl, r0
 8008c74:	d8bc      	bhi.n	8008bf0 <_strtod_l+0x488>
 8008c76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008c7a:	428b      	cmp	r3, r1
 8008c7c:	bf86      	itte	hi
 8008c7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008d1c <_strtod_l+0x5b4>
 8008c82:	f04f 3aff 	movhi.w	sl, #4294967295
 8008c86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9304      	str	r3, [sp, #16]
 8008c8e:	e084      	b.n	8008d9a <_strtod_l+0x632>
 8008c90:	f018 0f01 	tst.w	r8, #1
 8008c94:	d005      	beq.n	8008ca2 <_strtod_l+0x53a>
 8008c96:	9b04      	ldr	r3, [sp, #16]
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	f7f7 fcb4 	bl	8000608 <__aeabi_dmul>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	9a04      	ldr	r2, [sp, #16]
 8008ca4:	3208      	adds	r2, #8
 8008ca6:	f109 0901 	add.w	r9, r9, #1
 8008caa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008cae:	9204      	str	r2, [sp, #16]
 8008cb0:	e7c9      	b.n	8008c46 <_strtod_l+0x4de>
 8008cb2:	d0ea      	beq.n	8008c8a <_strtod_l+0x522>
 8008cb4:	f1c8 0800 	rsb	r8, r8, #0
 8008cb8:	f018 020f 	ands.w	r2, r8, #15
 8008cbc:	d00a      	beq.n	8008cd4 <_strtod_l+0x56c>
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <_strtod_l+0x5a4>)
 8008cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cc4:	4650      	mov	r0, sl
 8008cc6:	4659      	mov	r1, fp
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f7f7 fdc6 	bl	800085c <__aeabi_ddiv>
 8008cd0:	4682      	mov	sl, r0
 8008cd2:	468b      	mov	fp, r1
 8008cd4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008cd8:	d0d7      	beq.n	8008c8a <_strtod_l+0x522>
 8008cda:	f1b8 0f1f 	cmp.w	r8, #31
 8008cde:	dd1f      	ble.n	8008d20 <_strtod_l+0x5b8>
 8008ce0:	2500      	movs	r5, #0
 8008ce2:	462e      	mov	r6, r5
 8008ce4:	9507      	str	r5, [sp, #28]
 8008ce6:	9505      	str	r5, [sp, #20]
 8008ce8:	2322      	movs	r3, #34	; 0x22
 8008cea:	f04f 0a00 	mov.w	sl, #0
 8008cee:	f04f 0b00 	mov.w	fp, #0
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	e786      	b.n	8008c04 <_strtod_l+0x49c>
 8008cf6:	bf00      	nop
 8008cf8:	0800c541 	.word	0x0800c541
 8008cfc:	0800c584 	.word	0x0800c584
 8008d00:	0800c539 	.word	0x0800c539
 8008d04:	0800c6c4 	.word	0x0800c6c4
 8008d08:	0800c9d8 	.word	0x0800c9d8
 8008d0c:	0800c8b8 	.word	0x0800c8b8
 8008d10:	0800c890 	.word	0x0800c890
 8008d14:	7ff00000 	.word	0x7ff00000
 8008d18:	7ca00000 	.word	0x7ca00000
 8008d1c:	7fefffff 	.word	0x7fefffff
 8008d20:	f018 0310 	ands.w	r3, r8, #16
 8008d24:	bf18      	it	ne
 8008d26:	236a      	movne	r3, #106	; 0x6a
 8008d28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80090d8 <_strtod_l+0x970>
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	4650      	mov	r0, sl
 8008d30:	4659      	mov	r1, fp
 8008d32:	2300      	movs	r3, #0
 8008d34:	f018 0f01 	tst.w	r8, #1
 8008d38:	d004      	beq.n	8008d44 <_strtod_l+0x5dc>
 8008d3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d3e:	f7f7 fc63 	bl	8000608 <__aeabi_dmul>
 8008d42:	2301      	movs	r3, #1
 8008d44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008d48:	f109 0908 	add.w	r9, r9, #8
 8008d4c:	d1f2      	bne.n	8008d34 <_strtod_l+0x5cc>
 8008d4e:	b10b      	cbz	r3, 8008d54 <_strtod_l+0x5ec>
 8008d50:	4682      	mov	sl, r0
 8008d52:	468b      	mov	fp, r1
 8008d54:	9b04      	ldr	r3, [sp, #16]
 8008d56:	b1c3      	cbz	r3, 8008d8a <_strtod_l+0x622>
 8008d58:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008d5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	4659      	mov	r1, fp
 8008d64:	dd11      	ble.n	8008d8a <_strtod_l+0x622>
 8008d66:	2b1f      	cmp	r3, #31
 8008d68:	f340 8124 	ble.w	8008fb4 <_strtod_l+0x84c>
 8008d6c:	2b34      	cmp	r3, #52	; 0x34
 8008d6e:	bfde      	ittt	le
 8008d70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008d74:	f04f 33ff 	movle.w	r3, #4294967295
 8008d78:	fa03 f202 	lslle.w	r2, r3, r2
 8008d7c:	f04f 0a00 	mov.w	sl, #0
 8008d80:	bfcc      	ite	gt
 8008d82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008d86:	ea02 0b01 	andle.w	fp, r2, r1
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	4650      	mov	r0, sl
 8008d90:	4659      	mov	r1, fp
 8008d92:	f7f7 fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d1a2      	bne.n	8008ce0 <_strtod_l+0x578>
 8008d9a:	9b07      	ldr	r3, [sp, #28]
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	9908      	ldr	r1, [sp, #32]
 8008da0:	462b      	mov	r3, r5
 8008da2:	463a      	mov	r2, r7
 8008da4:	4620      	mov	r0, r4
 8008da6:	f002 f8fd 	bl	800afa4 <__s2b>
 8008daa:	9007      	str	r0, [sp, #28]
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f43f af1f 	beq.w	8008bf0 <_strtod_l+0x488>
 8008db2:	9b05      	ldr	r3, [sp, #20]
 8008db4:	1b9e      	subs	r6, r3, r6
 8008db6:	9b06      	ldr	r3, [sp, #24]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	bfb4      	ite	lt
 8008dbc:	4633      	movlt	r3, r6
 8008dbe:	2300      	movge	r3, #0
 8008dc0:	930c      	str	r3, [sp, #48]	; 0x30
 8008dc2:	9b06      	ldr	r3, [sp, #24]
 8008dc4:	2500      	movs	r5, #0
 8008dc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008dca:	9312      	str	r3, [sp, #72]	; 0x48
 8008dcc:	462e      	mov	r6, r5
 8008dce:	9b07      	ldr	r3, [sp, #28]
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	6859      	ldr	r1, [r3, #4]
 8008dd4:	f002 f83e 	bl	800ae54 <_Balloc>
 8008dd8:	9005      	str	r0, [sp, #20]
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	f43f af0c 	beq.w	8008bf8 <_strtod_l+0x490>
 8008de0:	9b07      	ldr	r3, [sp, #28]
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	3202      	adds	r2, #2
 8008de6:	f103 010c 	add.w	r1, r3, #12
 8008dea:	0092      	lsls	r2, r2, #2
 8008dec:	300c      	adds	r0, #12
 8008dee:	f7fe fd59 	bl	80078a4 <memcpy>
 8008df2:	ec4b ab10 	vmov	d0, sl, fp
 8008df6:	aa1a      	add	r2, sp, #104	; 0x68
 8008df8:	a919      	add	r1, sp, #100	; 0x64
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f002 fc18 	bl	800b630 <__d2b>
 8008e00:	ec4b ab18 	vmov	d8, sl, fp
 8008e04:	9018      	str	r0, [sp, #96]	; 0x60
 8008e06:	2800      	cmp	r0, #0
 8008e08:	f43f aef6 	beq.w	8008bf8 <_strtod_l+0x490>
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f002 f962 	bl	800b0d8 <__i2b>
 8008e14:	4606      	mov	r6, r0
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f43f aeee 	beq.w	8008bf8 <_strtod_l+0x490>
 8008e1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e1e:	9904      	ldr	r1, [sp, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	bfab      	itete	ge
 8008e24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008e26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008e28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008e2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008e2e:	bfac      	ite	ge
 8008e30:	eb03 0902 	addge.w	r9, r3, r2
 8008e34:	1ad7      	sublt	r7, r2, r3
 8008e36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008e38:	eba3 0801 	sub.w	r8, r3, r1
 8008e3c:	4490      	add	r8, r2
 8008e3e:	4ba1      	ldr	r3, [pc, #644]	; (80090c4 <_strtod_l+0x95c>)
 8008e40:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e44:	4598      	cmp	r8, r3
 8008e46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e4a:	f280 80c7 	bge.w	8008fdc <_strtod_l+0x874>
 8008e4e:	eba3 0308 	sub.w	r3, r3, r8
 8008e52:	2b1f      	cmp	r3, #31
 8008e54:	eba2 0203 	sub.w	r2, r2, r3
 8008e58:	f04f 0101 	mov.w	r1, #1
 8008e5c:	f300 80b1 	bgt.w	8008fc2 <_strtod_l+0x85a>
 8008e60:	fa01 f303 	lsl.w	r3, r1, r3
 8008e64:	930d      	str	r3, [sp, #52]	; 0x34
 8008e66:	2300      	movs	r3, #0
 8008e68:	9308      	str	r3, [sp, #32]
 8008e6a:	eb09 0802 	add.w	r8, r9, r2
 8008e6e:	9b04      	ldr	r3, [sp, #16]
 8008e70:	45c1      	cmp	r9, r8
 8008e72:	4417      	add	r7, r2
 8008e74:	441f      	add	r7, r3
 8008e76:	464b      	mov	r3, r9
 8008e78:	bfa8      	it	ge
 8008e7a:	4643      	movge	r3, r8
 8008e7c:	42bb      	cmp	r3, r7
 8008e7e:	bfa8      	it	ge
 8008e80:	463b      	movge	r3, r7
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bfc2      	ittt	gt
 8008e86:	eba8 0803 	subgt.w	r8, r8, r3
 8008e8a:	1aff      	subgt	r7, r7, r3
 8008e8c:	eba9 0903 	subgt.w	r9, r9, r3
 8008e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dd17      	ble.n	8008ec6 <_strtod_l+0x75e>
 8008e96:	4631      	mov	r1, r6
 8008e98:	461a      	mov	r2, r3
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f002 f9dc 	bl	800b258 <__pow5mult>
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	f43f aea8 	beq.w	8008bf8 <_strtod_l+0x490>
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008eac:	4620      	mov	r0, r4
 8008eae:	f002 f929 	bl	800b104 <__multiply>
 8008eb2:	900b      	str	r0, [sp, #44]	; 0x2c
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f43f ae9f 	beq.w	8008bf8 <_strtod_l+0x490>
 8008eba:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f002 f809 	bl	800aed4 <_Bfree>
 8008ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec4:	9318      	str	r3, [sp, #96]	; 0x60
 8008ec6:	f1b8 0f00 	cmp.w	r8, #0
 8008eca:	f300 808c 	bgt.w	8008fe6 <_strtod_l+0x87e>
 8008ece:	9b06      	ldr	r3, [sp, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	dd08      	ble.n	8008ee6 <_strtod_l+0x77e>
 8008ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ed6:	9905      	ldr	r1, [sp, #20]
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f002 f9bd 	bl	800b258 <__pow5mult>
 8008ede:	9005      	str	r0, [sp, #20]
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	f43f ae89 	beq.w	8008bf8 <_strtod_l+0x490>
 8008ee6:	2f00      	cmp	r7, #0
 8008ee8:	dd08      	ble.n	8008efc <_strtod_l+0x794>
 8008eea:	9905      	ldr	r1, [sp, #20]
 8008eec:	463a      	mov	r2, r7
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f002 fa0c 	bl	800b30c <__lshift>
 8008ef4:	9005      	str	r0, [sp, #20]
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f43f ae7e 	beq.w	8008bf8 <_strtod_l+0x490>
 8008efc:	f1b9 0f00 	cmp.w	r9, #0
 8008f00:	dd08      	ble.n	8008f14 <_strtod_l+0x7ac>
 8008f02:	4631      	mov	r1, r6
 8008f04:	464a      	mov	r2, r9
 8008f06:	4620      	mov	r0, r4
 8008f08:	f002 fa00 	bl	800b30c <__lshift>
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	f43f ae72 	beq.w	8008bf8 <_strtod_l+0x490>
 8008f14:	9a05      	ldr	r2, [sp, #20]
 8008f16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f002 fa83 	bl	800b424 <__mdiff>
 8008f1e:	4605      	mov	r5, r0
 8008f20:	2800      	cmp	r0, #0
 8008f22:	f43f ae69 	beq.w	8008bf8 <_strtod_l+0x490>
 8008f26:	68c3      	ldr	r3, [r0, #12]
 8008f28:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60c3      	str	r3, [r0, #12]
 8008f2e:	4631      	mov	r1, r6
 8008f30:	f002 fa5c 	bl	800b3ec <__mcmp>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	da60      	bge.n	8008ffa <_strtod_l+0x892>
 8008f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f3a:	ea53 030a 	orrs.w	r3, r3, sl
 8008f3e:	f040 8082 	bne.w	8009046 <_strtod_l+0x8de>
 8008f42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d17d      	bne.n	8009046 <_strtod_l+0x8de>
 8008f4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f4e:	0d1b      	lsrs	r3, r3, #20
 8008f50:	051b      	lsls	r3, r3, #20
 8008f52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008f56:	d976      	bls.n	8009046 <_strtod_l+0x8de>
 8008f58:	696b      	ldr	r3, [r5, #20]
 8008f5a:	b913      	cbnz	r3, 8008f62 <_strtod_l+0x7fa>
 8008f5c:	692b      	ldr	r3, [r5, #16]
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	dd71      	ble.n	8009046 <_strtod_l+0x8de>
 8008f62:	4629      	mov	r1, r5
 8008f64:	2201      	movs	r2, #1
 8008f66:	4620      	mov	r0, r4
 8008f68:	f002 f9d0 	bl	800b30c <__lshift>
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4605      	mov	r5, r0
 8008f70:	f002 fa3c 	bl	800b3ec <__mcmp>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	dd66      	ble.n	8009046 <_strtod_l+0x8de>
 8008f78:	9904      	ldr	r1, [sp, #16]
 8008f7a:	4a53      	ldr	r2, [pc, #332]	; (80090c8 <_strtod_l+0x960>)
 8008f7c:	465b      	mov	r3, fp
 8008f7e:	2900      	cmp	r1, #0
 8008f80:	f000 8081 	beq.w	8009086 <_strtod_l+0x91e>
 8008f84:	ea02 010b 	and.w	r1, r2, fp
 8008f88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008f8c:	dc7b      	bgt.n	8009086 <_strtod_l+0x91e>
 8008f8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008f92:	f77f aea9 	ble.w	8008ce8 <_strtod_l+0x580>
 8008f96:	4b4d      	ldr	r3, [pc, #308]	; (80090cc <_strtod_l+0x964>)
 8008f98:	4650      	mov	r0, sl
 8008f9a:	4659      	mov	r1, fp
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f7f7 fb33 	bl	8000608 <__aeabi_dmul>
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4303      	orrs	r3, r0
 8008fa6:	bf08      	it	eq
 8008fa8:	2322      	moveq	r3, #34	; 0x22
 8008faa:	4682      	mov	sl, r0
 8008fac:	468b      	mov	fp, r1
 8008fae:	bf08      	it	eq
 8008fb0:	6023      	streq	r3, [r4, #0]
 8008fb2:	e62b      	b.n	8008c0c <_strtod_l+0x4a4>
 8008fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbc:	ea03 0a0a 	and.w	sl, r3, sl
 8008fc0:	e6e3      	b.n	8008d8a <_strtod_l+0x622>
 8008fc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008fc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008fca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008fce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008fd2:	fa01 f308 	lsl.w	r3, r1, r8
 8008fd6:	9308      	str	r3, [sp, #32]
 8008fd8:	910d      	str	r1, [sp, #52]	; 0x34
 8008fda:	e746      	b.n	8008e6a <_strtod_l+0x702>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9308      	str	r3, [sp, #32]
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8008fe4:	e741      	b.n	8008e6a <_strtod_l+0x702>
 8008fe6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008fe8:	4642      	mov	r2, r8
 8008fea:	4620      	mov	r0, r4
 8008fec:	f002 f98e 	bl	800b30c <__lshift>
 8008ff0:	9018      	str	r0, [sp, #96]	; 0x60
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	f47f af6b 	bne.w	8008ece <_strtod_l+0x766>
 8008ff8:	e5fe      	b.n	8008bf8 <_strtod_l+0x490>
 8008ffa:	465f      	mov	r7, fp
 8008ffc:	d16e      	bne.n	80090dc <_strtod_l+0x974>
 8008ffe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009000:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009004:	b342      	cbz	r2, 8009058 <_strtod_l+0x8f0>
 8009006:	4a32      	ldr	r2, [pc, #200]	; (80090d0 <_strtod_l+0x968>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d128      	bne.n	800905e <_strtod_l+0x8f6>
 800900c:	9b04      	ldr	r3, [sp, #16]
 800900e:	4651      	mov	r1, sl
 8009010:	b1eb      	cbz	r3, 800904e <_strtod_l+0x8e6>
 8009012:	4b2d      	ldr	r3, [pc, #180]	; (80090c8 <_strtod_l+0x960>)
 8009014:	403b      	ands	r3, r7
 8009016:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800901a:	f04f 32ff 	mov.w	r2, #4294967295
 800901e:	d819      	bhi.n	8009054 <_strtod_l+0x8ec>
 8009020:	0d1b      	lsrs	r3, r3, #20
 8009022:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	4299      	cmp	r1, r3
 800902c:	d117      	bne.n	800905e <_strtod_l+0x8f6>
 800902e:	4b29      	ldr	r3, [pc, #164]	; (80090d4 <_strtod_l+0x96c>)
 8009030:	429f      	cmp	r7, r3
 8009032:	d102      	bne.n	800903a <_strtod_l+0x8d2>
 8009034:	3101      	adds	r1, #1
 8009036:	f43f addf 	beq.w	8008bf8 <_strtod_l+0x490>
 800903a:	4b23      	ldr	r3, [pc, #140]	; (80090c8 <_strtod_l+0x960>)
 800903c:	403b      	ands	r3, r7
 800903e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009042:	f04f 0a00 	mov.w	sl, #0
 8009046:	9b04      	ldr	r3, [sp, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1a4      	bne.n	8008f96 <_strtod_l+0x82e>
 800904c:	e5de      	b.n	8008c0c <_strtod_l+0x4a4>
 800904e:	f04f 33ff 	mov.w	r3, #4294967295
 8009052:	e7ea      	b.n	800902a <_strtod_l+0x8c2>
 8009054:	4613      	mov	r3, r2
 8009056:	e7e8      	b.n	800902a <_strtod_l+0x8c2>
 8009058:	ea53 030a 	orrs.w	r3, r3, sl
 800905c:	d08c      	beq.n	8008f78 <_strtod_l+0x810>
 800905e:	9b08      	ldr	r3, [sp, #32]
 8009060:	b1db      	cbz	r3, 800909a <_strtod_l+0x932>
 8009062:	423b      	tst	r3, r7
 8009064:	d0ef      	beq.n	8009046 <_strtod_l+0x8de>
 8009066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009068:	9a04      	ldr	r2, [sp, #16]
 800906a:	4650      	mov	r0, sl
 800906c:	4659      	mov	r1, fp
 800906e:	b1c3      	cbz	r3, 80090a2 <_strtod_l+0x93a>
 8009070:	f7ff fb5c 	bl	800872c <sulp>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	ec51 0b18 	vmov	r0, r1, d8
 800907c:	f7f7 f90e 	bl	800029c <__adddf3>
 8009080:	4682      	mov	sl, r0
 8009082:	468b      	mov	fp, r1
 8009084:	e7df      	b.n	8009046 <_strtod_l+0x8de>
 8009086:	4013      	ands	r3, r2
 8009088:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800908c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009090:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009094:	f04f 3aff 	mov.w	sl, #4294967295
 8009098:	e7d5      	b.n	8009046 <_strtod_l+0x8de>
 800909a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800909c:	ea13 0f0a 	tst.w	r3, sl
 80090a0:	e7e0      	b.n	8009064 <_strtod_l+0x8fc>
 80090a2:	f7ff fb43 	bl	800872c <sulp>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	ec51 0b18 	vmov	r0, r1, d8
 80090ae:	f7f7 f8f3 	bl	8000298 <__aeabi_dsub>
 80090b2:	2200      	movs	r2, #0
 80090b4:	2300      	movs	r3, #0
 80090b6:	4682      	mov	sl, r0
 80090b8:	468b      	mov	fp, r1
 80090ba:	f7f7 fd0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d0c1      	beq.n	8009046 <_strtod_l+0x8de>
 80090c2:	e611      	b.n	8008ce8 <_strtod_l+0x580>
 80090c4:	fffffc02 	.word	0xfffffc02
 80090c8:	7ff00000 	.word	0x7ff00000
 80090cc:	39500000 	.word	0x39500000
 80090d0:	000fffff 	.word	0x000fffff
 80090d4:	7fefffff 	.word	0x7fefffff
 80090d8:	0800c598 	.word	0x0800c598
 80090dc:	4631      	mov	r1, r6
 80090de:	4628      	mov	r0, r5
 80090e0:	f002 fb02 	bl	800b6e8 <__ratio>
 80090e4:	ec59 8b10 	vmov	r8, r9, d0
 80090e8:	ee10 0a10 	vmov	r0, s0
 80090ec:	2200      	movs	r2, #0
 80090ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090f2:	4649      	mov	r1, r9
 80090f4:	f7f7 fd04 	bl	8000b00 <__aeabi_dcmple>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d07a      	beq.n	80091f2 <_strtod_l+0xa8a>
 80090fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d04a      	beq.n	8009198 <_strtod_l+0xa30>
 8009102:	4b95      	ldr	r3, [pc, #596]	; (8009358 <_strtod_l+0xbf0>)
 8009104:	2200      	movs	r2, #0
 8009106:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800910a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009358 <_strtod_l+0xbf0>
 800910e:	f04f 0800 	mov.w	r8, #0
 8009112:	4b92      	ldr	r3, [pc, #584]	; (800935c <_strtod_l+0xbf4>)
 8009114:	403b      	ands	r3, r7
 8009116:	930d      	str	r3, [sp, #52]	; 0x34
 8009118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800911a:	4b91      	ldr	r3, [pc, #580]	; (8009360 <_strtod_l+0xbf8>)
 800911c:	429a      	cmp	r2, r3
 800911e:	f040 80b0 	bne.w	8009282 <_strtod_l+0xb1a>
 8009122:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009126:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800912a:	ec4b ab10 	vmov	d0, sl, fp
 800912e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009132:	f002 fa01 	bl	800b538 <__ulp>
 8009136:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800913a:	ec53 2b10 	vmov	r2, r3, d0
 800913e:	f7f7 fa63 	bl	8000608 <__aeabi_dmul>
 8009142:	4652      	mov	r2, sl
 8009144:	465b      	mov	r3, fp
 8009146:	f7f7 f8a9 	bl	800029c <__adddf3>
 800914a:	460b      	mov	r3, r1
 800914c:	4983      	ldr	r1, [pc, #524]	; (800935c <_strtod_l+0xbf4>)
 800914e:	4a85      	ldr	r2, [pc, #532]	; (8009364 <_strtod_l+0xbfc>)
 8009150:	4019      	ands	r1, r3
 8009152:	4291      	cmp	r1, r2
 8009154:	4682      	mov	sl, r0
 8009156:	d960      	bls.n	800921a <_strtod_l+0xab2>
 8009158:	ee18 3a90 	vmov	r3, s17
 800915c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009160:	4293      	cmp	r3, r2
 8009162:	d104      	bne.n	800916e <_strtod_l+0xa06>
 8009164:	ee18 3a10 	vmov	r3, s16
 8009168:	3301      	adds	r3, #1
 800916a:	f43f ad45 	beq.w	8008bf8 <_strtod_l+0x490>
 800916e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009370 <_strtod_l+0xc08>
 8009172:	f04f 3aff 	mov.w	sl, #4294967295
 8009176:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009178:	4620      	mov	r0, r4
 800917a:	f001 feab 	bl	800aed4 <_Bfree>
 800917e:	9905      	ldr	r1, [sp, #20]
 8009180:	4620      	mov	r0, r4
 8009182:	f001 fea7 	bl	800aed4 <_Bfree>
 8009186:	4631      	mov	r1, r6
 8009188:	4620      	mov	r0, r4
 800918a:	f001 fea3 	bl	800aed4 <_Bfree>
 800918e:	4629      	mov	r1, r5
 8009190:	4620      	mov	r0, r4
 8009192:	f001 fe9f 	bl	800aed4 <_Bfree>
 8009196:	e61a      	b.n	8008dce <_strtod_l+0x666>
 8009198:	f1ba 0f00 	cmp.w	sl, #0
 800919c:	d11b      	bne.n	80091d6 <_strtod_l+0xa6e>
 800919e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091a2:	b9f3      	cbnz	r3, 80091e2 <_strtod_l+0xa7a>
 80091a4:	4b6c      	ldr	r3, [pc, #432]	; (8009358 <_strtod_l+0xbf0>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	4640      	mov	r0, r8
 80091aa:	4649      	mov	r1, r9
 80091ac:	f7f7 fc9e 	bl	8000aec <__aeabi_dcmplt>
 80091b0:	b9d0      	cbnz	r0, 80091e8 <_strtod_l+0xa80>
 80091b2:	4640      	mov	r0, r8
 80091b4:	4649      	mov	r1, r9
 80091b6:	4b6c      	ldr	r3, [pc, #432]	; (8009368 <_strtod_l+0xc00>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	f7f7 fa25 	bl	8000608 <__aeabi_dmul>
 80091be:	4680      	mov	r8, r0
 80091c0:	4689      	mov	r9, r1
 80091c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80091c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80091ca:	9315      	str	r3, [sp, #84]	; 0x54
 80091cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80091d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80091d4:	e79d      	b.n	8009112 <_strtod_l+0x9aa>
 80091d6:	f1ba 0f01 	cmp.w	sl, #1
 80091da:	d102      	bne.n	80091e2 <_strtod_l+0xa7a>
 80091dc:	2f00      	cmp	r7, #0
 80091de:	f43f ad83 	beq.w	8008ce8 <_strtod_l+0x580>
 80091e2:	4b62      	ldr	r3, [pc, #392]	; (800936c <_strtod_l+0xc04>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	e78e      	b.n	8009106 <_strtod_l+0x99e>
 80091e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009368 <_strtod_l+0xc00>
 80091ec:	f04f 0800 	mov.w	r8, #0
 80091f0:	e7e7      	b.n	80091c2 <_strtod_l+0xa5a>
 80091f2:	4b5d      	ldr	r3, [pc, #372]	; (8009368 <_strtod_l+0xc00>)
 80091f4:	4640      	mov	r0, r8
 80091f6:	4649      	mov	r1, r9
 80091f8:	2200      	movs	r2, #0
 80091fa:	f7f7 fa05 	bl	8000608 <__aeabi_dmul>
 80091fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009200:	4680      	mov	r8, r0
 8009202:	4689      	mov	r9, r1
 8009204:	b933      	cbnz	r3, 8009214 <_strtod_l+0xaac>
 8009206:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800920a:	900e      	str	r0, [sp, #56]	; 0x38
 800920c:	930f      	str	r3, [sp, #60]	; 0x3c
 800920e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009212:	e7dd      	b.n	80091d0 <_strtod_l+0xa68>
 8009214:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009218:	e7f9      	b.n	800920e <_strtod_l+0xaa6>
 800921a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800921e:	9b04      	ldr	r3, [sp, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1a8      	bne.n	8009176 <_strtod_l+0xa0e>
 8009224:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800922a:	0d1b      	lsrs	r3, r3, #20
 800922c:	051b      	lsls	r3, r3, #20
 800922e:	429a      	cmp	r2, r3
 8009230:	d1a1      	bne.n	8009176 <_strtod_l+0xa0e>
 8009232:	4640      	mov	r0, r8
 8009234:	4649      	mov	r1, r9
 8009236:	f7f7 fd47 	bl	8000cc8 <__aeabi_d2lz>
 800923a:	f7f7 f9b7 	bl	80005ac <__aeabi_l2d>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4640      	mov	r0, r8
 8009244:	4649      	mov	r1, r9
 8009246:	f7f7 f827 	bl	8000298 <__aeabi_dsub>
 800924a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800924c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009250:	ea43 030a 	orr.w	r3, r3, sl
 8009254:	4313      	orrs	r3, r2
 8009256:	4680      	mov	r8, r0
 8009258:	4689      	mov	r9, r1
 800925a:	d055      	beq.n	8009308 <_strtod_l+0xba0>
 800925c:	a336      	add	r3, pc, #216	; (adr r3, 8009338 <_strtod_l+0xbd0>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f7 fc43 	bl	8000aec <__aeabi_dcmplt>
 8009266:	2800      	cmp	r0, #0
 8009268:	f47f acd0 	bne.w	8008c0c <_strtod_l+0x4a4>
 800926c:	a334      	add	r3, pc, #208	; (adr r3, 8009340 <_strtod_l+0xbd8>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	4640      	mov	r0, r8
 8009274:	4649      	mov	r1, r9
 8009276:	f7f7 fc57 	bl	8000b28 <__aeabi_dcmpgt>
 800927a:	2800      	cmp	r0, #0
 800927c:	f43f af7b 	beq.w	8009176 <_strtod_l+0xa0e>
 8009280:	e4c4      	b.n	8008c0c <_strtod_l+0x4a4>
 8009282:	9b04      	ldr	r3, [sp, #16]
 8009284:	b333      	cbz	r3, 80092d4 <_strtod_l+0xb6c>
 8009286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009288:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800928c:	d822      	bhi.n	80092d4 <_strtod_l+0xb6c>
 800928e:	a32e      	add	r3, pc, #184	; (adr r3, 8009348 <_strtod_l+0xbe0>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	4640      	mov	r0, r8
 8009296:	4649      	mov	r1, r9
 8009298:	f7f7 fc32 	bl	8000b00 <__aeabi_dcmple>
 800929c:	b1a0      	cbz	r0, 80092c8 <_strtod_l+0xb60>
 800929e:	4649      	mov	r1, r9
 80092a0:	4640      	mov	r0, r8
 80092a2:	f7f7 fc89 	bl	8000bb8 <__aeabi_d2uiz>
 80092a6:	2801      	cmp	r0, #1
 80092a8:	bf38      	it	cc
 80092aa:	2001      	movcc	r0, #1
 80092ac:	f7f7 f932 	bl	8000514 <__aeabi_ui2d>
 80092b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b2:	4680      	mov	r8, r0
 80092b4:	4689      	mov	r9, r1
 80092b6:	bb23      	cbnz	r3, 8009302 <_strtod_l+0xb9a>
 80092b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092bc:	9010      	str	r0, [sp, #64]	; 0x40
 80092be:	9311      	str	r3, [sp, #68]	; 0x44
 80092c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80092c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80092c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80092d0:	1a9b      	subs	r3, r3, r2
 80092d2:	9309      	str	r3, [sp, #36]	; 0x24
 80092d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092d8:	eeb0 0a48 	vmov.f32	s0, s16
 80092dc:	eef0 0a68 	vmov.f32	s1, s17
 80092e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092e4:	f002 f928 	bl	800b538 <__ulp>
 80092e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092ec:	ec53 2b10 	vmov	r2, r3, d0
 80092f0:	f7f7 f98a 	bl	8000608 <__aeabi_dmul>
 80092f4:	ec53 2b18 	vmov	r2, r3, d8
 80092f8:	f7f6 ffd0 	bl	800029c <__adddf3>
 80092fc:	4682      	mov	sl, r0
 80092fe:	468b      	mov	fp, r1
 8009300:	e78d      	b.n	800921e <_strtod_l+0xab6>
 8009302:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009306:	e7db      	b.n	80092c0 <_strtod_l+0xb58>
 8009308:	a311      	add	r3, pc, #68	; (adr r3, 8009350 <_strtod_l+0xbe8>)
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f7f7 fbed 	bl	8000aec <__aeabi_dcmplt>
 8009312:	e7b2      	b.n	800927a <_strtod_l+0xb12>
 8009314:	2300      	movs	r3, #0
 8009316:	930a      	str	r3, [sp, #40]	; 0x28
 8009318:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800931a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	f7ff ba6b 	b.w	80087f8 <_strtod_l+0x90>
 8009322:	2a65      	cmp	r2, #101	; 0x65
 8009324:	f43f ab5f 	beq.w	80089e6 <_strtod_l+0x27e>
 8009328:	2a45      	cmp	r2, #69	; 0x45
 800932a:	f43f ab5c 	beq.w	80089e6 <_strtod_l+0x27e>
 800932e:	2301      	movs	r3, #1
 8009330:	f7ff bb94 	b.w	8008a5c <_strtod_l+0x2f4>
 8009334:	f3af 8000 	nop.w
 8009338:	94a03595 	.word	0x94a03595
 800933c:	3fdfffff 	.word	0x3fdfffff
 8009340:	35afe535 	.word	0x35afe535
 8009344:	3fe00000 	.word	0x3fe00000
 8009348:	ffc00000 	.word	0xffc00000
 800934c:	41dfffff 	.word	0x41dfffff
 8009350:	94a03595 	.word	0x94a03595
 8009354:	3fcfffff 	.word	0x3fcfffff
 8009358:	3ff00000 	.word	0x3ff00000
 800935c:	7ff00000 	.word	0x7ff00000
 8009360:	7fe00000 	.word	0x7fe00000
 8009364:	7c9fffff 	.word	0x7c9fffff
 8009368:	3fe00000 	.word	0x3fe00000
 800936c:	bff00000 	.word	0xbff00000
 8009370:	7fefffff 	.word	0x7fefffff

08009374 <_strtod_r>:
 8009374:	4b01      	ldr	r3, [pc, #4]	; (800937c <_strtod_r+0x8>)
 8009376:	f7ff b9f7 	b.w	8008768 <_strtod_l>
 800937a:	bf00      	nop
 800937c:	2000008c 	.word	0x2000008c

08009380 <_strtol_l.constprop.0>:
 8009380:	2b01      	cmp	r3, #1
 8009382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009386:	d001      	beq.n	800938c <_strtol_l.constprop.0+0xc>
 8009388:	2b24      	cmp	r3, #36	; 0x24
 800938a:	d906      	bls.n	800939a <_strtol_l.constprop.0+0x1a>
 800938c:	f7fe fa60 	bl	8007850 <__errno>
 8009390:	2316      	movs	r3, #22
 8009392:	6003      	str	r3, [r0, #0]
 8009394:	2000      	movs	r0, #0
 8009396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009480 <_strtol_l.constprop.0+0x100>
 800939e:	460d      	mov	r5, r1
 80093a0:	462e      	mov	r6, r5
 80093a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80093aa:	f017 0708 	ands.w	r7, r7, #8
 80093ae:	d1f7      	bne.n	80093a0 <_strtol_l.constprop.0+0x20>
 80093b0:	2c2d      	cmp	r4, #45	; 0x2d
 80093b2:	d132      	bne.n	800941a <_strtol_l.constprop.0+0x9a>
 80093b4:	782c      	ldrb	r4, [r5, #0]
 80093b6:	2701      	movs	r7, #1
 80093b8:	1cb5      	adds	r5, r6, #2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d05b      	beq.n	8009476 <_strtol_l.constprop.0+0xf6>
 80093be:	2b10      	cmp	r3, #16
 80093c0:	d109      	bne.n	80093d6 <_strtol_l.constprop.0+0x56>
 80093c2:	2c30      	cmp	r4, #48	; 0x30
 80093c4:	d107      	bne.n	80093d6 <_strtol_l.constprop.0+0x56>
 80093c6:	782c      	ldrb	r4, [r5, #0]
 80093c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80093cc:	2c58      	cmp	r4, #88	; 0x58
 80093ce:	d14d      	bne.n	800946c <_strtol_l.constprop.0+0xec>
 80093d0:	786c      	ldrb	r4, [r5, #1]
 80093d2:	2310      	movs	r3, #16
 80093d4:	3502      	adds	r5, #2
 80093d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80093da:	f108 38ff 	add.w	r8, r8, #4294967295
 80093de:	f04f 0c00 	mov.w	ip, #0
 80093e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80093e6:	4666      	mov	r6, ip
 80093e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80093ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80093f0:	f1be 0f09 	cmp.w	lr, #9
 80093f4:	d816      	bhi.n	8009424 <_strtol_l.constprop.0+0xa4>
 80093f6:	4674      	mov	r4, lr
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	dd24      	ble.n	8009446 <_strtol_l.constprop.0+0xc6>
 80093fc:	f1bc 0f00 	cmp.w	ip, #0
 8009400:	db1e      	blt.n	8009440 <_strtol_l.constprop.0+0xc0>
 8009402:	45b1      	cmp	r9, r6
 8009404:	d31c      	bcc.n	8009440 <_strtol_l.constprop.0+0xc0>
 8009406:	d101      	bne.n	800940c <_strtol_l.constprop.0+0x8c>
 8009408:	45a2      	cmp	sl, r4
 800940a:	db19      	blt.n	8009440 <_strtol_l.constprop.0+0xc0>
 800940c:	fb06 4603 	mla	r6, r6, r3, r4
 8009410:	f04f 0c01 	mov.w	ip, #1
 8009414:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009418:	e7e8      	b.n	80093ec <_strtol_l.constprop.0+0x6c>
 800941a:	2c2b      	cmp	r4, #43	; 0x2b
 800941c:	bf04      	itt	eq
 800941e:	782c      	ldrbeq	r4, [r5, #0]
 8009420:	1cb5      	addeq	r5, r6, #2
 8009422:	e7ca      	b.n	80093ba <_strtol_l.constprop.0+0x3a>
 8009424:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009428:	f1be 0f19 	cmp.w	lr, #25
 800942c:	d801      	bhi.n	8009432 <_strtol_l.constprop.0+0xb2>
 800942e:	3c37      	subs	r4, #55	; 0x37
 8009430:	e7e2      	b.n	80093f8 <_strtol_l.constprop.0+0x78>
 8009432:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009436:	f1be 0f19 	cmp.w	lr, #25
 800943a:	d804      	bhi.n	8009446 <_strtol_l.constprop.0+0xc6>
 800943c:	3c57      	subs	r4, #87	; 0x57
 800943e:	e7db      	b.n	80093f8 <_strtol_l.constprop.0+0x78>
 8009440:	f04f 3cff 	mov.w	ip, #4294967295
 8009444:	e7e6      	b.n	8009414 <_strtol_l.constprop.0+0x94>
 8009446:	f1bc 0f00 	cmp.w	ip, #0
 800944a:	da05      	bge.n	8009458 <_strtol_l.constprop.0+0xd8>
 800944c:	2322      	movs	r3, #34	; 0x22
 800944e:	6003      	str	r3, [r0, #0]
 8009450:	4646      	mov	r6, r8
 8009452:	b942      	cbnz	r2, 8009466 <_strtol_l.constprop.0+0xe6>
 8009454:	4630      	mov	r0, r6
 8009456:	e79e      	b.n	8009396 <_strtol_l.constprop.0+0x16>
 8009458:	b107      	cbz	r7, 800945c <_strtol_l.constprop.0+0xdc>
 800945a:	4276      	negs	r6, r6
 800945c:	2a00      	cmp	r2, #0
 800945e:	d0f9      	beq.n	8009454 <_strtol_l.constprop.0+0xd4>
 8009460:	f1bc 0f00 	cmp.w	ip, #0
 8009464:	d000      	beq.n	8009468 <_strtol_l.constprop.0+0xe8>
 8009466:	1e69      	subs	r1, r5, #1
 8009468:	6011      	str	r1, [r2, #0]
 800946a:	e7f3      	b.n	8009454 <_strtol_l.constprop.0+0xd4>
 800946c:	2430      	movs	r4, #48	; 0x30
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1b1      	bne.n	80093d6 <_strtol_l.constprop.0+0x56>
 8009472:	2308      	movs	r3, #8
 8009474:	e7af      	b.n	80093d6 <_strtol_l.constprop.0+0x56>
 8009476:	2c30      	cmp	r4, #48	; 0x30
 8009478:	d0a5      	beq.n	80093c6 <_strtol_l.constprop.0+0x46>
 800947a:	230a      	movs	r3, #10
 800947c:	e7ab      	b.n	80093d6 <_strtol_l.constprop.0+0x56>
 800947e:	bf00      	nop
 8009480:	0800c5c1 	.word	0x0800c5c1

08009484 <_strtol_r>:
 8009484:	f7ff bf7c 	b.w	8009380 <_strtol_l.constprop.0>

08009488 <__swbuf_r>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	460e      	mov	r6, r1
 800948c:	4614      	mov	r4, r2
 800948e:	4605      	mov	r5, r0
 8009490:	b118      	cbz	r0, 800949a <__swbuf_r+0x12>
 8009492:	6983      	ldr	r3, [r0, #24]
 8009494:	b90b      	cbnz	r3, 800949a <__swbuf_r+0x12>
 8009496:	f001 f84b 	bl	800a530 <__sinit>
 800949a:	4b21      	ldr	r3, [pc, #132]	; (8009520 <__swbuf_r+0x98>)
 800949c:	429c      	cmp	r4, r3
 800949e:	d12b      	bne.n	80094f8 <__swbuf_r+0x70>
 80094a0:	686c      	ldr	r4, [r5, #4]
 80094a2:	69a3      	ldr	r3, [r4, #24]
 80094a4:	60a3      	str	r3, [r4, #8]
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	071a      	lsls	r2, r3, #28
 80094aa:	d52f      	bpl.n	800950c <__swbuf_r+0x84>
 80094ac:	6923      	ldr	r3, [r4, #16]
 80094ae:	b36b      	cbz	r3, 800950c <__swbuf_r+0x84>
 80094b0:	6923      	ldr	r3, [r4, #16]
 80094b2:	6820      	ldr	r0, [r4, #0]
 80094b4:	1ac0      	subs	r0, r0, r3
 80094b6:	6963      	ldr	r3, [r4, #20]
 80094b8:	b2f6      	uxtb	r6, r6
 80094ba:	4283      	cmp	r3, r0
 80094bc:	4637      	mov	r7, r6
 80094be:	dc04      	bgt.n	80094ca <__swbuf_r+0x42>
 80094c0:	4621      	mov	r1, r4
 80094c2:	4628      	mov	r0, r5
 80094c4:	f000 ffa0 	bl	800a408 <_fflush_r>
 80094c8:	bb30      	cbnz	r0, 8009518 <__swbuf_r+0x90>
 80094ca:	68a3      	ldr	r3, [r4, #8]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	60a3      	str	r3, [r4, #8]
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	701e      	strb	r6, [r3, #0]
 80094d8:	6963      	ldr	r3, [r4, #20]
 80094da:	3001      	adds	r0, #1
 80094dc:	4283      	cmp	r3, r0
 80094de:	d004      	beq.n	80094ea <__swbuf_r+0x62>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	07db      	lsls	r3, r3, #31
 80094e4:	d506      	bpl.n	80094f4 <__swbuf_r+0x6c>
 80094e6:	2e0a      	cmp	r6, #10
 80094e8:	d104      	bne.n	80094f4 <__swbuf_r+0x6c>
 80094ea:	4621      	mov	r1, r4
 80094ec:	4628      	mov	r0, r5
 80094ee:	f000 ff8b 	bl	800a408 <_fflush_r>
 80094f2:	b988      	cbnz	r0, 8009518 <__swbuf_r+0x90>
 80094f4:	4638      	mov	r0, r7
 80094f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f8:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <__swbuf_r+0x9c>)
 80094fa:	429c      	cmp	r4, r3
 80094fc:	d101      	bne.n	8009502 <__swbuf_r+0x7a>
 80094fe:	68ac      	ldr	r4, [r5, #8]
 8009500:	e7cf      	b.n	80094a2 <__swbuf_r+0x1a>
 8009502:	4b09      	ldr	r3, [pc, #36]	; (8009528 <__swbuf_r+0xa0>)
 8009504:	429c      	cmp	r4, r3
 8009506:	bf08      	it	eq
 8009508:	68ec      	ldreq	r4, [r5, #12]
 800950a:	e7ca      	b.n	80094a2 <__swbuf_r+0x1a>
 800950c:	4621      	mov	r1, r4
 800950e:	4628      	mov	r0, r5
 8009510:	f000 f80c 	bl	800952c <__swsetup_r>
 8009514:	2800      	cmp	r0, #0
 8009516:	d0cb      	beq.n	80094b0 <__swbuf_r+0x28>
 8009518:	f04f 37ff 	mov.w	r7, #4294967295
 800951c:	e7ea      	b.n	80094f4 <__swbuf_r+0x6c>
 800951e:	bf00      	nop
 8009520:	0800c774 	.word	0x0800c774
 8009524:	0800c794 	.word	0x0800c794
 8009528:	0800c754 	.word	0x0800c754

0800952c <__swsetup_r>:
 800952c:	4b32      	ldr	r3, [pc, #200]	; (80095f8 <__swsetup_r+0xcc>)
 800952e:	b570      	push	{r4, r5, r6, lr}
 8009530:	681d      	ldr	r5, [r3, #0]
 8009532:	4606      	mov	r6, r0
 8009534:	460c      	mov	r4, r1
 8009536:	b125      	cbz	r5, 8009542 <__swsetup_r+0x16>
 8009538:	69ab      	ldr	r3, [r5, #24]
 800953a:	b913      	cbnz	r3, 8009542 <__swsetup_r+0x16>
 800953c:	4628      	mov	r0, r5
 800953e:	f000 fff7 	bl	800a530 <__sinit>
 8009542:	4b2e      	ldr	r3, [pc, #184]	; (80095fc <__swsetup_r+0xd0>)
 8009544:	429c      	cmp	r4, r3
 8009546:	d10f      	bne.n	8009568 <__swsetup_r+0x3c>
 8009548:	686c      	ldr	r4, [r5, #4]
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009550:	0719      	lsls	r1, r3, #28
 8009552:	d42c      	bmi.n	80095ae <__swsetup_r+0x82>
 8009554:	06dd      	lsls	r5, r3, #27
 8009556:	d411      	bmi.n	800957c <__swsetup_r+0x50>
 8009558:	2309      	movs	r3, #9
 800955a:	6033      	str	r3, [r6, #0]
 800955c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009560:	81a3      	strh	r3, [r4, #12]
 8009562:	f04f 30ff 	mov.w	r0, #4294967295
 8009566:	e03e      	b.n	80095e6 <__swsetup_r+0xba>
 8009568:	4b25      	ldr	r3, [pc, #148]	; (8009600 <__swsetup_r+0xd4>)
 800956a:	429c      	cmp	r4, r3
 800956c:	d101      	bne.n	8009572 <__swsetup_r+0x46>
 800956e:	68ac      	ldr	r4, [r5, #8]
 8009570:	e7eb      	b.n	800954a <__swsetup_r+0x1e>
 8009572:	4b24      	ldr	r3, [pc, #144]	; (8009604 <__swsetup_r+0xd8>)
 8009574:	429c      	cmp	r4, r3
 8009576:	bf08      	it	eq
 8009578:	68ec      	ldreq	r4, [r5, #12]
 800957a:	e7e6      	b.n	800954a <__swsetup_r+0x1e>
 800957c:	0758      	lsls	r0, r3, #29
 800957e:	d512      	bpl.n	80095a6 <__swsetup_r+0x7a>
 8009580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009582:	b141      	cbz	r1, 8009596 <__swsetup_r+0x6a>
 8009584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009588:	4299      	cmp	r1, r3
 800958a:	d002      	beq.n	8009592 <__swsetup_r+0x66>
 800958c:	4630      	mov	r0, r6
 800958e:	f002 f939 	bl	800b804 <_free_r>
 8009592:	2300      	movs	r3, #0
 8009594:	6363      	str	r3, [r4, #52]	; 0x34
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	2300      	movs	r3, #0
 80095a0:	6063      	str	r3, [r4, #4]
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	f043 0308 	orr.w	r3, r3, #8
 80095ac:	81a3      	strh	r3, [r4, #12]
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	b94b      	cbnz	r3, 80095c6 <__swsetup_r+0x9a>
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095bc:	d003      	beq.n	80095c6 <__swsetup_r+0x9a>
 80095be:	4621      	mov	r1, r4
 80095c0:	4630      	mov	r0, r6
 80095c2:	f001 fbed 	bl	800ada0 <__smakebuf_r>
 80095c6:	89a0      	ldrh	r0, [r4, #12]
 80095c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095cc:	f010 0301 	ands.w	r3, r0, #1
 80095d0:	d00a      	beq.n	80095e8 <__swsetup_r+0xbc>
 80095d2:	2300      	movs	r3, #0
 80095d4:	60a3      	str	r3, [r4, #8]
 80095d6:	6963      	ldr	r3, [r4, #20]
 80095d8:	425b      	negs	r3, r3
 80095da:	61a3      	str	r3, [r4, #24]
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	b943      	cbnz	r3, 80095f2 <__swsetup_r+0xc6>
 80095e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095e4:	d1ba      	bne.n	800955c <__swsetup_r+0x30>
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	0781      	lsls	r1, r0, #30
 80095ea:	bf58      	it	pl
 80095ec:	6963      	ldrpl	r3, [r4, #20]
 80095ee:	60a3      	str	r3, [r4, #8]
 80095f0:	e7f4      	b.n	80095dc <__swsetup_r+0xb0>
 80095f2:	2000      	movs	r0, #0
 80095f4:	e7f7      	b.n	80095e6 <__swsetup_r+0xba>
 80095f6:	bf00      	nop
 80095f8:	20000024 	.word	0x20000024
 80095fc:	0800c774 	.word	0x0800c774
 8009600:	0800c794 	.word	0x0800c794
 8009604:	0800c754 	.word	0x0800c754

08009608 <quorem>:
 8009608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	6903      	ldr	r3, [r0, #16]
 800960e:	690c      	ldr	r4, [r1, #16]
 8009610:	42a3      	cmp	r3, r4
 8009612:	4607      	mov	r7, r0
 8009614:	f2c0 8081 	blt.w	800971a <quorem+0x112>
 8009618:	3c01      	subs	r4, #1
 800961a:	f101 0814 	add.w	r8, r1, #20
 800961e:	f100 0514 	add.w	r5, r0, #20
 8009622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800962c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009630:	3301      	adds	r3, #1
 8009632:	429a      	cmp	r2, r3
 8009634:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009638:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800963c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009640:	d331      	bcc.n	80096a6 <quorem+0x9e>
 8009642:	f04f 0e00 	mov.w	lr, #0
 8009646:	4640      	mov	r0, r8
 8009648:	46ac      	mov	ip, r5
 800964a:	46f2      	mov	sl, lr
 800964c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009650:	b293      	uxth	r3, r2
 8009652:	fb06 e303 	mla	r3, r6, r3, lr
 8009656:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800965a:	b29b      	uxth	r3, r3
 800965c:	ebaa 0303 	sub.w	r3, sl, r3
 8009660:	f8dc a000 	ldr.w	sl, [ip]
 8009664:	0c12      	lsrs	r2, r2, #16
 8009666:	fa13 f38a 	uxtah	r3, r3, sl
 800966a:	fb06 e202 	mla	r2, r6, r2, lr
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	9b00      	ldr	r3, [sp, #0]
 8009672:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009676:	b292      	uxth	r2, r2
 8009678:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800967c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009680:	f8bd 3000 	ldrh.w	r3, [sp]
 8009684:	4581      	cmp	r9, r0
 8009686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800968a:	f84c 3b04 	str.w	r3, [ip], #4
 800968e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009692:	d2db      	bcs.n	800964c <quorem+0x44>
 8009694:	f855 300b 	ldr.w	r3, [r5, fp]
 8009698:	b92b      	cbnz	r3, 80096a6 <quorem+0x9e>
 800969a:	9b01      	ldr	r3, [sp, #4]
 800969c:	3b04      	subs	r3, #4
 800969e:	429d      	cmp	r5, r3
 80096a0:	461a      	mov	r2, r3
 80096a2:	d32e      	bcc.n	8009702 <quorem+0xfa>
 80096a4:	613c      	str	r4, [r7, #16]
 80096a6:	4638      	mov	r0, r7
 80096a8:	f001 fea0 	bl	800b3ec <__mcmp>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	db24      	blt.n	80096fa <quorem+0xf2>
 80096b0:	3601      	adds	r6, #1
 80096b2:	4628      	mov	r0, r5
 80096b4:	f04f 0c00 	mov.w	ip, #0
 80096b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80096bc:	f8d0 e000 	ldr.w	lr, [r0]
 80096c0:	b293      	uxth	r3, r2
 80096c2:	ebac 0303 	sub.w	r3, ip, r3
 80096c6:	0c12      	lsrs	r2, r2, #16
 80096c8:	fa13 f38e 	uxtah	r3, r3, lr
 80096cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80096d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096da:	45c1      	cmp	r9, r8
 80096dc:	f840 3b04 	str.w	r3, [r0], #4
 80096e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80096e4:	d2e8      	bcs.n	80096b8 <quorem+0xb0>
 80096e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096ee:	b922      	cbnz	r2, 80096fa <quorem+0xf2>
 80096f0:	3b04      	subs	r3, #4
 80096f2:	429d      	cmp	r5, r3
 80096f4:	461a      	mov	r2, r3
 80096f6:	d30a      	bcc.n	800970e <quorem+0x106>
 80096f8:	613c      	str	r4, [r7, #16]
 80096fa:	4630      	mov	r0, r6
 80096fc:	b003      	add	sp, #12
 80096fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009702:	6812      	ldr	r2, [r2, #0]
 8009704:	3b04      	subs	r3, #4
 8009706:	2a00      	cmp	r2, #0
 8009708:	d1cc      	bne.n	80096a4 <quorem+0x9c>
 800970a:	3c01      	subs	r4, #1
 800970c:	e7c7      	b.n	800969e <quorem+0x96>
 800970e:	6812      	ldr	r2, [r2, #0]
 8009710:	3b04      	subs	r3, #4
 8009712:	2a00      	cmp	r2, #0
 8009714:	d1f0      	bne.n	80096f8 <quorem+0xf0>
 8009716:	3c01      	subs	r4, #1
 8009718:	e7eb      	b.n	80096f2 <quorem+0xea>
 800971a:	2000      	movs	r0, #0
 800971c:	e7ee      	b.n	80096fc <quorem+0xf4>
	...

08009720 <_dtoa_r>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	ed2d 8b04 	vpush	{d8-d9}
 8009728:	ec57 6b10 	vmov	r6, r7, d0
 800972c:	b093      	sub	sp, #76	; 0x4c
 800972e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009730:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009734:	9106      	str	r1, [sp, #24]
 8009736:	ee10 aa10 	vmov	sl, s0
 800973a:	4604      	mov	r4, r0
 800973c:	9209      	str	r2, [sp, #36]	; 0x24
 800973e:	930c      	str	r3, [sp, #48]	; 0x30
 8009740:	46bb      	mov	fp, r7
 8009742:	b975      	cbnz	r5, 8009762 <_dtoa_r+0x42>
 8009744:	2010      	movs	r0, #16
 8009746:	f001 fb6b 	bl	800ae20 <malloc>
 800974a:	4602      	mov	r2, r0
 800974c:	6260      	str	r0, [r4, #36]	; 0x24
 800974e:	b920      	cbnz	r0, 800975a <_dtoa_r+0x3a>
 8009750:	4ba7      	ldr	r3, [pc, #668]	; (80099f0 <_dtoa_r+0x2d0>)
 8009752:	21ea      	movs	r1, #234	; 0xea
 8009754:	48a7      	ldr	r0, [pc, #668]	; (80099f4 <_dtoa_r+0x2d4>)
 8009756:	f002 fc79 	bl	800c04c <__assert_func>
 800975a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800975e:	6005      	str	r5, [r0, #0]
 8009760:	60c5      	str	r5, [r0, #12]
 8009762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009764:	6819      	ldr	r1, [r3, #0]
 8009766:	b151      	cbz	r1, 800977e <_dtoa_r+0x5e>
 8009768:	685a      	ldr	r2, [r3, #4]
 800976a:	604a      	str	r2, [r1, #4]
 800976c:	2301      	movs	r3, #1
 800976e:	4093      	lsls	r3, r2
 8009770:	608b      	str	r3, [r1, #8]
 8009772:	4620      	mov	r0, r4
 8009774:	f001 fbae 	bl	800aed4 <_Bfree>
 8009778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	1e3b      	subs	r3, r7, #0
 8009780:	bfaa      	itet	ge
 8009782:	2300      	movge	r3, #0
 8009784:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009788:	f8c8 3000 	strge.w	r3, [r8]
 800978c:	4b9a      	ldr	r3, [pc, #616]	; (80099f8 <_dtoa_r+0x2d8>)
 800978e:	bfbc      	itt	lt
 8009790:	2201      	movlt	r2, #1
 8009792:	f8c8 2000 	strlt.w	r2, [r8]
 8009796:	ea33 030b 	bics.w	r3, r3, fp
 800979a:	d11b      	bne.n	80097d4 <_dtoa_r+0xb4>
 800979c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800979e:	f242 730f 	movw	r3, #9999	; 0x270f
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097a8:	4333      	orrs	r3, r6
 80097aa:	f000 8592 	beq.w	800a2d2 <_dtoa_r+0xbb2>
 80097ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097b0:	b963      	cbnz	r3, 80097cc <_dtoa_r+0xac>
 80097b2:	4b92      	ldr	r3, [pc, #584]	; (80099fc <_dtoa_r+0x2dc>)
 80097b4:	e022      	b.n	80097fc <_dtoa_r+0xdc>
 80097b6:	4b92      	ldr	r3, [pc, #584]	; (8009a00 <_dtoa_r+0x2e0>)
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	3308      	adds	r3, #8
 80097bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	9801      	ldr	r0, [sp, #4]
 80097c2:	b013      	add	sp, #76	; 0x4c
 80097c4:	ecbd 8b04 	vpop	{d8-d9}
 80097c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097cc:	4b8b      	ldr	r3, [pc, #556]	; (80099fc <_dtoa_r+0x2dc>)
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	3303      	adds	r3, #3
 80097d2:	e7f3      	b.n	80097bc <_dtoa_r+0x9c>
 80097d4:	2200      	movs	r2, #0
 80097d6:	2300      	movs	r3, #0
 80097d8:	4650      	mov	r0, sl
 80097da:	4659      	mov	r1, fp
 80097dc:	f7f7 f97c 	bl	8000ad8 <__aeabi_dcmpeq>
 80097e0:	ec4b ab19 	vmov	d9, sl, fp
 80097e4:	4680      	mov	r8, r0
 80097e6:	b158      	cbz	r0, 8009800 <_dtoa_r+0xe0>
 80097e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097ea:	2301      	movs	r3, #1
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 856b 	beq.w	800a2cc <_dtoa_r+0xbac>
 80097f6:	4883      	ldr	r0, [pc, #524]	; (8009a04 <_dtoa_r+0x2e4>)
 80097f8:	6018      	str	r0, [r3, #0]
 80097fa:	1e43      	subs	r3, r0, #1
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	e7df      	b.n	80097c0 <_dtoa_r+0xa0>
 8009800:	ec4b ab10 	vmov	d0, sl, fp
 8009804:	aa10      	add	r2, sp, #64	; 0x40
 8009806:	a911      	add	r1, sp, #68	; 0x44
 8009808:	4620      	mov	r0, r4
 800980a:	f001 ff11 	bl	800b630 <__d2b>
 800980e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009812:	ee08 0a10 	vmov	s16, r0
 8009816:	2d00      	cmp	r5, #0
 8009818:	f000 8084 	beq.w	8009924 <_dtoa_r+0x204>
 800981c:	ee19 3a90 	vmov	r3, s19
 8009820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009824:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009828:	4656      	mov	r6, sl
 800982a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800982e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009832:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009836:	4b74      	ldr	r3, [pc, #464]	; (8009a08 <_dtoa_r+0x2e8>)
 8009838:	2200      	movs	r2, #0
 800983a:	4630      	mov	r0, r6
 800983c:	4639      	mov	r1, r7
 800983e:	f7f6 fd2b 	bl	8000298 <__aeabi_dsub>
 8009842:	a365      	add	r3, pc, #404	; (adr r3, 80099d8 <_dtoa_r+0x2b8>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fede 	bl	8000608 <__aeabi_dmul>
 800984c:	a364      	add	r3, pc, #400	; (adr r3, 80099e0 <_dtoa_r+0x2c0>)
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f7f6 fd23 	bl	800029c <__adddf3>
 8009856:	4606      	mov	r6, r0
 8009858:	4628      	mov	r0, r5
 800985a:	460f      	mov	r7, r1
 800985c:	f7f6 fe6a 	bl	8000534 <__aeabi_i2d>
 8009860:	a361      	add	r3, pc, #388	; (adr r3, 80099e8 <_dtoa_r+0x2c8>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f6 fecf 	bl	8000608 <__aeabi_dmul>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	4630      	mov	r0, r6
 8009870:	4639      	mov	r1, r7
 8009872:	f7f6 fd13 	bl	800029c <__adddf3>
 8009876:	4606      	mov	r6, r0
 8009878:	460f      	mov	r7, r1
 800987a:	f7f7 f975 	bl	8000b68 <__aeabi_d2iz>
 800987e:	2200      	movs	r2, #0
 8009880:	9000      	str	r0, [sp, #0]
 8009882:	2300      	movs	r3, #0
 8009884:	4630      	mov	r0, r6
 8009886:	4639      	mov	r1, r7
 8009888:	f7f7 f930 	bl	8000aec <__aeabi_dcmplt>
 800988c:	b150      	cbz	r0, 80098a4 <_dtoa_r+0x184>
 800988e:	9800      	ldr	r0, [sp, #0]
 8009890:	f7f6 fe50 	bl	8000534 <__aeabi_i2d>
 8009894:	4632      	mov	r2, r6
 8009896:	463b      	mov	r3, r7
 8009898:	f7f7 f91e 	bl	8000ad8 <__aeabi_dcmpeq>
 800989c:	b910      	cbnz	r0, 80098a4 <_dtoa_r+0x184>
 800989e:	9b00      	ldr	r3, [sp, #0]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	9b00      	ldr	r3, [sp, #0]
 80098a6:	2b16      	cmp	r3, #22
 80098a8:	d85a      	bhi.n	8009960 <_dtoa_r+0x240>
 80098aa:	9a00      	ldr	r2, [sp, #0]
 80098ac:	4b57      	ldr	r3, [pc, #348]	; (8009a0c <_dtoa_r+0x2ec>)
 80098ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	ec51 0b19 	vmov	r0, r1, d9
 80098ba:	f7f7 f917 	bl	8000aec <__aeabi_dcmplt>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d050      	beq.n	8009964 <_dtoa_r+0x244>
 80098c2:	9b00      	ldr	r3, [sp, #0]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	2300      	movs	r3, #0
 80098ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80098cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098ce:	1b5d      	subs	r5, r3, r5
 80098d0:	1e6b      	subs	r3, r5, #1
 80098d2:	9305      	str	r3, [sp, #20]
 80098d4:	bf45      	ittet	mi
 80098d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80098da:	9304      	strmi	r3, [sp, #16]
 80098dc:	2300      	movpl	r3, #0
 80098de:	2300      	movmi	r3, #0
 80098e0:	bf4c      	ite	mi
 80098e2:	9305      	strmi	r3, [sp, #20]
 80098e4:	9304      	strpl	r3, [sp, #16]
 80098e6:	9b00      	ldr	r3, [sp, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	db3d      	blt.n	8009968 <_dtoa_r+0x248>
 80098ec:	9b05      	ldr	r3, [sp, #20]
 80098ee:	9a00      	ldr	r2, [sp, #0]
 80098f0:	920a      	str	r2, [sp, #40]	; 0x28
 80098f2:	4413      	add	r3, r2
 80098f4:	9305      	str	r3, [sp, #20]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9307      	str	r3, [sp, #28]
 80098fa:	9b06      	ldr	r3, [sp, #24]
 80098fc:	2b09      	cmp	r3, #9
 80098fe:	f200 8089 	bhi.w	8009a14 <_dtoa_r+0x2f4>
 8009902:	2b05      	cmp	r3, #5
 8009904:	bfc4      	itt	gt
 8009906:	3b04      	subgt	r3, #4
 8009908:	9306      	strgt	r3, [sp, #24]
 800990a:	9b06      	ldr	r3, [sp, #24]
 800990c:	f1a3 0302 	sub.w	r3, r3, #2
 8009910:	bfcc      	ite	gt
 8009912:	2500      	movgt	r5, #0
 8009914:	2501      	movle	r5, #1
 8009916:	2b03      	cmp	r3, #3
 8009918:	f200 8087 	bhi.w	8009a2a <_dtoa_r+0x30a>
 800991c:	e8df f003 	tbb	[pc, r3]
 8009920:	59383a2d 	.word	0x59383a2d
 8009924:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009928:	441d      	add	r5, r3
 800992a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800992e:	2b20      	cmp	r3, #32
 8009930:	bfc1      	itttt	gt
 8009932:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009936:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800993a:	fa0b f303 	lslgt.w	r3, fp, r3
 800993e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009942:	bfda      	itte	le
 8009944:	f1c3 0320 	rsble	r3, r3, #32
 8009948:	fa06 f003 	lslle.w	r0, r6, r3
 800994c:	4318      	orrgt	r0, r3
 800994e:	f7f6 fde1 	bl	8000514 <__aeabi_ui2d>
 8009952:	2301      	movs	r3, #1
 8009954:	4606      	mov	r6, r0
 8009956:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800995a:	3d01      	subs	r5, #1
 800995c:	930e      	str	r3, [sp, #56]	; 0x38
 800995e:	e76a      	b.n	8009836 <_dtoa_r+0x116>
 8009960:	2301      	movs	r3, #1
 8009962:	e7b2      	b.n	80098ca <_dtoa_r+0x1aa>
 8009964:	900b      	str	r0, [sp, #44]	; 0x2c
 8009966:	e7b1      	b.n	80098cc <_dtoa_r+0x1ac>
 8009968:	9b04      	ldr	r3, [sp, #16]
 800996a:	9a00      	ldr	r2, [sp, #0]
 800996c:	1a9b      	subs	r3, r3, r2
 800996e:	9304      	str	r3, [sp, #16]
 8009970:	4253      	negs	r3, r2
 8009972:	9307      	str	r3, [sp, #28]
 8009974:	2300      	movs	r3, #0
 8009976:	930a      	str	r3, [sp, #40]	; 0x28
 8009978:	e7bf      	b.n	80098fa <_dtoa_r+0x1da>
 800997a:	2300      	movs	r3, #0
 800997c:	9308      	str	r3, [sp, #32]
 800997e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009980:	2b00      	cmp	r3, #0
 8009982:	dc55      	bgt.n	8009a30 <_dtoa_r+0x310>
 8009984:	2301      	movs	r3, #1
 8009986:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800998a:	461a      	mov	r2, r3
 800998c:	9209      	str	r2, [sp, #36]	; 0x24
 800998e:	e00c      	b.n	80099aa <_dtoa_r+0x28a>
 8009990:	2301      	movs	r3, #1
 8009992:	e7f3      	b.n	800997c <_dtoa_r+0x25c>
 8009994:	2300      	movs	r3, #0
 8009996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009998:	9308      	str	r3, [sp, #32]
 800999a:	9b00      	ldr	r3, [sp, #0]
 800999c:	4413      	add	r3, r2
 800999e:	9302      	str	r3, [sp, #8]
 80099a0:	3301      	adds	r3, #1
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	9303      	str	r3, [sp, #12]
 80099a6:	bfb8      	it	lt
 80099a8:	2301      	movlt	r3, #1
 80099aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80099ac:	2200      	movs	r2, #0
 80099ae:	6042      	str	r2, [r0, #4]
 80099b0:	2204      	movs	r2, #4
 80099b2:	f102 0614 	add.w	r6, r2, #20
 80099b6:	429e      	cmp	r6, r3
 80099b8:	6841      	ldr	r1, [r0, #4]
 80099ba:	d93d      	bls.n	8009a38 <_dtoa_r+0x318>
 80099bc:	4620      	mov	r0, r4
 80099be:	f001 fa49 	bl	800ae54 <_Balloc>
 80099c2:	9001      	str	r0, [sp, #4]
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d13b      	bne.n	8009a40 <_dtoa_r+0x320>
 80099c8:	4b11      	ldr	r3, [pc, #68]	; (8009a10 <_dtoa_r+0x2f0>)
 80099ca:	4602      	mov	r2, r0
 80099cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099d0:	e6c0      	b.n	8009754 <_dtoa_r+0x34>
 80099d2:	2301      	movs	r3, #1
 80099d4:	e7df      	b.n	8009996 <_dtoa_r+0x276>
 80099d6:	bf00      	nop
 80099d8:	636f4361 	.word	0x636f4361
 80099dc:	3fd287a7 	.word	0x3fd287a7
 80099e0:	8b60c8b3 	.word	0x8b60c8b3
 80099e4:	3fc68a28 	.word	0x3fc68a28
 80099e8:	509f79fb 	.word	0x509f79fb
 80099ec:	3fd34413 	.word	0x3fd34413
 80099f0:	0800c6ce 	.word	0x0800c6ce
 80099f4:	0800c6e5 	.word	0x0800c6e5
 80099f8:	7ff00000 	.word	0x7ff00000
 80099fc:	0800c6ca 	.word	0x0800c6ca
 8009a00:	0800c6c1 	.word	0x0800c6c1
 8009a04:	0800c545 	.word	0x0800c545
 8009a08:	3ff80000 	.word	0x3ff80000
 8009a0c:	0800c8b8 	.word	0x0800c8b8
 8009a10:	0800c740 	.word	0x0800c740
 8009a14:	2501      	movs	r5, #1
 8009a16:	2300      	movs	r3, #0
 8009a18:	9306      	str	r3, [sp, #24]
 8009a1a:	9508      	str	r5, [sp, #32]
 8009a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a24:	2200      	movs	r2, #0
 8009a26:	2312      	movs	r3, #18
 8009a28:	e7b0      	b.n	800998c <_dtoa_r+0x26c>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	9308      	str	r3, [sp, #32]
 8009a2e:	e7f5      	b.n	8009a1c <_dtoa_r+0x2fc>
 8009a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a36:	e7b8      	b.n	80099aa <_dtoa_r+0x28a>
 8009a38:	3101      	adds	r1, #1
 8009a3a:	6041      	str	r1, [r0, #4]
 8009a3c:	0052      	lsls	r2, r2, #1
 8009a3e:	e7b8      	b.n	80099b2 <_dtoa_r+0x292>
 8009a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a42:	9a01      	ldr	r2, [sp, #4]
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	2b0e      	cmp	r3, #14
 8009a4a:	f200 809d 	bhi.w	8009b88 <_dtoa_r+0x468>
 8009a4e:	2d00      	cmp	r5, #0
 8009a50:	f000 809a 	beq.w	8009b88 <_dtoa_r+0x468>
 8009a54:	9b00      	ldr	r3, [sp, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	dd32      	ble.n	8009ac0 <_dtoa_r+0x3a0>
 8009a5a:	4ab7      	ldr	r2, [pc, #732]	; (8009d38 <_dtoa_r+0x618>)
 8009a5c:	f003 030f 	and.w	r3, r3, #15
 8009a60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a68:	9b00      	ldr	r3, [sp, #0]
 8009a6a:	05d8      	lsls	r0, r3, #23
 8009a6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009a70:	d516      	bpl.n	8009aa0 <_dtoa_r+0x380>
 8009a72:	4bb2      	ldr	r3, [pc, #712]	; (8009d3c <_dtoa_r+0x61c>)
 8009a74:	ec51 0b19 	vmov	r0, r1, d9
 8009a78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a7c:	f7f6 feee 	bl	800085c <__aeabi_ddiv>
 8009a80:	f007 070f 	and.w	r7, r7, #15
 8009a84:	4682      	mov	sl, r0
 8009a86:	468b      	mov	fp, r1
 8009a88:	2503      	movs	r5, #3
 8009a8a:	4eac      	ldr	r6, [pc, #688]	; (8009d3c <_dtoa_r+0x61c>)
 8009a8c:	b957      	cbnz	r7, 8009aa4 <_dtoa_r+0x384>
 8009a8e:	4642      	mov	r2, r8
 8009a90:	464b      	mov	r3, r9
 8009a92:	4650      	mov	r0, sl
 8009a94:	4659      	mov	r1, fp
 8009a96:	f7f6 fee1 	bl	800085c <__aeabi_ddiv>
 8009a9a:	4682      	mov	sl, r0
 8009a9c:	468b      	mov	fp, r1
 8009a9e:	e028      	b.n	8009af2 <_dtoa_r+0x3d2>
 8009aa0:	2502      	movs	r5, #2
 8009aa2:	e7f2      	b.n	8009a8a <_dtoa_r+0x36a>
 8009aa4:	07f9      	lsls	r1, r7, #31
 8009aa6:	d508      	bpl.n	8009aba <_dtoa_r+0x39a>
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	4649      	mov	r1, r9
 8009aac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ab0:	f7f6 fdaa 	bl	8000608 <__aeabi_dmul>
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	4689      	mov	r9, r1
 8009aba:	107f      	asrs	r7, r7, #1
 8009abc:	3608      	adds	r6, #8
 8009abe:	e7e5      	b.n	8009a8c <_dtoa_r+0x36c>
 8009ac0:	f000 809b 	beq.w	8009bfa <_dtoa_r+0x4da>
 8009ac4:	9b00      	ldr	r3, [sp, #0]
 8009ac6:	4f9d      	ldr	r7, [pc, #628]	; (8009d3c <_dtoa_r+0x61c>)
 8009ac8:	425e      	negs	r6, r3
 8009aca:	4b9b      	ldr	r3, [pc, #620]	; (8009d38 <_dtoa_r+0x618>)
 8009acc:	f006 020f 	and.w	r2, r6, #15
 8009ad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	ec51 0b19 	vmov	r0, r1, d9
 8009adc:	f7f6 fd94 	bl	8000608 <__aeabi_dmul>
 8009ae0:	1136      	asrs	r6, r6, #4
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	468b      	mov	fp, r1
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2502      	movs	r5, #2
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	d17a      	bne.n	8009be4 <_dtoa_r+0x4c4>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1d3      	bne.n	8009a9a <_dtoa_r+0x37a>
 8009af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 8082 	beq.w	8009bfe <_dtoa_r+0x4de>
 8009afa:	4b91      	ldr	r3, [pc, #580]	; (8009d40 <_dtoa_r+0x620>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	4650      	mov	r0, sl
 8009b00:	4659      	mov	r1, fp
 8009b02:	f7f6 fff3 	bl	8000aec <__aeabi_dcmplt>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d079      	beq.n	8009bfe <_dtoa_r+0x4de>
 8009b0a:	9b03      	ldr	r3, [sp, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d076      	beq.n	8009bfe <_dtoa_r+0x4de>
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dd36      	ble.n	8009b84 <_dtoa_r+0x464>
 8009b16:	9b00      	ldr	r3, [sp, #0]
 8009b18:	4650      	mov	r0, sl
 8009b1a:	4659      	mov	r1, fp
 8009b1c:	1e5f      	subs	r7, r3, #1
 8009b1e:	2200      	movs	r2, #0
 8009b20:	4b88      	ldr	r3, [pc, #544]	; (8009d44 <_dtoa_r+0x624>)
 8009b22:	f7f6 fd71 	bl	8000608 <__aeabi_dmul>
 8009b26:	9e02      	ldr	r6, [sp, #8]
 8009b28:	4682      	mov	sl, r0
 8009b2a:	468b      	mov	fp, r1
 8009b2c:	3501      	adds	r5, #1
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f7f6 fd00 	bl	8000534 <__aeabi_i2d>
 8009b34:	4652      	mov	r2, sl
 8009b36:	465b      	mov	r3, fp
 8009b38:	f7f6 fd66 	bl	8000608 <__aeabi_dmul>
 8009b3c:	4b82      	ldr	r3, [pc, #520]	; (8009d48 <_dtoa_r+0x628>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f7f6 fbac 	bl	800029c <__adddf3>
 8009b44:	46d0      	mov	r8, sl
 8009b46:	46d9      	mov	r9, fp
 8009b48:	4682      	mov	sl, r0
 8009b4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009b4e:	2e00      	cmp	r6, #0
 8009b50:	d158      	bne.n	8009c04 <_dtoa_r+0x4e4>
 8009b52:	4b7e      	ldr	r3, [pc, #504]	; (8009d4c <_dtoa_r+0x62c>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	4640      	mov	r0, r8
 8009b58:	4649      	mov	r1, r9
 8009b5a:	f7f6 fb9d 	bl	8000298 <__aeabi_dsub>
 8009b5e:	4652      	mov	r2, sl
 8009b60:	465b      	mov	r3, fp
 8009b62:	4680      	mov	r8, r0
 8009b64:	4689      	mov	r9, r1
 8009b66:	f7f6 ffdf 	bl	8000b28 <__aeabi_dcmpgt>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	f040 8295 	bne.w	800a09a <_dtoa_r+0x97a>
 8009b70:	4652      	mov	r2, sl
 8009b72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b76:	4640      	mov	r0, r8
 8009b78:	4649      	mov	r1, r9
 8009b7a:	f7f6 ffb7 	bl	8000aec <__aeabi_dcmplt>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	f040 8289 	bne.w	800a096 <_dtoa_r+0x976>
 8009b84:	ec5b ab19 	vmov	sl, fp, d9
 8009b88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f2c0 8148 	blt.w	8009e20 <_dtoa_r+0x700>
 8009b90:	9a00      	ldr	r2, [sp, #0]
 8009b92:	2a0e      	cmp	r2, #14
 8009b94:	f300 8144 	bgt.w	8009e20 <_dtoa_r+0x700>
 8009b98:	4b67      	ldr	r3, [pc, #412]	; (8009d38 <_dtoa_r+0x618>)
 8009b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f280 80d5 	bge.w	8009d54 <_dtoa_r+0x634>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f300 80d1 	bgt.w	8009d54 <_dtoa_r+0x634>
 8009bb2:	f040 826f 	bne.w	800a094 <_dtoa_r+0x974>
 8009bb6:	4b65      	ldr	r3, [pc, #404]	; (8009d4c <_dtoa_r+0x62c>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	4640      	mov	r0, r8
 8009bbc:	4649      	mov	r1, r9
 8009bbe:	f7f6 fd23 	bl	8000608 <__aeabi_dmul>
 8009bc2:	4652      	mov	r2, sl
 8009bc4:	465b      	mov	r3, fp
 8009bc6:	f7f6 ffa5 	bl	8000b14 <__aeabi_dcmpge>
 8009bca:	9e03      	ldr	r6, [sp, #12]
 8009bcc:	4637      	mov	r7, r6
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f040 8245 	bne.w	800a05e <_dtoa_r+0x93e>
 8009bd4:	9d01      	ldr	r5, [sp, #4]
 8009bd6:	2331      	movs	r3, #49	; 0x31
 8009bd8:	f805 3b01 	strb.w	r3, [r5], #1
 8009bdc:	9b00      	ldr	r3, [sp, #0]
 8009bde:	3301      	adds	r3, #1
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	e240      	b.n	800a066 <_dtoa_r+0x946>
 8009be4:	07f2      	lsls	r2, r6, #31
 8009be6:	d505      	bpl.n	8009bf4 <_dtoa_r+0x4d4>
 8009be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bec:	f7f6 fd0c 	bl	8000608 <__aeabi_dmul>
 8009bf0:	3501      	adds	r5, #1
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	1076      	asrs	r6, r6, #1
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	e777      	b.n	8009aea <_dtoa_r+0x3ca>
 8009bfa:	2502      	movs	r5, #2
 8009bfc:	e779      	b.n	8009af2 <_dtoa_r+0x3d2>
 8009bfe:	9f00      	ldr	r7, [sp, #0]
 8009c00:	9e03      	ldr	r6, [sp, #12]
 8009c02:	e794      	b.n	8009b2e <_dtoa_r+0x40e>
 8009c04:	9901      	ldr	r1, [sp, #4]
 8009c06:	4b4c      	ldr	r3, [pc, #304]	; (8009d38 <_dtoa_r+0x618>)
 8009c08:	4431      	add	r1, r6
 8009c0a:	910d      	str	r1, [sp, #52]	; 0x34
 8009c0c:	9908      	ldr	r1, [sp, #32]
 8009c0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009c12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c16:	2900      	cmp	r1, #0
 8009c18:	d043      	beq.n	8009ca2 <_dtoa_r+0x582>
 8009c1a:	494d      	ldr	r1, [pc, #308]	; (8009d50 <_dtoa_r+0x630>)
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	f7f6 fe1d 	bl	800085c <__aeabi_ddiv>
 8009c22:	4652      	mov	r2, sl
 8009c24:	465b      	mov	r3, fp
 8009c26:	f7f6 fb37 	bl	8000298 <__aeabi_dsub>
 8009c2a:	9d01      	ldr	r5, [sp, #4]
 8009c2c:	4682      	mov	sl, r0
 8009c2e:	468b      	mov	fp, r1
 8009c30:	4649      	mov	r1, r9
 8009c32:	4640      	mov	r0, r8
 8009c34:	f7f6 ff98 	bl	8000b68 <__aeabi_d2iz>
 8009c38:	4606      	mov	r6, r0
 8009c3a:	f7f6 fc7b 	bl	8000534 <__aeabi_i2d>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4640      	mov	r0, r8
 8009c44:	4649      	mov	r1, r9
 8009c46:	f7f6 fb27 	bl	8000298 <__aeabi_dsub>
 8009c4a:	3630      	adds	r6, #48	; 0x30
 8009c4c:	f805 6b01 	strb.w	r6, [r5], #1
 8009c50:	4652      	mov	r2, sl
 8009c52:	465b      	mov	r3, fp
 8009c54:	4680      	mov	r8, r0
 8009c56:	4689      	mov	r9, r1
 8009c58:	f7f6 ff48 	bl	8000aec <__aeabi_dcmplt>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d163      	bne.n	8009d28 <_dtoa_r+0x608>
 8009c60:	4642      	mov	r2, r8
 8009c62:	464b      	mov	r3, r9
 8009c64:	4936      	ldr	r1, [pc, #216]	; (8009d40 <_dtoa_r+0x620>)
 8009c66:	2000      	movs	r0, #0
 8009c68:	f7f6 fb16 	bl	8000298 <__aeabi_dsub>
 8009c6c:	4652      	mov	r2, sl
 8009c6e:	465b      	mov	r3, fp
 8009c70:	f7f6 ff3c 	bl	8000aec <__aeabi_dcmplt>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	f040 80b5 	bne.w	8009de4 <_dtoa_r+0x6c4>
 8009c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c7c:	429d      	cmp	r5, r3
 8009c7e:	d081      	beq.n	8009b84 <_dtoa_r+0x464>
 8009c80:	4b30      	ldr	r3, [pc, #192]	; (8009d44 <_dtoa_r+0x624>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	4650      	mov	r0, sl
 8009c86:	4659      	mov	r1, fp
 8009c88:	f7f6 fcbe 	bl	8000608 <__aeabi_dmul>
 8009c8c:	4b2d      	ldr	r3, [pc, #180]	; (8009d44 <_dtoa_r+0x624>)
 8009c8e:	4682      	mov	sl, r0
 8009c90:	468b      	mov	fp, r1
 8009c92:	4640      	mov	r0, r8
 8009c94:	4649      	mov	r1, r9
 8009c96:	2200      	movs	r2, #0
 8009c98:	f7f6 fcb6 	bl	8000608 <__aeabi_dmul>
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	4689      	mov	r9, r1
 8009ca0:	e7c6      	b.n	8009c30 <_dtoa_r+0x510>
 8009ca2:	4650      	mov	r0, sl
 8009ca4:	4659      	mov	r1, fp
 8009ca6:	f7f6 fcaf 	bl	8000608 <__aeabi_dmul>
 8009caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cac:	9d01      	ldr	r5, [sp, #4]
 8009cae:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cb0:	4682      	mov	sl, r0
 8009cb2:	468b      	mov	fp, r1
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	f7f6 ff56 	bl	8000b68 <__aeabi_d2iz>
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	f7f6 fc39 	bl	8000534 <__aeabi_i2d>
 8009cc2:	3630      	adds	r6, #48	; 0x30
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4640      	mov	r0, r8
 8009cca:	4649      	mov	r1, r9
 8009ccc:	f7f6 fae4 	bl	8000298 <__aeabi_dsub>
 8009cd0:	f805 6b01 	strb.w	r6, [r5], #1
 8009cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cd6:	429d      	cmp	r5, r3
 8009cd8:	4680      	mov	r8, r0
 8009cda:	4689      	mov	r9, r1
 8009cdc:	f04f 0200 	mov.w	r2, #0
 8009ce0:	d124      	bne.n	8009d2c <_dtoa_r+0x60c>
 8009ce2:	4b1b      	ldr	r3, [pc, #108]	; (8009d50 <_dtoa_r+0x630>)
 8009ce4:	4650      	mov	r0, sl
 8009ce6:	4659      	mov	r1, fp
 8009ce8:	f7f6 fad8 	bl	800029c <__adddf3>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 ff18 	bl	8000b28 <__aeabi_dcmpgt>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d173      	bne.n	8009de4 <_dtoa_r+0x6c4>
 8009cfc:	4652      	mov	r2, sl
 8009cfe:	465b      	mov	r3, fp
 8009d00:	4913      	ldr	r1, [pc, #76]	; (8009d50 <_dtoa_r+0x630>)
 8009d02:	2000      	movs	r0, #0
 8009d04:	f7f6 fac8 	bl	8000298 <__aeabi_dsub>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	4649      	mov	r1, r9
 8009d10:	f7f6 feec 	bl	8000aec <__aeabi_dcmplt>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	f43f af35 	beq.w	8009b84 <_dtoa_r+0x464>
 8009d1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009d1c:	1e6b      	subs	r3, r5, #1
 8009d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d24:	2b30      	cmp	r3, #48	; 0x30
 8009d26:	d0f8      	beq.n	8009d1a <_dtoa_r+0x5fa>
 8009d28:	9700      	str	r7, [sp, #0]
 8009d2a:	e049      	b.n	8009dc0 <_dtoa_r+0x6a0>
 8009d2c:	4b05      	ldr	r3, [pc, #20]	; (8009d44 <_dtoa_r+0x624>)
 8009d2e:	f7f6 fc6b 	bl	8000608 <__aeabi_dmul>
 8009d32:	4680      	mov	r8, r0
 8009d34:	4689      	mov	r9, r1
 8009d36:	e7bd      	b.n	8009cb4 <_dtoa_r+0x594>
 8009d38:	0800c8b8 	.word	0x0800c8b8
 8009d3c:	0800c890 	.word	0x0800c890
 8009d40:	3ff00000 	.word	0x3ff00000
 8009d44:	40240000 	.word	0x40240000
 8009d48:	401c0000 	.word	0x401c0000
 8009d4c:	40140000 	.word	0x40140000
 8009d50:	3fe00000 	.word	0x3fe00000
 8009d54:	9d01      	ldr	r5, [sp, #4]
 8009d56:	4656      	mov	r6, sl
 8009d58:	465f      	mov	r7, fp
 8009d5a:	4642      	mov	r2, r8
 8009d5c:	464b      	mov	r3, r9
 8009d5e:	4630      	mov	r0, r6
 8009d60:	4639      	mov	r1, r7
 8009d62:	f7f6 fd7b 	bl	800085c <__aeabi_ddiv>
 8009d66:	f7f6 feff 	bl	8000b68 <__aeabi_d2iz>
 8009d6a:	4682      	mov	sl, r0
 8009d6c:	f7f6 fbe2 	bl	8000534 <__aeabi_i2d>
 8009d70:	4642      	mov	r2, r8
 8009d72:	464b      	mov	r3, r9
 8009d74:	f7f6 fc48 	bl	8000608 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009d84:	f7f6 fa88 	bl	8000298 <__aeabi_dsub>
 8009d88:	f805 6b01 	strb.w	r6, [r5], #1
 8009d8c:	9e01      	ldr	r6, [sp, #4]
 8009d8e:	9f03      	ldr	r7, [sp, #12]
 8009d90:	1bae      	subs	r6, r5, r6
 8009d92:	42b7      	cmp	r7, r6
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	d135      	bne.n	8009e06 <_dtoa_r+0x6e6>
 8009d9a:	f7f6 fa7f 	bl	800029c <__adddf3>
 8009d9e:	4642      	mov	r2, r8
 8009da0:	464b      	mov	r3, r9
 8009da2:	4606      	mov	r6, r0
 8009da4:	460f      	mov	r7, r1
 8009da6:	f7f6 febf 	bl	8000b28 <__aeabi_dcmpgt>
 8009daa:	b9d0      	cbnz	r0, 8009de2 <_dtoa_r+0x6c2>
 8009dac:	4642      	mov	r2, r8
 8009dae:	464b      	mov	r3, r9
 8009db0:	4630      	mov	r0, r6
 8009db2:	4639      	mov	r1, r7
 8009db4:	f7f6 fe90 	bl	8000ad8 <__aeabi_dcmpeq>
 8009db8:	b110      	cbz	r0, 8009dc0 <_dtoa_r+0x6a0>
 8009dba:	f01a 0f01 	tst.w	sl, #1
 8009dbe:	d110      	bne.n	8009de2 <_dtoa_r+0x6c2>
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	ee18 1a10 	vmov	r1, s16
 8009dc6:	f001 f885 	bl	800aed4 <_Bfree>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9800      	ldr	r0, [sp, #0]
 8009dce:	702b      	strb	r3, [r5, #0]
 8009dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	6018      	str	r0, [r3, #0]
 8009dd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f43f acf1 	beq.w	80097c0 <_dtoa_r+0xa0>
 8009dde:	601d      	str	r5, [r3, #0]
 8009de0:	e4ee      	b.n	80097c0 <_dtoa_r+0xa0>
 8009de2:	9f00      	ldr	r7, [sp, #0]
 8009de4:	462b      	mov	r3, r5
 8009de6:	461d      	mov	r5, r3
 8009de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dec:	2a39      	cmp	r2, #57	; 0x39
 8009dee:	d106      	bne.n	8009dfe <_dtoa_r+0x6de>
 8009df0:	9a01      	ldr	r2, [sp, #4]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d1f7      	bne.n	8009de6 <_dtoa_r+0x6c6>
 8009df6:	9901      	ldr	r1, [sp, #4]
 8009df8:	2230      	movs	r2, #48	; 0x30
 8009dfa:	3701      	adds	r7, #1
 8009dfc:	700a      	strb	r2, [r1, #0]
 8009dfe:	781a      	ldrb	r2, [r3, #0]
 8009e00:	3201      	adds	r2, #1
 8009e02:	701a      	strb	r2, [r3, #0]
 8009e04:	e790      	b.n	8009d28 <_dtoa_r+0x608>
 8009e06:	4ba6      	ldr	r3, [pc, #664]	; (800a0a0 <_dtoa_r+0x980>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f7f6 fbfd 	bl	8000608 <__aeabi_dmul>
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2300      	movs	r3, #0
 8009e12:	4606      	mov	r6, r0
 8009e14:	460f      	mov	r7, r1
 8009e16:	f7f6 fe5f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d09d      	beq.n	8009d5a <_dtoa_r+0x63a>
 8009e1e:	e7cf      	b.n	8009dc0 <_dtoa_r+0x6a0>
 8009e20:	9a08      	ldr	r2, [sp, #32]
 8009e22:	2a00      	cmp	r2, #0
 8009e24:	f000 80d7 	beq.w	8009fd6 <_dtoa_r+0x8b6>
 8009e28:	9a06      	ldr	r2, [sp, #24]
 8009e2a:	2a01      	cmp	r2, #1
 8009e2c:	f300 80ba 	bgt.w	8009fa4 <_dtoa_r+0x884>
 8009e30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	f000 80b2 	beq.w	8009f9c <_dtoa_r+0x87c>
 8009e38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e3c:	9e07      	ldr	r6, [sp, #28]
 8009e3e:	9d04      	ldr	r5, [sp, #16]
 8009e40:	9a04      	ldr	r2, [sp, #16]
 8009e42:	441a      	add	r2, r3
 8009e44:	9204      	str	r2, [sp, #16]
 8009e46:	9a05      	ldr	r2, [sp, #20]
 8009e48:	2101      	movs	r1, #1
 8009e4a:	441a      	add	r2, r3
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	9205      	str	r2, [sp, #20]
 8009e50:	f001 f942 	bl	800b0d8 <__i2b>
 8009e54:	4607      	mov	r7, r0
 8009e56:	2d00      	cmp	r5, #0
 8009e58:	dd0c      	ble.n	8009e74 <_dtoa_r+0x754>
 8009e5a:	9b05      	ldr	r3, [sp, #20]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dd09      	ble.n	8009e74 <_dtoa_r+0x754>
 8009e60:	42ab      	cmp	r3, r5
 8009e62:	9a04      	ldr	r2, [sp, #16]
 8009e64:	bfa8      	it	ge
 8009e66:	462b      	movge	r3, r5
 8009e68:	1ad2      	subs	r2, r2, r3
 8009e6a:	9204      	str	r2, [sp, #16]
 8009e6c:	9a05      	ldr	r2, [sp, #20]
 8009e6e:	1aed      	subs	r5, r5, r3
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	9305      	str	r3, [sp, #20]
 8009e74:	9b07      	ldr	r3, [sp, #28]
 8009e76:	b31b      	cbz	r3, 8009ec0 <_dtoa_r+0x7a0>
 8009e78:	9b08      	ldr	r3, [sp, #32]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 80af 	beq.w	8009fde <_dtoa_r+0x8be>
 8009e80:	2e00      	cmp	r6, #0
 8009e82:	dd13      	ble.n	8009eac <_dtoa_r+0x78c>
 8009e84:	4639      	mov	r1, r7
 8009e86:	4632      	mov	r2, r6
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f001 f9e5 	bl	800b258 <__pow5mult>
 8009e8e:	ee18 2a10 	vmov	r2, s16
 8009e92:	4601      	mov	r1, r0
 8009e94:	4607      	mov	r7, r0
 8009e96:	4620      	mov	r0, r4
 8009e98:	f001 f934 	bl	800b104 <__multiply>
 8009e9c:	ee18 1a10 	vmov	r1, s16
 8009ea0:	4680      	mov	r8, r0
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f001 f816 	bl	800aed4 <_Bfree>
 8009ea8:	ee08 8a10 	vmov	s16, r8
 8009eac:	9b07      	ldr	r3, [sp, #28]
 8009eae:	1b9a      	subs	r2, r3, r6
 8009eb0:	d006      	beq.n	8009ec0 <_dtoa_r+0x7a0>
 8009eb2:	ee18 1a10 	vmov	r1, s16
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f001 f9ce 	bl	800b258 <__pow5mult>
 8009ebc:	ee08 0a10 	vmov	s16, r0
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f001 f908 	bl	800b0d8 <__i2b>
 8009ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	4606      	mov	r6, r0
 8009ece:	f340 8088 	ble.w	8009fe2 <_dtoa_r+0x8c2>
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	4601      	mov	r1, r0
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f001 f9be 	bl	800b258 <__pow5mult>
 8009edc:	9b06      	ldr	r3, [sp, #24]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	4606      	mov	r6, r0
 8009ee2:	f340 8081 	ble.w	8009fe8 <_dtoa_r+0x8c8>
 8009ee6:	f04f 0800 	mov.w	r8, #0
 8009eea:	6933      	ldr	r3, [r6, #16]
 8009eec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ef0:	6918      	ldr	r0, [r3, #16]
 8009ef2:	f001 f8a1 	bl	800b038 <__hi0bits>
 8009ef6:	f1c0 0020 	rsb	r0, r0, #32
 8009efa:	9b05      	ldr	r3, [sp, #20]
 8009efc:	4418      	add	r0, r3
 8009efe:	f010 001f 	ands.w	r0, r0, #31
 8009f02:	f000 8092 	beq.w	800a02a <_dtoa_r+0x90a>
 8009f06:	f1c0 0320 	rsb	r3, r0, #32
 8009f0a:	2b04      	cmp	r3, #4
 8009f0c:	f340 808a 	ble.w	800a024 <_dtoa_r+0x904>
 8009f10:	f1c0 001c 	rsb	r0, r0, #28
 8009f14:	9b04      	ldr	r3, [sp, #16]
 8009f16:	4403      	add	r3, r0
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	9b05      	ldr	r3, [sp, #20]
 8009f1c:	4403      	add	r3, r0
 8009f1e:	4405      	add	r5, r0
 8009f20:	9305      	str	r3, [sp, #20]
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dd07      	ble.n	8009f38 <_dtoa_r+0x818>
 8009f28:	ee18 1a10 	vmov	r1, s16
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f001 f9ec 	bl	800b30c <__lshift>
 8009f34:	ee08 0a10 	vmov	s16, r0
 8009f38:	9b05      	ldr	r3, [sp, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dd05      	ble.n	8009f4a <_dtoa_r+0x82a>
 8009f3e:	4631      	mov	r1, r6
 8009f40:	461a      	mov	r2, r3
 8009f42:	4620      	mov	r0, r4
 8009f44:	f001 f9e2 	bl	800b30c <__lshift>
 8009f48:	4606      	mov	r6, r0
 8009f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d06e      	beq.n	800a02e <_dtoa_r+0x90e>
 8009f50:	ee18 0a10 	vmov	r0, s16
 8009f54:	4631      	mov	r1, r6
 8009f56:	f001 fa49 	bl	800b3ec <__mcmp>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	da67      	bge.n	800a02e <_dtoa_r+0x90e>
 8009f5e:	9b00      	ldr	r3, [sp, #0]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	ee18 1a10 	vmov	r1, s16
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	220a      	movs	r2, #10
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f000 ffd3 	bl	800af18 <__multadd>
 8009f72:	9b08      	ldr	r3, [sp, #32]
 8009f74:	ee08 0a10 	vmov	s16, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f000 81b1 	beq.w	800a2e0 <_dtoa_r+0xbc0>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	4639      	mov	r1, r7
 8009f82:	220a      	movs	r2, #10
 8009f84:	4620      	mov	r0, r4
 8009f86:	f000 ffc7 	bl	800af18 <__multadd>
 8009f8a:	9b02      	ldr	r3, [sp, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	4607      	mov	r7, r0
 8009f90:	f300 808e 	bgt.w	800a0b0 <_dtoa_r+0x990>
 8009f94:	9b06      	ldr	r3, [sp, #24]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	dc51      	bgt.n	800a03e <_dtoa_r+0x91e>
 8009f9a:	e089      	b.n	800a0b0 <_dtoa_r+0x990>
 8009f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009fa2:	e74b      	b.n	8009e3c <_dtoa_r+0x71c>
 8009fa4:	9b03      	ldr	r3, [sp, #12]
 8009fa6:	1e5e      	subs	r6, r3, #1
 8009fa8:	9b07      	ldr	r3, [sp, #28]
 8009faa:	42b3      	cmp	r3, r6
 8009fac:	bfbf      	itttt	lt
 8009fae:	9b07      	ldrlt	r3, [sp, #28]
 8009fb0:	9607      	strlt	r6, [sp, #28]
 8009fb2:	1af2      	sublt	r2, r6, r3
 8009fb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009fb6:	bfb6      	itet	lt
 8009fb8:	189b      	addlt	r3, r3, r2
 8009fba:	1b9e      	subge	r6, r3, r6
 8009fbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	bfb8      	it	lt
 8009fc2:	2600      	movlt	r6, #0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	bfb7      	itett	lt
 8009fc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009fcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009fd0:	1a9d      	sublt	r5, r3, r2
 8009fd2:	2300      	movlt	r3, #0
 8009fd4:	e734      	b.n	8009e40 <_dtoa_r+0x720>
 8009fd6:	9e07      	ldr	r6, [sp, #28]
 8009fd8:	9d04      	ldr	r5, [sp, #16]
 8009fda:	9f08      	ldr	r7, [sp, #32]
 8009fdc:	e73b      	b.n	8009e56 <_dtoa_r+0x736>
 8009fde:	9a07      	ldr	r2, [sp, #28]
 8009fe0:	e767      	b.n	8009eb2 <_dtoa_r+0x792>
 8009fe2:	9b06      	ldr	r3, [sp, #24]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	dc18      	bgt.n	800a01a <_dtoa_r+0x8fa>
 8009fe8:	f1ba 0f00 	cmp.w	sl, #0
 8009fec:	d115      	bne.n	800a01a <_dtoa_r+0x8fa>
 8009fee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ff2:	b993      	cbnz	r3, 800a01a <_dtoa_r+0x8fa>
 8009ff4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ff8:	0d1b      	lsrs	r3, r3, #20
 8009ffa:	051b      	lsls	r3, r3, #20
 8009ffc:	b183      	cbz	r3, 800a020 <_dtoa_r+0x900>
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	3301      	adds	r3, #1
 800a002:	9304      	str	r3, [sp, #16]
 800a004:	9b05      	ldr	r3, [sp, #20]
 800a006:	3301      	adds	r3, #1
 800a008:	9305      	str	r3, [sp, #20]
 800a00a:	f04f 0801 	mov.w	r8, #1
 800a00e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a010:	2b00      	cmp	r3, #0
 800a012:	f47f af6a 	bne.w	8009eea <_dtoa_r+0x7ca>
 800a016:	2001      	movs	r0, #1
 800a018:	e76f      	b.n	8009efa <_dtoa_r+0x7da>
 800a01a:	f04f 0800 	mov.w	r8, #0
 800a01e:	e7f6      	b.n	800a00e <_dtoa_r+0x8ee>
 800a020:	4698      	mov	r8, r3
 800a022:	e7f4      	b.n	800a00e <_dtoa_r+0x8ee>
 800a024:	f43f af7d 	beq.w	8009f22 <_dtoa_r+0x802>
 800a028:	4618      	mov	r0, r3
 800a02a:	301c      	adds	r0, #28
 800a02c:	e772      	b.n	8009f14 <_dtoa_r+0x7f4>
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	dc37      	bgt.n	800a0a4 <_dtoa_r+0x984>
 800a034:	9b06      	ldr	r3, [sp, #24]
 800a036:	2b02      	cmp	r3, #2
 800a038:	dd34      	ble.n	800a0a4 <_dtoa_r+0x984>
 800a03a:	9b03      	ldr	r3, [sp, #12]
 800a03c:	9302      	str	r3, [sp, #8]
 800a03e:	9b02      	ldr	r3, [sp, #8]
 800a040:	b96b      	cbnz	r3, 800a05e <_dtoa_r+0x93e>
 800a042:	4631      	mov	r1, r6
 800a044:	2205      	movs	r2, #5
 800a046:	4620      	mov	r0, r4
 800a048:	f000 ff66 	bl	800af18 <__multadd>
 800a04c:	4601      	mov	r1, r0
 800a04e:	4606      	mov	r6, r0
 800a050:	ee18 0a10 	vmov	r0, s16
 800a054:	f001 f9ca 	bl	800b3ec <__mcmp>
 800a058:	2800      	cmp	r0, #0
 800a05a:	f73f adbb 	bgt.w	8009bd4 <_dtoa_r+0x4b4>
 800a05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a060:	9d01      	ldr	r5, [sp, #4]
 800a062:	43db      	mvns	r3, r3
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	f04f 0800 	mov.w	r8, #0
 800a06a:	4631      	mov	r1, r6
 800a06c:	4620      	mov	r0, r4
 800a06e:	f000 ff31 	bl	800aed4 <_Bfree>
 800a072:	2f00      	cmp	r7, #0
 800a074:	f43f aea4 	beq.w	8009dc0 <_dtoa_r+0x6a0>
 800a078:	f1b8 0f00 	cmp.w	r8, #0
 800a07c:	d005      	beq.n	800a08a <_dtoa_r+0x96a>
 800a07e:	45b8      	cmp	r8, r7
 800a080:	d003      	beq.n	800a08a <_dtoa_r+0x96a>
 800a082:	4641      	mov	r1, r8
 800a084:	4620      	mov	r0, r4
 800a086:	f000 ff25 	bl	800aed4 <_Bfree>
 800a08a:	4639      	mov	r1, r7
 800a08c:	4620      	mov	r0, r4
 800a08e:	f000 ff21 	bl	800aed4 <_Bfree>
 800a092:	e695      	b.n	8009dc0 <_dtoa_r+0x6a0>
 800a094:	2600      	movs	r6, #0
 800a096:	4637      	mov	r7, r6
 800a098:	e7e1      	b.n	800a05e <_dtoa_r+0x93e>
 800a09a:	9700      	str	r7, [sp, #0]
 800a09c:	4637      	mov	r7, r6
 800a09e:	e599      	b.n	8009bd4 <_dtoa_r+0x4b4>
 800a0a0:	40240000 	.word	0x40240000
 800a0a4:	9b08      	ldr	r3, [sp, #32]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 80ca 	beq.w	800a240 <_dtoa_r+0xb20>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	9302      	str	r3, [sp, #8]
 800a0b0:	2d00      	cmp	r5, #0
 800a0b2:	dd05      	ble.n	800a0c0 <_dtoa_r+0x9a0>
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f001 f927 	bl	800b30c <__lshift>
 800a0be:	4607      	mov	r7, r0
 800a0c0:	f1b8 0f00 	cmp.w	r8, #0
 800a0c4:	d05b      	beq.n	800a17e <_dtoa_r+0xa5e>
 800a0c6:	6879      	ldr	r1, [r7, #4]
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 fec3 	bl	800ae54 <_Balloc>
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	b928      	cbnz	r0, 800a0de <_dtoa_r+0x9be>
 800a0d2:	4b87      	ldr	r3, [pc, #540]	; (800a2f0 <_dtoa_r+0xbd0>)
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a0da:	f7ff bb3b 	b.w	8009754 <_dtoa_r+0x34>
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	3202      	adds	r2, #2
 800a0e2:	0092      	lsls	r2, r2, #2
 800a0e4:	f107 010c 	add.w	r1, r7, #12
 800a0e8:	300c      	adds	r0, #12
 800a0ea:	f7fd fbdb 	bl	80078a4 <memcpy>
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f001 f90a 	bl	800b30c <__lshift>
 800a0f8:	9b01      	ldr	r3, [sp, #4]
 800a0fa:	f103 0901 	add.w	r9, r3, #1
 800a0fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a102:	4413      	add	r3, r2
 800a104:	9305      	str	r3, [sp, #20]
 800a106:	f00a 0301 	and.w	r3, sl, #1
 800a10a:	46b8      	mov	r8, r7
 800a10c:	9304      	str	r3, [sp, #16]
 800a10e:	4607      	mov	r7, r0
 800a110:	4631      	mov	r1, r6
 800a112:	ee18 0a10 	vmov	r0, s16
 800a116:	f7ff fa77 	bl	8009608 <quorem>
 800a11a:	4641      	mov	r1, r8
 800a11c:	9002      	str	r0, [sp, #8]
 800a11e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a122:	ee18 0a10 	vmov	r0, s16
 800a126:	f001 f961 	bl	800b3ec <__mcmp>
 800a12a:	463a      	mov	r2, r7
 800a12c:	9003      	str	r0, [sp, #12]
 800a12e:	4631      	mov	r1, r6
 800a130:	4620      	mov	r0, r4
 800a132:	f001 f977 	bl	800b424 <__mdiff>
 800a136:	68c2      	ldr	r2, [r0, #12]
 800a138:	f109 3bff 	add.w	fp, r9, #4294967295
 800a13c:	4605      	mov	r5, r0
 800a13e:	bb02      	cbnz	r2, 800a182 <_dtoa_r+0xa62>
 800a140:	4601      	mov	r1, r0
 800a142:	ee18 0a10 	vmov	r0, s16
 800a146:	f001 f951 	bl	800b3ec <__mcmp>
 800a14a:	4602      	mov	r2, r0
 800a14c:	4629      	mov	r1, r5
 800a14e:	4620      	mov	r0, r4
 800a150:	9207      	str	r2, [sp, #28]
 800a152:	f000 febf 	bl	800aed4 <_Bfree>
 800a156:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a15a:	ea43 0102 	orr.w	r1, r3, r2
 800a15e:	9b04      	ldr	r3, [sp, #16]
 800a160:	430b      	orrs	r3, r1
 800a162:	464d      	mov	r5, r9
 800a164:	d10f      	bne.n	800a186 <_dtoa_r+0xa66>
 800a166:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a16a:	d02a      	beq.n	800a1c2 <_dtoa_r+0xaa2>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	dd02      	ble.n	800a178 <_dtoa_r+0xa58>
 800a172:	9b02      	ldr	r3, [sp, #8]
 800a174:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a178:	f88b a000 	strb.w	sl, [fp]
 800a17c:	e775      	b.n	800a06a <_dtoa_r+0x94a>
 800a17e:	4638      	mov	r0, r7
 800a180:	e7ba      	b.n	800a0f8 <_dtoa_r+0x9d8>
 800a182:	2201      	movs	r2, #1
 800a184:	e7e2      	b.n	800a14c <_dtoa_r+0xa2c>
 800a186:	9b03      	ldr	r3, [sp, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	db04      	blt.n	800a196 <_dtoa_r+0xa76>
 800a18c:	9906      	ldr	r1, [sp, #24]
 800a18e:	430b      	orrs	r3, r1
 800a190:	9904      	ldr	r1, [sp, #16]
 800a192:	430b      	orrs	r3, r1
 800a194:	d122      	bne.n	800a1dc <_dtoa_r+0xabc>
 800a196:	2a00      	cmp	r2, #0
 800a198:	ddee      	ble.n	800a178 <_dtoa_r+0xa58>
 800a19a:	ee18 1a10 	vmov	r1, s16
 800a19e:	2201      	movs	r2, #1
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f001 f8b3 	bl	800b30c <__lshift>
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	ee08 0a10 	vmov	s16, r0
 800a1ac:	f001 f91e 	bl	800b3ec <__mcmp>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	dc03      	bgt.n	800a1bc <_dtoa_r+0xa9c>
 800a1b4:	d1e0      	bne.n	800a178 <_dtoa_r+0xa58>
 800a1b6:	f01a 0f01 	tst.w	sl, #1
 800a1ba:	d0dd      	beq.n	800a178 <_dtoa_r+0xa58>
 800a1bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1c0:	d1d7      	bne.n	800a172 <_dtoa_r+0xa52>
 800a1c2:	2339      	movs	r3, #57	; 0x39
 800a1c4:	f88b 3000 	strb.w	r3, [fp]
 800a1c8:	462b      	mov	r3, r5
 800a1ca:	461d      	mov	r5, r3
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1d2:	2a39      	cmp	r2, #57	; 0x39
 800a1d4:	d071      	beq.n	800a2ba <_dtoa_r+0xb9a>
 800a1d6:	3201      	adds	r2, #1
 800a1d8:	701a      	strb	r2, [r3, #0]
 800a1da:	e746      	b.n	800a06a <_dtoa_r+0x94a>
 800a1dc:	2a00      	cmp	r2, #0
 800a1de:	dd07      	ble.n	800a1f0 <_dtoa_r+0xad0>
 800a1e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1e4:	d0ed      	beq.n	800a1c2 <_dtoa_r+0xaa2>
 800a1e6:	f10a 0301 	add.w	r3, sl, #1
 800a1ea:	f88b 3000 	strb.w	r3, [fp]
 800a1ee:	e73c      	b.n	800a06a <_dtoa_r+0x94a>
 800a1f0:	9b05      	ldr	r3, [sp, #20]
 800a1f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a1f6:	4599      	cmp	r9, r3
 800a1f8:	d047      	beq.n	800a28a <_dtoa_r+0xb6a>
 800a1fa:	ee18 1a10 	vmov	r1, s16
 800a1fe:	2300      	movs	r3, #0
 800a200:	220a      	movs	r2, #10
 800a202:	4620      	mov	r0, r4
 800a204:	f000 fe88 	bl	800af18 <__multadd>
 800a208:	45b8      	cmp	r8, r7
 800a20a:	ee08 0a10 	vmov	s16, r0
 800a20e:	f04f 0300 	mov.w	r3, #0
 800a212:	f04f 020a 	mov.w	r2, #10
 800a216:	4641      	mov	r1, r8
 800a218:	4620      	mov	r0, r4
 800a21a:	d106      	bne.n	800a22a <_dtoa_r+0xb0a>
 800a21c:	f000 fe7c 	bl	800af18 <__multadd>
 800a220:	4680      	mov	r8, r0
 800a222:	4607      	mov	r7, r0
 800a224:	f109 0901 	add.w	r9, r9, #1
 800a228:	e772      	b.n	800a110 <_dtoa_r+0x9f0>
 800a22a:	f000 fe75 	bl	800af18 <__multadd>
 800a22e:	4639      	mov	r1, r7
 800a230:	4680      	mov	r8, r0
 800a232:	2300      	movs	r3, #0
 800a234:	220a      	movs	r2, #10
 800a236:	4620      	mov	r0, r4
 800a238:	f000 fe6e 	bl	800af18 <__multadd>
 800a23c:	4607      	mov	r7, r0
 800a23e:	e7f1      	b.n	800a224 <_dtoa_r+0xb04>
 800a240:	9b03      	ldr	r3, [sp, #12]
 800a242:	9302      	str	r3, [sp, #8]
 800a244:	9d01      	ldr	r5, [sp, #4]
 800a246:	ee18 0a10 	vmov	r0, s16
 800a24a:	4631      	mov	r1, r6
 800a24c:	f7ff f9dc 	bl	8009608 <quorem>
 800a250:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a254:	9b01      	ldr	r3, [sp, #4]
 800a256:	f805 ab01 	strb.w	sl, [r5], #1
 800a25a:	1aea      	subs	r2, r5, r3
 800a25c:	9b02      	ldr	r3, [sp, #8]
 800a25e:	4293      	cmp	r3, r2
 800a260:	dd09      	ble.n	800a276 <_dtoa_r+0xb56>
 800a262:	ee18 1a10 	vmov	r1, s16
 800a266:	2300      	movs	r3, #0
 800a268:	220a      	movs	r2, #10
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 fe54 	bl	800af18 <__multadd>
 800a270:	ee08 0a10 	vmov	s16, r0
 800a274:	e7e7      	b.n	800a246 <_dtoa_r+0xb26>
 800a276:	9b02      	ldr	r3, [sp, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	bfc8      	it	gt
 800a27c:	461d      	movgt	r5, r3
 800a27e:	9b01      	ldr	r3, [sp, #4]
 800a280:	bfd8      	it	le
 800a282:	2501      	movle	r5, #1
 800a284:	441d      	add	r5, r3
 800a286:	f04f 0800 	mov.w	r8, #0
 800a28a:	ee18 1a10 	vmov	r1, s16
 800a28e:	2201      	movs	r2, #1
 800a290:	4620      	mov	r0, r4
 800a292:	f001 f83b 	bl	800b30c <__lshift>
 800a296:	4631      	mov	r1, r6
 800a298:	ee08 0a10 	vmov	s16, r0
 800a29c:	f001 f8a6 	bl	800b3ec <__mcmp>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	dc91      	bgt.n	800a1c8 <_dtoa_r+0xaa8>
 800a2a4:	d102      	bne.n	800a2ac <_dtoa_r+0xb8c>
 800a2a6:	f01a 0f01 	tst.w	sl, #1
 800a2aa:	d18d      	bne.n	800a1c8 <_dtoa_r+0xaa8>
 800a2ac:	462b      	mov	r3, r5
 800a2ae:	461d      	mov	r5, r3
 800a2b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2b4:	2a30      	cmp	r2, #48	; 0x30
 800a2b6:	d0fa      	beq.n	800a2ae <_dtoa_r+0xb8e>
 800a2b8:	e6d7      	b.n	800a06a <_dtoa_r+0x94a>
 800a2ba:	9a01      	ldr	r2, [sp, #4]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d184      	bne.n	800a1ca <_dtoa_r+0xaaa>
 800a2c0:	9b00      	ldr	r3, [sp, #0]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	2331      	movs	r3, #49	; 0x31
 800a2c8:	7013      	strb	r3, [r2, #0]
 800a2ca:	e6ce      	b.n	800a06a <_dtoa_r+0x94a>
 800a2cc:	4b09      	ldr	r3, [pc, #36]	; (800a2f4 <_dtoa_r+0xbd4>)
 800a2ce:	f7ff ba95 	b.w	80097fc <_dtoa_r+0xdc>
 800a2d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f47f aa6e 	bne.w	80097b6 <_dtoa_r+0x96>
 800a2da:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <_dtoa_r+0xbd8>)
 800a2dc:	f7ff ba8e 	b.w	80097fc <_dtoa_r+0xdc>
 800a2e0:	9b02      	ldr	r3, [sp, #8]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	dcae      	bgt.n	800a244 <_dtoa_r+0xb24>
 800a2e6:	9b06      	ldr	r3, [sp, #24]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	f73f aea8 	bgt.w	800a03e <_dtoa_r+0x91e>
 800a2ee:	e7a9      	b.n	800a244 <_dtoa_r+0xb24>
 800a2f0:	0800c740 	.word	0x0800c740
 800a2f4:	0800c544 	.word	0x0800c544
 800a2f8:	0800c6c1 	.word	0x0800c6c1

0800a2fc <__sflush_r>:
 800a2fc:	898a      	ldrh	r2, [r1, #12]
 800a2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a302:	4605      	mov	r5, r0
 800a304:	0710      	lsls	r0, r2, #28
 800a306:	460c      	mov	r4, r1
 800a308:	d458      	bmi.n	800a3bc <__sflush_r+0xc0>
 800a30a:	684b      	ldr	r3, [r1, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	dc05      	bgt.n	800a31c <__sflush_r+0x20>
 800a310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a312:	2b00      	cmp	r3, #0
 800a314:	dc02      	bgt.n	800a31c <__sflush_r+0x20>
 800a316:	2000      	movs	r0, #0
 800a318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a31c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a31e:	2e00      	cmp	r6, #0
 800a320:	d0f9      	beq.n	800a316 <__sflush_r+0x1a>
 800a322:	2300      	movs	r3, #0
 800a324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a328:	682f      	ldr	r7, [r5, #0]
 800a32a:	602b      	str	r3, [r5, #0]
 800a32c:	d032      	beq.n	800a394 <__sflush_r+0x98>
 800a32e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	075a      	lsls	r2, r3, #29
 800a334:	d505      	bpl.n	800a342 <__sflush_r+0x46>
 800a336:	6863      	ldr	r3, [r4, #4]
 800a338:	1ac0      	subs	r0, r0, r3
 800a33a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a33c:	b10b      	cbz	r3, 800a342 <__sflush_r+0x46>
 800a33e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a340:	1ac0      	subs	r0, r0, r3
 800a342:	2300      	movs	r3, #0
 800a344:	4602      	mov	r2, r0
 800a346:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a348:	6a21      	ldr	r1, [r4, #32]
 800a34a:	4628      	mov	r0, r5
 800a34c:	47b0      	blx	r6
 800a34e:	1c43      	adds	r3, r0, #1
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	d106      	bne.n	800a362 <__sflush_r+0x66>
 800a354:	6829      	ldr	r1, [r5, #0]
 800a356:	291d      	cmp	r1, #29
 800a358:	d82c      	bhi.n	800a3b4 <__sflush_r+0xb8>
 800a35a:	4a2a      	ldr	r2, [pc, #168]	; (800a404 <__sflush_r+0x108>)
 800a35c:	40ca      	lsrs	r2, r1
 800a35e:	07d6      	lsls	r6, r2, #31
 800a360:	d528      	bpl.n	800a3b4 <__sflush_r+0xb8>
 800a362:	2200      	movs	r2, #0
 800a364:	6062      	str	r2, [r4, #4]
 800a366:	04d9      	lsls	r1, r3, #19
 800a368:	6922      	ldr	r2, [r4, #16]
 800a36a:	6022      	str	r2, [r4, #0]
 800a36c:	d504      	bpl.n	800a378 <__sflush_r+0x7c>
 800a36e:	1c42      	adds	r2, r0, #1
 800a370:	d101      	bne.n	800a376 <__sflush_r+0x7a>
 800a372:	682b      	ldr	r3, [r5, #0]
 800a374:	b903      	cbnz	r3, 800a378 <__sflush_r+0x7c>
 800a376:	6560      	str	r0, [r4, #84]	; 0x54
 800a378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a37a:	602f      	str	r7, [r5, #0]
 800a37c:	2900      	cmp	r1, #0
 800a37e:	d0ca      	beq.n	800a316 <__sflush_r+0x1a>
 800a380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a384:	4299      	cmp	r1, r3
 800a386:	d002      	beq.n	800a38e <__sflush_r+0x92>
 800a388:	4628      	mov	r0, r5
 800a38a:	f001 fa3b 	bl	800b804 <_free_r>
 800a38e:	2000      	movs	r0, #0
 800a390:	6360      	str	r0, [r4, #52]	; 0x34
 800a392:	e7c1      	b.n	800a318 <__sflush_r+0x1c>
 800a394:	6a21      	ldr	r1, [r4, #32]
 800a396:	2301      	movs	r3, #1
 800a398:	4628      	mov	r0, r5
 800a39a:	47b0      	blx	r6
 800a39c:	1c41      	adds	r1, r0, #1
 800a39e:	d1c7      	bne.n	800a330 <__sflush_r+0x34>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d0c4      	beq.n	800a330 <__sflush_r+0x34>
 800a3a6:	2b1d      	cmp	r3, #29
 800a3a8:	d001      	beq.n	800a3ae <__sflush_r+0xb2>
 800a3aa:	2b16      	cmp	r3, #22
 800a3ac:	d101      	bne.n	800a3b2 <__sflush_r+0xb6>
 800a3ae:	602f      	str	r7, [r5, #0]
 800a3b0:	e7b1      	b.n	800a316 <__sflush_r+0x1a>
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b8:	81a3      	strh	r3, [r4, #12]
 800a3ba:	e7ad      	b.n	800a318 <__sflush_r+0x1c>
 800a3bc:	690f      	ldr	r7, [r1, #16]
 800a3be:	2f00      	cmp	r7, #0
 800a3c0:	d0a9      	beq.n	800a316 <__sflush_r+0x1a>
 800a3c2:	0793      	lsls	r3, r2, #30
 800a3c4:	680e      	ldr	r6, [r1, #0]
 800a3c6:	bf08      	it	eq
 800a3c8:	694b      	ldreq	r3, [r1, #20]
 800a3ca:	600f      	str	r7, [r1, #0]
 800a3cc:	bf18      	it	ne
 800a3ce:	2300      	movne	r3, #0
 800a3d0:	eba6 0807 	sub.w	r8, r6, r7
 800a3d4:	608b      	str	r3, [r1, #8]
 800a3d6:	f1b8 0f00 	cmp.w	r8, #0
 800a3da:	dd9c      	ble.n	800a316 <__sflush_r+0x1a>
 800a3dc:	6a21      	ldr	r1, [r4, #32]
 800a3de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3e0:	4643      	mov	r3, r8
 800a3e2:	463a      	mov	r2, r7
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	47b0      	blx	r6
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	dc06      	bgt.n	800a3fa <__sflush_r+0xfe>
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3f2:	81a3      	strh	r3, [r4, #12]
 800a3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f8:	e78e      	b.n	800a318 <__sflush_r+0x1c>
 800a3fa:	4407      	add	r7, r0
 800a3fc:	eba8 0800 	sub.w	r8, r8, r0
 800a400:	e7e9      	b.n	800a3d6 <__sflush_r+0xda>
 800a402:	bf00      	nop
 800a404:	20400001 	.word	0x20400001

0800a408 <_fflush_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	690b      	ldr	r3, [r1, #16]
 800a40c:	4605      	mov	r5, r0
 800a40e:	460c      	mov	r4, r1
 800a410:	b913      	cbnz	r3, 800a418 <_fflush_r+0x10>
 800a412:	2500      	movs	r5, #0
 800a414:	4628      	mov	r0, r5
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	b118      	cbz	r0, 800a422 <_fflush_r+0x1a>
 800a41a:	6983      	ldr	r3, [r0, #24]
 800a41c:	b90b      	cbnz	r3, 800a422 <_fflush_r+0x1a>
 800a41e:	f000 f887 	bl	800a530 <__sinit>
 800a422:	4b14      	ldr	r3, [pc, #80]	; (800a474 <_fflush_r+0x6c>)
 800a424:	429c      	cmp	r4, r3
 800a426:	d11b      	bne.n	800a460 <_fflush_r+0x58>
 800a428:	686c      	ldr	r4, [r5, #4]
 800a42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0ef      	beq.n	800a412 <_fflush_r+0xa>
 800a432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a434:	07d0      	lsls	r0, r2, #31
 800a436:	d404      	bmi.n	800a442 <_fflush_r+0x3a>
 800a438:	0599      	lsls	r1, r3, #22
 800a43a:	d402      	bmi.n	800a442 <_fflush_r+0x3a>
 800a43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a43e:	f000 fc88 	bl	800ad52 <__retarget_lock_acquire_recursive>
 800a442:	4628      	mov	r0, r5
 800a444:	4621      	mov	r1, r4
 800a446:	f7ff ff59 	bl	800a2fc <__sflush_r>
 800a44a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a44c:	07da      	lsls	r2, r3, #31
 800a44e:	4605      	mov	r5, r0
 800a450:	d4e0      	bmi.n	800a414 <_fflush_r+0xc>
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	059b      	lsls	r3, r3, #22
 800a456:	d4dd      	bmi.n	800a414 <_fflush_r+0xc>
 800a458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45a:	f000 fc7b 	bl	800ad54 <__retarget_lock_release_recursive>
 800a45e:	e7d9      	b.n	800a414 <_fflush_r+0xc>
 800a460:	4b05      	ldr	r3, [pc, #20]	; (800a478 <_fflush_r+0x70>)
 800a462:	429c      	cmp	r4, r3
 800a464:	d101      	bne.n	800a46a <_fflush_r+0x62>
 800a466:	68ac      	ldr	r4, [r5, #8]
 800a468:	e7df      	b.n	800a42a <_fflush_r+0x22>
 800a46a:	4b04      	ldr	r3, [pc, #16]	; (800a47c <_fflush_r+0x74>)
 800a46c:	429c      	cmp	r4, r3
 800a46e:	bf08      	it	eq
 800a470:	68ec      	ldreq	r4, [r5, #12]
 800a472:	e7da      	b.n	800a42a <_fflush_r+0x22>
 800a474:	0800c774 	.word	0x0800c774
 800a478:	0800c794 	.word	0x0800c794
 800a47c:	0800c754 	.word	0x0800c754

0800a480 <std>:
 800a480:	2300      	movs	r3, #0
 800a482:	b510      	push	{r4, lr}
 800a484:	4604      	mov	r4, r0
 800a486:	e9c0 3300 	strd	r3, r3, [r0]
 800a48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a48e:	6083      	str	r3, [r0, #8]
 800a490:	8181      	strh	r1, [r0, #12]
 800a492:	6643      	str	r3, [r0, #100]	; 0x64
 800a494:	81c2      	strh	r2, [r0, #14]
 800a496:	6183      	str	r3, [r0, #24]
 800a498:	4619      	mov	r1, r3
 800a49a:	2208      	movs	r2, #8
 800a49c:	305c      	adds	r0, #92	; 0x5c
 800a49e:	f7fd fa0f 	bl	80078c0 <memset>
 800a4a2:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <std+0x38>)
 800a4a4:	6263      	str	r3, [r4, #36]	; 0x24
 800a4a6:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <std+0x3c>)
 800a4a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4aa:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <std+0x40>)
 800a4ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4ae:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <std+0x44>)
 800a4b0:	6224      	str	r4, [r4, #32]
 800a4b2:	6323      	str	r3, [r4, #48]	; 0x30
 800a4b4:	bd10      	pop	{r4, pc}
 800a4b6:	bf00      	nop
 800a4b8:	0800bf61 	.word	0x0800bf61
 800a4bc:	0800bf83 	.word	0x0800bf83
 800a4c0:	0800bfbb 	.word	0x0800bfbb
 800a4c4:	0800bfdf 	.word	0x0800bfdf

0800a4c8 <_cleanup_r>:
 800a4c8:	4901      	ldr	r1, [pc, #4]	; (800a4d0 <_cleanup_r+0x8>)
 800a4ca:	f000 b8af 	b.w	800a62c <_fwalk_reent>
 800a4ce:	bf00      	nop
 800a4d0:	0800a409 	.word	0x0800a409

0800a4d4 <__sfmoreglue>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	2268      	movs	r2, #104	; 0x68
 800a4d8:	1e4d      	subs	r5, r1, #1
 800a4da:	4355      	muls	r5, r2
 800a4dc:	460e      	mov	r6, r1
 800a4de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4e2:	f001 f9fb 	bl	800b8dc <_malloc_r>
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	b140      	cbz	r0, 800a4fc <__sfmoreglue+0x28>
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	e9c0 1600 	strd	r1, r6, [r0]
 800a4f0:	300c      	adds	r0, #12
 800a4f2:	60a0      	str	r0, [r4, #8]
 800a4f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4f8:	f7fd f9e2 	bl	80078c0 <memset>
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}

0800a500 <__sfp_lock_acquire>:
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <__sfp_lock_acquire+0x8>)
 800a502:	f000 bc26 	b.w	800ad52 <__retarget_lock_acquire_recursive>
 800a506:	bf00      	nop
 800a508:	200004d5 	.word	0x200004d5

0800a50c <__sfp_lock_release>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__sfp_lock_release+0x8>)
 800a50e:	f000 bc21 	b.w	800ad54 <__retarget_lock_release_recursive>
 800a512:	bf00      	nop
 800a514:	200004d5 	.word	0x200004d5

0800a518 <__sinit_lock_acquire>:
 800a518:	4801      	ldr	r0, [pc, #4]	; (800a520 <__sinit_lock_acquire+0x8>)
 800a51a:	f000 bc1a 	b.w	800ad52 <__retarget_lock_acquire_recursive>
 800a51e:	bf00      	nop
 800a520:	200004d6 	.word	0x200004d6

0800a524 <__sinit_lock_release>:
 800a524:	4801      	ldr	r0, [pc, #4]	; (800a52c <__sinit_lock_release+0x8>)
 800a526:	f000 bc15 	b.w	800ad54 <__retarget_lock_release_recursive>
 800a52a:	bf00      	nop
 800a52c:	200004d6 	.word	0x200004d6

0800a530 <__sinit>:
 800a530:	b510      	push	{r4, lr}
 800a532:	4604      	mov	r4, r0
 800a534:	f7ff fff0 	bl	800a518 <__sinit_lock_acquire>
 800a538:	69a3      	ldr	r3, [r4, #24]
 800a53a:	b11b      	cbz	r3, 800a544 <__sinit+0x14>
 800a53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a540:	f7ff bff0 	b.w	800a524 <__sinit_lock_release>
 800a544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a548:	6523      	str	r3, [r4, #80]	; 0x50
 800a54a:	4b13      	ldr	r3, [pc, #76]	; (800a598 <__sinit+0x68>)
 800a54c:	4a13      	ldr	r2, [pc, #76]	; (800a59c <__sinit+0x6c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	62a2      	str	r2, [r4, #40]	; 0x28
 800a552:	42a3      	cmp	r3, r4
 800a554:	bf04      	itt	eq
 800a556:	2301      	moveq	r3, #1
 800a558:	61a3      	streq	r3, [r4, #24]
 800a55a:	4620      	mov	r0, r4
 800a55c:	f000 f820 	bl	800a5a0 <__sfp>
 800a560:	6060      	str	r0, [r4, #4]
 800a562:	4620      	mov	r0, r4
 800a564:	f000 f81c 	bl	800a5a0 <__sfp>
 800a568:	60a0      	str	r0, [r4, #8]
 800a56a:	4620      	mov	r0, r4
 800a56c:	f000 f818 	bl	800a5a0 <__sfp>
 800a570:	2200      	movs	r2, #0
 800a572:	60e0      	str	r0, [r4, #12]
 800a574:	2104      	movs	r1, #4
 800a576:	6860      	ldr	r0, [r4, #4]
 800a578:	f7ff ff82 	bl	800a480 <std>
 800a57c:	68a0      	ldr	r0, [r4, #8]
 800a57e:	2201      	movs	r2, #1
 800a580:	2109      	movs	r1, #9
 800a582:	f7ff ff7d 	bl	800a480 <std>
 800a586:	68e0      	ldr	r0, [r4, #12]
 800a588:	2202      	movs	r2, #2
 800a58a:	2112      	movs	r1, #18
 800a58c:	f7ff ff78 	bl	800a480 <std>
 800a590:	2301      	movs	r3, #1
 800a592:	61a3      	str	r3, [r4, #24]
 800a594:	e7d2      	b.n	800a53c <__sinit+0xc>
 800a596:	bf00      	nop
 800a598:	0800c530 	.word	0x0800c530
 800a59c:	0800a4c9 	.word	0x0800a4c9

0800a5a0 <__sfp>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	4607      	mov	r7, r0
 800a5a4:	f7ff ffac 	bl	800a500 <__sfp_lock_acquire>
 800a5a8:	4b1e      	ldr	r3, [pc, #120]	; (800a624 <__sfp+0x84>)
 800a5aa:	681e      	ldr	r6, [r3, #0]
 800a5ac:	69b3      	ldr	r3, [r6, #24]
 800a5ae:	b913      	cbnz	r3, 800a5b6 <__sfp+0x16>
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff ffbd 	bl	800a530 <__sinit>
 800a5b6:	3648      	adds	r6, #72	; 0x48
 800a5b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	d503      	bpl.n	800a5c8 <__sfp+0x28>
 800a5c0:	6833      	ldr	r3, [r6, #0]
 800a5c2:	b30b      	cbz	r3, 800a608 <__sfp+0x68>
 800a5c4:	6836      	ldr	r6, [r6, #0]
 800a5c6:	e7f7      	b.n	800a5b8 <__sfp+0x18>
 800a5c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5cc:	b9d5      	cbnz	r5, 800a604 <__sfp+0x64>
 800a5ce:	4b16      	ldr	r3, [pc, #88]	; (800a628 <__sfp+0x88>)
 800a5d0:	60e3      	str	r3, [r4, #12]
 800a5d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5d6:	6665      	str	r5, [r4, #100]	; 0x64
 800a5d8:	f000 fbba 	bl	800ad50 <__retarget_lock_init_recursive>
 800a5dc:	f7ff ff96 	bl	800a50c <__sfp_lock_release>
 800a5e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5e8:	6025      	str	r5, [r4, #0]
 800a5ea:	61a5      	str	r5, [r4, #24]
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5f4:	f7fd f964 	bl	80078c0 <memset>
 800a5f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a600:	4620      	mov	r0, r4
 800a602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a604:	3468      	adds	r4, #104	; 0x68
 800a606:	e7d9      	b.n	800a5bc <__sfp+0x1c>
 800a608:	2104      	movs	r1, #4
 800a60a:	4638      	mov	r0, r7
 800a60c:	f7ff ff62 	bl	800a4d4 <__sfmoreglue>
 800a610:	4604      	mov	r4, r0
 800a612:	6030      	str	r0, [r6, #0]
 800a614:	2800      	cmp	r0, #0
 800a616:	d1d5      	bne.n	800a5c4 <__sfp+0x24>
 800a618:	f7ff ff78 	bl	800a50c <__sfp_lock_release>
 800a61c:	230c      	movs	r3, #12
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	e7ee      	b.n	800a600 <__sfp+0x60>
 800a622:	bf00      	nop
 800a624:	0800c530 	.word	0x0800c530
 800a628:	ffff0001 	.word	0xffff0001

0800a62c <_fwalk_reent>:
 800a62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a630:	4606      	mov	r6, r0
 800a632:	4688      	mov	r8, r1
 800a634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a638:	2700      	movs	r7, #0
 800a63a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a63e:	f1b9 0901 	subs.w	r9, r9, #1
 800a642:	d505      	bpl.n	800a650 <_fwalk_reent+0x24>
 800a644:	6824      	ldr	r4, [r4, #0]
 800a646:	2c00      	cmp	r4, #0
 800a648:	d1f7      	bne.n	800a63a <_fwalk_reent+0xe>
 800a64a:	4638      	mov	r0, r7
 800a64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a650:	89ab      	ldrh	r3, [r5, #12]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d907      	bls.n	800a666 <_fwalk_reent+0x3a>
 800a656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a65a:	3301      	adds	r3, #1
 800a65c:	d003      	beq.n	800a666 <_fwalk_reent+0x3a>
 800a65e:	4629      	mov	r1, r5
 800a660:	4630      	mov	r0, r6
 800a662:	47c0      	blx	r8
 800a664:	4307      	orrs	r7, r0
 800a666:	3568      	adds	r5, #104	; 0x68
 800a668:	e7e9      	b.n	800a63e <_fwalk_reent+0x12>

0800a66a <rshift>:
 800a66a:	6903      	ldr	r3, [r0, #16]
 800a66c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a674:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a678:	f100 0414 	add.w	r4, r0, #20
 800a67c:	dd45      	ble.n	800a70a <rshift+0xa0>
 800a67e:	f011 011f 	ands.w	r1, r1, #31
 800a682:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a686:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a68a:	d10c      	bne.n	800a6a6 <rshift+0x3c>
 800a68c:	f100 0710 	add.w	r7, r0, #16
 800a690:	4629      	mov	r1, r5
 800a692:	42b1      	cmp	r1, r6
 800a694:	d334      	bcc.n	800a700 <rshift+0x96>
 800a696:	1a9b      	subs	r3, r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	1eea      	subs	r2, r5, #3
 800a69c:	4296      	cmp	r6, r2
 800a69e:	bf38      	it	cc
 800a6a0:	2300      	movcc	r3, #0
 800a6a2:	4423      	add	r3, r4
 800a6a4:	e015      	b.n	800a6d2 <rshift+0x68>
 800a6a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a6aa:	f1c1 0820 	rsb	r8, r1, #32
 800a6ae:	40cf      	lsrs	r7, r1
 800a6b0:	f105 0e04 	add.w	lr, r5, #4
 800a6b4:	46a1      	mov	r9, r4
 800a6b6:	4576      	cmp	r6, lr
 800a6b8:	46f4      	mov	ip, lr
 800a6ba:	d815      	bhi.n	800a6e8 <rshift+0x7e>
 800a6bc:	1a9a      	subs	r2, r3, r2
 800a6be:	0092      	lsls	r2, r2, #2
 800a6c0:	3a04      	subs	r2, #4
 800a6c2:	3501      	adds	r5, #1
 800a6c4:	42ae      	cmp	r6, r5
 800a6c6:	bf38      	it	cc
 800a6c8:	2200      	movcc	r2, #0
 800a6ca:	18a3      	adds	r3, r4, r2
 800a6cc:	50a7      	str	r7, [r4, r2]
 800a6ce:	b107      	cbz	r7, 800a6d2 <rshift+0x68>
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	1b1a      	subs	r2, r3, r4
 800a6d4:	42a3      	cmp	r3, r4
 800a6d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6da:	bf08      	it	eq
 800a6dc:	2300      	moveq	r3, #0
 800a6de:	6102      	str	r2, [r0, #16]
 800a6e0:	bf08      	it	eq
 800a6e2:	6143      	streq	r3, [r0, #20]
 800a6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6e8:	f8dc c000 	ldr.w	ip, [ip]
 800a6ec:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6f0:	ea4c 0707 	orr.w	r7, ip, r7
 800a6f4:	f849 7b04 	str.w	r7, [r9], #4
 800a6f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6fc:	40cf      	lsrs	r7, r1
 800a6fe:	e7da      	b.n	800a6b6 <rshift+0x4c>
 800a700:	f851 cb04 	ldr.w	ip, [r1], #4
 800a704:	f847 cf04 	str.w	ip, [r7, #4]!
 800a708:	e7c3      	b.n	800a692 <rshift+0x28>
 800a70a:	4623      	mov	r3, r4
 800a70c:	e7e1      	b.n	800a6d2 <rshift+0x68>

0800a70e <__hexdig_fun>:
 800a70e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a712:	2b09      	cmp	r3, #9
 800a714:	d802      	bhi.n	800a71c <__hexdig_fun+0xe>
 800a716:	3820      	subs	r0, #32
 800a718:	b2c0      	uxtb	r0, r0
 800a71a:	4770      	bx	lr
 800a71c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a720:	2b05      	cmp	r3, #5
 800a722:	d801      	bhi.n	800a728 <__hexdig_fun+0x1a>
 800a724:	3847      	subs	r0, #71	; 0x47
 800a726:	e7f7      	b.n	800a718 <__hexdig_fun+0xa>
 800a728:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a72c:	2b05      	cmp	r3, #5
 800a72e:	d801      	bhi.n	800a734 <__hexdig_fun+0x26>
 800a730:	3827      	subs	r0, #39	; 0x27
 800a732:	e7f1      	b.n	800a718 <__hexdig_fun+0xa>
 800a734:	2000      	movs	r0, #0
 800a736:	4770      	bx	lr

0800a738 <__gethex>:
 800a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	ed2d 8b02 	vpush	{d8}
 800a740:	b089      	sub	sp, #36	; 0x24
 800a742:	ee08 0a10 	vmov	s16, r0
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	4bb4      	ldr	r3, [pc, #720]	; (800aa1c <__gethex+0x2e4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	4618      	mov	r0, r3
 800a750:	468b      	mov	fp, r1
 800a752:	4690      	mov	r8, r2
 800a754:	f7f5 fd44 	bl	80001e0 <strlen>
 800a758:	9b01      	ldr	r3, [sp, #4]
 800a75a:	f8db 2000 	ldr.w	r2, [fp]
 800a75e:	4403      	add	r3, r0
 800a760:	4682      	mov	sl, r0
 800a762:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a766:	9305      	str	r3, [sp, #20]
 800a768:	1c93      	adds	r3, r2, #2
 800a76a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a76e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a772:	32fe      	adds	r2, #254	; 0xfe
 800a774:	18d1      	adds	r1, r2, r3
 800a776:	461f      	mov	r7, r3
 800a778:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a77c:	9100      	str	r1, [sp, #0]
 800a77e:	2830      	cmp	r0, #48	; 0x30
 800a780:	d0f8      	beq.n	800a774 <__gethex+0x3c>
 800a782:	f7ff ffc4 	bl	800a70e <__hexdig_fun>
 800a786:	4604      	mov	r4, r0
 800a788:	2800      	cmp	r0, #0
 800a78a:	d13a      	bne.n	800a802 <__gethex+0xca>
 800a78c:	9901      	ldr	r1, [sp, #4]
 800a78e:	4652      	mov	r2, sl
 800a790:	4638      	mov	r0, r7
 800a792:	f001 fc28 	bl	800bfe6 <strncmp>
 800a796:	4605      	mov	r5, r0
 800a798:	2800      	cmp	r0, #0
 800a79a:	d168      	bne.n	800a86e <__gethex+0x136>
 800a79c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a7a0:	eb07 060a 	add.w	r6, r7, sl
 800a7a4:	f7ff ffb3 	bl	800a70e <__hexdig_fun>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d062      	beq.n	800a872 <__gethex+0x13a>
 800a7ac:	4633      	mov	r3, r6
 800a7ae:	7818      	ldrb	r0, [r3, #0]
 800a7b0:	2830      	cmp	r0, #48	; 0x30
 800a7b2:	461f      	mov	r7, r3
 800a7b4:	f103 0301 	add.w	r3, r3, #1
 800a7b8:	d0f9      	beq.n	800a7ae <__gethex+0x76>
 800a7ba:	f7ff ffa8 	bl	800a70e <__hexdig_fun>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	fab0 f480 	clz	r4, r0
 800a7c4:	0964      	lsrs	r4, r4, #5
 800a7c6:	4635      	mov	r5, r6
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	463a      	mov	r2, r7
 800a7cc:	4616      	mov	r6, r2
 800a7ce:	3201      	adds	r2, #1
 800a7d0:	7830      	ldrb	r0, [r6, #0]
 800a7d2:	f7ff ff9c 	bl	800a70e <__hexdig_fun>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d1f8      	bne.n	800a7cc <__gethex+0x94>
 800a7da:	9901      	ldr	r1, [sp, #4]
 800a7dc:	4652      	mov	r2, sl
 800a7de:	4630      	mov	r0, r6
 800a7e0:	f001 fc01 	bl	800bfe6 <strncmp>
 800a7e4:	b980      	cbnz	r0, 800a808 <__gethex+0xd0>
 800a7e6:	b94d      	cbnz	r5, 800a7fc <__gethex+0xc4>
 800a7e8:	eb06 050a 	add.w	r5, r6, sl
 800a7ec:	462a      	mov	r2, r5
 800a7ee:	4616      	mov	r6, r2
 800a7f0:	3201      	adds	r2, #1
 800a7f2:	7830      	ldrb	r0, [r6, #0]
 800a7f4:	f7ff ff8b 	bl	800a70e <__hexdig_fun>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d1f8      	bne.n	800a7ee <__gethex+0xb6>
 800a7fc:	1bad      	subs	r5, r5, r6
 800a7fe:	00ad      	lsls	r5, r5, #2
 800a800:	e004      	b.n	800a80c <__gethex+0xd4>
 800a802:	2400      	movs	r4, #0
 800a804:	4625      	mov	r5, r4
 800a806:	e7e0      	b.n	800a7ca <__gethex+0x92>
 800a808:	2d00      	cmp	r5, #0
 800a80a:	d1f7      	bne.n	800a7fc <__gethex+0xc4>
 800a80c:	7833      	ldrb	r3, [r6, #0]
 800a80e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a812:	2b50      	cmp	r3, #80	; 0x50
 800a814:	d13b      	bne.n	800a88e <__gethex+0x156>
 800a816:	7873      	ldrb	r3, [r6, #1]
 800a818:	2b2b      	cmp	r3, #43	; 0x2b
 800a81a:	d02c      	beq.n	800a876 <__gethex+0x13e>
 800a81c:	2b2d      	cmp	r3, #45	; 0x2d
 800a81e:	d02e      	beq.n	800a87e <__gethex+0x146>
 800a820:	1c71      	adds	r1, r6, #1
 800a822:	f04f 0900 	mov.w	r9, #0
 800a826:	7808      	ldrb	r0, [r1, #0]
 800a828:	f7ff ff71 	bl	800a70e <__hexdig_fun>
 800a82c:	1e43      	subs	r3, r0, #1
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b18      	cmp	r3, #24
 800a832:	d82c      	bhi.n	800a88e <__gethex+0x156>
 800a834:	f1a0 0210 	sub.w	r2, r0, #16
 800a838:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a83c:	f7ff ff67 	bl	800a70e <__hexdig_fun>
 800a840:	1e43      	subs	r3, r0, #1
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b18      	cmp	r3, #24
 800a846:	d91d      	bls.n	800a884 <__gethex+0x14c>
 800a848:	f1b9 0f00 	cmp.w	r9, #0
 800a84c:	d000      	beq.n	800a850 <__gethex+0x118>
 800a84e:	4252      	negs	r2, r2
 800a850:	4415      	add	r5, r2
 800a852:	f8cb 1000 	str.w	r1, [fp]
 800a856:	b1e4      	cbz	r4, 800a892 <__gethex+0x15a>
 800a858:	9b00      	ldr	r3, [sp, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bf14      	ite	ne
 800a85e:	2700      	movne	r7, #0
 800a860:	2706      	moveq	r7, #6
 800a862:	4638      	mov	r0, r7
 800a864:	b009      	add	sp, #36	; 0x24
 800a866:	ecbd 8b02 	vpop	{d8}
 800a86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86e:	463e      	mov	r6, r7
 800a870:	4625      	mov	r5, r4
 800a872:	2401      	movs	r4, #1
 800a874:	e7ca      	b.n	800a80c <__gethex+0xd4>
 800a876:	f04f 0900 	mov.w	r9, #0
 800a87a:	1cb1      	adds	r1, r6, #2
 800a87c:	e7d3      	b.n	800a826 <__gethex+0xee>
 800a87e:	f04f 0901 	mov.w	r9, #1
 800a882:	e7fa      	b.n	800a87a <__gethex+0x142>
 800a884:	230a      	movs	r3, #10
 800a886:	fb03 0202 	mla	r2, r3, r2, r0
 800a88a:	3a10      	subs	r2, #16
 800a88c:	e7d4      	b.n	800a838 <__gethex+0x100>
 800a88e:	4631      	mov	r1, r6
 800a890:	e7df      	b.n	800a852 <__gethex+0x11a>
 800a892:	1bf3      	subs	r3, r6, r7
 800a894:	3b01      	subs	r3, #1
 800a896:	4621      	mov	r1, r4
 800a898:	2b07      	cmp	r3, #7
 800a89a:	dc0b      	bgt.n	800a8b4 <__gethex+0x17c>
 800a89c:	ee18 0a10 	vmov	r0, s16
 800a8a0:	f000 fad8 	bl	800ae54 <_Balloc>
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	b940      	cbnz	r0, 800a8ba <__gethex+0x182>
 800a8a8:	4b5d      	ldr	r3, [pc, #372]	; (800aa20 <__gethex+0x2e8>)
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	21de      	movs	r1, #222	; 0xde
 800a8ae:	485d      	ldr	r0, [pc, #372]	; (800aa24 <__gethex+0x2ec>)
 800a8b0:	f001 fbcc 	bl	800c04c <__assert_func>
 800a8b4:	3101      	adds	r1, #1
 800a8b6:	105b      	asrs	r3, r3, #1
 800a8b8:	e7ee      	b.n	800a898 <__gethex+0x160>
 800a8ba:	f100 0914 	add.w	r9, r0, #20
 800a8be:	f04f 0b00 	mov.w	fp, #0
 800a8c2:	f1ca 0301 	rsb	r3, sl, #1
 800a8c6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a8ca:	f8cd b000 	str.w	fp, [sp]
 800a8ce:	9306      	str	r3, [sp, #24]
 800a8d0:	42b7      	cmp	r7, r6
 800a8d2:	d340      	bcc.n	800a956 <__gethex+0x21e>
 800a8d4:	9802      	ldr	r0, [sp, #8]
 800a8d6:	9b00      	ldr	r3, [sp, #0]
 800a8d8:	f840 3b04 	str.w	r3, [r0], #4
 800a8dc:	eba0 0009 	sub.w	r0, r0, r9
 800a8e0:	1080      	asrs	r0, r0, #2
 800a8e2:	0146      	lsls	r6, r0, #5
 800a8e4:	6120      	str	r0, [r4, #16]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fba6 	bl	800b038 <__hi0bits>
 800a8ec:	1a30      	subs	r0, r6, r0
 800a8ee:	f8d8 6000 	ldr.w	r6, [r8]
 800a8f2:	42b0      	cmp	r0, r6
 800a8f4:	dd63      	ble.n	800a9be <__gethex+0x286>
 800a8f6:	1b87      	subs	r7, r0, r6
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 ff4a 	bl	800b794 <__any_on>
 800a900:	4682      	mov	sl, r0
 800a902:	b1a8      	cbz	r0, 800a930 <__gethex+0x1f8>
 800a904:	1e7b      	subs	r3, r7, #1
 800a906:	1159      	asrs	r1, r3, #5
 800a908:	f003 021f 	and.w	r2, r3, #31
 800a90c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a910:	f04f 0a01 	mov.w	sl, #1
 800a914:	fa0a f202 	lsl.w	r2, sl, r2
 800a918:	420a      	tst	r2, r1
 800a91a:	d009      	beq.n	800a930 <__gethex+0x1f8>
 800a91c:	4553      	cmp	r3, sl
 800a91e:	dd05      	ble.n	800a92c <__gethex+0x1f4>
 800a920:	1eb9      	subs	r1, r7, #2
 800a922:	4620      	mov	r0, r4
 800a924:	f000 ff36 	bl	800b794 <__any_on>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d145      	bne.n	800a9b8 <__gethex+0x280>
 800a92c:	f04f 0a02 	mov.w	sl, #2
 800a930:	4639      	mov	r1, r7
 800a932:	4620      	mov	r0, r4
 800a934:	f7ff fe99 	bl	800a66a <rshift>
 800a938:	443d      	add	r5, r7
 800a93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a93e:	42ab      	cmp	r3, r5
 800a940:	da4c      	bge.n	800a9dc <__gethex+0x2a4>
 800a942:	ee18 0a10 	vmov	r0, s16
 800a946:	4621      	mov	r1, r4
 800a948:	f000 fac4 	bl	800aed4 <_Bfree>
 800a94c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a94e:	2300      	movs	r3, #0
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	27a3      	movs	r7, #163	; 0xa3
 800a954:	e785      	b.n	800a862 <__gethex+0x12a>
 800a956:	1e73      	subs	r3, r6, #1
 800a958:	9a05      	ldr	r2, [sp, #20]
 800a95a:	9303      	str	r3, [sp, #12]
 800a95c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a960:	4293      	cmp	r3, r2
 800a962:	d019      	beq.n	800a998 <__gethex+0x260>
 800a964:	f1bb 0f20 	cmp.w	fp, #32
 800a968:	d107      	bne.n	800a97a <__gethex+0x242>
 800a96a:	9b02      	ldr	r3, [sp, #8]
 800a96c:	9a00      	ldr	r2, [sp, #0]
 800a96e:	f843 2b04 	str.w	r2, [r3], #4
 800a972:	9302      	str	r3, [sp, #8]
 800a974:	2300      	movs	r3, #0
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	469b      	mov	fp, r3
 800a97a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a97e:	f7ff fec6 	bl	800a70e <__hexdig_fun>
 800a982:	9b00      	ldr	r3, [sp, #0]
 800a984:	f000 000f 	and.w	r0, r0, #15
 800a988:	fa00 f00b 	lsl.w	r0, r0, fp
 800a98c:	4303      	orrs	r3, r0
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	f10b 0b04 	add.w	fp, fp, #4
 800a994:	9b03      	ldr	r3, [sp, #12]
 800a996:	e00d      	b.n	800a9b4 <__gethex+0x27c>
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	9a06      	ldr	r2, [sp, #24]
 800a99c:	4413      	add	r3, r2
 800a99e:	42bb      	cmp	r3, r7
 800a9a0:	d3e0      	bcc.n	800a964 <__gethex+0x22c>
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	9901      	ldr	r1, [sp, #4]
 800a9a6:	9307      	str	r3, [sp, #28]
 800a9a8:	4652      	mov	r2, sl
 800a9aa:	f001 fb1c 	bl	800bfe6 <strncmp>
 800a9ae:	9b07      	ldr	r3, [sp, #28]
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d1d7      	bne.n	800a964 <__gethex+0x22c>
 800a9b4:	461e      	mov	r6, r3
 800a9b6:	e78b      	b.n	800a8d0 <__gethex+0x198>
 800a9b8:	f04f 0a03 	mov.w	sl, #3
 800a9bc:	e7b8      	b.n	800a930 <__gethex+0x1f8>
 800a9be:	da0a      	bge.n	800a9d6 <__gethex+0x29e>
 800a9c0:	1a37      	subs	r7, r6, r0
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	ee18 0a10 	vmov	r0, s16
 800a9c8:	463a      	mov	r2, r7
 800a9ca:	f000 fc9f 	bl	800b30c <__lshift>
 800a9ce:	1bed      	subs	r5, r5, r7
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	f100 0914 	add.w	r9, r0, #20
 800a9d6:	f04f 0a00 	mov.w	sl, #0
 800a9da:	e7ae      	b.n	800a93a <__gethex+0x202>
 800a9dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a9e0:	42a8      	cmp	r0, r5
 800a9e2:	dd72      	ble.n	800aaca <__gethex+0x392>
 800a9e4:	1b45      	subs	r5, r0, r5
 800a9e6:	42ae      	cmp	r6, r5
 800a9e8:	dc36      	bgt.n	800aa58 <__gethex+0x320>
 800a9ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d02a      	beq.n	800aa48 <__gethex+0x310>
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d02c      	beq.n	800aa50 <__gethex+0x318>
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d11c      	bne.n	800aa34 <__gethex+0x2fc>
 800a9fa:	42ae      	cmp	r6, r5
 800a9fc:	d11a      	bne.n	800aa34 <__gethex+0x2fc>
 800a9fe:	2e01      	cmp	r6, #1
 800aa00:	d112      	bne.n	800aa28 <__gethex+0x2f0>
 800aa02:	9a04      	ldr	r2, [sp, #16]
 800aa04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa08:	6013      	str	r3, [r2, #0]
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	6123      	str	r3, [r4, #16]
 800aa0e:	f8c9 3000 	str.w	r3, [r9]
 800aa12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa14:	2762      	movs	r7, #98	; 0x62
 800aa16:	601c      	str	r4, [r3, #0]
 800aa18:	e723      	b.n	800a862 <__gethex+0x12a>
 800aa1a:	bf00      	nop
 800aa1c:	0800c81c 	.word	0x0800c81c
 800aa20:	0800c740 	.word	0x0800c740
 800aa24:	0800c7b4 	.word	0x0800c7b4
 800aa28:	1e71      	subs	r1, r6, #1
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 feb2 	bl	800b794 <__any_on>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d1e6      	bne.n	800aa02 <__gethex+0x2ca>
 800aa34:	ee18 0a10 	vmov	r0, s16
 800aa38:	4621      	mov	r1, r4
 800aa3a:	f000 fa4b 	bl	800aed4 <_Bfree>
 800aa3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa40:	2300      	movs	r3, #0
 800aa42:	6013      	str	r3, [r2, #0]
 800aa44:	2750      	movs	r7, #80	; 0x50
 800aa46:	e70c      	b.n	800a862 <__gethex+0x12a>
 800aa48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1f2      	bne.n	800aa34 <__gethex+0x2fc>
 800aa4e:	e7d8      	b.n	800aa02 <__gethex+0x2ca>
 800aa50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1d5      	bne.n	800aa02 <__gethex+0x2ca>
 800aa56:	e7ed      	b.n	800aa34 <__gethex+0x2fc>
 800aa58:	1e6f      	subs	r7, r5, #1
 800aa5a:	f1ba 0f00 	cmp.w	sl, #0
 800aa5e:	d131      	bne.n	800aac4 <__gethex+0x38c>
 800aa60:	b127      	cbz	r7, 800aa6c <__gethex+0x334>
 800aa62:	4639      	mov	r1, r7
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fe95 	bl	800b794 <__any_on>
 800aa6a:	4682      	mov	sl, r0
 800aa6c:	117b      	asrs	r3, r7, #5
 800aa6e:	2101      	movs	r1, #1
 800aa70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aa74:	f007 071f 	and.w	r7, r7, #31
 800aa78:	fa01 f707 	lsl.w	r7, r1, r7
 800aa7c:	421f      	tst	r7, r3
 800aa7e:	4629      	mov	r1, r5
 800aa80:	4620      	mov	r0, r4
 800aa82:	bf18      	it	ne
 800aa84:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa88:	1b76      	subs	r6, r6, r5
 800aa8a:	f7ff fdee 	bl	800a66a <rshift>
 800aa8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa92:	2702      	movs	r7, #2
 800aa94:	f1ba 0f00 	cmp.w	sl, #0
 800aa98:	d048      	beq.n	800ab2c <__gethex+0x3f4>
 800aa9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d015      	beq.n	800aace <__gethex+0x396>
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d017      	beq.n	800aad6 <__gethex+0x39e>
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d109      	bne.n	800aabe <__gethex+0x386>
 800aaaa:	f01a 0f02 	tst.w	sl, #2
 800aaae:	d006      	beq.n	800aabe <__gethex+0x386>
 800aab0:	f8d9 0000 	ldr.w	r0, [r9]
 800aab4:	ea4a 0a00 	orr.w	sl, sl, r0
 800aab8:	f01a 0f01 	tst.w	sl, #1
 800aabc:	d10e      	bne.n	800aadc <__gethex+0x3a4>
 800aabe:	f047 0710 	orr.w	r7, r7, #16
 800aac2:	e033      	b.n	800ab2c <__gethex+0x3f4>
 800aac4:	f04f 0a01 	mov.w	sl, #1
 800aac8:	e7d0      	b.n	800aa6c <__gethex+0x334>
 800aaca:	2701      	movs	r7, #1
 800aacc:	e7e2      	b.n	800aa94 <__gethex+0x35c>
 800aace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aad0:	f1c3 0301 	rsb	r3, r3, #1
 800aad4:	9315      	str	r3, [sp, #84]	; 0x54
 800aad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0f0      	beq.n	800aabe <__gethex+0x386>
 800aadc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aae0:	f104 0314 	add.w	r3, r4, #20
 800aae4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aae8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aaec:	f04f 0c00 	mov.w	ip, #0
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aafa:	d01c      	beq.n	800ab36 <__gethex+0x3fe>
 800aafc:	3201      	adds	r2, #1
 800aafe:	6002      	str	r2, [r0, #0]
 800ab00:	2f02      	cmp	r7, #2
 800ab02:	f104 0314 	add.w	r3, r4, #20
 800ab06:	d13f      	bne.n	800ab88 <__gethex+0x450>
 800ab08:	f8d8 2000 	ldr.w	r2, [r8]
 800ab0c:	3a01      	subs	r2, #1
 800ab0e:	42b2      	cmp	r2, r6
 800ab10:	d10a      	bne.n	800ab28 <__gethex+0x3f0>
 800ab12:	1171      	asrs	r1, r6, #5
 800ab14:	2201      	movs	r2, #1
 800ab16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab1a:	f006 061f 	and.w	r6, r6, #31
 800ab1e:	fa02 f606 	lsl.w	r6, r2, r6
 800ab22:	421e      	tst	r6, r3
 800ab24:	bf18      	it	ne
 800ab26:	4617      	movne	r7, r2
 800ab28:	f047 0720 	orr.w	r7, r7, #32
 800ab2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab2e:	601c      	str	r4, [r3, #0]
 800ab30:	9b04      	ldr	r3, [sp, #16]
 800ab32:	601d      	str	r5, [r3, #0]
 800ab34:	e695      	b.n	800a862 <__gethex+0x12a>
 800ab36:	4299      	cmp	r1, r3
 800ab38:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab3c:	d8d8      	bhi.n	800aaf0 <__gethex+0x3b8>
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	459b      	cmp	fp, r3
 800ab42:	db19      	blt.n	800ab78 <__gethex+0x440>
 800ab44:	6861      	ldr	r1, [r4, #4]
 800ab46:	ee18 0a10 	vmov	r0, s16
 800ab4a:	3101      	adds	r1, #1
 800ab4c:	f000 f982 	bl	800ae54 <_Balloc>
 800ab50:	4681      	mov	r9, r0
 800ab52:	b918      	cbnz	r0, 800ab5c <__gethex+0x424>
 800ab54:	4b1a      	ldr	r3, [pc, #104]	; (800abc0 <__gethex+0x488>)
 800ab56:	4602      	mov	r2, r0
 800ab58:	2184      	movs	r1, #132	; 0x84
 800ab5a:	e6a8      	b.n	800a8ae <__gethex+0x176>
 800ab5c:	6922      	ldr	r2, [r4, #16]
 800ab5e:	3202      	adds	r2, #2
 800ab60:	f104 010c 	add.w	r1, r4, #12
 800ab64:	0092      	lsls	r2, r2, #2
 800ab66:	300c      	adds	r0, #12
 800ab68:	f7fc fe9c 	bl	80078a4 <memcpy>
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	ee18 0a10 	vmov	r0, s16
 800ab72:	f000 f9af 	bl	800aed4 <_Bfree>
 800ab76:	464c      	mov	r4, r9
 800ab78:	6923      	ldr	r3, [r4, #16]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab80:	6122      	str	r2, [r4, #16]
 800ab82:	2201      	movs	r2, #1
 800ab84:	615a      	str	r2, [r3, #20]
 800ab86:	e7bb      	b.n	800ab00 <__gethex+0x3c8>
 800ab88:	6922      	ldr	r2, [r4, #16]
 800ab8a:	455a      	cmp	r2, fp
 800ab8c:	dd0b      	ble.n	800aba6 <__gethex+0x46e>
 800ab8e:	2101      	movs	r1, #1
 800ab90:	4620      	mov	r0, r4
 800ab92:	f7ff fd6a 	bl	800a66a <rshift>
 800ab96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab9a:	3501      	adds	r5, #1
 800ab9c:	42ab      	cmp	r3, r5
 800ab9e:	f6ff aed0 	blt.w	800a942 <__gethex+0x20a>
 800aba2:	2701      	movs	r7, #1
 800aba4:	e7c0      	b.n	800ab28 <__gethex+0x3f0>
 800aba6:	f016 061f 	ands.w	r6, r6, #31
 800abaa:	d0fa      	beq.n	800aba2 <__gethex+0x46a>
 800abac:	4453      	add	r3, sl
 800abae:	f1c6 0620 	rsb	r6, r6, #32
 800abb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800abb6:	f000 fa3f 	bl	800b038 <__hi0bits>
 800abba:	42b0      	cmp	r0, r6
 800abbc:	dbe7      	blt.n	800ab8e <__gethex+0x456>
 800abbe:	e7f0      	b.n	800aba2 <__gethex+0x46a>
 800abc0:	0800c740 	.word	0x0800c740

0800abc4 <L_shift>:
 800abc4:	f1c2 0208 	rsb	r2, r2, #8
 800abc8:	0092      	lsls	r2, r2, #2
 800abca:	b570      	push	{r4, r5, r6, lr}
 800abcc:	f1c2 0620 	rsb	r6, r2, #32
 800abd0:	6843      	ldr	r3, [r0, #4]
 800abd2:	6804      	ldr	r4, [r0, #0]
 800abd4:	fa03 f506 	lsl.w	r5, r3, r6
 800abd8:	432c      	orrs	r4, r5
 800abda:	40d3      	lsrs	r3, r2
 800abdc:	6004      	str	r4, [r0, #0]
 800abde:	f840 3f04 	str.w	r3, [r0, #4]!
 800abe2:	4288      	cmp	r0, r1
 800abe4:	d3f4      	bcc.n	800abd0 <L_shift+0xc>
 800abe6:	bd70      	pop	{r4, r5, r6, pc}

0800abe8 <__match>:
 800abe8:	b530      	push	{r4, r5, lr}
 800abea:	6803      	ldr	r3, [r0, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abf2:	b914      	cbnz	r4, 800abfa <__match+0x12>
 800abf4:	6003      	str	r3, [r0, #0]
 800abf6:	2001      	movs	r0, #1
 800abf8:	bd30      	pop	{r4, r5, pc}
 800abfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ac02:	2d19      	cmp	r5, #25
 800ac04:	bf98      	it	ls
 800ac06:	3220      	addls	r2, #32
 800ac08:	42a2      	cmp	r2, r4
 800ac0a:	d0f0      	beq.n	800abee <__match+0x6>
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	e7f3      	b.n	800abf8 <__match+0x10>

0800ac10 <__hexnan>:
 800ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	680b      	ldr	r3, [r1, #0]
 800ac16:	115e      	asrs	r6, r3, #5
 800ac18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac1c:	f013 031f 	ands.w	r3, r3, #31
 800ac20:	b087      	sub	sp, #28
 800ac22:	bf18      	it	ne
 800ac24:	3604      	addne	r6, #4
 800ac26:	2500      	movs	r5, #0
 800ac28:	1f37      	subs	r7, r6, #4
 800ac2a:	4690      	mov	r8, r2
 800ac2c:	6802      	ldr	r2, [r0, #0]
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	4682      	mov	sl, r0
 800ac32:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac36:	46b9      	mov	r9, r7
 800ac38:	463c      	mov	r4, r7
 800ac3a:	9502      	str	r5, [sp, #8]
 800ac3c:	46ab      	mov	fp, r5
 800ac3e:	7851      	ldrb	r1, [r2, #1]
 800ac40:	1c53      	adds	r3, r2, #1
 800ac42:	9303      	str	r3, [sp, #12]
 800ac44:	b341      	cbz	r1, 800ac98 <__hexnan+0x88>
 800ac46:	4608      	mov	r0, r1
 800ac48:	9205      	str	r2, [sp, #20]
 800ac4a:	9104      	str	r1, [sp, #16]
 800ac4c:	f7ff fd5f 	bl	800a70e <__hexdig_fun>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d14f      	bne.n	800acf4 <__hexnan+0xe4>
 800ac54:	9904      	ldr	r1, [sp, #16]
 800ac56:	9a05      	ldr	r2, [sp, #20]
 800ac58:	2920      	cmp	r1, #32
 800ac5a:	d818      	bhi.n	800ac8e <__hexnan+0x7e>
 800ac5c:	9b02      	ldr	r3, [sp, #8]
 800ac5e:	459b      	cmp	fp, r3
 800ac60:	dd13      	ble.n	800ac8a <__hexnan+0x7a>
 800ac62:	454c      	cmp	r4, r9
 800ac64:	d206      	bcs.n	800ac74 <__hexnan+0x64>
 800ac66:	2d07      	cmp	r5, #7
 800ac68:	dc04      	bgt.n	800ac74 <__hexnan+0x64>
 800ac6a:	462a      	mov	r2, r5
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f7ff ffa8 	bl	800abc4 <L_shift>
 800ac74:	4544      	cmp	r4, r8
 800ac76:	d950      	bls.n	800ad1a <__hexnan+0x10a>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	f1a4 0904 	sub.w	r9, r4, #4
 800ac7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac82:	f8cd b008 	str.w	fp, [sp, #8]
 800ac86:	464c      	mov	r4, r9
 800ac88:	461d      	mov	r5, r3
 800ac8a:	9a03      	ldr	r2, [sp, #12]
 800ac8c:	e7d7      	b.n	800ac3e <__hexnan+0x2e>
 800ac8e:	2929      	cmp	r1, #41	; 0x29
 800ac90:	d156      	bne.n	800ad40 <__hexnan+0x130>
 800ac92:	3202      	adds	r2, #2
 800ac94:	f8ca 2000 	str.w	r2, [sl]
 800ac98:	f1bb 0f00 	cmp.w	fp, #0
 800ac9c:	d050      	beq.n	800ad40 <__hexnan+0x130>
 800ac9e:	454c      	cmp	r4, r9
 800aca0:	d206      	bcs.n	800acb0 <__hexnan+0xa0>
 800aca2:	2d07      	cmp	r5, #7
 800aca4:	dc04      	bgt.n	800acb0 <__hexnan+0xa0>
 800aca6:	462a      	mov	r2, r5
 800aca8:	4649      	mov	r1, r9
 800acaa:	4620      	mov	r0, r4
 800acac:	f7ff ff8a 	bl	800abc4 <L_shift>
 800acb0:	4544      	cmp	r4, r8
 800acb2:	d934      	bls.n	800ad1e <__hexnan+0x10e>
 800acb4:	f1a8 0204 	sub.w	r2, r8, #4
 800acb8:	4623      	mov	r3, r4
 800acba:	f853 1b04 	ldr.w	r1, [r3], #4
 800acbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800acc2:	429f      	cmp	r7, r3
 800acc4:	d2f9      	bcs.n	800acba <__hexnan+0xaa>
 800acc6:	1b3b      	subs	r3, r7, r4
 800acc8:	f023 0303 	bic.w	r3, r3, #3
 800accc:	3304      	adds	r3, #4
 800acce:	3401      	adds	r4, #1
 800acd0:	3e03      	subs	r6, #3
 800acd2:	42b4      	cmp	r4, r6
 800acd4:	bf88      	it	hi
 800acd6:	2304      	movhi	r3, #4
 800acd8:	4443      	add	r3, r8
 800acda:	2200      	movs	r2, #0
 800acdc:	f843 2b04 	str.w	r2, [r3], #4
 800ace0:	429f      	cmp	r7, r3
 800ace2:	d2fb      	bcs.n	800acdc <__hexnan+0xcc>
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	b91b      	cbnz	r3, 800acf0 <__hexnan+0xe0>
 800ace8:	4547      	cmp	r7, r8
 800acea:	d127      	bne.n	800ad3c <__hexnan+0x12c>
 800acec:	2301      	movs	r3, #1
 800acee:	603b      	str	r3, [r7, #0]
 800acf0:	2005      	movs	r0, #5
 800acf2:	e026      	b.n	800ad42 <__hexnan+0x132>
 800acf4:	3501      	adds	r5, #1
 800acf6:	2d08      	cmp	r5, #8
 800acf8:	f10b 0b01 	add.w	fp, fp, #1
 800acfc:	dd06      	ble.n	800ad0c <__hexnan+0xfc>
 800acfe:	4544      	cmp	r4, r8
 800ad00:	d9c3      	bls.n	800ac8a <__hexnan+0x7a>
 800ad02:	2300      	movs	r3, #0
 800ad04:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad08:	2501      	movs	r5, #1
 800ad0a:	3c04      	subs	r4, #4
 800ad0c:	6822      	ldr	r2, [r4, #0]
 800ad0e:	f000 000f 	and.w	r0, r0, #15
 800ad12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ad16:	6022      	str	r2, [r4, #0]
 800ad18:	e7b7      	b.n	800ac8a <__hexnan+0x7a>
 800ad1a:	2508      	movs	r5, #8
 800ad1c:	e7b5      	b.n	800ac8a <__hexnan+0x7a>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0df      	beq.n	800ace4 <__hexnan+0xd4>
 800ad24:	f04f 32ff 	mov.w	r2, #4294967295
 800ad28:	f1c3 0320 	rsb	r3, r3, #32
 800ad2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad34:	401a      	ands	r2, r3
 800ad36:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad3a:	e7d3      	b.n	800ace4 <__hexnan+0xd4>
 800ad3c:	3f04      	subs	r7, #4
 800ad3e:	e7d1      	b.n	800ace4 <__hexnan+0xd4>
 800ad40:	2004      	movs	r0, #4
 800ad42:	b007      	add	sp, #28
 800ad44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad48 <_localeconv_r>:
 800ad48:	4800      	ldr	r0, [pc, #0]	; (800ad4c <_localeconv_r+0x4>)
 800ad4a:	4770      	bx	lr
 800ad4c:	2000017c 	.word	0x2000017c

0800ad50 <__retarget_lock_init_recursive>:
 800ad50:	4770      	bx	lr

0800ad52 <__retarget_lock_acquire_recursive>:
 800ad52:	4770      	bx	lr

0800ad54 <__retarget_lock_release_recursive>:
 800ad54:	4770      	bx	lr

0800ad56 <__swhatbuf_r>:
 800ad56:	b570      	push	{r4, r5, r6, lr}
 800ad58:	460e      	mov	r6, r1
 800ad5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5e:	2900      	cmp	r1, #0
 800ad60:	b096      	sub	sp, #88	; 0x58
 800ad62:	4614      	mov	r4, r2
 800ad64:	461d      	mov	r5, r3
 800ad66:	da08      	bge.n	800ad7a <__swhatbuf_r+0x24>
 800ad68:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	602a      	str	r2, [r5, #0]
 800ad70:	061a      	lsls	r2, r3, #24
 800ad72:	d410      	bmi.n	800ad96 <__swhatbuf_r+0x40>
 800ad74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad78:	e00e      	b.n	800ad98 <__swhatbuf_r+0x42>
 800ad7a:	466a      	mov	r2, sp
 800ad7c:	f001 f9a6 	bl	800c0cc <_fstat_r>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	dbf1      	blt.n	800ad68 <__swhatbuf_r+0x12>
 800ad84:	9a01      	ldr	r2, [sp, #4]
 800ad86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad8e:	425a      	negs	r2, r3
 800ad90:	415a      	adcs	r2, r3
 800ad92:	602a      	str	r2, [r5, #0]
 800ad94:	e7ee      	b.n	800ad74 <__swhatbuf_r+0x1e>
 800ad96:	2340      	movs	r3, #64	; 0x40
 800ad98:	2000      	movs	r0, #0
 800ad9a:	6023      	str	r3, [r4, #0]
 800ad9c:	b016      	add	sp, #88	; 0x58
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}

0800ada0 <__smakebuf_r>:
 800ada0:	898b      	ldrh	r3, [r1, #12]
 800ada2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ada4:	079d      	lsls	r5, r3, #30
 800ada6:	4606      	mov	r6, r0
 800ada8:	460c      	mov	r4, r1
 800adaa:	d507      	bpl.n	800adbc <__smakebuf_r+0x1c>
 800adac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	2301      	movs	r3, #1
 800adb6:	6163      	str	r3, [r4, #20]
 800adb8:	b002      	add	sp, #8
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	ab01      	add	r3, sp, #4
 800adbe:	466a      	mov	r2, sp
 800adc0:	f7ff ffc9 	bl	800ad56 <__swhatbuf_r>
 800adc4:	9900      	ldr	r1, [sp, #0]
 800adc6:	4605      	mov	r5, r0
 800adc8:	4630      	mov	r0, r6
 800adca:	f000 fd87 	bl	800b8dc <_malloc_r>
 800adce:	b948      	cbnz	r0, 800ade4 <__smakebuf_r+0x44>
 800add0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add4:	059a      	lsls	r2, r3, #22
 800add6:	d4ef      	bmi.n	800adb8 <__smakebuf_r+0x18>
 800add8:	f023 0303 	bic.w	r3, r3, #3
 800addc:	f043 0302 	orr.w	r3, r3, #2
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	e7e3      	b.n	800adac <__smakebuf_r+0xc>
 800ade4:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <__smakebuf_r+0x7c>)
 800ade6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	6020      	str	r0, [r4, #0]
 800adec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	9b00      	ldr	r3, [sp, #0]
 800adf4:	6163      	str	r3, [r4, #20]
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	6120      	str	r0, [r4, #16]
 800adfa:	b15b      	cbz	r3, 800ae14 <__smakebuf_r+0x74>
 800adfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae00:	4630      	mov	r0, r6
 800ae02:	f001 f975 	bl	800c0f0 <_isatty_r>
 800ae06:	b128      	cbz	r0, 800ae14 <__smakebuf_r+0x74>
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	f043 0301 	orr.w	r3, r3, #1
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	89a0      	ldrh	r0, [r4, #12]
 800ae16:	4305      	orrs	r5, r0
 800ae18:	81a5      	strh	r5, [r4, #12]
 800ae1a:	e7cd      	b.n	800adb8 <__smakebuf_r+0x18>
 800ae1c:	0800a4c9 	.word	0x0800a4c9

0800ae20 <malloc>:
 800ae20:	4b02      	ldr	r3, [pc, #8]	; (800ae2c <malloc+0xc>)
 800ae22:	4601      	mov	r1, r0
 800ae24:	6818      	ldr	r0, [r3, #0]
 800ae26:	f000 bd59 	b.w	800b8dc <_malloc_r>
 800ae2a:	bf00      	nop
 800ae2c:	20000024 	.word	0x20000024

0800ae30 <__ascii_mbtowc>:
 800ae30:	b082      	sub	sp, #8
 800ae32:	b901      	cbnz	r1, 800ae36 <__ascii_mbtowc+0x6>
 800ae34:	a901      	add	r1, sp, #4
 800ae36:	b142      	cbz	r2, 800ae4a <__ascii_mbtowc+0x1a>
 800ae38:	b14b      	cbz	r3, 800ae4e <__ascii_mbtowc+0x1e>
 800ae3a:	7813      	ldrb	r3, [r2, #0]
 800ae3c:	600b      	str	r3, [r1, #0]
 800ae3e:	7812      	ldrb	r2, [r2, #0]
 800ae40:	1e10      	subs	r0, r2, #0
 800ae42:	bf18      	it	ne
 800ae44:	2001      	movne	r0, #1
 800ae46:	b002      	add	sp, #8
 800ae48:	4770      	bx	lr
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	e7fb      	b.n	800ae46 <__ascii_mbtowc+0x16>
 800ae4e:	f06f 0001 	mvn.w	r0, #1
 800ae52:	e7f8      	b.n	800ae46 <__ascii_mbtowc+0x16>

0800ae54 <_Balloc>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae58:	4604      	mov	r4, r0
 800ae5a:	460d      	mov	r5, r1
 800ae5c:	b976      	cbnz	r6, 800ae7c <_Balloc+0x28>
 800ae5e:	2010      	movs	r0, #16
 800ae60:	f7ff ffde 	bl	800ae20 <malloc>
 800ae64:	4602      	mov	r2, r0
 800ae66:	6260      	str	r0, [r4, #36]	; 0x24
 800ae68:	b920      	cbnz	r0, 800ae74 <_Balloc+0x20>
 800ae6a:	4b18      	ldr	r3, [pc, #96]	; (800aecc <_Balloc+0x78>)
 800ae6c:	4818      	ldr	r0, [pc, #96]	; (800aed0 <_Balloc+0x7c>)
 800ae6e:	2166      	movs	r1, #102	; 0x66
 800ae70:	f001 f8ec 	bl	800c04c <__assert_func>
 800ae74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae78:	6006      	str	r6, [r0, #0]
 800ae7a:	60c6      	str	r6, [r0, #12]
 800ae7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae7e:	68f3      	ldr	r3, [r6, #12]
 800ae80:	b183      	cbz	r3, 800aea4 <_Balloc+0x50>
 800ae82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae8a:	b9b8      	cbnz	r0, 800aebc <_Balloc+0x68>
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	fa01 f605 	lsl.w	r6, r1, r5
 800ae92:	1d72      	adds	r2, r6, #5
 800ae94:	0092      	lsls	r2, r2, #2
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 fc9d 	bl	800b7d6 <_calloc_r>
 800ae9c:	b160      	cbz	r0, 800aeb8 <_Balloc+0x64>
 800ae9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aea2:	e00e      	b.n	800aec2 <_Balloc+0x6e>
 800aea4:	2221      	movs	r2, #33	; 0x21
 800aea6:	2104      	movs	r1, #4
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 fc94 	bl	800b7d6 <_calloc_r>
 800aeae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeb0:	60f0      	str	r0, [r6, #12]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1e4      	bne.n	800ae82 <_Balloc+0x2e>
 800aeb8:	2000      	movs	r0, #0
 800aeba:	bd70      	pop	{r4, r5, r6, pc}
 800aebc:	6802      	ldr	r2, [r0, #0]
 800aebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aec2:	2300      	movs	r3, #0
 800aec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aec8:	e7f7      	b.n	800aeba <_Balloc+0x66>
 800aeca:	bf00      	nop
 800aecc:	0800c6ce 	.word	0x0800c6ce
 800aed0:	0800c830 	.word	0x0800c830

0800aed4 <_Bfree>:
 800aed4:	b570      	push	{r4, r5, r6, lr}
 800aed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aed8:	4605      	mov	r5, r0
 800aeda:	460c      	mov	r4, r1
 800aedc:	b976      	cbnz	r6, 800aefc <_Bfree+0x28>
 800aede:	2010      	movs	r0, #16
 800aee0:	f7ff ff9e 	bl	800ae20 <malloc>
 800aee4:	4602      	mov	r2, r0
 800aee6:	6268      	str	r0, [r5, #36]	; 0x24
 800aee8:	b920      	cbnz	r0, 800aef4 <_Bfree+0x20>
 800aeea:	4b09      	ldr	r3, [pc, #36]	; (800af10 <_Bfree+0x3c>)
 800aeec:	4809      	ldr	r0, [pc, #36]	; (800af14 <_Bfree+0x40>)
 800aeee:	218a      	movs	r1, #138	; 0x8a
 800aef0:	f001 f8ac 	bl	800c04c <__assert_func>
 800aef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aef8:	6006      	str	r6, [r0, #0]
 800aefa:	60c6      	str	r6, [r0, #12]
 800aefc:	b13c      	cbz	r4, 800af0e <_Bfree+0x3a>
 800aefe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af00:	6862      	ldr	r2, [r4, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af08:	6021      	str	r1, [r4, #0]
 800af0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af0e:	bd70      	pop	{r4, r5, r6, pc}
 800af10:	0800c6ce 	.word	0x0800c6ce
 800af14:	0800c830 	.word	0x0800c830

0800af18 <__multadd>:
 800af18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af1c:	690d      	ldr	r5, [r1, #16]
 800af1e:	4607      	mov	r7, r0
 800af20:	460c      	mov	r4, r1
 800af22:	461e      	mov	r6, r3
 800af24:	f101 0c14 	add.w	ip, r1, #20
 800af28:	2000      	movs	r0, #0
 800af2a:	f8dc 3000 	ldr.w	r3, [ip]
 800af2e:	b299      	uxth	r1, r3
 800af30:	fb02 6101 	mla	r1, r2, r1, r6
 800af34:	0c1e      	lsrs	r6, r3, #16
 800af36:	0c0b      	lsrs	r3, r1, #16
 800af38:	fb02 3306 	mla	r3, r2, r6, r3
 800af3c:	b289      	uxth	r1, r1
 800af3e:	3001      	adds	r0, #1
 800af40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af44:	4285      	cmp	r5, r0
 800af46:	f84c 1b04 	str.w	r1, [ip], #4
 800af4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af4e:	dcec      	bgt.n	800af2a <__multadd+0x12>
 800af50:	b30e      	cbz	r6, 800af96 <__multadd+0x7e>
 800af52:	68a3      	ldr	r3, [r4, #8]
 800af54:	42ab      	cmp	r3, r5
 800af56:	dc19      	bgt.n	800af8c <__multadd+0x74>
 800af58:	6861      	ldr	r1, [r4, #4]
 800af5a:	4638      	mov	r0, r7
 800af5c:	3101      	adds	r1, #1
 800af5e:	f7ff ff79 	bl	800ae54 <_Balloc>
 800af62:	4680      	mov	r8, r0
 800af64:	b928      	cbnz	r0, 800af72 <__multadd+0x5a>
 800af66:	4602      	mov	r2, r0
 800af68:	4b0c      	ldr	r3, [pc, #48]	; (800af9c <__multadd+0x84>)
 800af6a:	480d      	ldr	r0, [pc, #52]	; (800afa0 <__multadd+0x88>)
 800af6c:	21b5      	movs	r1, #181	; 0xb5
 800af6e:	f001 f86d 	bl	800c04c <__assert_func>
 800af72:	6922      	ldr	r2, [r4, #16]
 800af74:	3202      	adds	r2, #2
 800af76:	f104 010c 	add.w	r1, r4, #12
 800af7a:	0092      	lsls	r2, r2, #2
 800af7c:	300c      	adds	r0, #12
 800af7e:	f7fc fc91 	bl	80078a4 <memcpy>
 800af82:	4621      	mov	r1, r4
 800af84:	4638      	mov	r0, r7
 800af86:	f7ff ffa5 	bl	800aed4 <_Bfree>
 800af8a:	4644      	mov	r4, r8
 800af8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af90:	3501      	adds	r5, #1
 800af92:	615e      	str	r6, [r3, #20]
 800af94:	6125      	str	r5, [r4, #16]
 800af96:	4620      	mov	r0, r4
 800af98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af9c:	0800c740 	.word	0x0800c740
 800afa0:	0800c830 	.word	0x0800c830

0800afa4 <__s2b>:
 800afa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	460c      	mov	r4, r1
 800afaa:	4615      	mov	r5, r2
 800afac:	461f      	mov	r7, r3
 800afae:	2209      	movs	r2, #9
 800afb0:	3308      	adds	r3, #8
 800afb2:	4606      	mov	r6, r0
 800afb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800afb8:	2100      	movs	r1, #0
 800afba:	2201      	movs	r2, #1
 800afbc:	429a      	cmp	r2, r3
 800afbe:	db09      	blt.n	800afd4 <__s2b+0x30>
 800afc0:	4630      	mov	r0, r6
 800afc2:	f7ff ff47 	bl	800ae54 <_Balloc>
 800afc6:	b940      	cbnz	r0, 800afda <__s2b+0x36>
 800afc8:	4602      	mov	r2, r0
 800afca:	4b19      	ldr	r3, [pc, #100]	; (800b030 <__s2b+0x8c>)
 800afcc:	4819      	ldr	r0, [pc, #100]	; (800b034 <__s2b+0x90>)
 800afce:	21ce      	movs	r1, #206	; 0xce
 800afd0:	f001 f83c 	bl	800c04c <__assert_func>
 800afd4:	0052      	lsls	r2, r2, #1
 800afd6:	3101      	adds	r1, #1
 800afd8:	e7f0      	b.n	800afbc <__s2b+0x18>
 800afda:	9b08      	ldr	r3, [sp, #32]
 800afdc:	6143      	str	r3, [r0, #20]
 800afde:	2d09      	cmp	r5, #9
 800afe0:	f04f 0301 	mov.w	r3, #1
 800afe4:	6103      	str	r3, [r0, #16]
 800afe6:	dd16      	ble.n	800b016 <__s2b+0x72>
 800afe8:	f104 0909 	add.w	r9, r4, #9
 800afec:	46c8      	mov	r8, r9
 800afee:	442c      	add	r4, r5
 800aff0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aff4:	4601      	mov	r1, r0
 800aff6:	3b30      	subs	r3, #48	; 0x30
 800aff8:	220a      	movs	r2, #10
 800affa:	4630      	mov	r0, r6
 800affc:	f7ff ff8c 	bl	800af18 <__multadd>
 800b000:	45a0      	cmp	r8, r4
 800b002:	d1f5      	bne.n	800aff0 <__s2b+0x4c>
 800b004:	f1a5 0408 	sub.w	r4, r5, #8
 800b008:	444c      	add	r4, r9
 800b00a:	1b2d      	subs	r5, r5, r4
 800b00c:	1963      	adds	r3, r4, r5
 800b00e:	42bb      	cmp	r3, r7
 800b010:	db04      	blt.n	800b01c <__s2b+0x78>
 800b012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b016:	340a      	adds	r4, #10
 800b018:	2509      	movs	r5, #9
 800b01a:	e7f6      	b.n	800b00a <__s2b+0x66>
 800b01c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b020:	4601      	mov	r1, r0
 800b022:	3b30      	subs	r3, #48	; 0x30
 800b024:	220a      	movs	r2, #10
 800b026:	4630      	mov	r0, r6
 800b028:	f7ff ff76 	bl	800af18 <__multadd>
 800b02c:	e7ee      	b.n	800b00c <__s2b+0x68>
 800b02e:	bf00      	nop
 800b030:	0800c740 	.word	0x0800c740
 800b034:	0800c830 	.word	0x0800c830

0800b038 <__hi0bits>:
 800b038:	0c03      	lsrs	r3, r0, #16
 800b03a:	041b      	lsls	r3, r3, #16
 800b03c:	b9d3      	cbnz	r3, 800b074 <__hi0bits+0x3c>
 800b03e:	0400      	lsls	r0, r0, #16
 800b040:	2310      	movs	r3, #16
 800b042:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b046:	bf04      	itt	eq
 800b048:	0200      	lsleq	r0, r0, #8
 800b04a:	3308      	addeq	r3, #8
 800b04c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b050:	bf04      	itt	eq
 800b052:	0100      	lsleq	r0, r0, #4
 800b054:	3304      	addeq	r3, #4
 800b056:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b05a:	bf04      	itt	eq
 800b05c:	0080      	lsleq	r0, r0, #2
 800b05e:	3302      	addeq	r3, #2
 800b060:	2800      	cmp	r0, #0
 800b062:	db05      	blt.n	800b070 <__hi0bits+0x38>
 800b064:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b068:	f103 0301 	add.w	r3, r3, #1
 800b06c:	bf08      	it	eq
 800b06e:	2320      	moveq	r3, #32
 800b070:	4618      	mov	r0, r3
 800b072:	4770      	bx	lr
 800b074:	2300      	movs	r3, #0
 800b076:	e7e4      	b.n	800b042 <__hi0bits+0xa>

0800b078 <__lo0bits>:
 800b078:	6803      	ldr	r3, [r0, #0]
 800b07a:	f013 0207 	ands.w	r2, r3, #7
 800b07e:	4601      	mov	r1, r0
 800b080:	d00b      	beq.n	800b09a <__lo0bits+0x22>
 800b082:	07da      	lsls	r2, r3, #31
 800b084:	d423      	bmi.n	800b0ce <__lo0bits+0x56>
 800b086:	0798      	lsls	r0, r3, #30
 800b088:	bf49      	itett	mi
 800b08a:	085b      	lsrmi	r3, r3, #1
 800b08c:	089b      	lsrpl	r3, r3, #2
 800b08e:	2001      	movmi	r0, #1
 800b090:	600b      	strmi	r3, [r1, #0]
 800b092:	bf5c      	itt	pl
 800b094:	600b      	strpl	r3, [r1, #0]
 800b096:	2002      	movpl	r0, #2
 800b098:	4770      	bx	lr
 800b09a:	b298      	uxth	r0, r3
 800b09c:	b9a8      	cbnz	r0, 800b0ca <__lo0bits+0x52>
 800b09e:	0c1b      	lsrs	r3, r3, #16
 800b0a0:	2010      	movs	r0, #16
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	b90a      	cbnz	r2, 800b0aa <__lo0bits+0x32>
 800b0a6:	3008      	adds	r0, #8
 800b0a8:	0a1b      	lsrs	r3, r3, #8
 800b0aa:	071a      	lsls	r2, r3, #28
 800b0ac:	bf04      	itt	eq
 800b0ae:	091b      	lsreq	r3, r3, #4
 800b0b0:	3004      	addeq	r0, #4
 800b0b2:	079a      	lsls	r2, r3, #30
 800b0b4:	bf04      	itt	eq
 800b0b6:	089b      	lsreq	r3, r3, #2
 800b0b8:	3002      	addeq	r0, #2
 800b0ba:	07da      	lsls	r2, r3, #31
 800b0bc:	d403      	bmi.n	800b0c6 <__lo0bits+0x4e>
 800b0be:	085b      	lsrs	r3, r3, #1
 800b0c0:	f100 0001 	add.w	r0, r0, #1
 800b0c4:	d005      	beq.n	800b0d2 <__lo0bits+0x5a>
 800b0c6:	600b      	str	r3, [r1, #0]
 800b0c8:	4770      	bx	lr
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	e7e9      	b.n	800b0a2 <__lo0bits+0x2a>
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	4770      	bx	lr
 800b0d2:	2020      	movs	r0, #32
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <__i2b>:
 800b0d8:	b510      	push	{r4, lr}
 800b0da:	460c      	mov	r4, r1
 800b0dc:	2101      	movs	r1, #1
 800b0de:	f7ff feb9 	bl	800ae54 <_Balloc>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	b928      	cbnz	r0, 800b0f2 <__i2b+0x1a>
 800b0e6:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <__i2b+0x24>)
 800b0e8:	4805      	ldr	r0, [pc, #20]	; (800b100 <__i2b+0x28>)
 800b0ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0ee:	f000 ffad 	bl	800c04c <__assert_func>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	6144      	str	r4, [r0, #20]
 800b0f6:	6103      	str	r3, [r0, #16]
 800b0f8:	bd10      	pop	{r4, pc}
 800b0fa:	bf00      	nop
 800b0fc:	0800c740 	.word	0x0800c740
 800b100:	0800c830 	.word	0x0800c830

0800b104 <__multiply>:
 800b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b108:	4691      	mov	r9, r2
 800b10a:	690a      	ldr	r2, [r1, #16]
 800b10c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b110:	429a      	cmp	r2, r3
 800b112:	bfb8      	it	lt
 800b114:	460b      	movlt	r3, r1
 800b116:	460c      	mov	r4, r1
 800b118:	bfbc      	itt	lt
 800b11a:	464c      	movlt	r4, r9
 800b11c:	4699      	movlt	r9, r3
 800b11e:	6927      	ldr	r7, [r4, #16]
 800b120:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b124:	68a3      	ldr	r3, [r4, #8]
 800b126:	6861      	ldr	r1, [r4, #4]
 800b128:	eb07 060a 	add.w	r6, r7, sl
 800b12c:	42b3      	cmp	r3, r6
 800b12e:	b085      	sub	sp, #20
 800b130:	bfb8      	it	lt
 800b132:	3101      	addlt	r1, #1
 800b134:	f7ff fe8e 	bl	800ae54 <_Balloc>
 800b138:	b930      	cbnz	r0, 800b148 <__multiply+0x44>
 800b13a:	4602      	mov	r2, r0
 800b13c:	4b44      	ldr	r3, [pc, #272]	; (800b250 <__multiply+0x14c>)
 800b13e:	4845      	ldr	r0, [pc, #276]	; (800b254 <__multiply+0x150>)
 800b140:	f240 115d 	movw	r1, #349	; 0x15d
 800b144:	f000 ff82 	bl	800c04c <__assert_func>
 800b148:	f100 0514 	add.w	r5, r0, #20
 800b14c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b150:	462b      	mov	r3, r5
 800b152:	2200      	movs	r2, #0
 800b154:	4543      	cmp	r3, r8
 800b156:	d321      	bcc.n	800b19c <__multiply+0x98>
 800b158:	f104 0314 	add.w	r3, r4, #20
 800b15c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b160:	f109 0314 	add.w	r3, r9, #20
 800b164:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b168:	9202      	str	r2, [sp, #8]
 800b16a:	1b3a      	subs	r2, r7, r4
 800b16c:	3a15      	subs	r2, #21
 800b16e:	f022 0203 	bic.w	r2, r2, #3
 800b172:	3204      	adds	r2, #4
 800b174:	f104 0115 	add.w	r1, r4, #21
 800b178:	428f      	cmp	r7, r1
 800b17a:	bf38      	it	cc
 800b17c:	2204      	movcc	r2, #4
 800b17e:	9201      	str	r2, [sp, #4]
 800b180:	9a02      	ldr	r2, [sp, #8]
 800b182:	9303      	str	r3, [sp, #12]
 800b184:	429a      	cmp	r2, r3
 800b186:	d80c      	bhi.n	800b1a2 <__multiply+0x9e>
 800b188:	2e00      	cmp	r6, #0
 800b18a:	dd03      	ble.n	800b194 <__multiply+0x90>
 800b18c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b190:	2b00      	cmp	r3, #0
 800b192:	d05a      	beq.n	800b24a <__multiply+0x146>
 800b194:	6106      	str	r6, [r0, #16]
 800b196:	b005      	add	sp, #20
 800b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19c:	f843 2b04 	str.w	r2, [r3], #4
 800b1a0:	e7d8      	b.n	800b154 <__multiply+0x50>
 800b1a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1a6:	f1ba 0f00 	cmp.w	sl, #0
 800b1aa:	d024      	beq.n	800b1f6 <__multiply+0xf2>
 800b1ac:	f104 0e14 	add.w	lr, r4, #20
 800b1b0:	46a9      	mov	r9, r5
 800b1b2:	f04f 0c00 	mov.w	ip, #0
 800b1b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b1ba:	f8d9 1000 	ldr.w	r1, [r9]
 800b1be:	fa1f fb82 	uxth.w	fp, r2
 800b1c2:	b289      	uxth	r1, r1
 800b1c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b1c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b1cc:	f8d9 2000 	ldr.w	r2, [r9]
 800b1d0:	4461      	add	r1, ip
 800b1d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b1da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1de:	b289      	uxth	r1, r1
 800b1e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1e4:	4577      	cmp	r7, lr
 800b1e6:	f849 1b04 	str.w	r1, [r9], #4
 800b1ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1ee:	d8e2      	bhi.n	800b1b6 <__multiply+0xb2>
 800b1f0:	9a01      	ldr	r2, [sp, #4]
 800b1f2:	f845 c002 	str.w	ip, [r5, r2]
 800b1f6:	9a03      	ldr	r2, [sp, #12]
 800b1f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	f1b9 0f00 	cmp.w	r9, #0
 800b202:	d020      	beq.n	800b246 <__multiply+0x142>
 800b204:	6829      	ldr	r1, [r5, #0]
 800b206:	f104 0c14 	add.w	ip, r4, #20
 800b20a:	46ae      	mov	lr, r5
 800b20c:	f04f 0a00 	mov.w	sl, #0
 800b210:	f8bc b000 	ldrh.w	fp, [ip]
 800b214:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b218:	fb09 220b 	mla	r2, r9, fp, r2
 800b21c:	4492      	add	sl, r2
 800b21e:	b289      	uxth	r1, r1
 800b220:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b224:	f84e 1b04 	str.w	r1, [lr], #4
 800b228:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b22c:	f8be 1000 	ldrh.w	r1, [lr]
 800b230:	0c12      	lsrs	r2, r2, #16
 800b232:	fb09 1102 	mla	r1, r9, r2, r1
 800b236:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b23a:	4567      	cmp	r7, ip
 800b23c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b240:	d8e6      	bhi.n	800b210 <__multiply+0x10c>
 800b242:	9a01      	ldr	r2, [sp, #4]
 800b244:	50a9      	str	r1, [r5, r2]
 800b246:	3504      	adds	r5, #4
 800b248:	e79a      	b.n	800b180 <__multiply+0x7c>
 800b24a:	3e01      	subs	r6, #1
 800b24c:	e79c      	b.n	800b188 <__multiply+0x84>
 800b24e:	bf00      	nop
 800b250:	0800c740 	.word	0x0800c740
 800b254:	0800c830 	.word	0x0800c830

0800b258 <__pow5mult>:
 800b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b25c:	4615      	mov	r5, r2
 800b25e:	f012 0203 	ands.w	r2, r2, #3
 800b262:	4606      	mov	r6, r0
 800b264:	460f      	mov	r7, r1
 800b266:	d007      	beq.n	800b278 <__pow5mult+0x20>
 800b268:	4c25      	ldr	r4, [pc, #148]	; (800b300 <__pow5mult+0xa8>)
 800b26a:	3a01      	subs	r2, #1
 800b26c:	2300      	movs	r3, #0
 800b26e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b272:	f7ff fe51 	bl	800af18 <__multadd>
 800b276:	4607      	mov	r7, r0
 800b278:	10ad      	asrs	r5, r5, #2
 800b27a:	d03d      	beq.n	800b2f8 <__pow5mult+0xa0>
 800b27c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b27e:	b97c      	cbnz	r4, 800b2a0 <__pow5mult+0x48>
 800b280:	2010      	movs	r0, #16
 800b282:	f7ff fdcd 	bl	800ae20 <malloc>
 800b286:	4602      	mov	r2, r0
 800b288:	6270      	str	r0, [r6, #36]	; 0x24
 800b28a:	b928      	cbnz	r0, 800b298 <__pow5mult+0x40>
 800b28c:	4b1d      	ldr	r3, [pc, #116]	; (800b304 <__pow5mult+0xac>)
 800b28e:	481e      	ldr	r0, [pc, #120]	; (800b308 <__pow5mult+0xb0>)
 800b290:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b294:	f000 feda 	bl	800c04c <__assert_func>
 800b298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b29c:	6004      	str	r4, [r0, #0]
 800b29e:	60c4      	str	r4, [r0, #12]
 800b2a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2a8:	b94c      	cbnz	r4, 800b2be <__pow5mult+0x66>
 800b2aa:	f240 2171 	movw	r1, #625	; 0x271
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f7ff ff12 	bl	800b0d8 <__i2b>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	6003      	str	r3, [r0, #0]
 800b2be:	f04f 0900 	mov.w	r9, #0
 800b2c2:	07eb      	lsls	r3, r5, #31
 800b2c4:	d50a      	bpl.n	800b2dc <__pow5mult+0x84>
 800b2c6:	4639      	mov	r1, r7
 800b2c8:	4622      	mov	r2, r4
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f7ff ff1a 	bl	800b104 <__multiply>
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	4680      	mov	r8, r0
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f7ff fdfd 	bl	800aed4 <_Bfree>
 800b2da:	4647      	mov	r7, r8
 800b2dc:	106d      	asrs	r5, r5, #1
 800b2de:	d00b      	beq.n	800b2f8 <__pow5mult+0xa0>
 800b2e0:	6820      	ldr	r0, [r4, #0]
 800b2e2:	b938      	cbnz	r0, 800b2f4 <__pow5mult+0x9c>
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7ff ff0b 	bl	800b104 <__multiply>
 800b2ee:	6020      	str	r0, [r4, #0]
 800b2f0:	f8c0 9000 	str.w	r9, [r0]
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	e7e4      	b.n	800b2c2 <__pow5mult+0x6a>
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2fe:	bf00      	nop
 800b300:	0800c980 	.word	0x0800c980
 800b304:	0800c6ce 	.word	0x0800c6ce
 800b308:	0800c830 	.word	0x0800c830

0800b30c <__lshift>:
 800b30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b310:	460c      	mov	r4, r1
 800b312:	6849      	ldr	r1, [r1, #4]
 800b314:	6923      	ldr	r3, [r4, #16]
 800b316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	4607      	mov	r7, r0
 800b31e:	4691      	mov	r9, r2
 800b320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b324:	f108 0601 	add.w	r6, r8, #1
 800b328:	42b3      	cmp	r3, r6
 800b32a:	db0b      	blt.n	800b344 <__lshift+0x38>
 800b32c:	4638      	mov	r0, r7
 800b32e:	f7ff fd91 	bl	800ae54 <_Balloc>
 800b332:	4605      	mov	r5, r0
 800b334:	b948      	cbnz	r0, 800b34a <__lshift+0x3e>
 800b336:	4602      	mov	r2, r0
 800b338:	4b2a      	ldr	r3, [pc, #168]	; (800b3e4 <__lshift+0xd8>)
 800b33a:	482b      	ldr	r0, [pc, #172]	; (800b3e8 <__lshift+0xdc>)
 800b33c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b340:	f000 fe84 	bl	800c04c <__assert_func>
 800b344:	3101      	adds	r1, #1
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	e7ee      	b.n	800b328 <__lshift+0x1c>
 800b34a:	2300      	movs	r3, #0
 800b34c:	f100 0114 	add.w	r1, r0, #20
 800b350:	f100 0210 	add.w	r2, r0, #16
 800b354:	4618      	mov	r0, r3
 800b356:	4553      	cmp	r3, sl
 800b358:	db37      	blt.n	800b3ca <__lshift+0xbe>
 800b35a:	6920      	ldr	r0, [r4, #16]
 800b35c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b360:	f104 0314 	add.w	r3, r4, #20
 800b364:	f019 091f 	ands.w	r9, r9, #31
 800b368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b36c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b370:	d02f      	beq.n	800b3d2 <__lshift+0xc6>
 800b372:	f1c9 0e20 	rsb	lr, r9, #32
 800b376:	468a      	mov	sl, r1
 800b378:	f04f 0c00 	mov.w	ip, #0
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	fa02 f209 	lsl.w	r2, r2, r9
 800b382:	ea42 020c 	orr.w	r2, r2, ip
 800b386:	f84a 2b04 	str.w	r2, [sl], #4
 800b38a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38e:	4298      	cmp	r0, r3
 800b390:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b394:	d8f2      	bhi.n	800b37c <__lshift+0x70>
 800b396:	1b03      	subs	r3, r0, r4
 800b398:	3b15      	subs	r3, #21
 800b39a:	f023 0303 	bic.w	r3, r3, #3
 800b39e:	3304      	adds	r3, #4
 800b3a0:	f104 0215 	add.w	r2, r4, #21
 800b3a4:	4290      	cmp	r0, r2
 800b3a6:	bf38      	it	cc
 800b3a8:	2304      	movcc	r3, #4
 800b3aa:	f841 c003 	str.w	ip, [r1, r3]
 800b3ae:	f1bc 0f00 	cmp.w	ip, #0
 800b3b2:	d001      	beq.n	800b3b8 <__lshift+0xac>
 800b3b4:	f108 0602 	add.w	r6, r8, #2
 800b3b8:	3e01      	subs	r6, #1
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	612e      	str	r6, [r5, #16]
 800b3be:	4621      	mov	r1, r4
 800b3c0:	f7ff fd88 	bl	800aed4 <_Bfree>
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	e7c1      	b.n	800b356 <__lshift+0x4a>
 800b3d2:	3904      	subs	r1, #4
 800b3d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3dc:	4298      	cmp	r0, r3
 800b3de:	d8f9      	bhi.n	800b3d4 <__lshift+0xc8>
 800b3e0:	e7ea      	b.n	800b3b8 <__lshift+0xac>
 800b3e2:	bf00      	nop
 800b3e4:	0800c740 	.word	0x0800c740
 800b3e8:	0800c830 	.word	0x0800c830

0800b3ec <__mcmp>:
 800b3ec:	b530      	push	{r4, r5, lr}
 800b3ee:	6902      	ldr	r2, [r0, #16]
 800b3f0:	690c      	ldr	r4, [r1, #16]
 800b3f2:	1b12      	subs	r2, r2, r4
 800b3f4:	d10e      	bne.n	800b414 <__mcmp+0x28>
 800b3f6:	f100 0314 	add.w	r3, r0, #20
 800b3fa:	3114      	adds	r1, #20
 800b3fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b400:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b404:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b408:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b40c:	42a5      	cmp	r5, r4
 800b40e:	d003      	beq.n	800b418 <__mcmp+0x2c>
 800b410:	d305      	bcc.n	800b41e <__mcmp+0x32>
 800b412:	2201      	movs	r2, #1
 800b414:	4610      	mov	r0, r2
 800b416:	bd30      	pop	{r4, r5, pc}
 800b418:	4283      	cmp	r3, r0
 800b41a:	d3f3      	bcc.n	800b404 <__mcmp+0x18>
 800b41c:	e7fa      	b.n	800b414 <__mcmp+0x28>
 800b41e:	f04f 32ff 	mov.w	r2, #4294967295
 800b422:	e7f7      	b.n	800b414 <__mcmp+0x28>

0800b424 <__mdiff>:
 800b424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b428:	460c      	mov	r4, r1
 800b42a:	4606      	mov	r6, r0
 800b42c:	4611      	mov	r1, r2
 800b42e:	4620      	mov	r0, r4
 800b430:	4690      	mov	r8, r2
 800b432:	f7ff ffdb 	bl	800b3ec <__mcmp>
 800b436:	1e05      	subs	r5, r0, #0
 800b438:	d110      	bne.n	800b45c <__mdiff+0x38>
 800b43a:	4629      	mov	r1, r5
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7ff fd09 	bl	800ae54 <_Balloc>
 800b442:	b930      	cbnz	r0, 800b452 <__mdiff+0x2e>
 800b444:	4b3a      	ldr	r3, [pc, #232]	; (800b530 <__mdiff+0x10c>)
 800b446:	4602      	mov	r2, r0
 800b448:	f240 2132 	movw	r1, #562	; 0x232
 800b44c:	4839      	ldr	r0, [pc, #228]	; (800b534 <__mdiff+0x110>)
 800b44e:	f000 fdfd 	bl	800c04c <__assert_func>
 800b452:	2301      	movs	r3, #1
 800b454:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45c:	bfa4      	itt	ge
 800b45e:	4643      	movge	r3, r8
 800b460:	46a0      	movge	r8, r4
 800b462:	4630      	mov	r0, r6
 800b464:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b468:	bfa6      	itte	ge
 800b46a:	461c      	movge	r4, r3
 800b46c:	2500      	movge	r5, #0
 800b46e:	2501      	movlt	r5, #1
 800b470:	f7ff fcf0 	bl	800ae54 <_Balloc>
 800b474:	b920      	cbnz	r0, 800b480 <__mdiff+0x5c>
 800b476:	4b2e      	ldr	r3, [pc, #184]	; (800b530 <__mdiff+0x10c>)
 800b478:	4602      	mov	r2, r0
 800b47a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b47e:	e7e5      	b.n	800b44c <__mdiff+0x28>
 800b480:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b484:	6926      	ldr	r6, [r4, #16]
 800b486:	60c5      	str	r5, [r0, #12]
 800b488:	f104 0914 	add.w	r9, r4, #20
 800b48c:	f108 0514 	add.w	r5, r8, #20
 800b490:	f100 0e14 	add.w	lr, r0, #20
 800b494:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b49c:	f108 0210 	add.w	r2, r8, #16
 800b4a0:	46f2      	mov	sl, lr
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4ac:	fa1f f883 	uxth.w	r8, r3
 800b4b0:	fa11 f18b 	uxtah	r1, r1, fp
 800b4b4:	0c1b      	lsrs	r3, r3, #16
 800b4b6:	eba1 0808 	sub.w	r8, r1, r8
 800b4ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4c2:	fa1f f888 	uxth.w	r8, r8
 800b4c6:	1419      	asrs	r1, r3, #16
 800b4c8:	454e      	cmp	r6, r9
 800b4ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4ce:	f84a 3b04 	str.w	r3, [sl], #4
 800b4d2:	d8e7      	bhi.n	800b4a4 <__mdiff+0x80>
 800b4d4:	1b33      	subs	r3, r6, r4
 800b4d6:	3b15      	subs	r3, #21
 800b4d8:	f023 0303 	bic.w	r3, r3, #3
 800b4dc:	3304      	adds	r3, #4
 800b4de:	3415      	adds	r4, #21
 800b4e0:	42a6      	cmp	r6, r4
 800b4e2:	bf38      	it	cc
 800b4e4:	2304      	movcc	r3, #4
 800b4e6:	441d      	add	r5, r3
 800b4e8:	4473      	add	r3, lr
 800b4ea:	469e      	mov	lr, r3
 800b4ec:	462e      	mov	r6, r5
 800b4ee:	4566      	cmp	r6, ip
 800b4f0:	d30e      	bcc.n	800b510 <__mdiff+0xec>
 800b4f2:	f10c 0203 	add.w	r2, ip, #3
 800b4f6:	1b52      	subs	r2, r2, r5
 800b4f8:	f022 0203 	bic.w	r2, r2, #3
 800b4fc:	3d03      	subs	r5, #3
 800b4fe:	45ac      	cmp	ip, r5
 800b500:	bf38      	it	cc
 800b502:	2200      	movcc	r2, #0
 800b504:	441a      	add	r2, r3
 800b506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b50a:	b17b      	cbz	r3, 800b52c <__mdiff+0x108>
 800b50c:	6107      	str	r7, [r0, #16]
 800b50e:	e7a3      	b.n	800b458 <__mdiff+0x34>
 800b510:	f856 8b04 	ldr.w	r8, [r6], #4
 800b514:	fa11 f288 	uxtah	r2, r1, r8
 800b518:	1414      	asrs	r4, r2, #16
 800b51a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b51e:	b292      	uxth	r2, r2
 800b520:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b524:	f84e 2b04 	str.w	r2, [lr], #4
 800b528:	1421      	asrs	r1, r4, #16
 800b52a:	e7e0      	b.n	800b4ee <__mdiff+0xca>
 800b52c:	3f01      	subs	r7, #1
 800b52e:	e7ea      	b.n	800b506 <__mdiff+0xe2>
 800b530:	0800c740 	.word	0x0800c740
 800b534:	0800c830 	.word	0x0800c830

0800b538 <__ulp>:
 800b538:	b082      	sub	sp, #8
 800b53a:	ed8d 0b00 	vstr	d0, [sp]
 800b53e:	9b01      	ldr	r3, [sp, #4]
 800b540:	4912      	ldr	r1, [pc, #72]	; (800b58c <__ulp+0x54>)
 800b542:	4019      	ands	r1, r3
 800b544:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b548:	2900      	cmp	r1, #0
 800b54a:	dd05      	ble.n	800b558 <__ulp+0x20>
 800b54c:	2200      	movs	r2, #0
 800b54e:	460b      	mov	r3, r1
 800b550:	ec43 2b10 	vmov	d0, r2, r3
 800b554:	b002      	add	sp, #8
 800b556:	4770      	bx	lr
 800b558:	4249      	negs	r1, r1
 800b55a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b55e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b562:	f04f 0200 	mov.w	r2, #0
 800b566:	f04f 0300 	mov.w	r3, #0
 800b56a:	da04      	bge.n	800b576 <__ulp+0x3e>
 800b56c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b570:	fa41 f300 	asr.w	r3, r1, r0
 800b574:	e7ec      	b.n	800b550 <__ulp+0x18>
 800b576:	f1a0 0114 	sub.w	r1, r0, #20
 800b57a:	291e      	cmp	r1, #30
 800b57c:	bfda      	itte	le
 800b57e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b582:	fa20 f101 	lsrle.w	r1, r0, r1
 800b586:	2101      	movgt	r1, #1
 800b588:	460a      	mov	r2, r1
 800b58a:	e7e1      	b.n	800b550 <__ulp+0x18>
 800b58c:	7ff00000 	.word	0x7ff00000

0800b590 <__b2d>:
 800b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b592:	6905      	ldr	r5, [r0, #16]
 800b594:	f100 0714 	add.w	r7, r0, #20
 800b598:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b59c:	1f2e      	subs	r6, r5, #4
 800b59e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f7ff fd48 	bl	800b038 <__hi0bits>
 800b5a8:	f1c0 0320 	rsb	r3, r0, #32
 800b5ac:	280a      	cmp	r0, #10
 800b5ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b62c <__b2d+0x9c>
 800b5b2:	600b      	str	r3, [r1, #0]
 800b5b4:	dc14      	bgt.n	800b5e0 <__b2d+0x50>
 800b5b6:	f1c0 0e0b 	rsb	lr, r0, #11
 800b5ba:	fa24 f10e 	lsr.w	r1, r4, lr
 800b5be:	42b7      	cmp	r7, r6
 800b5c0:	ea41 030c 	orr.w	r3, r1, ip
 800b5c4:	bf34      	ite	cc
 800b5c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b5ca:	2100      	movcs	r1, #0
 800b5cc:	3015      	adds	r0, #21
 800b5ce:	fa04 f000 	lsl.w	r0, r4, r0
 800b5d2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b5d6:	ea40 0201 	orr.w	r2, r0, r1
 800b5da:	ec43 2b10 	vmov	d0, r2, r3
 800b5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e0:	42b7      	cmp	r7, r6
 800b5e2:	bf3a      	itte	cc
 800b5e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b5e8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b5ec:	2100      	movcs	r1, #0
 800b5ee:	380b      	subs	r0, #11
 800b5f0:	d017      	beq.n	800b622 <__b2d+0x92>
 800b5f2:	f1c0 0c20 	rsb	ip, r0, #32
 800b5f6:	fa04 f500 	lsl.w	r5, r4, r0
 800b5fa:	42be      	cmp	r6, r7
 800b5fc:	fa21 f40c 	lsr.w	r4, r1, ip
 800b600:	ea45 0504 	orr.w	r5, r5, r4
 800b604:	bf8c      	ite	hi
 800b606:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b60a:	2400      	movls	r4, #0
 800b60c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b610:	fa01 f000 	lsl.w	r0, r1, r0
 800b614:	fa24 f40c 	lsr.w	r4, r4, ip
 800b618:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b61c:	ea40 0204 	orr.w	r2, r0, r4
 800b620:	e7db      	b.n	800b5da <__b2d+0x4a>
 800b622:	ea44 030c 	orr.w	r3, r4, ip
 800b626:	460a      	mov	r2, r1
 800b628:	e7d7      	b.n	800b5da <__b2d+0x4a>
 800b62a:	bf00      	nop
 800b62c:	3ff00000 	.word	0x3ff00000

0800b630 <__d2b>:
 800b630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b634:	4689      	mov	r9, r1
 800b636:	2101      	movs	r1, #1
 800b638:	ec57 6b10 	vmov	r6, r7, d0
 800b63c:	4690      	mov	r8, r2
 800b63e:	f7ff fc09 	bl	800ae54 <_Balloc>
 800b642:	4604      	mov	r4, r0
 800b644:	b930      	cbnz	r0, 800b654 <__d2b+0x24>
 800b646:	4602      	mov	r2, r0
 800b648:	4b25      	ldr	r3, [pc, #148]	; (800b6e0 <__d2b+0xb0>)
 800b64a:	4826      	ldr	r0, [pc, #152]	; (800b6e4 <__d2b+0xb4>)
 800b64c:	f240 310a 	movw	r1, #778	; 0x30a
 800b650:	f000 fcfc 	bl	800c04c <__assert_func>
 800b654:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b658:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b65c:	bb35      	cbnz	r5, 800b6ac <__d2b+0x7c>
 800b65e:	2e00      	cmp	r6, #0
 800b660:	9301      	str	r3, [sp, #4]
 800b662:	d028      	beq.n	800b6b6 <__d2b+0x86>
 800b664:	4668      	mov	r0, sp
 800b666:	9600      	str	r6, [sp, #0]
 800b668:	f7ff fd06 	bl	800b078 <__lo0bits>
 800b66c:	9900      	ldr	r1, [sp, #0]
 800b66e:	b300      	cbz	r0, 800b6b2 <__d2b+0x82>
 800b670:	9a01      	ldr	r2, [sp, #4]
 800b672:	f1c0 0320 	rsb	r3, r0, #32
 800b676:	fa02 f303 	lsl.w	r3, r2, r3
 800b67a:	430b      	orrs	r3, r1
 800b67c:	40c2      	lsrs	r2, r0
 800b67e:	6163      	str	r3, [r4, #20]
 800b680:	9201      	str	r2, [sp, #4]
 800b682:	9b01      	ldr	r3, [sp, #4]
 800b684:	61a3      	str	r3, [r4, #24]
 800b686:	2b00      	cmp	r3, #0
 800b688:	bf14      	ite	ne
 800b68a:	2202      	movne	r2, #2
 800b68c:	2201      	moveq	r2, #1
 800b68e:	6122      	str	r2, [r4, #16]
 800b690:	b1d5      	cbz	r5, 800b6c8 <__d2b+0x98>
 800b692:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b696:	4405      	add	r5, r0
 800b698:	f8c9 5000 	str.w	r5, [r9]
 800b69c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6a0:	f8c8 0000 	str.w	r0, [r8]
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	b003      	add	sp, #12
 800b6a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6b0:	e7d5      	b.n	800b65e <__d2b+0x2e>
 800b6b2:	6161      	str	r1, [r4, #20]
 800b6b4:	e7e5      	b.n	800b682 <__d2b+0x52>
 800b6b6:	a801      	add	r0, sp, #4
 800b6b8:	f7ff fcde 	bl	800b078 <__lo0bits>
 800b6bc:	9b01      	ldr	r3, [sp, #4]
 800b6be:	6163      	str	r3, [r4, #20]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	6122      	str	r2, [r4, #16]
 800b6c4:	3020      	adds	r0, #32
 800b6c6:	e7e3      	b.n	800b690 <__d2b+0x60>
 800b6c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6d0:	f8c9 0000 	str.w	r0, [r9]
 800b6d4:	6918      	ldr	r0, [r3, #16]
 800b6d6:	f7ff fcaf 	bl	800b038 <__hi0bits>
 800b6da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6de:	e7df      	b.n	800b6a0 <__d2b+0x70>
 800b6e0:	0800c740 	.word	0x0800c740
 800b6e4:	0800c830 	.word	0x0800c830

0800b6e8 <__ratio>:
 800b6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	4688      	mov	r8, r1
 800b6ee:	4669      	mov	r1, sp
 800b6f0:	4681      	mov	r9, r0
 800b6f2:	f7ff ff4d 	bl	800b590 <__b2d>
 800b6f6:	a901      	add	r1, sp, #4
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	ec55 4b10 	vmov	r4, r5, d0
 800b6fe:	f7ff ff47 	bl	800b590 <__b2d>
 800b702:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b706:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b70a:	eba3 0c02 	sub.w	ip, r3, r2
 800b70e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b712:	1a9b      	subs	r3, r3, r2
 800b714:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b718:	ec51 0b10 	vmov	r0, r1, d0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	bfd6      	itet	le
 800b720:	460a      	movle	r2, r1
 800b722:	462a      	movgt	r2, r5
 800b724:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b728:	468b      	mov	fp, r1
 800b72a:	462f      	mov	r7, r5
 800b72c:	bfd4      	ite	le
 800b72e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b732:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b736:	4620      	mov	r0, r4
 800b738:	ee10 2a10 	vmov	r2, s0
 800b73c:	465b      	mov	r3, fp
 800b73e:	4639      	mov	r1, r7
 800b740:	f7f5 f88c 	bl	800085c <__aeabi_ddiv>
 800b744:	ec41 0b10 	vmov	d0, r0, r1
 800b748:	b003      	add	sp, #12
 800b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b74e <__copybits>:
 800b74e:	3901      	subs	r1, #1
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	1149      	asrs	r1, r1, #5
 800b754:	6914      	ldr	r4, [r2, #16]
 800b756:	3101      	adds	r1, #1
 800b758:	f102 0314 	add.w	r3, r2, #20
 800b75c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b760:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b764:	1f05      	subs	r5, r0, #4
 800b766:	42a3      	cmp	r3, r4
 800b768:	d30c      	bcc.n	800b784 <__copybits+0x36>
 800b76a:	1aa3      	subs	r3, r4, r2
 800b76c:	3b11      	subs	r3, #17
 800b76e:	f023 0303 	bic.w	r3, r3, #3
 800b772:	3211      	adds	r2, #17
 800b774:	42a2      	cmp	r2, r4
 800b776:	bf88      	it	hi
 800b778:	2300      	movhi	r3, #0
 800b77a:	4418      	add	r0, r3
 800b77c:	2300      	movs	r3, #0
 800b77e:	4288      	cmp	r0, r1
 800b780:	d305      	bcc.n	800b78e <__copybits+0x40>
 800b782:	bd70      	pop	{r4, r5, r6, pc}
 800b784:	f853 6b04 	ldr.w	r6, [r3], #4
 800b788:	f845 6f04 	str.w	r6, [r5, #4]!
 800b78c:	e7eb      	b.n	800b766 <__copybits+0x18>
 800b78e:	f840 3b04 	str.w	r3, [r0], #4
 800b792:	e7f4      	b.n	800b77e <__copybits+0x30>

0800b794 <__any_on>:
 800b794:	f100 0214 	add.w	r2, r0, #20
 800b798:	6900      	ldr	r0, [r0, #16]
 800b79a:	114b      	asrs	r3, r1, #5
 800b79c:	4298      	cmp	r0, r3
 800b79e:	b510      	push	{r4, lr}
 800b7a0:	db11      	blt.n	800b7c6 <__any_on+0x32>
 800b7a2:	dd0a      	ble.n	800b7ba <__any_on+0x26>
 800b7a4:	f011 011f 	ands.w	r1, r1, #31
 800b7a8:	d007      	beq.n	800b7ba <__any_on+0x26>
 800b7aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7ae:	fa24 f001 	lsr.w	r0, r4, r1
 800b7b2:	fa00 f101 	lsl.w	r1, r0, r1
 800b7b6:	428c      	cmp	r4, r1
 800b7b8:	d10b      	bne.n	800b7d2 <__any_on+0x3e>
 800b7ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d803      	bhi.n	800b7ca <__any_on+0x36>
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	e7f7      	b.n	800b7ba <__any_on+0x26>
 800b7ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7ce:	2900      	cmp	r1, #0
 800b7d0:	d0f5      	beq.n	800b7be <__any_on+0x2a>
 800b7d2:	2001      	movs	r0, #1
 800b7d4:	e7f6      	b.n	800b7c4 <__any_on+0x30>

0800b7d6 <_calloc_r>:
 800b7d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7d8:	fba1 2402 	umull	r2, r4, r1, r2
 800b7dc:	b94c      	cbnz	r4, 800b7f2 <_calloc_r+0x1c>
 800b7de:	4611      	mov	r1, r2
 800b7e0:	9201      	str	r2, [sp, #4]
 800b7e2:	f000 f87b 	bl	800b8dc <_malloc_r>
 800b7e6:	9a01      	ldr	r2, [sp, #4]
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	b930      	cbnz	r0, 800b7fa <_calloc_r+0x24>
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	b003      	add	sp, #12
 800b7f0:	bd30      	pop	{r4, r5, pc}
 800b7f2:	220c      	movs	r2, #12
 800b7f4:	6002      	str	r2, [r0, #0]
 800b7f6:	2500      	movs	r5, #0
 800b7f8:	e7f8      	b.n	800b7ec <_calloc_r+0x16>
 800b7fa:	4621      	mov	r1, r4
 800b7fc:	f7fc f860 	bl	80078c0 <memset>
 800b800:	e7f4      	b.n	800b7ec <_calloc_r+0x16>
	...

0800b804 <_free_r>:
 800b804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b806:	2900      	cmp	r1, #0
 800b808:	d044      	beq.n	800b894 <_free_r+0x90>
 800b80a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b80e:	9001      	str	r0, [sp, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	f1a1 0404 	sub.w	r4, r1, #4
 800b816:	bfb8      	it	lt
 800b818:	18e4      	addlt	r4, r4, r3
 800b81a:	f000 fca5 	bl	800c168 <__malloc_lock>
 800b81e:	4a1e      	ldr	r2, [pc, #120]	; (800b898 <_free_r+0x94>)
 800b820:	9801      	ldr	r0, [sp, #4]
 800b822:	6813      	ldr	r3, [r2, #0]
 800b824:	b933      	cbnz	r3, 800b834 <_free_r+0x30>
 800b826:	6063      	str	r3, [r4, #4]
 800b828:	6014      	str	r4, [r2, #0]
 800b82a:	b003      	add	sp, #12
 800b82c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b830:	f000 bca0 	b.w	800c174 <__malloc_unlock>
 800b834:	42a3      	cmp	r3, r4
 800b836:	d908      	bls.n	800b84a <_free_r+0x46>
 800b838:	6825      	ldr	r5, [r4, #0]
 800b83a:	1961      	adds	r1, r4, r5
 800b83c:	428b      	cmp	r3, r1
 800b83e:	bf01      	itttt	eq
 800b840:	6819      	ldreq	r1, [r3, #0]
 800b842:	685b      	ldreq	r3, [r3, #4]
 800b844:	1949      	addeq	r1, r1, r5
 800b846:	6021      	streq	r1, [r4, #0]
 800b848:	e7ed      	b.n	800b826 <_free_r+0x22>
 800b84a:	461a      	mov	r2, r3
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	b10b      	cbz	r3, 800b854 <_free_r+0x50>
 800b850:	42a3      	cmp	r3, r4
 800b852:	d9fa      	bls.n	800b84a <_free_r+0x46>
 800b854:	6811      	ldr	r1, [r2, #0]
 800b856:	1855      	adds	r5, r2, r1
 800b858:	42a5      	cmp	r5, r4
 800b85a:	d10b      	bne.n	800b874 <_free_r+0x70>
 800b85c:	6824      	ldr	r4, [r4, #0]
 800b85e:	4421      	add	r1, r4
 800b860:	1854      	adds	r4, r2, r1
 800b862:	42a3      	cmp	r3, r4
 800b864:	6011      	str	r1, [r2, #0]
 800b866:	d1e0      	bne.n	800b82a <_free_r+0x26>
 800b868:	681c      	ldr	r4, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	6053      	str	r3, [r2, #4]
 800b86e:	4421      	add	r1, r4
 800b870:	6011      	str	r1, [r2, #0]
 800b872:	e7da      	b.n	800b82a <_free_r+0x26>
 800b874:	d902      	bls.n	800b87c <_free_r+0x78>
 800b876:	230c      	movs	r3, #12
 800b878:	6003      	str	r3, [r0, #0]
 800b87a:	e7d6      	b.n	800b82a <_free_r+0x26>
 800b87c:	6825      	ldr	r5, [r4, #0]
 800b87e:	1961      	adds	r1, r4, r5
 800b880:	428b      	cmp	r3, r1
 800b882:	bf04      	itt	eq
 800b884:	6819      	ldreq	r1, [r3, #0]
 800b886:	685b      	ldreq	r3, [r3, #4]
 800b888:	6063      	str	r3, [r4, #4]
 800b88a:	bf04      	itt	eq
 800b88c:	1949      	addeq	r1, r1, r5
 800b88e:	6021      	streq	r1, [r4, #0]
 800b890:	6054      	str	r4, [r2, #4]
 800b892:	e7ca      	b.n	800b82a <_free_r+0x26>
 800b894:	b003      	add	sp, #12
 800b896:	bd30      	pop	{r4, r5, pc}
 800b898:	200004d8 	.word	0x200004d8

0800b89c <sbrk_aligned>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	4e0e      	ldr	r6, [pc, #56]	; (800b8d8 <sbrk_aligned+0x3c>)
 800b8a0:	460c      	mov	r4, r1
 800b8a2:	6831      	ldr	r1, [r6, #0]
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	b911      	cbnz	r1, 800b8ae <sbrk_aligned+0x12>
 800b8a8:	f000 fb4a 	bl	800bf40 <_sbrk_r>
 800b8ac:	6030      	str	r0, [r6, #0]
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f000 fb45 	bl	800bf40 <_sbrk_r>
 800b8b6:	1c43      	adds	r3, r0, #1
 800b8b8:	d00a      	beq.n	800b8d0 <sbrk_aligned+0x34>
 800b8ba:	1cc4      	adds	r4, r0, #3
 800b8bc:	f024 0403 	bic.w	r4, r4, #3
 800b8c0:	42a0      	cmp	r0, r4
 800b8c2:	d007      	beq.n	800b8d4 <sbrk_aligned+0x38>
 800b8c4:	1a21      	subs	r1, r4, r0
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f000 fb3a 	bl	800bf40 <_sbrk_r>
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	d101      	bne.n	800b8d4 <sbrk_aligned+0x38>
 800b8d0:	f04f 34ff 	mov.w	r4, #4294967295
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
 800b8d8:	200004dc 	.word	0x200004dc

0800b8dc <_malloc_r>:
 800b8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e0:	1ccd      	adds	r5, r1, #3
 800b8e2:	f025 0503 	bic.w	r5, r5, #3
 800b8e6:	3508      	adds	r5, #8
 800b8e8:	2d0c      	cmp	r5, #12
 800b8ea:	bf38      	it	cc
 800b8ec:	250c      	movcc	r5, #12
 800b8ee:	2d00      	cmp	r5, #0
 800b8f0:	4607      	mov	r7, r0
 800b8f2:	db01      	blt.n	800b8f8 <_malloc_r+0x1c>
 800b8f4:	42a9      	cmp	r1, r5
 800b8f6:	d905      	bls.n	800b904 <_malloc_r+0x28>
 800b8f8:	230c      	movs	r3, #12
 800b8fa:	603b      	str	r3, [r7, #0]
 800b8fc:	2600      	movs	r6, #0
 800b8fe:	4630      	mov	r0, r6
 800b900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b904:	4e2e      	ldr	r6, [pc, #184]	; (800b9c0 <_malloc_r+0xe4>)
 800b906:	f000 fc2f 	bl	800c168 <__malloc_lock>
 800b90a:	6833      	ldr	r3, [r6, #0]
 800b90c:	461c      	mov	r4, r3
 800b90e:	bb34      	cbnz	r4, 800b95e <_malloc_r+0x82>
 800b910:	4629      	mov	r1, r5
 800b912:	4638      	mov	r0, r7
 800b914:	f7ff ffc2 	bl	800b89c <sbrk_aligned>
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	4604      	mov	r4, r0
 800b91c:	d14d      	bne.n	800b9ba <_malloc_r+0xde>
 800b91e:	6834      	ldr	r4, [r6, #0]
 800b920:	4626      	mov	r6, r4
 800b922:	2e00      	cmp	r6, #0
 800b924:	d140      	bne.n	800b9a8 <_malloc_r+0xcc>
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	4631      	mov	r1, r6
 800b92a:	4638      	mov	r0, r7
 800b92c:	eb04 0803 	add.w	r8, r4, r3
 800b930:	f000 fb06 	bl	800bf40 <_sbrk_r>
 800b934:	4580      	cmp	r8, r0
 800b936:	d13a      	bne.n	800b9ae <_malloc_r+0xd2>
 800b938:	6821      	ldr	r1, [r4, #0]
 800b93a:	3503      	adds	r5, #3
 800b93c:	1a6d      	subs	r5, r5, r1
 800b93e:	f025 0503 	bic.w	r5, r5, #3
 800b942:	3508      	adds	r5, #8
 800b944:	2d0c      	cmp	r5, #12
 800b946:	bf38      	it	cc
 800b948:	250c      	movcc	r5, #12
 800b94a:	4629      	mov	r1, r5
 800b94c:	4638      	mov	r0, r7
 800b94e:	f7ff ffa5 	bl	800b89c <sbrk_aligned>
 800b952:	3001      	adds	r0, #1
 800b954:	d02b      	beq.n	800b9ae <_malloc_r+0xd2>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	442b      	add	r3, r5
 800b95a:	6023      	str	r3, [r4, #0]
 800b95c:	e00e      	b.n	800b97c <_malloc_r+0xa0>
 800b95e:	6822      	ldr	r2, [r4, #0]
 800b960:	1b52      	subs	r2, r2, r5
 800b962:	d41e      	bmi.n	800b9a2 <_malloc_r+0xc6>
 800b964:	2a0b      	cmp	r2, #11
 800b966:	d916      	bls.n	800b996 <_malloc_r+0xba>
 800b968:	1961      	adds	r1, r4, r5
 800b96a:	42a3      	cmp	r3, r4
 800b96c:	6025      	str	r5, [r4, #0]
 800b96e:	bf18      	it	ne
 800b970:	6059      	strne	r1, [r3, #4]
 800b972:	6863      	ldr	r3, [r4, #4]
 800b974:	bf08      	it	eq
 800b976:	6031      	streq	r1, [r6, #0]
 800b978:	5162      	str	r2, [r4, r5]
 800b97a:	604b      	str	r3, [r1, #4]
 800b97c:	4638      	mov	r0, r7
 800b97e:	f104 060b 	add.w	r6, r4, #11
 800b982:	f000 fbf7 	bl	800c174 <__malloc_unlock>
 800b986:	f026 0607 	bic.w	r6, r6, #7
 800b98a:	1d23      	adds	r3, r4, #4
 800b98c:	1af2      	subs	r2, r6, r3
 800b98e:	d0b6      	beq.n	800b8fe <_malloc_r+0x22>
 800b990:	1b9b      	subs	r3, r3, r6
 800b992:	50a3      	str	r3, [r4, r2]
 800b994:	e7b3      	b.n	800b8fe <_malloc_r+0x22>
 800b996:	6862      	ldr	r2, [r4, #4]
 800b998:	42a3      	cmp	r3, r4
 800b99a:	bf0c      	ite	eq
 800b99c:	6032      	streq	r2, [r6, #0]
 800b99e:	605a      	strne	r2, [r3, #4]
 800b9a0:	e7ec      	b.n	800b97c <_malloc_r+0xa0>
 800b9a2:	4623      	mov	r3, r4
 800b9a4:	6864      	ldr	r4, [r4, #4]
 800b9a6:	e7b2      	b.n	800b90e <_malloc_r+0x32>
 800b9a8:	4634      	mov	r4, r6
 800b9aa:	6876      	ldr	r6, [r6, #4]
 800b9ac:	e7b9      	b.n	800b922 <_malloc_r+0x46>
 800b9ae:	230c      	movs	r3, #12
 800b9b0:	603b      	str	r3, [r7, #0]
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	f000 fbde 	bl	800c174 <__malloc_unlock>
 800b9b8:	e7a1      	b.n	800b8fe <_malloc_r+0x22>
 800b9ba:	6025      	str	r5, [r4, #0]
 800b9bc:	e7de      	b.n	800b97c <_malloc_r+0xa0>
 800b9be:	bf00      	nop
 800b9c0:	200004d8 	.word	0x200004d8

0800b9c4 <__ssputs_r>:
 800b9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c8:	688e      	ldr	r6, [r1, #8]
 800b9ca:	429e      	cmp	r6, r3
 800b9cc:	4682      	mov	sl, r0
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	4690      	mov	r8, r2
 800b9d2:	461f      	mov	r7, r3
 800b9d4:	d838      	bhi.n	800ba48 <__ssputs_r+0x84>
 800b9d6:	898a      	ldrh	r2, [r1, #12]
 800b9d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9dc:	d032      	beq.n	800ba44 <__ssputs_r+0x80>
 800b9de:	6825      	ldr	r5, [r4, #0]
 800b9e0:	6909      	ldr	r1, [r1, #16]
 800b9e2:	eba5 0901 	sub.w	r9, r5, r1
 800b9e6:	6965      	ldr	r5, [r4, #20]
 800b9e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	444b      	add	r3, r9
 800b9f4:	106d      	asrs	r5, r5, #1
 800b9f6:	429d      	cmp	r5, r3
 800b9f8:	bf38      	it	cc
 800b9fa:	461d      	movcc	r5, r3
 800b9fc:	0553      	lsls	r3, r2, #21
 800b9fe:	d531      	bpl.n	800ba64 <__ssputs_r+0xa0>
 800ba00:	4629      	mov	r1, r5
 800ba02:	f7ff ff6b 	bl	800b8dc <_malloc_r>
 800ba06:	4606      	mov	r6, r0
 800ba08:	b950      	cbnz	r0, 800ba20 <__ssputs_r+0x5c>
 800ba0a:	230c      	movs	r3, #12
 800ba0c:	f8ca 3000 	str.w	r3, [sl]
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba16:	81a3      	strh	r3, [r4, #12]
 800ba18:	f04f 30ff 	mov.w	r0, #4294967295
 800ba1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba20:	6921      	ldr	r1, [r4, #16]
 800ba22:	464a      	mov	r2, r9
 800ba24:	f7fb ff3e 	bl	80078a4 <memcpy>
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	6126      	str	r6, [r4, #16]
 800ba36:	6165      	str	r5, [r4, #20]
 800ba38:	444e      	add	r6, r9
 800ba3a:	eba5 0509 	sub.w	r5, r5, r9
 800ba3e:	6026      	str	r6, [r4, #0]
 800ba40:	60a5      	str	r5, [r4, #8]
 800ba42:	463e      	mov	r6, r7
 800ba44:	42be      	cmp	r6, r7
 800ba46:	d900      	bls.n	800ba4a <__ssputs_r+0x86>
 800ba48:	463e      	mov	r6, r7
 800ba4a:	6820      	ldr	r0, [r4, #0]
 800ba4c:	4632      	mov	r2, r6
 800ba4e:	4641      	mov	r1, r8
 800ba50:	f000 fb70 	bl	800c134 <memmove>
 800ba54:	68a3      	ldr	r3, [r4, #8]
 800ba56:	1b9b      	subs	r3, r3, r6
 800ba58:	60a3      	str	r3, [r4, #8]
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	4433      	add	r3, r6
 800ba5e:	6023      	str	r3, [r4, #0]
 800ba60:	2000      	movs	r0, #0
 800ba62:	e7db      	b.n	800ba1c <__ssputs_r+0x58>
 800ba64:	462a      	mov	r2, r5
 800ba66:	f000 fb8b 	bl	800c180 <_realloc_r>
 800ba6a:	4606      	mov	r6, r0
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d1e1      	bne.n	800ba34 <__ssputs_r+0x70>
 800ba70:	6921      	ldr	r1, [r4, #16]
 800ba72:	4650      	mov	r0, sl
 800ba74:	f7ff fec6 	bl	800b804 <_free_r>
 800ba78:	e7c7      	b.n	800ba0a <__ssputs_r+0x46>
	...

0800ba7c <_svfiprintf_r>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	4698      	mov	r8, r3
 800ba82:	898b      	ldrh	r3, [r1, #12]
 800ba84:	061b      	lsls	r3, r3, #24
 800ba86:	b09d      	sub	sp, #116	; 0x74
 800ba88:	4607      	mov	r7, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	4614      	mov	r4, r2
 800ba8e:	d50e      	bpl.n	800baae <_svfiprintf_r+0x32>
 800ba90:	690b      	ldr	r3, [r1, #16]
 800ba92:	b963      	cbnz	r3, 800baae <_svfiprintf_r+0x32>
 800ba94:	2140      	movs	r1, #64	; 0x40
 800ba96:	f7ff ff21 	bl	800b8dc <_malloc_r>
 800ba9a:	6028      	str	r0, [r5, #0]
 800ba9c:	6128      	str	r0, [r5, #16]
 800ba9e:	b920      	cbnz	r0, 800baaa <_svfiprintf_r+0x2e>
 800baa0:	230c      	movs	r3, #12
 800baa2:	603b      	str	r3, [r7, #0]
 800baa4:	f04f 30ff 	mov.w	r0, #4294967295
 800baa8:	e0d1      	b.n	800bc4e <_svfiprintf_r+0x1d2>
 800baaa:	2340      	movs	r3, #64	; 0x40
 800baac:	616b      	str	r3, [r5, #20]
 800baae:	2300      	movs	r3, #0
 800bab0:	9309      	str	r3, [sp, #36]	; 0x24
 800bab2:	2320      	movs	r3, #32
 800bab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bab8:	f8cd 800c 	str.w	r8, [sp, #12]
 800babc:	2330      	movs	r3, #48	; 0x30
 800babe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc68 <_svfiprintf_r+0x1ec>
 800bac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bac6:	f04f 0901 	mov.w	r9, #1
 800baca:	4623      	mov	r3, r4
 800bacc:	469a      	mov	sl, r3
 800bace:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bad2:	b10a      	cbz	r2, 800bad8 <_svfiprintf_r+0x5c>
 800bad4:	2a25      	cmp	r2, #37	; 0x25
 800bad6:	d1f9      	bne.n	800bacc <_svfiprintf_r+0x50>
 800bad8:	ebba 0b04 	subs.w	fp, sl, r4
 800badc:	d00b      	beq.n	800baf6 <_svfiprintf_r+0x7a>
 800bade:	465b      	mov	r3, fp
 800bae0:	4622      	mov	r2, r4
 800bae2:	4629      	mov	r1, r5
 800bae4:	4638      	mov	r0, r7
 800bae6:	f7ff ff6d 	bl	800b9c4 <__ssputs_r>
 800baea:	3001      	adds	r0, #1
 800baec:	f000 80aa 	beq.w	800bc44 <_svfiprintf_r+0x1c8>
 800baf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baf2:	445a      	add	r2, fp
 800baf4:	9209      	str	r2, [sp, #36]	; 0x24
 800baf6:	f89a 3000 	ldrb.w	r3, [sl]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 80a2 	beq.w	800bc44 <_svfiprintf_r+0x1c8>
 800bb00:	2300      	movs	r3, #0
 800bb02:	f04f 32ff 	mov.w	r2, #4294967295
 800bb06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb0a:	f10a 0a01 	add.w	sl, sl, #1
 800bb0e:	9304      	str	r3, [sp, #16]
 800bb10:	9307      	str	r3, [sp, #28]
 800bb12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb16:	931a      	str	r3, [sp, #104]	; 0x68
 800bb18:	4654      	mov	r4, sl
 800bb1a:	2205      	movs	r2, #5
 800bb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb20:	4851      	ldr	r0, [pc, #324]	; (800bc68 <_svfiprintf_r+0x1ec>)
 800bb22:	f7f4 fb65 	bl	80001f0 <memchr>
 800bb26:	9a04      	ldr	r2, [sp, #16]
 800bb28:	b9d8      	cbnz	r0, 800bb62 <_svfiprintf_r+0xe6>
 800bb2a:	06d0      	lsls	r0, r2, #27
 800bb2c:	bf44      	itt	mi
 800bb2e:	2320      	movmi	r3, #32
 800bb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb34:	0711      	lsls	r1, r2, #28
 800bb36:	bf44      	itt	mi
 800bb38:	232b      	movmi	r3, #43	; 0x2b
 800bb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb3e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb42:	2b2a      	cmp	r3, #42	; 0x2a
 800bb44:	d015      	beq.n	800bb72 <_svfiprintf_r+0xf6>
 800bb46:	9a07      	ldr	r2, [sp, #28]
 800bb48:	4654      	mov	r4, sl
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	f04f 0c0a 	mov.w	ip, #10
 800bb50:	4621      	mov	r1, r4
 800bb52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb56:	3b30      	subs	r3, #48	; 0x30
 800bb58:	2b09      	cmp	r3, #9
 800bb5a:	d94e      	bls.n	800bbfa <_svfiprintf_r+0x17e>
 800bb5c:	b1b0      	cbz	r0, 800bb8c <_svfiprintf_r+0x110>
 800bb5e:	9207      	str	r2, [sp, #28]
 800bb60:	e014      	b.n	800bb8c <_svfiprintf_r+0x110>
 800bb62:	eba0 0308 	sub.w	r3, r0, r8
 800bb66:	fa09 f303 	lsl.w	r3, r9, r3
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	9304      	str	r3, [sp, #16]
 800bb6e:	46a2      	mov	sl, r4
 800bb70:	e7d2      	b.n	800bb18 <_svfiprintf_r+0x9c>
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	1d19      	adds	r1, r3, #4
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	9103      	str	r1, [sp, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bfbb      	ittet	lt
 800bb7e:	425b      	neglt	r3, r3
 800bb80:	f042 0202 	orrlt.w	r2, r2, #2
 800bb84:	9307      	strge	r3, [sp, #28]
 800bb86:	9307      	strlt	r3, [sp, #28]
 800bb88:	bfb8      	it	lt
 800bb8a:	9204      	strlt	r2, [sp, #16]
 800bb8c:	7823      	ldrb	r3, [r4, #0]
 800bb8e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb90:	d10c      	bne.n	800bbac <_svfiprintf_r+0x130>
 800bb92:	7863      	ldrb	r3, [r4, #1]
 800bb94:	2b2a      	cmp	r3, #42	; 0x2a
 800bb96:	d135      	bne.n	800bc04 <_svfiprintf_r+0x188>
 800bb98:	9b03      	ldr	r3, [sp, #12]
 800bb9a:	1d1a      	adds	r2, r3, #4
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	9203      	str	r2, [sp, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	bfb8      	it	lt
 800bba4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bba8:	3402      	adds	r4, #2
 800bbaa:	9305      	str	r3, [sp, #20]
 800bbac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc78 <_svfiprintf_r+0x1fc>
 800bbb0:	7821      	ldrb	r1, [r4, #0]
 800bbb2:	2203      	movs	r2, #3
 800bbb4:	4650      	mov	r0, sl
 800bbb6:	f7f4 fb1b 	bl	80001f0 <memchr>
 800bbba:	b140      	cbz	r0, 800bbce <_svfiprintf_r+0x152>
 800bbbc:	2340      	movs	r3, #64	; 0x40
 800bbbe:	eba0 000a 	sub.w	r0, r0, sl
 800bbc2:	fa03 f000 	lsl.w	r0, r3, r0
 800bbc6:	9b04      	ldr	r3, [sp, #16]
 800bbc8:	4303      	orrs	r3, r0
 800bbca:	3401      	adds	r4, #1
 800bbcc:	9304      	str	r3, [sp, #16]
 800bbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd2:	4826      	ldr	r0, [pc, #152]	; (800bc6c <_svfiprintf_r+0x1f0>)
 800bbd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbd8:	2206      	movs	r2, #6
 800bbda:	f7f4 fb09 	bl	80001f0 <memchr>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d038      	beq.n	800bc54 <_svfiprintf_r+0x1d8>
 800bbe2:	4b23      	ldr	r3, [pc, #140]	; (800bc70 <_svfiprintf_r+0x1f4>)
 800bbe4:	bb1b      	cbnz	r3, 800bc2e <_svfiprintf_r+0x1b2>
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	3307      	adds	r3, #7
 800bbea:	f023 0307 	bic.w	r3, r3, #7
 800bbee:	3308      	adds	r3, #8
 800bbf0:	9303      	str	r3, [sp, #12]
 800bbf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf4:	4433      	add	r3, r6
 800bbf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf8:	e767      	b.n	800baca <_svfiprintf_r+0x4e>
 800bbfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbfe:	460c      	mov	r4, r1
 800bc00:	2001      	movs	r0, #1
 800bc02:	e7a5      	b.n	800bb50 <_svfiprintf_r+0xd4>
 800bc04:	2300      	movs	r3, #0
 800bc06:	3401      	adds	r4, #1
 800bc08:	9305      	str	r3, [sp, #20]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	f04f 0c0a 	mov.w	ip, #10
 800bc10:	4620      	mov	r0, r4
 800bc12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc16:	3a30      	subs	r2, #48	; 0x30
 800bc18:	2a09      	cmp	r2, #9
 800bc1a:	d903      	bls.n	800bc24 <_svfiprintf_r+0x1a8>
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0c5      	beq.n	800bbac <_svfiprintf_r+0x130>
 800bc20:	9105      	str	r1, [sp, #20]
 800bc22:	e7c3      	b.n	800bbac <_svfiprintf_r+0x130>
 800bc24:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc28:	4604      	mov	r4, r0
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e7f0      	b.n	800bc10 <_svfiprintf_r+0x194>
 800bc2e:	ab03      	add	r3, sp, #12
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	462a      	mov	r2, r5
 800bc34:	4b0f      	ldr	r3, [pc, #60]	; (800bc74 <_svfiprintf_r+0x1f8>)
 800bc36:	a904      	add	r1, sp, #16
 800bc38:	4638      	mov	r0, r7
 800bc3a:	f7fb fee9 	bl	8007a10 <_printf_float>
 800bc3e:	1c42      	adds	r2, r0, #1
 800bc40:	4606      	mov	r6, r0
 800bc42:	d1d6      	bne.n	800bbf2 <_svfiprintf_r+0x176>
 800bc44:	89ab      	ldrh	r3, [r5, #12]
 800bc46:	065b      	lsls	r3, r3, #25
 800bc48:	f53f af2c 	bmi.w	800baa4 <_svfiprintf_r+0x28>
 800bc4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc4e:	b01d      	add	sp, #116	; 0x74
 800bc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc54:	ab03      	add	r3, sp, #12
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	462a      	mov	r2, r5
 800bc5a:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <_svfiprintf_r+0x1f8>)
 800bc5c:	a904      	add	r1, sp, #16
 800bc5e:	4638      	mov	r0, r7
 800bc60:	f7fc f97a 	bl	8007f58 <_printf_i>
 800bc64:	e7eb      	b.n	800bc3e <_svfiprintf_r+0x1c2>
 800bc66:	bf00      	nop
 800bc68:	0800c98c 	.word	0x0800c98c
 800bc6c:	0800c996 	.word	0x0800c996
 800bc70:	08007a11 	.word	0x08007a11
 800bc74:	0800b9c5 	.word	0x0800b9c5
 800bc78:	0800c992 	.word	0x0800c992

0800bc7c <__sfputc_r>:
 800bc7c:	6893      	ldr	r3, [r2, #8]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	b410      	push	{r4}
 800bc84:	6093      	str	r3, [r2, #8]
 800bc86:	da08      	bge.n	800bc9a <__sfputc_r+0x1e>
 800bc88:	6994      	ldr	r4, [r2, #24]
 800bc8a:	42a3      	cmp	r3, r4
 800bc8c:	db01      	blt.n	800bc92 <__sfputc_r+0x16>
 800bc8e:	290a      	cmp	r1, #10
 800bc90:	d103      	bne.n	800bc9a <__sfputc_r+0x1e>
 800bc92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc96:	f7fd bbf7 	b.w	8009488 <__swbuf_r>
 800bc9a:	6813      	ldr	r3, [r2, #0]
 800bc9c:	1c58      	adds	r0, r3, #1
 800bc9e:	6010      	str	r0, [r2, #0]
 800bca0:	7019      	strb	r1, [r3, #0]
 800bca2:	4608      	mov	r0, r1
 800bca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <__sfputs_r>:
 800bcaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcac:	4606      	mov	r6, r0
 800bcae:	460f      	mov	r7, r1
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	18d5      	adds	r5, r2, r3
 800bcb4:	42ac      	cmp	r4, r5
 800bcb6:	d101      	bne.n	800bcbc <__sfputs_r+0x12>
 800bcb8:	2000      	movs	r0, #0
 800bcba:	e007      	b.n	800bccc <__sfputs_r+0x22>
 800bcbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc0:	463a      	mov	r2, r7
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7ff ffda 	bl	800bc7c <__sfputc_r>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	d1f3      	bne.n	800bcb4 <__sfputs_r+0xa>
 800bccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcd0 <_vfiprintf_r>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	b09d      	sub	sp, #116	; 0x74
 800bcd8:	4614      	mov	r4, r2
 800bcda:	4698      	mov	r8, r3
 800bcdc:	4606      	mov	r6, r0
 800bcde:	b118      	cbz	r0, 800bce8 <_vfiprintf_r+0x18>
 800bce0:	6983      	ldr	r3, [r0, #24]
 800bce2:	b90b      	cbnz	r3, 800bce8 <_vfiprintf_r+0x18>
 800bce4:	f7fe fc24 	bl	800a530 <__sinit>
 800bce8:	4b89      	ldr	r3, [pc, #548]	; (800bf10 <_vfiprintf_r+0x240>)
 800bcea:	429d      	cmp	r5, r3
 800bcec:	d11b      	bne.n	800bd26 <_vfiprintf_r+0x56>
 800bcee:	6875      	ldr	r5, [r6, #4]
 800bcf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf2:	07d9      	lsls	r1, r3, #31
 800bcf4:	d405      	bmi.n	800bd02 <_vfiprintf_r+0x32>
 800bcf6:	89ab      	ldrh	r3, [r5, #12]
 800bcf8:	059a      	lsls	r2, r3, #22
 800bcfa:	d402      	bmi.n	800bd02 <_vfiprintf_r+0x32>
 800bcfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcfe:	f7ff f828 	bl	800ad52 <__retarget_lock_acquire_recursive>
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	071b      	lsls	r3, r3, #28
 800bd06:	d501      	bpl.n	800bd0c <_vfiprintf_r+0x3c>
 800bd08:	692b      	ldr	r3, [r5, #16]
 800bd0a:	b9eb      	cbnz	r3, 800bd48 <_vfiprintf_r+0x78>
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f7fd fc0c 	bl	800952c <__swsetup_r>
 800bd14:	b1c0      	cbz	r0, 800bd48 <_vfiprintf_r+0x78>
 800bd16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd18:	07dc      	lsls	r4, r3, #31
 800bd1a:	d50e      	bpl.n	800bd3a <_vfiprintf_r+0x6a>
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd20:	b01d      	add	sp, #116	; 0x74
 800bd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd26:	4b7b      	ldr	r3, [pc, #492]	; (800bf14 <_vfiprintf_r+0x244>)
 800bd28:	429d      	cmp	r5, r3
 800bd2a:	d101      	bne.n	800bd30 <_vfiprintf_r+0x60>
 800bd2c:	68b5      	ldr	r5, [r6, #8]
 800bd2e:	e7df      	b.n	800bcf0 <_vfiprintf_r+0x20>
 800bd30:	4b79      	ldr	r3, [pc, #484]	; (800bf18 <_vfiprintf_r+0x248>)
 800bd32:	429d      	cmp	r5, r3
 800bd34:	bf08      	it	eq
 800bd36:	68f5      	ldreq	r5, [r6, #12]
 800bd38:	e7da      	b.n	800bcf0 <_vfiprintf_r+0x20>
 800bd3a:	89ab      	ldrh	r3, [r5, #12]
 800bd3c:	0598      	lsls	r0, r3, #22
 800bd3e:	d4ed      	bmi.n	800bd1c <_vfiprintf_r+0x4c>
 800bd40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd42:	f7ff f807 	bl	800ad54 <__retarget_lock_release_recursive>
 800bd46:	e7e9      	b.n	800bd1c <_vfiprintf_r+0x4c>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4c:	2320      	movs	r3, #32
 800bd4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd52:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd56:	2330      	movs	r3, #48	; 0x30
 800bd58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf1c <_vfiprintf_r+0x24c>
 800bd5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd60:	f04f 0901 	mov.w	r9, #1
 800bd64:	4623      	mov	r3, r4
 800bd66:	469a      	mov	sl, r3
 800bd68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd6c:	b10a      	cbz	r2, 800bd72 <_vfiprintf_r+0xa2>
 800bd6e:	2a25      	cmp	r2, #37	; 0x25
 800bd70:	d1f9      	bne.n	800bd66 <_vfiprintf_r+0x96>
 800bd72:	ebba 0b04 	subs.w	fp, sl, r4
 800bd76:	d00b      	beq.n	800bd90 <_vfiprintf_r+0xc0>
 800bd78:	465b      	mov	r3, fp
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7ff ff93 	bl	800bcaa <__sfputs_r>
 800bd84:	3001      	adds	r0, #1
 800bd86:	f000 80aa 	beq.w	800bede <_vfiprintf_r+0x20e>
 800bd8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd8c:	445a      	add	r2, fp
 800bd8e:	9209      	str	r2, [sp, #36]	; 0x24
 800bd90:	f89a 3000 	ldrb.w	r3, [sl]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 80a2 	beq.w	800bede <_vfiprintf_r+0x20e>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bda0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda4:	f10a 0a01 	add.w	sl, sl, #1
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	9307      	str	r3, [sp, #28]
 800bdac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdb0:	931a      	str	r3, [sp, #104]	; 0x68
 800bdb2:	4654      	mov	r4, sl
 800bdb4:	2205      	movs	r2, #5
 800bdb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdba:	4858      	ldr	r0, [pc, #352]	; (800bf1c <_vfiprintf_r+0x24c>)
 800bdbc:	f7f4 fa18 	bl	80001f0 <memchr>
 800bdc0:	9a04      	ldr	r2, [sp, #16]
 800bdc2:	b9d8      	cbnz	r0, 800bdfc <_vfiprintf_r+0x12c>
 800bdc4:	06d1      	lsls	r1, r2, #27
 800bdc6:	bf44      	itt	mi
 800bdc8:	2320      	movmi	r3, #32
 800bdca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdce:	0713      	lsls	r3, r2, #28
 800bdd0:	bf44      	itt	mi
 800bdd2:	232b      	movmi	r3, #43	; 0x2b
 800bdd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bddc:	2b2a      	cmp	r3, #42	; 0x2a
 800bdde:	d015      	beq.n	800be0c <_vfiprintf_r+0x13c>
 800bde0:	9a07      	ldr	r2, [sp, #28]
 800bde2:	4654      	mov	r4, sl
 800bde4:	2000      	movs	r0, #0
 800bde6:	f04f 0c0a 	mov.w	ip, #10
 800bdea:	4621      	mov	r1, r4
 800bdec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdf0:	3b30      	subs	r3, #48	; 0x30
 800bdf2:	2b09      	cmp	r3, #9
 800bdf4:	d94e      	bls.n	800be94 <_vfiprintf_r+0x1c4>
 800bdf6:	b1b0      	cbz	r0, 800be26 <_vfiprintf_r+0x156>
 800bdf8:	9207      	str	r2, [sp, #28]
 800bdfa:	e014      	b.n	800be26 <_vfiprintf_r+0x156>
 800bdfc:	eba0 0308 	sub.w	r3, r0, r8
 800be00:	fa09 f303 	lsl.w	r3, r9, r3
 800be04:	4313      	orrs	r3, r2
 800be06:	9304      	str	r3, [sp, #16]
 800be08:	46a2      	mov	sl, r4
 800be0a:	e7d2      	b.n	800bdb2 <_vfiprintf_r+0xe2>
 800be0c:	9b03      	ldr	r3, [sp, #12]
 800be0e:	1d19      	adds	r1, r3, #4
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	9103      	str	r1, [sp, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	bfbb      	ittet	lt
 800be18:	425b      	neglt	r3, r3
 800be1a:	f042 0202 	orrlt.w	r2, r2, #2
 800be1e:	9307      	strge	r3, [sp, #28]
 800be20:	9307      	strlt	r3, [sp, #28]
 800be22:	bfb8      	it	lt
 800be24:	9204      	strlt	r2, [sp, #16]
 800be26:	7823      	ldrb	r3, [r4, #0]
 800be28:	2b2e      	cmp	r3, #46	; 0x2e
 800be2a:	d10c      	bne.n	800be46 <_vfiprintf_r+0x176>
 800be2c:	7863      	ldrb	r3, [r4, #1]
 800be2e:	2b2a      	cmp	r3, #42	; 0x2a
 800be30:	d135      	bne.n	800be9e <_vfiprintf_r+0x1ce>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	1d1a      	adds	r2, r3, #4
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	9203      	str	r2, [sp, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	bfb8      	it	lt
 800be3e:	f04f 33ff 	movlt.w	r3, #4294967295
 800be42:	3402      	adds	r4, #2
 800be44:	9305      	str	r3, [sp, #20]
 800be46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf2c <_vfiprintf_r+0x25c>
 800be4a:	7821      	ldrb	r1, [r4, #0]
 800be4c:	2203      	movs	r2, #3
 800be4e:	4650      	mov	r0, sl
 800be50:	f7f4 f9ce 	bl	80001f0 <memchr>
 800be54:	b140      	cbz	r0, 800be68 <_vfiprintf_r+0x198>
 800be56:	2340      	movs	r3, #64	; 0x40
 800be58:	eba0 000a 	sub.w	r0, r0, sl
 800be5c:	fa03 f000 	lsl.w	r0, r3, r0
 800be60:	9b04      	ldr	r3, [sp, #16]
 800be62:	4303      	orrs	r3, r0
 800be64:	3401      	adds	r4, #1
 800be66:	9304      	str	r3, [sp, #16]
 800be68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6c:	482c      	ldr	r0, [pc, #176]	; (800bf20 <_vfiprintf_r+0x250>)
 800be6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be72:	2206      	movs	r2, #6
 800be74:	f7f4 f9bc 	bl	80001f0 <memchr>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d03f      	beq.n	800befc <_vfiprintf_r+0x22c>
 800be7c:	4b29      	ldr	r3, [pc, #164]	; (800bf24 <_vfiprintf_r+0x254>)
 800be7e:	bb1b      	cbnz	r3, 800bec8 <_vfiprintf_r+0x1f8>
 800be80:	9b03      	ldr	r3, [sp, #12]
 800be82:	3307      	adds	r3, #7
 800be84:	f023 0307 	bic.w	r3, r3, #7
 800be88:	3308      	adds	r3, #8
 800be8a:	9303      	str	r3, [sp, #12]
 800be8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be8e:	443b      	add	r3, r7
 800be90:	9309      	str	r3, [sp, #36]	; 0x24
 800be92:	e767      	b.n	800bd64 <_vfiprintf_r+0x94>
 800be94:	fb0c 3202 	mla	r2, ip, r2, r3
 800be98:	460c      	mov	r4, r1
 800be9a:	2001      	movs	r0, #1
 800be9c:	e7a5      	b.n	800bdea <_vfiprintf_r+0x11a>
 800be9e:	2300      	movs	r3, #0
 800bea0:	3401      	adds	r4, #1
 800bea2:	9305      	str	r3, [sp, #20]
 800bea4:	4619      	mov	r1, r3
 800bea6:	f04f 0c0a 	mov.w	ip, #10
 800beaa:	4620      	mov	r0, r4
 800beac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beb0:	3a30      	subs	r2, #48	; 0x30
 800beb2:	2a09      	cmp	r2, #9
 800beb4:	d903      	bls.n	800bebe <_vfiprintf_r+0x1ee>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0c5      	beq.n	800be46 <_vfiprintf_r+0x176>
 800beba:	9105      	str	r1, [sp, #20]
 800bebc:	e7c3      	b.n	800be46 <_vfiprintf_r+0x176>
 800bebe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bec2:	4604      	mov	r4, r0
 800bec4:	2301      	movs	r3, #1
 800bec6:	e7f0      	b.n	800beaa <_vfiprintf_r+0x1da>
 800bec8:	ab03      	add	r3, sp, #12
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	462a      	mov	r2, r5
 800bece:	4b16      	ldr	r3, [pc, #88]	; (800bf28 <_vfiprintf_r+0x258>)
 800bed0:	a904      	add	r1, sp, #16
 800bed2:	4630      	mov	r0, r6
 800bed4:	f7fb fd9c 	bl	8007a10 <_printf_float>
 800bed8:	4607      	mov	r7, r0
 800beda:	1c78      	adds	r0, r7, #1
 800bedc:	d1d6      	bne.n	800be8c <_vfiprintf_r+0x1bc>
 800bede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bee0:	07d9      	lsls	r1, r3, #31
 800bee2:	d405      	bmi.n	800bef0 <_vfiprintf_r+0x220>
 800bee4:	89ab      	ldrh	r3, [r5, #12]
 800bee6:	059a      	lsls	r2, r3, #22
 800bee8:	d402      	bmi.n	800bef0 <_vfiprintf_r+0x220>
 800beea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beec:	f7fe ff32 	bl	800ad54 <__retarget_lock_release_recursive>
 800bef0:	89ab      	ldrh	r3, [r5, #12]
 800bef2:	065b      	lsls	r3, r3, #25
 800bef4:	f53f af12 	bmi.w	800bd1c <_vfiprintf_r+0x4c>
 800bef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800befa:	e711      	b.n	800bd20 <_vfiprintf_r+0x50>
 800befc:	ab03      	add	r3, sp, #12
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	462a      	mov	r2, r5
 800bf02:	4b09      	ldr	r3, [pc, #36]	; (800bf28 <_vfiprintf_r+0x258>)
 800bf04:	a904      	add	r1, sp, #16
 800bf06:	4630      	mov	r0, r6
 800bf08:	f7fc f826 	bl	8007f58 <_printf_i>
 800bf0c:	e7e4      	b.n	800bed8 <_vfiprintf_r+0x208>
 800bf0e:	bf00      	nop
 800bf10:	0800c774 	.word	0x0800c774
 800bf14:	0800c794 	.word	0x0800c794
 800bf18:	0800c754 	.word	0x0800c754
 800bf1c:	0800c98c 	.word	0x0800c98c
 800bf20:	0800c996 	.word	0x0800c996
 800bf24:	08007a11 	.word	0x08007a11
 800bf28:	0800bcab 	.word	0x0800bcab
 800bf2c:	0800c992 	.word	0x0800c992

0800bf30 <nan>:
 800bf30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf38 <nan+0x8>
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	00000000 	.word	0x00000000
 800bf3c:	7ff80000 	.word	0x7ff80000

0800bf40 <_sbrk_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	4d06      	ldr	r5, [pc, #24]	; (800bf5c <_sbrk_r+0x1c>)
 800bf44:	2300      	movs	r3, #0
 800bf46:	4604      	mov	r4, r0
 800bf48:	4608      	mov	r0, r1
 800bf4a:	602b      	str	r3, [r5, #0]
 800bf4c:	f7f5 fdca 	bl	8001ae4 <_sbrk>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d102      	bne.n	800bf5a <_sbrk_r+0x1a>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	b103      	cbz	r3, 800bf5a <_sbrk_r+0x1a>
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	200004e0 	.word	0x200004e0

0800bf60 <__sread>:
 800bf60:	b510      	push	{r4, lr}
 800bf62:	460c      	mov	r4, r1
 800bf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf68:	f000 f93a 	bl	800c1e0 <_read_r>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	bfab      	itete	ge
 800bf70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf72:	89a3      	ldrhlt	r3, [r4, #12]
 800bf74:	181b      	addge	r3, r3, r0
 800bf76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf7a:	bfac      	ite	ge
 800bf7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf7e:	81a3      	strhlt	r3, [r4, #12]
 800bf80:	bd10      	pop	{r4, pc}

0800bf82 <__swrite>:
 800bf82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf86:	461f      	mov	r7, r3
 800bf88:	898b      	ldrh	r3, [r1, #12]
 800bf8a:	05db      	lsls	r3, r3, #23
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	460c      	mov	r4, r1
 800bf90:	4616      	mov	r6, r2
 800bf92:	d505      	bpl.n	800bfa0 <__swrite+0x1e>
 800bf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf98:	2302      	movs	r3, #2
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f000 f8b8 	bl	800c110 <_lseek_r>
 800bfa0:	89a3      	ldrh	r3, [r4, #12]
 800bfa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfaa:	81a3      	strh	r3, [r4, #12]
 800bfac:	4632      	mov	r2, r6
 800bfae:	463b      	mov	r3, r7
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb6:	f000 b837 	b.w	800c028 <_write_r>

0800bfba <__sseek>:
 800bfba:	b510      	push	{r4, lr}
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc2:	f000 f8a5 	bl	800c110 <_lseek_r>
 800bfc6:	1c43      	adds	r3, r0, #1
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	bf15      	itete	ne
 800bfcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfd6:	81a3      	strheq	r3, [r4, #12]
 800bfd8:	bf18      	it	ne
 800bfda:	81a3      	strhne	r3, [r4, #12]
 800bfdc:	bd10      	pop	{r4, pc}

0800bfde <__sclose>:
 800bfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe2:	f000 b851 	b.w	800c088 <_close_r>

0800bfe6 <strncmp>:
 800bfe6:	b510      	push	{r4, lr}
 800bfe8:	b17a      	cbz	r2, 800c00a <strncmp+0x24>
 800bfea:	4603      	mov	r3, r0
 800bfec:	3901      	subs	r1, #1
 800bfee:	1884      	adds	r4, r0, r2
 800bff0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bff4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bff8:	4290      	cmp	r0, r2
 800bffa:	d101      	bne.n	800c000 <strncmp+0x1a>
 800bffc:	42a3      	cmp	r3, r4
 800bffe:	d101      	bne.n	800c004 <strncmp+0x1e>
 800c000:	1a80      	subs	r0, r0, r2
 800c002:	bd10      	pop	{r4, pc}
 800c004:	2800      	cmp	r0, #0
 800c006:	d1f3      	bne.n	800bff0 <strncmp+0xa>
 800c008:	e7fa      	b.n	800c000 <strncmp+0x1a>
 800c00a:	4610      	mov	r0, r2
 800c00c:	e7f9      	b.n	800c002 <strncmp+0x1c>

0800c00e <__ascii_wctomb>:
 800c00e:	b149      	cbz	r1, 800c024 <__ascii_wctomb+0x16>
 800c010:	2aff      	cmp	r2, #255	; 0xff
 800c012:	bf85      	ittet	hi
 800c014:	238a      	movhi	r3, #138	; 0x8a
 800c016:	6003      	strhi	r3, [r0, #0]
 800c018:	700a      	strbls	r2, [r1, #0]
 800c01a:	f04f 30ff 	movhi.w	r0, #4294967295
 800c01e:	bf98      	it	ls
 800c020:	2001      	movls	r0, #1
 800c022:	4770      	bx	lr
 800c024:	4608      	mov	r0, r1
 800c026:	4770      	bx	lr

0800c028 <_write_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d07      	ldr	r5, [pc, #28]	; (800c048 <_write_r+0x20>)
 800c02c:	4604      	mov	r4, r0
 800c02e:	4608      	mov	r0, r1
 800c030:	4611      	mov	r1, r2
 800c032:	2200      	movs	r2, #0
 800c034:	602a      	str	r2, [r5, #0]
 800c036:	461a      	mov	r2, r3
 800c038:	f7f5 fd03 	bl	8001a42 <_write>
 800c03c:	1c43      	adds	r3, r0, #1
 800c03e:	d102      	bne.n	800c046 <_write_r+0x1e>
 800c040:	682b      	ldr	r3, [r5, #0]
 800c042:	b103      	cbz	r3, 800c046 <_write_r+0x1e>
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	200004e0 	.word	0x200004e0

0800c04c <__assert_func>:
 800c04c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c04e:	4614      	mov	r4, r2
 800c050:	461a      	mov	r2, r3
 800c052:	4b09      	ldr	r3, [pc, #36]	; (800c078 <__assert_func+0x2c>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4605      	mov	r5, r0
 800c058:	68d8      	ldr	r0, [r3, #12]
 800c05a:	b14c      	cbz	r4, 800c070 <__assert_func+0x24>
 800c05c:	4b07      	ldr	r3, [pc, #28]	; (800c07c <__assert_func+0x30>)
 800c05e:	9100      	str	r1, [sp, #0]
 800c060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c064:	4906      	ldr	r1, [pc, #24]	; (800c080 <__assert_func+0x34>)
 800c066:	462b      	mov	r3, r5
 800c068:	f000 f81e 	bl	800c0a8 <fiprintf>
 800c06c:	f000 f8ca 	bl	800c204 <abort>
 800c070:	4b04      	ldr	r3, [pc, #16]	; (800c084 <__assert_func+0x38>)
 800c072:	461c      	mov	r4, r3
 800c074:	e7f3      	b.n	800c05e <__assert_func+0x12>
 800c076:	bf00      	nop
 800c078:	20000024 	.word	0x20000024
 800c07c:	0800c99d 	.word	0x0800c99d
 800c080:	0800c9aa 	.word	0x0800c9aa
 800c084:	0800c9d8 	.word	0x0800c9d8

0800c088 <_close_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d06      	ldr	r5, [pc, #24]	; (800c0a4 <_close_r+0x1c>)
 800c08c:	2300      	movs	r3, #0
 800c08e:	4604      	mov	r4, r0
 800c090:	4608      	mov	r0, r1
 800c092:	602b      	str	r3, [r5, #0]
 800c094:	f7f5 fcf1 	bl	8001a7a <_close>
 800c098:	1c43      	adds	r3, r0, #1
 800c09a:	d102      	bne.n	800c0a2 <_close_r+0x1a>
 800c09c:	682b      	ldr	r3, [r5, #0]
 800c09e:	b103      	cbz	r3, 800c0a2 <_close_r+0x1a>
 800c0a0:	6023      	str	r3, [r4, #0]
 800c0a2:	bd38      	pop	{r3, r4, r5, pc}
 800c0a4:	200004e0 	.word	0x200004e0

0800c0a8 <fiprintf>:
 800c0a8:	b40e      	push	{r1, r2, r3}
 800c0aa:	b503      	push	{r0, r1, lr}
 800c0ac:	4601      	mov	r1, r0
 800c0ae:	ab03      	add	r3, sp, #12
 800c0b0:	4805      	ldr	r0, [pc, #20]	; (800c0c8 <fiprintf+0x20>)
 800c0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0b6:	6800      	ldr	r0, [r0, #0]
 800c0b8:	9301      	str	r3, [sp, #4]
 800c0ba:	f7ff fe09 	bl	800bcd0 <_vfiprintf_r>
 800c0be:	b002      	add	sp, #8
 800c0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0c4:	b003      	add	sp, #12
 800c0c6:	4770      	bx	lr
 800c0c8:	20000024 	.word	0x20000024

0800c0cc <_fstat_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d07      	ldr	r5, [pc, #28]	; (800c0ec <_fstat_r+0x20>)
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4608      	mov	r0, r1
 800c0d6:	4611      	mov	r1, r2
 800c0d8:	602b      	str	r3, [r5, #0]
 800c0da:	f7f5 fcda 	bl	8001a92 <_fstat>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	d102      	bne.n	800c0e8 <_fstat_r+0x1c>
 800c0e2:	682b      	ldr	r3, [r5, #0]
 800c0e4:	b103      	cbz	r3, 800c0e8 <_fstat_r+0x1c>
 800c0e6:	6023      	str	r3, [r4, #0]
 800c0e8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ea:	bf00      	nop
 800c0ec:	200004e0 	.word	0x200004e0

0800c0f0 <_isatty_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4d06      	ldr	r5, [pc, #24]	; (800c10c <_isatty_r+0x1c>)
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	602b      	str	r3, [r5, #0]
 800c0fc:	f7f5 fcd9 	bl	8001ab2 <_isatty>
 800c100:	1c43      	adds	r3, r0, #1
 800c102:	d102      	bne.n	800c10a <_isatty_r+0x1a>
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	b103      	cbz	r3, 800c10a <_isatty_r+0x1a>
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	bd38      	pop	{r3, r4, r5, pc}
 800c10c:	200004e0 	.word	0x200004e0

0800c110 <_lseek_r>:
 800c110:	b538      	push	{r3, r4, r5, lr}
 800c112:	4d07      	ldr	r5, [pc, #28]	; (800c130 <_lseek_r+0x20>)
 800c114:	4604      	mov	r4, r0
 800c116:	4608      	mov	r0, r1
 800c118:	4611      	mov	r1, r2
 800c11a:	2200      	movs	r2, #0
 800c11c:	602a      	str	r2, [r5, #0]
 800c11e:	461a      	mov	r2, r3
 800c120:	f7f5 fcd2 	bl	8001ac8 <_lseek>
 800c124:	1c43      	adds	r3, r0, #1
 800c126:	d102      	bne.n	800c12e <_lseek_r+0x1e>
 800c128:	682b      	ldr	r3, [r5, #0]
 800c12a:	b103      	cbz	r3, 800c12e <_lseek_r+0x1e>
 800c12c:	6023      	str	r3, [r4, #0]
 800c12e:	bd38      	pop	{r3, r4, r5, pc}
 800c130:	200004e0 	.word	0x200004e0

0800c134 <memmove>:
 800c134:	4288      	cmp	r0, r1
 800c136:	b510      	push	{r4, lr}
 800c138:	eb01 0402 	add.w	r4, r1, r2
 800c13c:	d902      	bls.n	800c144 <memmove+0x10>
 800c13e:	4284      	cmp	r4, r0
 800c140:	4623      	mov	r3, r4
 800c142:	d807      	bhi.n	800c154 <memmove+0x20>
 800c144:	1e43      	subs	r3, r0, #1
 800c146:	42a1      	cmp	r1, r4
 800c148:	d008      	beq.n	800c15c <memmove+0x28>
 800c14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c152:	e7f8      	b.n	800c146 <memmove+0x12>
 800c154:	4402      	add	r2, r0
 800c156:	4601      	mov	r1, r0
 800c158:	428a      	cmp	r2, r1
 800c15a:	d100      	bne.n	800c15e <memmove+0x2a>
 800c15c:	bd10      	pop	{r4, pc}
 800c15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c166:	e7f7      	b.n	800c158 <memmove+0x24>

0800c168 <__malloc_lock>:
 800c168:	4801      	ldr	r0, [pc, #4]	; (800c170 <__malloc_lock+0x8>)
 800c16a:	f7fe bdf2 	b.w	800ad52 <__retarget_lock_acquire_recursive>
 800c16e:	bf00      	nop
 800c170:	200004d4 	.word	0x200004d4

0800c174 <__malloc_unlock>:
 800c174:	4801      	ldr	r0, [pc, #4]	; (800c17c <__malloc_unlock+0x8>)
 800c176:	f7fe bded 	b.w	800ad54 <__retarget_lock_release_recursive>
 800c17a:	bf00      	nop
 800c17c:	200004d4 	.word	0x200004d4

0800c180 <_realloc_r>:
 800c180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c184:	4680      	mov	r8, r0
 800c186:	4614      	mov	r4, r2
 800c188:	460e      	mov	r6, r1
 800c18a:	b921      	cbnz	r1, 800c196 <_realloc_r+0x16>
 800c18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c190:	4611      	mov	r1, r2
 800c192:	f7ff bba3 	b.w	800b8dc <_malloc_r>
 800c196:	b92a      	cbnz	r2, 800c1a4 <_realloc_r+0x24>
 800c198:	f7ff fb34 	bl	800b804 <_free_r>
 800c19c:	4625      	mov	r5, r4
 800c19e:	4628      	mov	r0, r5
 800c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a4:	f000 f835 	bl	800c212 <_malloc_usable_size_r>
 800c1a8:	4284      	cmp	r4, r0
 800c1aa:	4607      	mov	r7, r0
 800c1ac:	d802      	bhi.n	800c1b4 <_realloc_r+0x34>
 800c1ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1b2:	d812      	bhi.n	800c1da <_realloc_r+0x5a>
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	4640      	mov	r0, r8
 800c1b8:	f7ff fb90 	bl	800b8dc <_malloc_r>
 800c1bc:	4605      	mov	r5, r0
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d0ed      	beq.n	800c19e <_realloc_r+0x1e>
 800c1c2:	42bc      	cmp	r4, r7
 800c1c4:	4622      	mov	r2, r4
 800c1c6:	4631      	mov	r1, r6
 800c1c8:	bf28      	it	cs
 800c1ca:	463a      	movcs	r2, r7
 800c1cc:	f7fb fb6a 	bl	80078a4 <memcpy>
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4640      	mov	r0, r8
 800c1d4:	f7ff fb16 	bl	800b804 <_free_r>
 800c1d8:	e7e1      	b.n	800c19e <_realloc_r+0x1e>
 800c1da:	4635      	mov	r5, r6
 800c1dc:	e7df      	b.n	800c19e <_realloc_r+0x1e>
	...

0800c1e0 <_read_r>:
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	4d07      	ldr	r5, [pc, #28]	; (800c200 <_read_r+0x20>)
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	4608      	mov	r0, r1
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	602a      	str	r2, [r5, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	f7f5 fc0a 	bl	8001a08 <_read>
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d102      	bne.n	800c1fe <_read_r+0x1e>
 800c1f8:	682b      	ldr	r3, [r5, #0]
 800c1fa:	b103      	cbz	r3, 800c1fe <_read_r+0x1e>
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	200004e0 	.word	0x200004e0

0800c204 <abort>:
 800c204:	b508      	push	{r3, lr}
 800c206:	2006      	movs	r0, #6
 800c208:	f000 f834 	bl	800c274 <raise>
 800c20c:	2001      	movs	r0, #1
 800c20e:	f7f5 fbf1 	bl	80019f4 <_exit>

0800c212 <_malloc_usable_size_r>:
 800c212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c216:	1f18      	subs	r0, r3, #4
 800c218:	2b00      	cmp	r3, #0
 800c21a:	bfbc      	itt	lt
 800c21c:	580b      	ldrlt	r3, [r1, r0]
 800c21e:	18c0      	addlt	r0, r0, r3
 800c220:	4770      	bx	lr

0800c222 <_raise_r>:
 800c222:	291f      	cmp	r1, #31
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4604      	mov	r4, r0
 800c228:	460d      	mov	r5, r1
 800c22a:	d904      	bls.n	800c236 <_raise_r+0x14>
 800c22c:	2316      	movs	r3, #22
 800c22e:	6003      	str	r3, [r0, #0]
 800c230:	f04f 30ff 	mov.w	r0, #4294967295
 800c234:	bd38      	pop	{r3, r4, r5, pc}
 800c236:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c238:	b112      	cbz	r2, 800c240 <_raise_r+0x1e>
 800c23a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c23e:	b94b      	cbnz	r3, 800c254 <_raise_r+0x32>
 800c240:	4620      	mov	r0, r4
 800c242:	f000 f831 	bl	800c2a8 <_getpid_r>
 800c246:	462a      	mov	r2, r5
 800c248:	4601      	mov	r1, r0
 800c24a:	4620      	mov	r0, r4
 800c24c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c250:	f000 b818 	b.w	800c284 <_kill_r>
 800c254:	2b01      	cmp	r3, #1
 800c256:	d00a      	beq.n	800c26e <_raise_r+0x4c>
 800c258:	1c59      	adds	r1, r3, #1
 800c25a:	d103      	bne.n	800c264 <_raise_r+0x42>
 800c25c:	2316      	movs	r3, #22
 800c25e:	6003      	str	r3, [r0, #0]
 800c260:	2001      	movs	r0, #1
 800c262:	e7e7      	b.n	800c234 <_raise_r+0x12>
 800c264:	2400      	movs	r4, #0
 800c266:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c26a:	4628      	mov	r0, r5
 800c26c:	4798      	blx	r3
 800c26e:	2000      	movs	r0, #0
 800c270:	e7e0      	b.n	800c234 <_raise_r+0x12>
	...

0800c274 <raise>:
 800c274:	4b02      	ldr	r3, [pc, #8]	; (800c280 <raise+0xc>)
 800c276:	4601      	mov	r1, r0
 800c278:	6818      	ldr	r0, [r3, #0]
 800c27a:	f7ff bfd2 	b.w	800c222 <_raise_r>
 800c27e:	bf00      	nop
 800c280:	20000024 	.word	0x20000024

0800c284 <_kill_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d07      	ldr	r5, [pc, #28]	; (800c2a4 <_kill_r+0x20>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	4611      	mov	r1, r2
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	f7f5 fb9f 	bl	80019d4 <_kill>
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	d102      	bne.n	800c2a0 <_kill_r+0x1c>
 800c29a:	682b      	ldr	r3, [r5, #0]
 800c29c:	b103      	cbz	r3, 800c2a0 <_kill_r+0x1c>
 800c29e:	6023      	str	r3, [r4, #0]
 800c2a0:	bd38      	pop	{r3, r4, r5, pc}
 800c2a2:	bf00      	nop
 800c2a4:	200004e0 	.word	0x200004e0

0800c2a8 <_getpid_r>:
 800c2a8:	f7f5 bb8c 	b.w	80019c4 <_getpid>

0800c2ac <_init>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	bf00      	nop
 800c2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b2:	bc08      	pop	{r3}
 800c2b4:	469e      	mov	lr, r3
 800c2b6:	4770      	bx	lr

0800c2b8 <_fini>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	bf00      	nop
 800c2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2be:	bc08      	pop	{r3}
 800c2c0:	469e      	mov	lr, r3
 800c2c2:	4770      	bx	lr
