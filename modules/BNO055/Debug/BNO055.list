
BNO055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004968  08004968  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004970  08004970  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000080  080049f4  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080049f4  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000828a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a4  00000000  00000000  00028336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  00029be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002a498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c0d  00000000  00000000  0002ac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aeb8  00000000  00000000  0004188d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008770e  00000000  00000000  0004c745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3e53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb4  00000000  00000000  000d3ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004664 	.word	0x08004664

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08004664 	.word	0x08004664

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b974 	b.w	8000d1c <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9d08      	ldr	r5, [sp, #32]
 8000a52:	4604      	mov	r4, r0
 8000a54:	468e      	mov	lr, r1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14d      	bne.n	8000af6 <__udivmoddi4+0xaa>
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	d969      	bls.n	8000b34 <__udivmoddi4+0xe8>
 8000a60:	fab2 f282 	clz	r2, r2
 8000a64:	b152      	cbz	r2, 8000a7c <__udivmoddi4+0x30>
 8000a66:	fa01 f302 	lsl.w	r3, r1, r2
 8000a6a:	f1c2 0120 	rsb	r1, r2, #32
 8000a6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a76:	ea41 0e03 	orr.w	lr, r1, r3
 8000a7a:	4094      	lsls	r4, r2
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	0c21      	lsrs	r1, r4, #16
 8000a82:	fbbe f6f8 	udiv	r6, lr, r8
 8000a86:	fa1f f78c 	uxth.w	r7, ip
 8000a8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a92:	fb06 f107 	mul.w	r1, r6, r7
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x64>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aa2:	f080 811f 	bcs.w	8000ce4 <__udivmoddi4+0x298>
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	f240 811c 	bls.w	8000ce4 <__udivmoddi4+0x298>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab8:	fb08 3310 	mls	r3, r8, r0, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb00 f707 	mul.w	r7, r0, r7
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x92>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad0:	f080 810a 	bcs.w	8000ce8 <__udivmoddi4+0x29c>
 8000ad4:	42a7      	cmp	r7, r4
 8000ad6:	f240 8107 	bls.w	8000ce8 <__udivmoddi4+0x29c>
 8000ada:	4464      	add	r4, ip
 8000adc:	3802      	subs	r0, #2
 8000ade:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ae2:	1be4      	subs	r4, r4, r7
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	b11d      	cbz	r5, 8000af0 <__udivmoddi4+0xa4>
 8000ae8:	40d4      	lsrs	r4, r2
 8000aea:	2300      	movs	r3, #0
 8000aec:	e9c5 4300 	strd	r4, r3, [r5]
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0xc2>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	f000 80ef 	beq.w	8000cde <__udivmoddi4+0x292>
 8000b00:	2600      	movs	r6, #0
 8000b02:	e9c5 0100 	strd	r0, r1, [r5]
 8000b06:	4630      	mov	r0, r6
 8000b08:	4631      	mov	r1, r6
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	fab3 f683 	clz	r6, r3
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d14a      	bne.n	8000bac <__udivmoddi4+0x160>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xd4>
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	f200 80f9 	bhi.w	8000d12 <__udivmoddi4+0x2c6>
 8000b20:	1a84      	subs	r4, r0, r2
 8000b22:	eb61 0303 	sbc.w	r3, r1, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	469e      	mov	lr, r3
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d0e0      	beq.n	8000af0 <__udivmoddi4+0xa4>
 8000b2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b32:	e7dd      	b.n	8000af0 <__udivmoddi4+0xa4>
 8000b34:	b902      	cbnz	r2, 8000b38 <__udivmoddi4+0xec>
 8000b36:	deff      	udf	#255	; 0xff
 8000b38:	fab2 f282 	clz	r2, r2
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	f040 8092 	bne.w	8000c66 <__udivmoddi4+0x21a>
 8000b42:	eba1 010c 	sub.w	r1, r1, ip
 8000b46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4a:	fa1f fe8c 	uxth.w	lr, ip
 8000b4e:	2601      	movs	r6, #1
 8000b50:	0c20      	lsrs	r0, r4, #16
 8000b52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b56:	fb07 1113 	mls	r1, r7, r3, r1
 8000b5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b5e:	fb0e f003 	mul.w	r0, lr, r3
 8000b62:	4288      	cmp	r0, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x12c>
 8000b66:	eb1c 0101 	adds.w	r1, ip, r1
 8000b6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x12a>
 8000b70:	4288      	cmp	r0, r1
 8000b72:	f200 80cb 	bhi.w	8000d0c <__udivmoddi4+0x2c0>
 8000b76:	4643      	mov	r3, r8
 8000b78:	1a09      	subs	r1, r1, r0
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b80:	fb07 1110 	mls	r1, r7, r0, r1
 8000b84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b88:	fb0e fe00 	mul.w	lr, lr, r0
 8000b8c:	45a6      	cmp	lr, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x156>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x154>
 8000b9a:	45a6      	cmp	lr, r4
 8000b9c:	f200 80bb 	bhi.w	8000d16 <__udivmoddi4+0x2ca>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	eba4 040e 	sub.w	r4, r4, lr
 8000ba6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000baa:	e79c      	b.n	8000ae6 <__udivmoddi4+0x9a>
 8000bac:	f1c6 0720 	rsb	r7, r6, #32
 8000bb0:	40b3      	lsls	r3, r6
 8000bb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bba:	fa20 f407 	lsr.w	r4, r0, r7
 8000bbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc2:	431c      	orrs	r4, r3
 8000bc4:	40f9      	lsrs	r1, r7
 8000bc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bca:	fa00 f306 	lsl.w	r3, r0, r6
 8000bce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bd2:	0c20      	lsrs	r0, r4, #16
 8000bd4:	fa1f fe8c 	uxth.w	lr, ip
 8000bd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be0:	fb08 f00e 	mul.w	r0, r8, lr
 8000be4:	4288      	cmp	r0, r1
 8000be6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bea:	d90b      	bls.n	8000c04 <__udivmoddi4+0x1b8>
 8000bec:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bf4:	f080 8088 	bcs.w	8000d08 <__udivmoddi4+0x2bc>
 8000bf8:	4288      	cmp	r0, r1
 8000bfa:	f240 8085 	bls.w	8000d08 <__udivmoddi4+0x2bc>
 8000bfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000c02:	4461      	add	r1, ip
 8000c04:	1a09      	subs	r1, r1, r0
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c18:	458e      	cmp	lr, r1
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x1e2>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c24:	d26c      	bcs.n	8000d00 <__udivmoddi4+0x2b4>
 8000c26:	458e      	cmp	lr, r1
 8000c28:	d96a      	bls.n	8000d00 <__udivmoddi4+0x2b4>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4461      	add	r1, ip
 8000c2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c32:	fba0 9402 	umull	r9, r4, r0, r2
 8000c36:	eba1 010e 	sub.w	r1, r1, lr
 8000c3a:	42a1      	cmp	r1, r4
 8000c3c:	46c8      	mov	r8, r9
 8000c3e:	46a6      	mov	lr, r4
 8000c40:	d356      	bcc.n	8000cf0 <__udivmoddi4+0x2a4>
 8000c42:	d053      	beq.n	8000cec <__udivmoddi4+0x2a0>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x212>
 8000c46:	ebb3 0208 	subs.w	r2, r3, r8
 8000c4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c52:	fa22 f306 	lsr.w	r3, r2, r6
 8000c56:	40f1      	lsrs	r1, r6
 8000c58:	431f      	orrs	r7, r3
 8000c5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	f1c2 0320 	rsb	r3, r2, #32
 8000c6a:	40d8      	lsrs	r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	fa21 f303 	lsr.w	r3, r1, r3
 8000c74:	4091      	lsls	r1, r2
 8000c76:	4301      	orrs	r1, r0
 8000c78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c84:	fb07 3610 	mls	r6, r7, r0, r3
 8000c88:	0c0b      	lsrs	r3, r1, #16
 8000c8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c92:	429e      	cmp	r6, r3
 8000c94:	fa04 f402 	lsl.w	r4, r4, r2
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x260>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ca2:	d22f      	bcs.n	8000d04 <__udivmoddi4+0x2b8>
 8000ca4:	429e      	cmp	r6, r3
 8000ca6:	d92d      	bls.n	8000d04 <__udivmoddi4+0x2b8>
 8000ca8:	3802      	subs	r0, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	b289      	uxth	r1, r1
 8000cb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x28a>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ccc:	d216      	bcs.n	8000cfc <__udivmoddi4+0x2b0>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d914      	bls.n	8000cfc <__udivmoddi4+0x2b0>
 8000cd2:	3e02      	subs	r6, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	1ac9      	subs	r1, r1, r3
 8000cd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cdc:	e738      	b.n	8000b50 <__udivmoddi4+0x104>
 8000cde:	462e      	mov	r6, r5
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	e705      	b.n	8000af0 <__udivmoddi4+0xa4>
 8000ce4:	4606      	mov	r6, r0
 8000ce6:	e6e3      	b.n	8000ab0 <__udivmoddi4+0x64>
 8000ce8:	4618      	mov	r0, r3
 8000cea:	e6f8      	b.n	8000ade <__udivmoddi4+0x92>
 8000cec:	454b      	cmp	r3, r9
 8000cee:	d2a9      	bcs.n	8000c44 <__udivmoddi4+0x1f8>
 8000cf0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cf4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf8:	3801      	subs	r0, #1
 8000cfa:	e7a3      	b.n	8000c44 <__udivmoddi4+0x1f8>
 8000cfc:	4646      	mov	r6, r8
 8000cfe:	e7ea      	b.n	8000cd6 <__udivmoddi4+0x28a>
 8000d00:	4620      	mov	r0, r4
 8000d02:	e794      	b.n	8000c2e <__udivmoddi4+0x1e2>
 8000d04:	4640      	mov	r0, r8
 8000d06:	e7d1      	b.n	8000cac <__udivmoddi4+0x260>
 8000d08:	46d0      	mov	r8, sl
 8000d0a:	e77b      	b.n	8000c04 <__udivmoddi4+0x1b8>
 8000d0c:	3b02      	subs	r3, #2
 8000d0e:	4461      	add	r1, ip
 8000d10:	e732      	b.n	8000b78 <__udivmoddi4+0x12c>
 8000d12:	4630      	mov	r0, r6
 8000d14:	e709      	b.n	8000b2a <__udivmoddi4+0xde>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	e742      	b.n	8000ba2 <__udivmoddi4+0x156>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	2007      	movs	r0, #7
 8000d30:	f000 fa92 	bl	8001258 <bno055_writeData>
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	203d      	movs	r0, #61	; 0x3d
 8000d4c:	f000 fa84 	bl	8001258 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d103      	bne.n	8000d5e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000d56:	2013      	movs	r0, #19
 8000d58:	f000 fa72 	bl	8001240 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000d5c:	e002      	b.n	8000d64 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f000 fa6e 	bl	8001240 <bno055_delay>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff ffe3 	bl	8000d3c <bno055_setOperationMode>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000d7e:	200c      	movs	r0, #12
 8000d80:	f7ff ffdc 	bl	8000d3c <bno055_setOperationMode>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	203f      	movs	r0, #63	; 0x3f
 8000d90:	f000 fa62 	bl	8001258 <bno055_writeData>
  bno055_delay(700);
 8000d94:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000d98:	f000 fa52 	bl	8001240 <bno055_delay>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  bno055_reset();
 8000da6:	f7ff ffef 	bl	8000d88 <bno055_reset>

  uint8_t id = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	2201      	movs	r2, #1
 8000db2:	4619      	mov	r1, r3
 8000db4:	2000      	movs	r0, #0
 8000db6:	f000 fb3b 	bl	8001430 <bno055_readData>
  if (id != BNO055_ID) {
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2ba0      	cmp	r3, #160	; 0xa0
 8000dbe:	d004      	beq.n	8000dca <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <bno055_setup+0x4c>)
 8000dc6:	f002 fc49 	bl	800365c <iprintf>
  }
  bno055_setPage(0);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff ffa8 	bl	8000d20 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	203f      	movs	r0, #63	; 0x3f
 8000dd4:	f000 fa40 	bl	8001258 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000dd8:	f7ff ffc8 	bl	8000d6c <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f000 fa2f 	bl	8001240 <bno055_delay>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	0800467c 	.word	0x0800467c

08000df0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000df0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000df4:	b09e      	sub	sp, #120	; 0x78
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff ff8e 	bl	8000d20 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e08:	2b20      	cmp	r3, #32
 8000e0a:	d108      	bne.n	8000e1e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000e0c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e14:	2208      	movs	r2, #8
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fb0a 	bl	8001430 <bno055_readData>
 8000e1c:	e007      	b.n	8000e2e <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000e1e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e26:	2206      	movs	r2, #6
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fb01 	bl	8001430 <bno055_readData>

  double scale = 1;
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b8b      	ldr	r3, [pc, #556]	; (8001060 <bno055_getVector+0x270>)
 8000e34:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e3c:	2b0e      	cmp	r3, #14
 8000e3e:	d109      	bne.n	8000e54 <bno055_getVector+0x64>
    scale = magScale;
 8000e40:	4b88      	ldr	r3, [pc, #544]	; (8001064 <bno055_getVector+0x274>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fb5d 	bl	8000504 <__aeabi_ui2d>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000e52:	e03e      	b.n	8000ed2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d007      	beq.n	8000e6c <bno055_getVector+0x7c>
 8000e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e60:	2b28      	cmp	r3, #40	; 0x28
 8000e62:	d003      	beq.n	8000e6c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e68:	2b2e      	cmp	r3, #46	; 0x2e
 8000e6a:	d109      	bne.n	8000e80 <bno055_getVector+0x90>
    scale = accelScale;
 8000e6c:	4b7e      	ldr	r3, [pc, #504]	; (8001068 <bno055_getVector+0x278>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb47 	bl	8000504 <__aeabi_ui2d>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000e7e:	e028      	b.n	8000ed2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e84:	2b14      	cmp	r3, #20
 8000e86:	d109      	bne.n	8000e9c <bno055_getVector+0xac>
    scale = angularRateScale;
 8000e88:	4b78      	ldr	r3, [pc, #480]	; (800106c <bno055_getVector+0x27c>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fb39 	bl	8000504 <__aeabi_ui2d>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000e9a:	e01a      	b.n	8000ed2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea0:	2b1a      	cmp	r3, #26
 8000ea2:	d109      	bne.n	8000eb8 <bno055_getVector+0xc8>
    scale = eulerScale;
 8000ea4:	4b72      	ldr	r3, [pc, #456]	; (8001070 <bno055_getVector+0x280>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb2b 	bl	8000504 <__aeabi_ui2d>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000eb6:	e00c      	b.n	8000ed2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ebc:	2b20      	cmp	r3, #32
 8000ebe:	d108      	bne.n	8000ed2 <bno055_getVector+0xe2>
    scale = quaScale;
 8000ec0:	4b6c      	ldr	r3, [pc, #432]	; (8001074 <bno055_getVector+0x284>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fb1d 	bl	8000504 <__aeabi_ui2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 fbb6 	bl	800364c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ee4:	2b20      	cmp	r3, #32
 8000ee6:	d150      	bne.n	8000f8a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000ee8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fb12 	bl	8000524 <__aeabi_i2d>
 8000f00:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f04:	f7ff fca2 	bl	800084c <__aeabi_ddiv>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000f10:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fafe 	bl	8000524 <__aeabi_i2d>
 8000f28:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f2c:	f7ff fc8e 	bl	800084c <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000f38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff faea 	bl	8000524 <__aeabi_i2d>
 8000f50:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f54:	f7ff fc7a 	bl	800084c <__aeabi_ddiv>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000f60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fad6 	bl	8000524 <__aeabi_i2d>
 8000f78:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f7c:	f7ff fc66 	bl	800084c <__aeabi_ddiv>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000f88:	e03b      	b.n	8001002 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000f8a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fac1 	bl	8000524 <__aeabi_i2d>
 8000fa2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000fa6:	f7ff fc51 	bl	800084c <__aeabi_ddiv>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000fb2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff faad 	bl	8000524 <__aeabi_i2d>
 8000fca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000fce:	f7ff fc3d 	bl	800084c <__aeabi_ddiv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000fda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa99 	bl	8000524 <__aeabi_i2d>
 8000ff2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000ff6:	f7ff fc29 	bl	800084c <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001002:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001006:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800100a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001016:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800101a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800101e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001022:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001026:	ec49 8b14 	vmov	d4, r8, r9
 800102a:	ec45 4b15 	vmov	d5, r4, r5
 800102e:	ec41 0b16 	vmov	d6, r0, r1
 8001032:	ec43 2b17 	vmov	d7, r2, r3
}
 8001036:	eeb0 0a44 	vmov.f32	s0, s8
 800103a:	eef0 0a64 	vmov.f32	s1, s9
 800103e:	eeb0 1a45 	vmov.f32	s2, s10
 8001042:	eef0 1a65 	vmov.f32	s3, s11
 8001046:	eeb0 2a46 	vmov.f32	s4, s12
 800104a:	eef0 2a66 	vmov.f32	s5, s13
 800104e:	eeb0 3a47 	vmov.f32	s6, s14
 8001052:	eef0 3a67 	vmov.f32	s7, s15
 8001056:	3778      	adds	r7, #120	; 0x78
 8001058:	46bd      	mov	sp, r7
 800105a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800105e:	bf00      	nop
 8001060:	3ff00000 	.word	0x3ff00000
 8001064:	20000006 	.word	0x20000006
 8001068:	20000000 	.word	0x20000000
 800106c:	20000002 	.word	0x20000002
 8001070:	20000004 	.word	0x20000004
 8001074:	20000008 	.word	0x20000008

08001078 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800107c:	b090      	sub	sp, #64	; 0x40
 800107e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001080:	2020      	movs	r0, #32
 8001082:	f7ff feb5 	bl	8000df0 <bno055_getVector>
 8001086:	eeb0 4a40 	vmov.f32	s8, s0
 800108a:	eef0 4a60 	vmov.f32	s9, s1
 800108e:	eeb0 5a41 	vmov.f32	s10, s2
 8001092:	eef0 5a61 	vmov.f32	s11, s3
 8001096:	eeb0 6a42 	vmov.f32	s12, s4
 800109a:	eef0 6a62 	vmov.f32	s13, s5
 800109e:	eeb0 7a43 	vmov.f32	s14, s6
 80010a2:	eef0 7a63 	vmov.f32	s15, s7
 80010a6:	ed87 4b08 	vstr	d4, [r7, #32]
 80010aa:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80010ae:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80010b2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80010b6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80010ba:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80010be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80010c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80010c6:	ec49 8b14 	vmov	d4, r8, r9
 80010ca:	ec45 4b15 	vmov	d5, r4, r5
 80010ce:	ec41 0b16 	vmov	d6, r0, r1
 80010d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80010d6:	eeb0 0a44 	vmov.f32	s0, s8
 80010da:	eef0 0a64 	vmov.f32	s1, s9
 80010de:	eeb0 1a45 	vmov.f32	s2, s10
 80010e2:	eef0 1a65 	vmov.f32	s3, s11
 80010e6:	eeb0 2a46 	vmov.f32	s4, s12
 80010ea:	eef0 2a66 	vmov.f32	s5, s13
 80010ee:	eeb0 3a47 	vmov.f32	s6, s14
 80010f2:	eef0 3a67 	vmov.f32	s7, s15
 80010f6:	3740      	adds	r7, #64	; 0x40
 80010f8:	46bd      	mov	sp, r7
 80010fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001100 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_GPIO_Init+0x30>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <MX_GPIO_Init+0x30>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_GPIO_Init+0x30>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800

08001134 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_I2C1_Init+0x50>)
 800113a:	4a13      	ldr	r2, [pc, #76]	; (8001188 <MX_I2C1_Init+0x54>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_I2C1_Init+0x50>)
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_I2C1_Init+0x58>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_I2C1_Init+0x50>)
 8001152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001156:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_I2C1_Init+0x50>)
 8001172:	f000 fe4d 	bl	8001e10 <HAL_I2C_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800117c:	f000 fa10 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000009c 	.word	0x2000009c
 8001188:	40005400 	.word	0x40005400
 800118c:	00061a80 	.word	0x00061a80

08001190 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <HAL_I2C_MspInit+0x84>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d12c      	bne.n	800120c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e0:	2304      	movs	r3, #4
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <HAL_I2C_MspInit+0x8c>)
 80011ec:	f000 fc8c 	bl	8001b08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_I2C_MspInit+0x88>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40005400 	.word	0x40005400
 8001218:	40023800 	.word	0x40023800
 800121c:	40020400 	.word	0x40020400

08001220 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <bno055_assignI2C+0x1c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200000f0 	.word	0x200000f0

08001240 <bno055_delay>:

void bno055_delay(int time) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fb52 	bl	80018f4 <HAL_Delay>
#endif
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af02      	add	r7, sp, #8
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	733b      	strb	r3, [r7, #12]
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001270:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <bno055_writeData+0x184>)
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	f107 020c 	add.w	r2, r7, #12
 8001278:	230a      	movs	r3, #10
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2302      	movs	r3, #2
 800127e:	2152      	movs	r1, #82	; 0x52
 8001280:	f000 ff0a 	bl	8002098 <HAL_I2C_Master_Transmit>
 8001284:	4603      	mov	r3, r0
 8001286:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 80a0 	beq.w	80013d0 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d103      	bne.n	800129e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001296:	4852      	ldr	r0, [pc, #328]	; (80013e0 <bno055_writeData+0x188>)
 8001298:	f002 fa66 	bl	8003768 <puts>
 800129c:	e012      	b.n	80012c4 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d103      	bne.n	80012ac <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80012a4:	484f      	ldr	r0, [pc, #316]	; (80013e4 <bno055_writeData+0x18c>)
 80012a6:	f002 fa5f 	bl	8003768 <puts>
 80012aa:	e00b      	b.n	80012c4 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d103      	bne.n	80012ba <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80012b2:	484d      	ldr	r0, [pc, #308]	; (80013e8 <bno055_writeData+0x190>)
 80012b4:	f002 fa58 	bl	8003768 <puts>
 80012b8:	e004      	b.n	80012c4 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	4619      	mov	r1, r3
 80012be:	484b      	ldr	r0, [pc, #300]	; (80013ec <bno055_writeData+0x194>)
 80012c0:	f002 f9cc 	bl	800365c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80012c4:	4b45      	ldr	r3, [pc, #276]	; (80013dc <bno055_writeData+0x184>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fa17 	bl	80026fc <HAL_I2C_GetError>
 80012ce:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d07e      	beq.n	80013d4 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d103      	bne.n	80012e4 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80012dc:	4844      	ldr	r0, [pc, #272]	; (80013f0 <bno055_writeData+0x198>)
 80012de:	f002 fa43 	bl	8003768 <puts>
 80012e2:	e021      	b.n	8001328 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d103      	bne.n	80012f2 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80012ea:	4842      	ldr	r0, [pc, #264]	; (80013f4 <bno055_writeData+0x19c>)
 80012ec:	f002 fa3c 	bl	8003768 <puts>
 80012f0:	e01a      	b.n	8001328 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d103      	bne.n	8001300 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80012f8:	483f      	ldr	r0, [pc, #252]	; (80013f8 <bno055_writeData+0x1a0>)
 80012fa:	f002 fa35 	bl	8003768 <puts>
 80012fe:	e013      	b.n	8001328 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	2b08      	cmp	r3, #8
 8001304:	d103      	bne.n	800130e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001306:	483d      	ldr	r0, [pc, #244]	; (80013fc <bno055_writeData+0x1a4>)
 8001308:	f002 fa2e 	bl	8003768 <puts>
 800130c:	e00c      	b.n	8001328 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	2b10      	cmp	r3, #16
 8001312:	d103      	bne.n	800131c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001314:	483a      	ldr	r0, [pc, #232]	; (8001400 <bno055_writeData+0x1a8>)
 8001316:	f002 fa27 	bl	8003768 <puts>
 800131a:	e005      	b.n	8001328 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b20      	cmp	r3, #32
 8001320:	d102      	bne.n	8001328 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001322:	4838      	ldr	r0, [pc, #224]	; (8001404 <bno055_writeData+0x1ac>)
 8001324:	f002 fa20 	bl	8003768 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001328:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <bno055_writeData+0x184>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f001 f9d7 	bl	80026e0 <HAL_I2C_GetState>
 8001332:	4603      	mov	r3, r0
 8001334:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d103      	bne.n	8001344 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 800133c:	4832      	ldr	r0, [pc, #200]	; (8001408 <bno055_writeData+0x1b0>)
 800133e:	f002 fa13 	bl	8003768 <puts>
 8001342:	e048      	b.n	80013d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2b20      	cmp	r3, #32
 8001348:	d103      	bne.n	8001352 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800134a:	482f      	ldr	r0, [pc, #188]	; (8001408 <bno055_writeData+0x1b0>)
 800134c:	f002 fa0c 	bl	8003768 <puts>
 8001350:	e041      	b.n	80013d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b24      	cmp	r3, #36	; 0x24
 8001356:	d103      	bne.n	8001360 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001358:	482c      	ldr	r0, [pc, #176]	; (800140c <bno055_writeData+0x1b4>)
 800135a:	f002 fa05 	bl	8003768 <puts>
 800135e:	e03a      	b.n	80013d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b21      	cmp	r3, #33	; 0x21
 8001364:	d103      	bne.n	800136e <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001366:	482a      	ldr	r0, [pc, #168]	; (8001410 <bno055_writeData+0x1b8>)
 8001368:	f002 f9fe 	bl	8003768 <puts>
 800136c:	e033      	b.n	80013d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b22      	cmp	r3, #34	; 0x22
 8001372:	d103      	bne.n	800137c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001374:	4827      	ldr	r0, [pc, #156]	; (8001414 <bno055_writeData+0x1bc>)
 8001376:	f002 f9f7 	bl	8003768 <puts>
 800137a:	e02c      	b.n	80013d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b28      	cmp	r3, #40	; 0x28
 8001380:	d103      	bne.n	800138a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001382:	4825      	ldr	r0, [pc, #148]	; (8001418 <bno055_writeData+0x1c0>)
 8001384:	f002 f9f0 	bl	8003768 <puts>
 8001388:	e025      	b.n	80013d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b29      	cmp	r3, #41	; 0x29
 800138e:	d103      	bne.n	8001398 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001390:	4822      	ldr	r0, [pc, #136]	; (800141c <bno055_writeData+0x1c4>)
 8001392:	f002 f9e9 	bl	8003768 <puts>
 8001396:	e01e      	b.n	80013d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2b2a      	cmp	r3, #42	; 0x2a
 800139c:	d103      	bne.n	80013a6 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800139e:	4820      	ldr	r0, [pc, #128]	; (8001420 <bno055_writeData+0x1c8>)
 80013a0:	f002 f9e2 	bl	8003768 <puts>
 80013a4:	e017      	b.n	80013d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b60      	cmp	r3, #96	; 0x60
 80013aa:	d103      	bne.n	80013b4 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80013ac:	481d      	ldr	r0, [pc, #116]	; (8001424 <bno055_writeData+0x1cc>)
 80013ae:	f002 f9db 	bl	8003768 <puts>
 80013b2:	e010      	b.n	80013d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2ba0      	cmp	r3, #160	; 0xa0
 80013b8:	d103      	bne.n	80013c2 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80013ba:	481b      	ldr	r0, [pc, #108]	; (8001428 <bno055_writeData+0x1d0>)
 80013bc:	f002 f9d4 	bl	8003768 <puts>
 80013c0:	e009      	b.n	80013d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	2be0      	cmp	r3, #224	; 0xe0
 80013c6:	d106      	bne.n	80013d6 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80013c8:	4818      	ldr	r0, [pc, #96]	; (800142c <bno055_writeData+0x1d4>)
 80013ca:	f002 f9cd 	bl	8003768 <puts>
 80013ce:	e002      	b.n	80013d6 <bno055_writeData+0x17e>
    return;
 80013d0:	bf00      	nop
 80013d2:	e000      	b.n	80013d6 <bno055_writeData+0x17e>
    return;
 80013d4:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000f0 	.word	0x200000f0
 80013e0:	080046b8 	.word	0x080046b8
 80013e4:	080046dc 	.word	0x080046dc
 80013e8:	08004704 	.word	0x08004704
 80013ec:	08004728 	.word	0x08004728
 80013f0:	08004740 	.word	0x08004740
 80013f4:	08004754 	.word	0x08004754
 80013f8:	08004768 	.word	0x08004768
 80013fc:	0800477c 	.word	0x0800477c
 8001400:	08004790 	.word	0x08004790
 8001404:	080047a4 	.word	0x080047a4
 8001408:	080047bc 	.word	0x080047bc
 800140c:	080047d4 	.word	0x080047d4
 8001410:	080047e8 	.word	0x080047e8
 8001414:	08004800 	.word	0x08004800
 8001418:	08004818 	.word	0x08004818
 800141c:	08004830 	.word	0x08004830
 8001420:	08004850 	.word	0x08004850
 8001424:	08004870 	.word	0x08004870
 8001428:	08004888 	.word	0x08004888
 800142c:	080048a0 	.word	0x080048a0

08001430 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af02      	add	r7, sp, #8
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	4613      	mov	r3, r2
 800143e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <bno055_readData+0x40>)
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	1dfa      	adds	r2, r7, #7
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	2152      	movs	r1, #82	; 0x52
 800144e:	f000 fe23 	bl	8002098 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <bno055_readData+0x40>)
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	b29b      	uxth	r3, r3
 800145a:	2264      	movs	r2, #100	; 0x64
 800145c:	9200      	str	r2, [sp, #0]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	2152      	movs	r1, #82	; 0x52
 8001462:	f000 ff17 	bl	8002294 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200000f0 	.word	0x200000f0

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001478:	f000 f9ca 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f830 	bl	80014e0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f7ff fe3e 	bl	8001100 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001484:	f7ff fe56 	bl	8001134 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <main+0x64>)
 800148a:	f7ff fec9 	bl	8001220 <bno055_assignI2C>
  bno055_setup();
 800148e:	f7ff fc87 	bl	8000da0 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001492:	f7ff fc72 	bl	8000d7a <bno055_setOperationModeNDOF>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  v = bno055_getVectorQuaternion();
 8001496:	f7ff fdef 	bl	8001078 <bno055_getVectorQuaternion>
 800149a:	eeb0 4a40 	vmov.f32	s8, s0
 800149e:	eef0 4a60 	vmov.f32	s9, s1
 80014a2:	eeb0 5a41 	vmov.f32	s10, s2
 80014a6:	eef0 5a61 	vmov.f32	s11, s3
 80014aa:	eeb0 6a42 	vmov.f32	s12, s4
 80014ae:	eef0 6a62 	vmov.f32	s13, s5
 80014b2:	eeb0 7a43 	vmov.f32	s14, s6
 80014b6:	eef0 7a63 	vmov.f32	s15, s7
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <main+0x68>)
 80014bc:	ed83 4b00 	vstr	d4, [r3]
 80014c0:	ed83 5b02 	vstr	d5, [r3, #8]
 80014c4:	ed83 6b04 	vstr	d6, [r3, #16]
 80014c8:	ed83 7b06 	vstr	d7, [r3, #24]
	  HAL_Delay(1000);
 80014cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d0:	f000 fa10 	bl	80018f4 <HAL_Delay>
	  v = bno055_getVectorQuaternion();
 80014d4:	e7df      	b.n	8001496 <main+0x22>
 80014d6:	bf00      	nop
 80014d8:	2000009c 	.word	0x2000009c
 80014dc:	200000f8 	.word	0x200000f8

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	; 0x50
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	2230      	movs	r2, #48	; 0x30
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 f8ac 	bl	800364c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <SystemClock_Config+0xb8>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a22      	ldr	r2, [pc, #136]	; (8001598 <SystemClock_Config+0xb8>)
 800150e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <SystemClock_Config+0xb8>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <SystemClock_Config+0xbc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <SystemClock_Config+0xbc>)
 800152e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <SystemClock_Config+0xbc>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001540:	2302      	movs	r3, #2
 8001542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001544:	2301      	movs	r3, #1
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001548:	2310      	movs	r3, #16
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800154c:	2300      	movs	r3, #0
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fc0b 	bl	8002d70 <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001560:	f000 f81e 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f001 fe6e 	bl	8003260 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800158a:	f000 f809 	bl	80015a0 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3750      	adds	r7, #80	; 0x50
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_MspInit+0x4c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_MspInit+0x4c>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_MspInit+0x4c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler+0x4>

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 f934 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e00a      	b.n	8001678 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001662:	f3af 8000 	nop.w
 8001666:	4601      	mov	r1, r0
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	b2ca      	uxtb	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf0      	blt.n	8001662 <_read+0x12>
  }

  return len;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e009      	b.n	80016b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	60ba      	str	r2, [r7, #8]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf1      	blt.n	800169c <_write+0x12>
  }
  return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_close>:

int _close(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ea:	605a      	str	r2, [r3, #4]
  return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_isatty>:

int _isatty(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f001 ff4c 	bl	80035f8 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20018000 	.word	0x20018000
 800178c:	00000400 	.word	0x00000400
 8001790:	20000118 	.word	0x20000118
 8001794:	20000130 	.word	0x20000130

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c2:	490e      	ldr	r1, [pc, #56]	; (80017fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d8:	4c0b      	ldr	r4, [pc, #44]	; (8001808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e6:	f7ff ffd7 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f001 ff0b 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff fe41 	bl	8001474 <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001800:	08004978 	.word	0x08004978
  ldr r2, =_sbss
 8001804:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001808:	20000130 	.word	0x20000130

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_Init+0x40>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_Init+0x40>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_Init+0x40>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 f931 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f000 f808 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff feb2 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f93b 	bl	8001aee <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f911 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	20000014 	.word	0x20000014
 80018b0:	20000010 	.word	0x20000010

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000014 	.word	0x20000014
 80018d8:	2000011c 	.word	0x2000011c

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000011c 	.word	0x2000011c

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffde 	bl	80018dc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000014 	.word	0x20000014

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff47 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff5c 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffb0 	bl	8001a5c <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e159      	b.n	8001dd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8148 	bne.w	8001dd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d005      	beq.n	8001b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d017      	beq.n	8001bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80a2 	beq.w	8001dd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b57      	ldr	r3, [pc, #348]	; (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a56      	ldr	r2, [pc, #344]	; (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001caa:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_GPIO_Init+0x2ec>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <HAL_GPIO_Init+0x2f0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x202>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a48      	ldr	r2, [pc, #288]	; (8001dfc <HAL_GPIO_Init+0x2f4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x1fe>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_GPIO_Init+0x2f8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x1fa>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a46      	ldr	r2, [pc, #280]	; (8001e04 <HAL_GPIO_Init+0x2fc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x1f6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x1f2>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x2ec>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4e:	4a2f      	ldr	r2, [pc, #188]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d78:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da2:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	f67f aea2 	bls.w	8001b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e12b      	b.n	800207a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff f9aa 	bl	8001190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2224      	movs	r2, #36	; 0x24
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e74:	f001 fbac 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8001e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a81      	ldr	r2, [pc, #516]	; (8002084 <HAL_I2C_Init+0x274>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d807      	bhi.n	8001e94 <HAL_I2C_Init+0x84>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4a80      	ldr	r2, [pc, #512]	; (8002088 <HAL_I2C_Init+0x278>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	bf94      	ite	ls
 8001e8c:	2301      	movls	r3, #1
 8001e8e:	2300      	movhi	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	e006      	b.n	8001ea2 <HAL_I2C_Init+0x92>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a7d      	ldr	r2, [pc, #500]	; (800208c <HAL_I2C_Init+0x27c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	bf94      	ite	ls
 8001e9c:	2301      	movls	r3, #1
 8001e9e:	2300      	movhi	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0e7      	b.n	800207a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4a78      	ldr	r2, [pc, #480]	; (8002090 <HAL_I2C_Init+0x280>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0c9b      	lsrs	r3, r3, #18
 8001eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a6a      	ldr	r2, [pc, #424]	; (8002084 <HAL_I2C_Init+0x274>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d802      	bhi.n	8001ee4 <HAL_I2C_Init+0xd4>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	e009      	b.n	8001ef8 <HAL_I2C_Init+0xe8>
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	4a69      	ldr	r2, [pc, #420]	; (8002094 <HAL_I2C_Init+0x284>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	495c      	ldr	r1, [pc, #368]	; (8002084 <HAL_I2C_Init+0x274>)
 8001f14:	428b      	cmp	r3, r1
 8001f16:	d819      	bhi.n	8001f4c <HAL_I2C_Init+0x13c>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1e59      	subs	r1, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f26:	1c59      	adds	r1, r3, #1
 8001f28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_I2C_Init+0x138>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1e59      	subs	r1, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f40:	3301      	adds	r3, #1
 8001f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f46:	e051      	b.n	8001fec <HAL_I2C_Init+0x1dc>
 8001f48:	2304      	movs	r3, #4
 8001f4a:	e04f      	b.n	8001fec <HAL_I2C_Init+0x1dc>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d111      	bne.n	8001f78 <HAL_I2C_Init+0x168>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1e58      	subs	r0, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	440b      	add	r3, r1
 8001f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f66:	3301      	adds	r3, #1
 8001f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	e012      	b.n	8001f9e <HAL_I2C_Init+0x18e>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1e58      	subs	r0, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	0099      	lsls	r1, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Init+0x196>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e022      	b.n	8001fec <HAL_I2C_Init+0x1dc>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10e      	bne.n	8001fcc <HAL_I2C_Init+0x1bc>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1e58      	subs	r0, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	440b      	add	r3, r1
 8001fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fca:	e00f      	b.n	8001fec <HAL_I2C_Init+0x1dc>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1e58      	subs	r0, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	0099      	lsls	r1, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	6809      	ldr	r1, [r1, #0]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69da      	ldr	r2, [r3, #28]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800201a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6911      	ldr	r1, [r2, #16]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68d2      	ldr	r2, [r2, #12]
 8002026:	4311      	orrs	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	430b      	orrs	r3, r1
 800202e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	000186a0 	.word	0x000186a0
 8002088:	001e847f 	.word	0x001e847f
 800208c:	003d08ff 	.word	0x003d08ff
 8002090:	431bde83 	.word	0x431bde83
 8002094:	10624dd3 	.word	0x10624dd3

08002098 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	461a      	mov	r2, r3
 80020a4:	460b      	mov	r3, r1
 80020a6:	817b      	strh	r3, [r7, #10]
 80020a8:	4613      	mov	r3, r2
 80020aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff fc16 	bl	80018dc <HAL_GetTick>
 80020b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	f040 80e0 	bne.w	8002280 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2319      	movs	r3, #25
 80020c6:	2201      	movs	r2, #1
 80020c8:	4970      	ldr	r1, [pc, #448]	; (800228c <HAL_I2C_Master_Transmit+0x1f4>)
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fc72 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020d6:	2302      	movs	r3, #2
 80020d8:	e0d3      	b.n	8002282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_I2C_Master_Transmit+0x50>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e0cc      	b.n	8002282 <HAL_I2C_Master_Transmit+0x1ea>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d007      	beq.n	800210e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800211c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2221      	movs	r2, #33	; 0x21
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2210      	movs	r2, #16
 800212a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	893a      	ldrh	r2, [r7, #8]
 800213e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4a50      	ldr	r2, [pc, #320]	; (8002290 <HAL_I2C_Master_Transmit+0x1f8>)
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002150:	8979      	ldrh	r1, [r7, #10]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fadc 	bl	8002714 <I2C_MasterRequestWrite>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e08d      	b.n	8002282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800217c:	e066      	b.n	800224c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fcec 	bl	8002b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	2b04      	cmp	r3, #4
 8002194:	d107      	bne.n	80021a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e06b      	b.n	8002282 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d11b      	bne.n	8002220 <HAL_I2C_Master_Transmit+0x188>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d017      	beq.n	8002220 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	6a39      	ldr	r1, [r7, #32]
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 fcdc 	bl	8002be2 <I2C_WaitOnBTFFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00d      	beq.n	800224c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	2b04      	cmp	r3, #4
 8002236:	d107      	bne.n	8002248 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002246:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e01a      	b.n	8002282 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	d194      	bne.n	800217e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	00100002 	.word	0x00100002
 8002290:	ffff0000 	.word	0xffff0000

08002294 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	461a      	mov	r2, r3
 80022a0:	460b      	mov	r3, r1
 80022a2:	817b      	strh	r3, [r7, #10]
 80022a4:	4613      	mov	r3, r2
 80022a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff fb18 	bl	80018dc <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	f040 820b 	bne.w	80026d2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2319      	movs	r3, #25
 80022c2:	2201      	movs	r2, #1
 80022c4:	497c      	ldr	r1, [pc, #496]	; (80024b8 <HAL_I2C_Master_Receive+0x224>)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fb74 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80022d2:	2302      	movs	r3, #2
 80022d4:	e1fe      	b.n	80026d4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_I2C_Master_Receive+0x50>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e1f7      	b.n	80026d4 <HAL_I2C_Master_Receive+0x440>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d007      	beq.n	800230a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0201 	orr.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002318:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2222      	movs	r2, #34	; 0x22
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2210      	movs	r2, #16
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	893a      	ldrh	r2, [r7, #8]
 800233a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a5c      	ldr	r2, [pc, #368]	; (80024bc <HAL_I2C_Master_Receive+0x228>)
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800234c:	8979      	ldrh	r1, [r7, #10]
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fa60 	bl	8002818 <I2C_MasterRequestRead>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1b8      	b.n	80026d4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	2b00      	cmp	r3, #0
 8002368:	d113      	bne.n	8002392 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e18c      	b.n	80026ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	2b01      	cmp	r3, #1
 8002398:	d11b      	bne.n	80023d2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e16c      	b.n	80026ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d11b      	bne.n	8002412 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	e14c      	b.n	80026ac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002438:	e138      	b.n	80026ac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	2b03      	cmp	r3, #3
 8002440:	f200 80f1 	bhi.w	8002626 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	2b01      	cmp	r3, #1
 800244a:	d123      	bne.n	8002494 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fc07 	bl	8002c64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e139      	b.n	80026d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002492:	e10b      	b.n	80026ac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	2b02      	cmp	r3, #2
 800249a:	d14e      	bne.n	800253a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	2200      	movs	r2, #0
 80024a4:	4906      	ldr	r1, [pc, #24]	; (80024c0 <HAL_I2C_Master_Receive+0x22c>)
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fa84 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e10e      	b.n	80026d4 <HAL_I2C_Master_Receive+0x440>
 80024b6:	bf00      	nop
 80024b8:	00100002 	.word	0x00100002
 80024bc:	ffff0000 	.word	0xffff0000
 80024c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002538:	e0b8      	b.n	80026ac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	2200      	movs	r2, #0
 8002542:	4966      	ldr	r1, [pc, #408]	; (80026dc <HAL_I2C_Master_Receive+0x448>)
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa35 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0bf      	b.n	80026d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	2200      	movs	r2, #0
 800259e:	494f      	ldr	r1, [pc, #316]	; (80026dc <HAL_I2C_Master_Receive+0x448>)
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fa07 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e091      	b.n	80026d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002624:	e042      	b.n	80026ac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002628:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fb1a 	bl	8002c64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e04c      	b.n	80026d4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b04      	cmp	r3, #4
 8002678:	d118      	bne.n	80026ac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f47f aec2 	bne.w	800243a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	00010004 	.word	0x00010004

080026e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ee:	b2db      	uxtb	r3, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	460b      	mov	r3, r1
 8002722:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d006      	beq.n	800273e <I2C_MasterRequestWrite+0x2a>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d003      	beq.n	800273e <I2C_MasterRequestWrite+0x2a>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800273c:	d108      	bne.n	8002750 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e00b      	b.n	8002768 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	2b12      	cmp	r3, #18
 8002756:	d107      	bne.n	8002768 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002766:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f91d 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278e:	d103      	bne.n	8002798 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e035      	b.n	8002808 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a4:	d108      	bne.n	80027b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	e01b      	b.n	80027f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027b8:	897b      	ldrh	r3, [r7, #10]
 80027ba:	11db      	asrs	r3, r3, #7
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f003 0306 	and.w	r3, r3, #6
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f063 030f 	orn	r3, r3, #15
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <I2C_MasterRequestWrite+0xfc>)
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f943 	bl	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e010      	b.n	8002808 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027e6:	897b      	ldrh	r3, [r7, #10]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4907      	ldr	r1, [pc, #28]	; (8002814 <I2C_MasterRequestWrite+0x100>)
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f933 	bl	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	00010008 	.word	0x00010008
 8002814:	00010002 	.word	0x00010002

08002818 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	460b      	mov	r3, r1
 8002826:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800283c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d006      	beq.n	8002852 <I2C_MasterRequestRead+0x3a>
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d003      	beq.n	8002852 <I2C_MasterRequestRead+0x3a>
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002850:	d108      	bne.n	8002864 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e00b      	b.n	800287c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	2b11      	cmp	r3, #17
 800286a:	d107      	bne.n	800287c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800287a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f893 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a2:	d103      	bne.n	80028ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e079      	b.n	80029a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b8:	d108      	bne.n	80028cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028ba:	897b      	ldrh	r3, [r7, #10]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	611a      	str	r2, [r3, #16]
 80028ca:	e05f      	b.n	800298c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028cc:	897b      	ldrh	r3, [r7, #10]
 80028ce:	11db      	asrs	r3, r3, #7
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f003 0306 	and.w	r3, r3, #6
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f063 030f 	orn	r3, r3, #15
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4930      	ldr	r1, [pc, #192]	; (80029ac <I2C_MasterRequestRead+0x194>)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f8b9 	bl	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e054      	b.n	80029a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028fa:	897b      	ldrh	r3, [r7, #10]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4929      	ldr	r1, [pc, #164]	; (80029b0 <I2C_MasterRequestRead+0x198>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f8a9 	bl	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e044      	b.n	80029a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800293e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f831 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00d      	beq.n	8002974 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002966:	d103      	bne.n	8002970 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e017      	b.n	80029a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002974:	897b      	ldrh	r3, [r7, #10]
 8002976:	11db      	asrs	r3, r3, #7
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f003 0306 	and.w	r3, r3, #6
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f063 030e 	orn	r3, r3, #14
 8002984:	b2da      	uxtb	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4907      	ldr	r1, [pc, #28]	; (80029b0 <I2C_MasterRequestRead+0x198>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f865 	bl	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	00010008 	.word	0x00010008
 80029b0:	00010002 	.word	0x00010002

080029b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c4:	e025      	b.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d021      	beq.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7fe ff85 	bl	80018dc <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d116      	bne.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e023      	b.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d10d      	bne.n	8002a38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	43da      	mvns	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4013      	ands	r3, r2
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bf0c      	ite	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	2300      	movne	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	e00c      	b.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d0b6      	beq.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a70:	e051      	b.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a80:	d123      	bne.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e046      	b.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d021      	beq.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad2:	f7fe ff03 	bl	80018dc <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d302      	bcc.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d116      	bne.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f043 0220 	orr.w	r2, r3, #32
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e020      	b.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10c      	bne.n	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	e00b      	b.n	8002b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d18d      	bne.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b6c:	e02d      	b.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f8ce 	bl	8002d10 <I2C_IsAcknowledgeFailed>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e02d      	b.n	8002bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d021      	beq.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7fe fea9 	bl	80018dc <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e007      	b.n	8002bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d1ca      	bne.n	8002b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bee:	e02d      	b.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f88d 	bl	8002d10 <I2C_IsAcknowledgeFailed>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e02d      	b.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	d021      	beq.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c08:	f7fe fe68 	bl	80018dc <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d302      	bcc.n	8002c1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d116      	bne.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e007      	b.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d1ca      	bne.n	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c70:	e042      	b.n	8002cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d119      	bne.n	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0210 	mvn.w	r2, #16
 8002c88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e029      	b.n	8002d08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb4:	f7fe fe12 	bl	80018dc <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e007      	b.n	8002d08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b40      	cmp	r3, #64	; 0x40
 8002d04:	d1b5      	bne.n	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d26:	d11b      	bne.n	8002d60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f043 0204 	orr.w	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e267      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d075      	beq.n	8002e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4b85      	ldr	r3, [pc, #532]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d112      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	4b7e      	ldr	r3, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05b      	beq.n	8002e78 <HAL_RCC_OscConfig+0x108>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d157      	bne.n	8002e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e242      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x74>
 8002dd6:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a75      	ldr	r2, [pc, #468]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x98>
 8002dee:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6f      	ldr	r2, [pc, #444]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6c      	ldr	r2, [pc, #432]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002e08:	4b69      	ldr	r3, [pc, #420]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a68      	ldr	r2, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe fd58 	bl	80018dc <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe fd54 	bl	80018dc <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e207      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xc0>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fd44 	bl	80018dc <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe fd40 	bl	80018dc <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1f3      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0xe8>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d11c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1c7      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4937      	ldr	r1, [pc, #220]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	e03a      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee0:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fcf9 	bl	80018dc <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fe fcf5 	bl	80018dc <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1a8      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4925      	ldr	r1, [pc, #148]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fcd8 	bl	80018dc <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fe fcd4 	bl	80018dc <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e187      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d036      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe fcb8 	bl	80018dc <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe fcb4 	bl	80018dc <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e167      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x200>
 8002f8e:	e01b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe fca1 	bl	80018dc <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	e00e      	b.n	8002fbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fe fc9d 	bl	80018dc <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d907      	bls.n	8002fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e150      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	42470000 	.word	0x42470000
 8002fb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b88      	ldr	r3, [pc, #544]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ea      	bne.n	8002f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8097 	beq.w	8003104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b81      	ldr	r3, [pc, #516]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10f      	bne.n	8003006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	4b7d      	ldr	r3, [pc, #500]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a7c      	ldr	r2, [pc, #496]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b7a      	ldr	r3, [pc, #488]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003006:	4b77      	ldr	r3, [pc, #476]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d118      	bne.n	8003044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003012:	4b74      	ldr	r3, [pc, #464]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a73      	ldr	r2, [pc, #460]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301e:	f7fe fc5d 	bl	80018dc <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003026:	f7fe fc59 	bl	80018dc <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e10c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x2ea>
 800304c:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
 8003058:	e01c      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x30c>
 8003062:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a5e      	ldr	r2, [pc, #376]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	4a5b      	ldr	r2, [pc, #364]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6713      	str	r3, [r2, #112]	; 0x70
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800307c:	4b58      	ldr	r3, [pc, #352]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a57      	ldr	r2, [pc, #348]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	4b55      	ldr	r3, [pc, #340]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a54      	ldr	r2, [pc, #336]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308e:	f023 0304 	bic.w	r3, r3, #4
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe fc1e 	bl	80018dc <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7fe fc1a 	bl	80018dc <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0cb      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ee      	beq.n	80030a4 <HAL_RCC_OscConfig+0x334>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe fc08 	bl	80018dc <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe fc04 	bl	80018dc <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0b5      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e6:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ee      	bne.n	80030d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	4a38      	ldr	r2, [pc, #224]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a1 	beq.w	8003250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310e:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b08      	cmp	r3, #8
 8003118:	d05c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d141      	bne.n	80031a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fbd8 	bl	80018dc <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe fbd4 	bl	80018dc <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e087      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	3b01      	subs	r3, #1
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	061b      	lsls	r3, r3, #24
 8003172:	491b      	ldr	r1, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe fbad 	bl	80018dc <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe fba9 	bl	80018dc <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e05c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x416>
 80031a4:	e054      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fb96 	bl	80018dc <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe fb92 	bl	80018dc <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e045      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x444>
 80031d2:	e03d      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e038      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCC_OscConfig+0x4ec>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d028      	beq.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d121      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d11a      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003224:	4293      	cmp	r3, r2
 8003226:	d111      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0cc      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d90c      	bls.n	800329c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b65      	ldr	r3, [pc, #404]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b63      	ldr	r3, [pc, #396]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0b8      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a52      	ldr	r2, [pc, #328]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	494d      	ldr	r1, [pc, #308]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d044      	beq.n	8003380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d119      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d003      	beq.n	800331e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331a:	2b03      	cmp	r3, #3
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e067      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4934      	ldr	r1, [pc, #208]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003350:	f7fe fac4 	bl	80018dc <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fe fac0 	bl	80018dc <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 020c 	and.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	429a      	cmp	r2, r3
 800337e:	d1eb      	bne.n	8003358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d20c      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e032      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4916      	ldr	r1, [pc, #88]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	490e      	ldr	r1, [pc, #56]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e6:	f000 f821 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	490a      	ldr	r1, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	5ccb      	ldrb	r3, [r1, r3]
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1c8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe fa24 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023c00 	.word	0x40023c00
 800341c:	40023800 	.word	0x40023800
 8003420:	080048b8 	.word	0x080048b8
 8003424:	2000000c 	.word	0x2000000c
 8003428:	20000010 	.word	0x20000010

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003430:	b090      	sub	sp, #64	; 0x40
 8003432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
 8003438:	2300      	movs	r3, #0
 800343a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343c:	2300      	movs	r3, #0
 800343e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d00d      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x40>
 8003450:	2b08      	cmp	r3, #8
 8003452:	f200 80a1 	bhi.w	8003598 <HAL_RCC_GetSysClockFreq+0x16c>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x34>
 800345a:	2b04      	cmp	r3, #4
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x3a>
 800345e:	e09b      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003460:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003462:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003464:	e09b      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003466:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003468:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800346a:	e098      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4b4f      	ldr	r3, [pc, #316]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003476:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d028      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	627a      	str	r2, [r7, #36]	; 0x24
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003494:	2100      	movs	r1, #0
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003498:	fb03 f201 	mul.w	r2, r3, r1
 800349c:	2300      	movs	r3, #0
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	4a43      	ldr	r2, [pc, #268]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034a6:	fba0 1202 	umull	r1, r2, r0, r2
 80034aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ac:	460a      	mov	r2, r1
 80034ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80034b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b2:	4413      	add	r3, r2
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	2200      	movs	r2, #0
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	61fa      	str	r2, [r7, #28]
 80034be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034c6:	f7fd faa9 	bl	8000a1c <__aeabi_uldivmod>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4613      	mov	r3, r2
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d2:	e053      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d4:	4b35      	ldr	r3, [pc, #212]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	2200      	movs	r2, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	617a      	str	r2, [r7, #20]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034e6:	f04f 0b00 	mov.w	fp, #0
 80034ea:	4652      	mov	r2, sl
 80034ec:	465b      	mov	r3, fp
 80034ee:	f04f 0000 	mov.w	r0, #0
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	0159      	lsls	r1, r3, #5
 80034f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fc:	0150      	lsls	r0, r2, #5
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	ebb2 080a 	subs.w	r8, r2, sl
 8003506:	eb63 090b 	sbc.w	r9, r3, fp
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003516:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800351a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800351e:	ebb2 0408 	subs.w	r4, r2, r8
 8003522:	eb63 0509 	sbc.w	r5, r3, r9
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	00eb      	lsls	r3, r5, #3
 8003530:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003534:	00e2      	lsls	r2, r4, #3
 8003536:	4614      	mov	r4, r2
 8003538:	461d      	mov	r5, r3
 800353a:	eb14 030a 	adds.w	r3, r4, sl
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	eb45 030b 	adc.w	r3, r5, fp
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003552:	4629      	mov	r1, r5
 8003554:	028b      	lsls	r3, r1, #10
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800355c:	4621      	mov	r1, r4
 800355e:	028a      	lsls	r2, r1, #10
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003566:	2200      	movs	r2, #0
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	60fa      	str	r2, [r7, #12]
 800356c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003570:	f7fd fa54 	bl	8000a1c <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800358c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3740      	adds	r7, #64	; 0x40
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	017d7840 	.word	0x017d7840

080035b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	2000000c 	.word	0x2000000c

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	080048c8 	.word	0x080048c8

080035f8 <__errno>:
 80035f8:	4b01      	ldr	r3, [pc, #4]	; (8003600 <__errno+0x8>)
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000018 	.word	0x20000018

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	4d0d      	ldr	r5, [pc, #52]	; (800363c <__libc_init_array+0x38>)
 8003608:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <__libc_init_array+0x3c>)
 800360a:	1b64      	subs	r4, r4, r5
 800360c:	10a4      	asrs	r4, r4, #2
 800360e:	2600      	movs	r6, #0
 8003610:	42a6      	cmp	r6, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	4d0b      	ldr	r5, [pc, #44]	; (8003644 <__libc_init_array+0x40>)
 8003616:	4c0c      	ldr	r4, [pc, #48]	; (8003648 <__libc_init_array+0x44>)
 8003618:	f001 f824 	bl	8004664 <_init>
 800361c:	1b64      	subs	r4, r4, r5
 800361e:	10a4      	asrs	r4, r4, #2
 8003620:	2600      	movs	r6, #0
 8003622:	42a6      	cmp	r6, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	f855 3b04 	ldr.w	r3, [r5], #4
 800362c:	4798      	blx	r3
 800362e:	3601      	adds	r6, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	f855 3b04 	ldr.w	r3, [r5], #4
 8003636:	4798      	blx	r3
 8003638:	3601      	adds	r6, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	08004970 	.word	0x08004970
 8003640:	08004970 	.word	0x08004970
 8003644:	08004970 	.word	0x08004970
 8003648:	08004974 	.word	0x08004974

0800364c <memset>:
 800364c:	4402      	add	r2, r0
 800364e:	4603      	mov	r3, r0
 8003650:	4293      	cmp	r3, r2
 8003652:	d100      	bne.n	8003656 <memset+0xa>
 8003654:	4770      	bx	lr
 8003656:	f803 1b01 	strb.w	r1, [r3], #1
 800365a:	e7f9      	b.n	8003650 <memset+0x4>

0800365c <iprintf>:
 800365c:	b40f      	push	{r0, r1, r2, r3}
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <iprintf+0x2c>)
 8003660:	b513      	push	{r0, r1, r4, lr}
 8003662:	681c      	ldr	r4, [r3, #0]
 8003664:	b124      	cbz	r4, 8003670 <iprintf+0x14>
 8003666:	69a3      	ldr	r3, [r4, #24]
 8003668:	b913      	cbnz	r3, 8003670 <iprintf+0x14>
 800366a:	4620      	mov	r0, r4
 800366c:	f000 fa5e 	bl	8003b2c <__sinit>
 8003670:	ab05      	add	r3, sp, #20
 8003672:	9a04      	ldr	r2, [sp, #16]
 8003674:	68a1      	ldr	r1, [r4, #8]
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	4620      	mov	r0, r4
 800367a:	f000 fc67 	bl	8003f4c <_vfiprintf_r>
 800367e:	b002      	add	sp, #8
 8003680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003684:	b004      	add	sp, #16
 8003686:	4770      	bx	lr
 8003688:	20000018 	.word	0x20000018

0800368c <_puts_r>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	460e      	mov	r6, r1
 8003690:	4605      	mov	r5, r0
 8003692:	b118      	cbz	r0, 800369c <_puts_r+0x10>
 8003694:	6983      	ldr	r3, [r0, #24]
 8003696:	b90b      	cbnz	r3, 800369c <_puts_r+0x10>
 8003698:	f000 fa48 	bl	8003b2c <__sinit>
 800369c:	69ab      	ldr	r3, [r5, #24]
 800369e:	68ac      	ldr	r4, [r5, #8]
 80036a0:	b913      	cbnz	r3, 80036a8 <_puts_r+0x1c>
 80036a2:	4628      	mov	r0, r5
 80036a4:	f000 fa42 	bl	8003b2c <__sinit>
 80036a8:	4b2c      	ldr	r3, [pc, #176]	; (800375c <_puts_r+0xd0>)
 80036aa:	429c      	cmp	r4, r3
 80036ac:	d120      	bne.n	80036f0 <_puts_r+0x64>
 80036ae:	686c      	ldr	r4, [r5, #4]
 80036b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036b2:	07db      	lsls	r3, r3, #31
 80036b4:	d405      	bmi.n	80036c2 <_puts_r+0x36>
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	0598      	lsls	r0, r3, #22
 80036ba:	d402      	bmi.n	80036c2 <_puts_r+0x36>
 80036bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036be:	f000 fad3 	bl	8003c68 <__retarget_lock_acquire_recursive>
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	0719      	lsls	r1, r3, #28
 80036c6:	d51d      	bpl.n	8003704 <_puts_r+0x78>
 80036c8:	6923      	ldr	r3, [r4, #16]
 80036ca:	b1db      	cbz	r3, 8003704 <_puts_r+0x78>
 80036cc:	3e01      	subs	r6, #1
 80036ce:	68a3      	ldr	r3, [r4, #8]
 80036d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036d4:	3b01      	subs	r3, #1
 80036d6:	60a3      	str	r3, [r4, #8]
 80036d8:	bb39      	cbnz	r1, 800372a <_puts_r+0x9e>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	da38      	bge.n	8003750 <_puts_r+0xc4>
 80036de:	4622      	mov	r2, r4
 80036e0:	210a      	movs	r1, #10
 80036e2:	4628      	mov	r0, r5
 80036e4:	f000 f848 	bl	8003778 <__swbuf_r>
 80036e8:	3001      	adds	r0, #1
 80036ea:	d011      	beq.n	8003710 <_puts_r+0x84>
 80036ec:	250a      	movs	r5, #10
 80036ee:	e011      	b.n	8003714 <_puts_r+0x88>
 80036f0:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <_puts_r+0xd4>)
 80036f2:	429c      	cmp	r4, r3
 80036f4:	d101      	bne.n	80036fa <_puts_r+0x6e>
 80036f6:	68ac      	ldr	r4, [r5, #8]
 80036f8:	e7da      	b.n	80036b0 <_puts_r+0x24>
 80036fa:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <_puts_r+0xd8>)
 80036fc:	429c      	cmp	r4, r3
 80036fe:	bf08      	it	eq
 8003700:	68ec      	ldreq	r4, [r5, #12]
 8003702:	e7d5      	b.n	80036b0 <_puts_r+0x24>
 8003704:	4621      	mov	r1, r4
 8003706:	4628      	mov	r0, r5
 8003708:	f000 f888 	bl	800381c <__swsetup_r>
 800370c:	2800      	cmp	r0, #0
 800370e:	d0dd      	beq.n	80036cc <_puts_r+0x40>
 8003710:	f04f 35ff 	mov.w	r5, #4294967295
 8003714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003716:	07da      	lsls	r2, r3, #31
 8003718:	d405      	bmi.n	8003726 <_puts_r+0x9a>
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	059b      	lsls	r3, r3, #22
 800371e:	d402      	bmi.n	8003726 <_puts_r+0x9a>
 8003720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003722:	f000 faa2 	bl	8003c6a <__retarget_lock_release_recursive>
 8003726:	4628      	mov	r0, r5
 8003728:	bd70      	pop	{r4, r5, r6, pc}
 800372a:	2b00      	cmp	r3, #0
 800372c:	da04      	bge.n	8003738 <_puts_r+0xac>
 800372e:	69a2      	ldr	r2, [r4, #24]
 8003730:	429a      	cmp	r2, r3
 8003732:	dc06      	bgt.n	8003742 <_puts_r+0xb6>
 8003734:	290a      	cmp	r1, #10
 8003736:	d004      	beq.n	8003742 <_puts_r+0xb6>
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	6022      	str	r2, [r4, #0]
 800373e:	7019      	strb	r1, [r3, #0]
 8003740:	e7c5      	b.n	80036ce <_puts_r+0x42>
 8003742:	4622      	mov	r2, r4
 8003744:	4628      	mov	r0, r5
 8003746:	f000 f817 	bl	8003778 <__swbuf_r>
 800374a:	3001      	adds	r0, #1
 800374c:	d1bf      	bne.n	80036ce <_puts_r+0x42>
 800374e:	e7df      	b.n	8003710 <_puts_r+0x84>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	250a      	movs	r5, #10
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	6022      	str	r2, [r4, #0]
 8003758:	701d      	strb	r5, [r3, #0]
 800375a:	e7db      	b.n	8003714 <_puts_r+0x88>
 800375c:	080048f4 	.word	0x080048f4
 8003760:	08004914 	.word	0x08004914
 8003764:	080048d4 	.word	0x080048d4

08003768 <puts>:
 8003768:	4b02      	ldr	r3, [pc, #8]	; (8003774 <puts+0xc>)
 800376a:	4601      	mov	r1, r0
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f7ff bf8d 	b.w	800368c <_puts_r>
 8003772:	bf00      	nop
 8003774:	20000018 	.word	0x20000018

08003778 <__swbuf_r>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	460e      	mov	r6, r1
 800377c:	4614      	mov	r4, r2
 800377e:	4605      	mov	r5, r0
 8003780:	b118      	cbz	r0, 800378a <__swbuf_r+0x12>
 8003782:	6983      	ldr	r3, [r0, #24]
 8003784:	b90b      	cbnz	r3, 800378a <__swbuf_r+0x12>
 8003786:	f000 f9d1 	bl	8003b2c <__sinit>
 800378a:	4b21      	ldr	r3, [pc, #132]	; (8003810 <__swbuf_r+0x98>)
 800378c:	429c      	cmp	r4, r3
 800378e:	d12b      	bne.n	80037e8 <__swbuf_r+0x70>
 8003790:	686c      	ldr	r4, [r5, #4]
 8003792:	69a3      	ldr	r3, [r4, #24]
 8003794:	60a3      	str	r3, [r4, #8]
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	071a      	lsls	r2, r3, #28
 800379a:	d52f      	bpl.n	80037fc <__swbuf_r+0x84>
 800379c:	6923      	ldr	r3, [r4, #16]
 800379e:	b36b      	cbz	r3, 80037fc <__swbuf_r+0x84>
 80037a0:	6923      	ldr	r3, [r4, #16]
 80037a2:	6820      	ldr	r0, [r4, #0]
 80037a4:	1ac0      	subs	r0, r0, r3
 80037a6:	6963      	ldr	r3, [r4, #20]
 80037a8:	b2f6      	uxtb	r6, r6
 80037aa:	4283      	cmp	r3, r0
 80037ac:	4637      	mov	r7, r6
 80037ae:	dc04      	bgt.n	80037ba <__swbuf_r+0x42>
 80037b0:	4621      	mov	r1, r4
 80037b2:	4628      	mov	r0, r5
 80037b4:	f000 f926 	bl	8003a04 <_fflush_r>
 80037b8:	bb30      	cbnz	r0, 8003808 <__swbuf_r+0x90>
 80037ba:	68a3      	ldr	r3, [r4, #8]
 80037bc:	3b01      	subs	r3, #1
 80037be:	60a3      	str	r3, [r4, #8]
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	6022      	str	r2, [r4, #0]
 80037c6:	701e      	strb	r6, [r3, #0]
 80037c8:	6963      	ldr	r3, [r4, #20]
 80037ca:	3001      	adds	r0, #1
 80037cc:	4283      	cmp	r3, r0
 80037ce:	d004      	beq.n	80037da <__swbuf_r+0x62>
 80037d0:	89a3      	ldrh	r3, [r4, #12]
 80037d2:	07db      	lsls	r3, r3, #31
 80037d4:	d506      	bpl.n	80037e4 <__swbuf_r+0x6c>
 80037d6:	2e0a      	cmp	r6, #10
 80037d8:	d104      	bne.n	80037e4 <__swbuf_r+0x6c>
 80037da:	4621      	mov	r1, r4
 80037dc:	4628      	mov	r0, r5
 80037de:	f000 f911 	bl	8003a04 <_fflush_r>
 80037e2:	b988      	cbnz	r0, 8003808 <__swbuf_r+0x90>
 80037e4:	4638      	mov	r0, r7
 80037e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <__swbuf_r+0x9c>)
 80037ea:	429c      	cmp	r4, r3
 80037ec:	d101      	bne.n	80037f2 <__swbuf_r+0x7a>
 80037ee:	68ac      	ldr	r4, [r5, #8]
 80037f0:	e7cf      	b.n	8003792 <__swbuf_r+0x1a>
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <__swbuf_r+0xa0>)
 80037f4:	429c      	cmp	r4, r3
 80037f6:	bf08      	it	eq
 80037f8:	68ec      	ldreq	r4, [r5, #12]
 80037fa:	e7ca      	b.n	8003792 <__swbuf_r+0x1a>
 80037fc:	4621      	mov	r1, r4
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 f80c 	bl	800381c <__swsetup_r>
 8003804:	2800      	cmp	r0, #0
 8003806:	d0cb      	beq.n	80037a0 <__swbuf_r+0x28>
 8003808:	f04f 37ff 	mov.w	r7, #4294967295
 800380c:	e7ea      	b.n	80037e4 <__swbuf_r+0x6c>
 800380e:	bf00      	nop
 8003810:	080048f4 	.word	0x080048f4
 8003814:	08004914 	.word	0x08004914
 8003818:	080048d4 	.word	0x080048d4

0800381c <__swsetup_r>:
 800381c:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <__swsetup_r+0xcc>)
 800381e:	b570      	push	{r4, r5, r6, lr}
 8003820:	681d      	ldr	r5, [r3, #0]
 8003822:	4606      	mov	r6, r0
 8003824:	460c      	mov	r4, r1
 8003826:	b125      	cbz	r5, 8003832 <__swsetup_r+0x16>
 8003828:	69ab      	ldr	r3, [r5, #24]
 800382a:	b913      	cbnz	r3, 8003832 <__swsetup_r+0x16>
 800382c:	4628      	mov	r0, r5
 800382e:	f000 f97d 	bl	8003b2c <__sinit>
 8003832:	4b2e      	ldr	r3, [pc, #184]	; (80038ec <__swsetup_r+0xd0>)
 8003834:	429c      	cmp	r4, r3
 8003836:	d10f      	bne.n	8003858 <__swsetup_r+0x3c>
 8003838:	686c      	ldr	r4, [r5, #4]
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003840:	0719      	lsls	r1, r3, #28
 8003842:	d42c      	bmi.n	800389e <__swsetup_r+0x82>
 8003844:	06dd      	lsls	r5, r3, #27
 8003846:	d411      	bmi.n	800386c <__swsetup_r+0x50>
 8003848:	2309      	movs	r3, #9
 800384a:	6033      	str	r3, [r6, #0]
 800384c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003850:	81a3      	strh	r3, [r4, #12]
 8003852:	f04f 30ff 	mov.w	r0, #4294967295
 8003856:	e03e      	b.n	80038d6 <__swsetup_r+0xba>
 8003858:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <__swsetup_r+0xd4>)
 800385a:	429c      	cmp	r4, r3
 800385c:	d101      	bne.n	8003862 <__swsetup_r+0x46>
 800385e:	68ac      	ldr	r4, [r5, #8]
 8003860:	e7eb      	b.n	800383a <__swsetup_r+0x1e>
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <__swsetup_r+0xd8>)
 8003864:	429c      	cmp	r4, r3
 8003866:	bf08      	it	eq
 8003868:	68ec      	ldreq	r4, [r5, #12]
 800386a:	e7e6      	b.n	800383a <__swsetup_r+0x1e>
 800386c:	0758      	lsls	r0, r3, #29
 800386e:	d512      	bpl.n	8003896 <__swsetup_r+0x7a>
 8003870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003872:	b141      	cbz	r1, 8003886 <__swsetup_r+0x6a>
 8003874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003878:	4299      	cmp	r1, r3
 800387a:	d002      	beq.n	8003882 <__swsetup_r+0x66>
 800387c:	4630      	mov	r0, r6
 800387e:	f000 fa5b 	bl	8003d38 <_free_r>
 8003882:	2300      	movs	r3, #0
 8003884:	6363      	str	r3, [r4, #52]	; 0x34
 8003886:	89a3      	ldrh	r3, [r4, #12]
 8003888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800388c:	81a3      	strh	r3, [r4, #12]
 800388e:	2300      	movs	r3, #0
 8003890:	6063      	str	r3, [r4, #4]
 8003892:	6923      	ldr	r3, [r4, #16]
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	f043 0308 	orr.w	r3, r3, #8
 800389c:	81a3      	strh	r3, [r4, #12]
 800389e:	6923      	ldr	r3, [r4, #16]
 80038a0:	b94b      	cbnz	r3, 80038b6 <__swsetup_r+0x9a>
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ac:	d003      	beq.n	80038b6 <__swsetup_r+0x9a>
 80038ae:	4621      	mov	r1, r4
 80038b0:	4630      	mov	r0, r6
 80038b2:	f000 fa01 	bl	8003cb8 <__smakebuf_r>
 80038b6:	89a0      	ldrh	r0, [r4, #12]
 80038b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038bc:	f010 0301 	ands.w	r3, r0, #1
 80038c0:	d00a      	beq.n	80038d8 <__swsetup_r+0xbc>
 80038c2:	2300      	movs	r3, #0
 80038c4:	60a3      	str	r3, [r4, #8]
 80038c6:	6963      	ldr	r3, [r4, #20]
 80038c8:	425b      	negs	r3, r3
 80038ca:	61a3      	str	r3, [r4, #24]
 80038cc:	6923      	ldr	r3, [r4, #16]
 80038ce:	b943      	cbnz	r3, 80038e2 <__swsetup_r+0xc6>
 80038d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038d4:	d1ba      	bne.n	800384c <__swsetup_r+0x30>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	0781      	lsls	r1, r0, #30
 80038da:	bf58      	it	pl
 80038dc:	6963      	ldrpl	r3, [r4, #20]
 80038de:	60a3      	str	r3, [r4, #8]
 80038e0:	e7f4      	b.n	80038cc <__swsetup_r+0xb0>
 80038e2:	2000      	movs	r0, #0
 80038e4:	e7f7      	b.n	80038d6 <__swsetup_r+0xba>
 80038e6:	bf00      	nop
 80038e8:	20000018 	.word	0x20000018
 80038ec:	080048f4 	.word	0x080048f4
 80038f0:	08004914 	.word	0x08004914
 80038f4:	080048d4 	.word	0x080048d4

080038f8 <__sflush_r>:
 80038f8:	898a      	ldrh	r2, [r1, #12]
 80038fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038fe:	4605      	mov	r5, r0
 8003900:	0710      	lsls	r0, r2, #28
 8003902:	460c      	mov	r4, r1
 8003904:	d458      	bmi.n	80039b8 <__sflush_r+0xc0>
 8003906:	684b      	ldr	r3, [r1, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	dc05      	bgt.n	8003918 <__sflush_r+0x20>
 800390c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	dc02      	bgt.n	8003918 <__sflush_r+0x20>
 8003912:	2000      	movs	r0, #0
 8003914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800391a:	2e00      	cmp	r6, #0
 800391c:	d0f9      	beq.n	8003912 <__sflush_r+0x1a>
 800391e:	2300      	movs	r3, #0
 8003920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003924:	682f      	ldr	r7, [r5, #0]
 8003926:	602b      	str	r3, [r5, #0]
 8003928:	d032      	beq.n	8003990 <__sflush_r+0x98>
 800392a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	075a      	lsls	r2, r3, #29
 8003930:	d505      	bpl.n	800393e <__sflush_r+0x46>
 8003932:	6863      	ldr	r3, [r4, #4]
 8003934:	1ac0      	subs	r0, r0, r3
 8003936:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003938:	b10b      	cbz	r3, 800393e <__sflush_r+0x46>
 800393a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800393c:	1ac0      	subs	r0, r0, r3
 800393e:	2300      	movs	r3, #0
 8003940:	4602      	mov	r2, r0
 8003942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003944:	6a21      	ldr	r1, [r4, #32]
 8003946:	4628      	mov	r0, r5
 8003948:	47b0      	blx	r6
 800394a:	1c43      	adds	r3, r0, #1
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	d106      	bne.n	800395e <__sflush_r+0x66>
 8003950:	6829      	ldr	r1, [r5, #0]
 8003952:	291d      	cmp	r1, #29
 8003954:	d82c      	bhi.n	80039b0 <__sflush_r+0xb8>
 8003956:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <__sflush_r+0x108>)
 8003958:	40ca      	lsrs	r2, r1
 800395a:	07d6      	lsls	r6, r2, #31
 800395c:	d528      	bpl.n	80039b0 <__sflush_r+0xb8>
 800395e:	2200      	movs	r2, #0
 8003960:	6062      	str	r2, [r4, #4]
 8003962:	04d9      	lsls	r1, r3, #19
 8003964:	6922      	ldr	r2, [r4, #16]
 8003966:	6022      	str	r2, [r4, #0]
 8003968:	d504      	bpl.n	8003974 <__sflush_r+0x7c>
 800396a:	1c42      	adds	r2, r0, #1
 800396c:	d101      	bne.n	8003972 <__sflush_r+0x7a>
 800396e:	682b      	ldr	r3, [r5, #0]
 8003970:	b903      	cbnz	r3, 8003974 <__sflush_r+0x7c>
 8003972:	6560      	str	r0, [r4, #84]	; 0x54
 8003974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003976:	602f      	str	r7, [r5, #0]
 8003978:	2900      	cmp	r1, #0
 800397a:	d0ca      	beq.n	8003912 <__sflush_r+0x1a>
 800397c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003980:	4299      	cmp	r1, r3
 8003982:	d002      	beq.n	800398a <__sflush_r+0x92>
 8003984:	4628      	mov	r0, r5
 8003986:	f000 f9d7 	bl	8003d38 <_free_r>
 800398a:	2000      	movs	r0, #0
 800398c:	6360      	str	r0, [r4, #52]	; 0x34
 800398e:	e7c1      	b.n	8003914 <__sflush_r+0x1c>
 8003990:	6a21      	ldr	r1, [r4, #32]
 8003992:	2301      	movs	r3, #1
 8003994:	4628      	mov	r0, r5
 8003996:	47b0      	blx	r6
 8003998:	1c41      	adds	r1, r0, #1
 800399a:	d1c7      	bne.n	800392c <__sflush_r+0x34>
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0c4      	beq.n	800392c <__sflush_r+0x34>
 80039a2:	2b1d      	cmp	r3, #29
 80039a4:	d001      	beq.n	80039aa <__sflush_r+0xb2>
 80039a6:	2b16      	cmp	r3, #22
 80039a8:	d101      	bne.n	80039ae <__sflush_r+0xb6>
 80039aa:	602f      	str	r7, [r5, #0]
 80039ac:	e7b1      	b.n	8003912 <__sflush_r+0x1a>
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	e7ad      	b.n	8003914 <__sflush_r+0x1c>
 80039b8:	690f      	ldr	r7, [r1, #16]
 80039ba:	2f00      	cmp	r7, #0
 80039bc:	d0a9      	beq.n	8003912 <__sflush_r+0x1a>
 80039be:	0793      	lsls	r3, r2, #30
 80039c0:	680e      	ldr	r6, [r1, #0]
 80039c2:	bf08      	it	eq
 80039c4:	694b      	ldreq	r3, [r1, #20]
 80039c6:	600f      	str	r7, [r1, #0]
 80039c8:	bf18      	it	ne
 80039ca:	2300      	movne	r3, #0
 80039cc:	eba6 0807 	sub.w	r8, r6, r7
 80039d0:	608b      	str	r3, [r1, #8]
 80039d2:	f1b8 0f00 	cmp.w	r8, #0
 80039d6:	dd9c      	ble.n	8003912 <__sflush_r+0x1a>
 80039d8:	6a21      	ldr	r1, [r4, #32]
 80039da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039dc:	4643      	mov	r3, r8
 80039de:	463a      	mov	r2, r7
 80039e0:	4628      	mov	r0, r5
 80039e2:	47b0      	blx	r6
 80039e4:	2800      	cmp	r0, #0
 80039e6:	dc06      	bgt.n	80039f6 <__sflush_r+0xfe>
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ee:	81a3      	strh	r3, [r4, #12]
 80039f0:	f04f 30ff 	mov.w	r0, #4294967295
 80039f4:	e78e      	b.n	8003914 <__sflush_r+0x1c>
 80039f6:	4407      	add	r7, r0
 80039f8:	eba8 0800 	sub.w	r8, r8, r0
 80039fc:	e7e9      	b.n	80039d2 <__sflush_r+0xda>
 80039fe:	bf00      	nop
 8003a00:	20400001 	.word	0x20400001

08003a04 <_fflush_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	690b      	ldr	r3, [r1, #16]
 8003a08:	4605      	mov	r5, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	b913      	cbnz	r3, 8003a14 <_fflush_r+0x10>
 8003a0e:	2500      	movs	r5, #0
 8003a10:	4628      	mov	r0, r5
 8003a12:	bd38      	pop	{r3, r4, r5, pc}
 8003a14:	b118      	cbz	r0, 8003a1e <_fflush_r+0x1a>
 8003a16:	6983      	ldr	r3, [r0, #24]
 8003a18:	b90b      	cbnz	r3, 8003a1e <_fflush_r+0x1a>
 8003a1a:	f000 f887 	bl	8003b2c <__sinit>
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <_fflush_r+0x6c>)
 8003a20:	429c      	cmp	r4, r3
 8003a22:	d11b      	bne.n	8003a5c <_fflush_r+0x58>
 8003a24:	686c      	ldr	r4, [r5, #4]
 8003a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0ef      	beq.n	8003a0e <_fflush_r+0xa>
 8003a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a30:	07d0      	lsls	r0, r2, #31
 8003a32:	d404      	bmi.n	8003a3e <_fflush_r+0x3a>
 8003a34:	0599      	lsls	r1, r3, #22
 8003a36:	d402      	bmi.n	8003a3e <_fflush_r+0x3a>
 8003a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a3a:	f000 f915 	bl	8003c68 <__retarget_lock_acquire_recursive>
 8003a3e:	4628      	mov	r0, r5
 8003a40:	4621      	mov	r1, r4
 8003a42:	f7ff ff59 	bl	80038f8 <__sflush_r>
 8003a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a48:	07da      	lsls	r2, r3, #31
 8003a4a:	4605      	mov	r5, r0
 8003a4c:	d4e0      	bmi.n	8003a10 <_fflush_r+0xc>
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	059b      	lsls	r3, r3, #22
 8003a52:	d4dd      	bmi.n	8003a10 <_fflush_r+0xc>
 8003a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a56:	f000 f908 	bl	8003c6a <__retarget_lock_release_recursive>
 8003a5a:	e7d9      	b.n	8003a10 <_fflush_r+0xc>
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <_fflush_r+0x70>)
 8003a5e:	429c      	cmp	r4, r3
 8003a60:	d101      	bne.n	8003a66 <_fflush_r+0x62>
 8003a62:	68ac      	ldr	r4, [r5, #8]
 8003a64:	e7df      	b.n	8003a26 <_fflush_r+0x22>
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <_fflush_r+0x74>)
 8003a68:	429c      	cmp	r4, r3
 8003a6a:	bf08      	it	eq
 8003a6c:	68ec      	ldreq	r4, [r5, #12]
 8003a6e:	e7da      	b.n	8003a26 <_fflush_r+0x22>
 8003a70:	080048f4 	.word	0x080048f4
 8003a74:	08004914 	.word	0x08004914
 8003a78:	080048d4 	.word	0x080048d4

08003a7c <std>:
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	b510      	push	{r4, lr}
 8003a80:	4604      	mov	r4, r0
 8003a82:	e9c0 3300 	strd	r3, r3, [r0]
 8003a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a8a:	6083      	str	r3, [r0, #8]
 8003a8c:	8181      	strh	r1, [r0, #12]
 8003a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8003a90:	81c2      	strh	r2, [r0, #14]
 8003a92:	6183      	str	r3, [r0, #24]
 8003a94:	4619      	mov	r1, r3
 8003a96:	2208      	movs	r2, #8
 8003a98:	305c      	adds	r0, #92	; 0x5c
 8003a9a:	f7ff fdd7 	bl	800364c <memset>
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <std+0x38>)
 8003aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <std+0x3c>)
 8003aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <std+0x40>)
 8003aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <std+0x44>)
 8003aac:	6224      	str	r4, [r4, #32]
 8003aae:	6323      	str	r3, [r4, #48]	; 0x30
 8003ab0:	bd10      	pop	{r4, pc}
 8003ab2:	bf00      	nop
 8003ab4:	080044f5 	.word	0x080044f5
 8003ab8:	08004517 	.word	0x08004517
 8003abc:	0800454f 	.word	0x0800454f
 8003ac0:	08004573 	.word	0x08004573

08003ac4 <_cleanup_r>:
 8003ac4:	4901      	ldr	r1, [pc, #4]	; (8003acc <_cleanup_r+0x8>)
 8003ac6:	f000 b8af 	b.w	8003c28 <_fwalk_reent>
 8003aca:	bf00      	nop
 8003acc:	08003a05 	.word	0x08003a05

08003ad0 <__sfmoreglue>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	2268      	movs	r2, #104	; 0x68
 8003ad4:	1e4d      	subs	r5, r1, #1
 8003ad6:	4355      	muls	r5, r2
 8003ad8:	460e      	mov	r6, r1
 8003ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ade:	f000 f997 	bl	8003e10 <_malloc_r>
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	b140      	cbz	r0, 8003af8 <__sfmoreglue+0x28>
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	e9c0 1600 	strd	r1, r6, [r0]
 8003aec:	300c      	adds	r0, #12
 8003aee:	60a0      	str	r0, [r4, #8]
 8003af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003af4:	f7ff fdaa 	bl	800364c <memset>
 8003af8:	4620      	mov	r0, r4
 8003afa:	bd70      	pop	{r4, r5, r6, pc}

08003afc <__sfp_lock_acquire>:
 8003afc:	4801      	ldr	r0, [pc, #4]	; (8003b04 <__sfp_lock_acquire+0x8>)
 8003afe:	f000 b8b3 	b.w	8003c68 <__retarget_lock_acquire_recursive>
 8003b02:	bf00      	nop
 8003b04:	20000121 	.word	0x20000121

08003b08 <__sfp_lock_release>:
 8003b08:	4801      	ldr	r0, [pc, #4]	; (8003b10 <__sfp_lock_release+0x8>)
 8003b0a:	f000 b8ae 	b.w	8003c6a <__retarget_lock_release_recursive>
 8003b0e:	bf00      	nop
 8003b10:	20000121 	.word	0x20000121

08003b14 <__sinit_lock_acquire>:
 8003b14:	4801      	ldr	r0, [pc, #4]	; (8003b1c <__sinit_lock_acquire+0x8>)
 8003b16:	f000 b8a7 	b.w	8003c68 <__retarget_lock_acquire_recursive>
 8003b1a:	bf00      	nop
 8003b1c:	20000122 	.word	0x20000122

08003b20 <__sinit_lock_release>:
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <__sinit_lock_release+0x8>)
 8003b22:	f000 b8a2 	b.w	8003c6a <__retarget_lock_release_recursive>
 8003b26:	bf00      	nop
 8003b28:	20000122 	.word	0x20000122

08003b2c <__sinit>:
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	4604      	mov	r4, r0
 8003b30:	f7ff fff0 	bl	8003b14 <__sinit_lock_acquire>
 8003b34:	69a3      	ldr	r3, [r4, #24]
 8003b36:	b11b      	cbz	r3, 8003b40 <__sinit+0x14>
 8003b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b3c:	f7ff bff0 	b.w	8003b20 <__sinit_lock_release>
 8003b40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b44:	6523      	str	r3, [r4, #80]	; 0x50
 8003b46:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <__sinit+0x68>)
 8003b48:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <__sinit+0x6c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b4e:	42a3      	cmp	r3, r4
 8003b50:	bf04      	itt	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	61a3      	streq	r3, [r4, #24]
 8003b56:	4620      	mov	r0, r4
 8003b58:	f000 f820 	bl	8003b9c <__sfp>
 8003b5c:	6060      	str	r0, [r4, #4]
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f000 f81c 	bl	8003b9c <__sfp>
 8003b64:	60a0      	str	r0, [r4, #8]
 8003b66:	4620      	mov	r0, r4
 8003b68:	f000 f818 	bl	8003b9c <__sfp>
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	60e0      	str	r0, [r4, #12]
 8003b70:	2104      	movs	r1, #4
 8003b72:	6860      	ldr	r0, [r4, #4]
 8003b74:	f7ff ff82 	bl	8003a7c <std>
 8003b78:	68a0      	ldr	r0, [r4, #8]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2109      	movs	r1, #9
 8003b7e:	f7ff ff7d 	bl	8003a7c <std>
 8003b82:	68e0      	ldr	r0, [r4, #12]
 8003b84:	2202      	movs	r2, #2
 8003b86:	2112      	movs	r1, #18
 8003b88:	f7ff ff78 	bl	8003a7c <std>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	61a3      	str	r3, [r4, #24]
 8003b90:	e7d2      	b.n	8003b38 <__sinit+0xc>
 8003b92:	bf00      	nop
 8003b94:	080048d0 	.word	0x080048d0
 8003b98:	08003ac5 	.word	0x08003ac5

08003b9c <__sfp>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	4607      	mov	r7, r0
 8003ba0:	f7ff ffac 	bl	8003afc <__sfp_lock_acquire>
 8003ba4:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <__sfp+0x84>)
 8003ba6:	681e      	ldr	r6, [r3, #0]
 8003ba8:	69b3      	ldr	r3, [r6, #24]
 8003baa:	b913      	cbnz	r3, 8003bb2 <__sfp+0x16>
 8003bac:	4630      	mov	r0, r6
 8003bae:	f7ff ffbd 	bl	8003b2c <__sinit>
 8003bb2:	3648      	adds	r6, #72	; 0x48
 8003bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	d503      	bpl.n	8003bc4 <__sfp+0x28>
 8003bbc:	6833      	ldr	r3, [r6, #0]
 8003bbe:	b30b      	cbz	r3, 8003c04 <__sfp+0x68>
 8003bc0:	6836      	ldr	r6, [r6, #0]
 8003bc2:	e7f7      	b.n	8003bb4 <__sfp+0x18>
 8003bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bc8:	b9d5      	cbnz	r5, 8003c00 <__sfp+0x64>
 8003bca:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <__sfp+0x88>)
 8003bcc:	60e3      	str	r3, [r4, #12]
 8003bce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bd2:	6665      	str	r5, [r4, #100]	; 0x64
 8003bd4:	f000 f847 	bl	8003c66 <__retarget_lock_init_recursive>
 8003bd8:	f7ff ff96 	bl	8003b08 <__sfp_lock_release>
 8003bdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003be0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003be4:	6025      	str	r5, [r4, #0]
 8003be6:	61a5      	str	r5, [r4, #24]
 8003be8:	2208      	movs	r2, #8
 8003bea:	4629      	mov	r1, r5
 8003bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bf0:	f7ff fd2c 	bl	800364c <memset>
 8003bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c00:	3468      	adds	r4, #104	; 0x68
 8003c02:	e7d9      	b.n	8003bb8 <__sfp+0x1c>
 8003c04:	2104      	movs	r1, #4
 8003c06:	4638      	mov	r0, r7
 8003c08:	f7ff ff62 	bl	8003ad0 <__sfmoreglue>
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	6030      	str	r0, [r6, #0]
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d1d5      	bne.n	8003bc0 <__sfp+0x24>
 8003c14:	f7ff ff78 	bl	8003b08 <__sfp_lock_release>
 8003c18:	230c      	movs	r3, #12
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	e7ee      	b.n	8003bfc <__sfp+0x60>
 8003c1e:	bf00      	nop
 8003c20:	080048d0 	.word	0x080048d0
 8003c24:	ffff0001 	.word	0xffff0001

08003c28 <_fwalk_reent>:
 8003c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	4688      	mov	r8, r1
 8003c30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c34:	2700      	movs	r7, #0
 8003c36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c3a:	f1b9 0901 	subs.w	r9, r9, #1
 8003c3e:	d505      	bpl.n	8003c4c <_fwalk_reent+0x24>
 8003c40:	6824      	ldr	r4, [r4, #0]
 8003c42:	2c00      	cmp	r4, #0
 8003c44:	d1f7      	bne.n	8003c36 <_fwalk_reent+0xe>
 8003c46:	4638      	mov	r0, r7
 8003c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c4c:	89ab      	ldrh	r3, [r5, #12]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d907      	bls.n	8003c62 <_fwalk_reent+0x3a>
 8003c52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c56:	3301      	adds	r3, #1
 8003c58:	d003      	beq.n	8003c62 <_fwalk_reent+0x3a>
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	47c0      	blx	r8
 8003c60:	4307      	orrs	r7, r0
 8003c62:	3568      	adds	r5, #104	; 0x68
 8003c64:	e7e9      	b.n	8003c3a <_fwalk_reent+0x12>

08003c66 <__retarget_lock_init_recursive>:
 8003c66:	4770      	bx	lr

08003c68 <__retarget_lock_acquire_recursive>:
 8003c68:	4770      	bx	lr

08003c6a <__retarget_lock_release_recursive>:
 8003c6a:	4770      	bx	lr

08003c6c <__swhatbuf_r>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	460e      	mov	r6, r1
 8003c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c74:	2900      	cmp	r1, #0
 8003c76:	b096      	sub	sp, #88	; 0x58
 8003c78:	4614      	mov	r4, r2
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	da08      	bge.n	8003c90 <__swhatbuf_r+0x24>
 8003c7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	602a      	str	r2, [r5, #0]
 8003c86:	061a      	lsls	r2, r3, #24
 8003c88:	d410      	bmi.n	8003cac <__swhatbuf_r+0x40>
 8003c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c8e:	e00e      	b.n	8003cae <__swhatbuf_r+0x42>
 8003c90:	466a      	mov	r2, sp
 8003c92:	f000 fc95 	bl	80045c0 <_fstat_r>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	dbf1      	blt.n	8003c7e <__swhatbuf_r+0x12>
 8003c9a:	9a01      	ldr	r2, [sp, #4]
 8003c9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ca0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ca4:	425a      	negs	r2, r3
 8003ca6:	415a      	adcs	r2, r3
 8003ca8:	602a      	str	r2, [r5, #0]
 8003caa:	e7ee      	b.n	8003c8a <__swhatbuf_r+0x1e>
 8003cac:	2340      	movs	r3, #64	; 0x40
 8003cae:	2000      	movs	r0, #0
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	b016      	add	sp, #88	; 0x58
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb8 <__smakebuf_r>:
 8003cb8:	898b      	ldrh	r3, [r1, #12]
 8003cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cbc:	079d      	lsls	r5, r3, #30
 8003cbe:	4606      	mov	r6, r0
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	d507      	bpl.n	8003cd4 <__smakebuf_r+0x1c>
 8003cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	6123      	str	r3, [r4, #16]
 8003ccc:	2301      	movs	r3, #1
 8003cce:	6163      	str	r3, [r4, #20]
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	ab01      	add	r3, sp, #4
 8003cd6:	466a      	mov	r2, sp
 8003cd8:	f7ff ffc8 	bl	8003c6c <__swhatbuf_r>
 8003cdc:	9900      	ldr	r1, [sp, #0]
 8003cde:	4605      	mov	r5, r0
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f000 f895 	bl	8003e10 <_malloc_r>
 8003ce6:	b948      	cbnz	r0, 8003cfc <__smakebuf_r+0x44>
 8003ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cec:	059a      	lsls	r2, r3, #22
 8003cee:	d4ef      	bmi.n	8003cd0 <__smakebuf_r+0x18>
 8003cf0:	f023 0303 	bic.w	r3, r3, #3
 8003cf4:	f043 0302 	orr.w	r3, r3, #2
 8003cf8:	81a3      	strh	r3, [r4, #12]
 8003cfa:	e7e3      	b.n	8003cc4 <__smakebuf_r+0xc>
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <__smakebuf_r+0x7c>)
 8003cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	6020      	str	r0, [r4, #0]
 8003d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d08:	81a3      	strh	r3, [r4, #12]
 8003d0a:	9b00      	ldr	r3, [sp, #0]
 8003d0c:	6163      	str	r3, [r4, #20]
 8003d0e:	9b01      	ldr	r3, [sp, #4]
 8003d10:	6120      	str	r0, [r4, #16]
 8003d12:	b15b      	cbz	r3, 8003d2c <__smakebuf_r+0x74>
 8003d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d18:	4630      	mov	r0, r6
 8003d1a:	f000 fc63 	bl	80045e4 <_isatty_r>
 8003d1e:	b128      	cbz	r0, 8003d2c <__smakebuf_r+0x74>
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	89a0      	ldrh	r0, [r4, #12]
 8003d2e:	4305      	orrs	r5, r0
 8003d30:	81a5      	strh	r5, [r4, #12]
 8003d32:	e7cd      	b.n	8003cd0 <__smakebuf_r+0x18>
 8003d34:	08003ac5 	.word	0x08003ac5

08003d38 <_free_r>:
 8003d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d3a:	2900      	cmp	r1, #0
 8003d3c:	d044      	beq.n	8003dc8 <_free_r+0x90>
 8003d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d42:	9001      	str	r0, [sp, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f1a1 0404 	sub.w	r4, r1, #4
 8003d4a:	bfb8      	it	lt
 8003d4c:	18e4      	addlt	r4, r4, r3
 8003d4e:	f000 fc6b 	bl	8004628 <__malloc_lock>
 8003d52:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <_free_r+0x94>)
 8003d54:	9801      	ldr	r0, [sp, #4]
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	b933      	cbnz	r3, 8003d68 <_free_r+0x30>
 8003d5a:	6063      	str	r3, [r4, #4]
 8003d5c:	6014      	str	r4, [r2, #0]
 8003d5e:	b003      	add	sp, #12
 8003d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d64:	f000 bc66 	b.w	8004634 <__malloc_unlock>
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d908      	bls.n	8003d7e <_free_r+0x46>
 8003d6c:	6825      	ldr	r5, [r4, #0]
 8003d6e:	1961      	adds	r1, r4, r5
 8003d70:	428b      	cmp	r3, r1
 8003d72:	bf01      	itttt	eq
 8003d74:	6819      	ldreq	r1, [r3, #0]
 8003d76:	685b      	ldreq	r3, [r3, #4]
 8003d78:	1949      	addeq	r1, r1, r5
 8003d7a:	6021      	streq	r1, [r4, #0]
 8003d7c:	e7ed      	b.n	8003d5a <_free_r+0x22>
 8003d7e:	461a      	mov	r2, r3
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b10b      	cbz	r3, 8003d88 <_free_r+0x50>
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	d9fa      	bls.n	8003d7e <_free_r+0x46>
 8003d88:	6811      	ldr	r1, [r2, #0]
 8003d8a:	1855      	adds	r5, r2, r1
 8003d8c:	42a5      	cmp	r5, r4
 8003d8e:	d10b      	bne.n	8003da8 <_free_r+0x70>
 8003d90:	6824      	ldr	r4, [r4, #0]
 8003d92:	4421      	add	r1, r4
 8003d94:	1854      	adds	r4, r2, r1
 8003d96:	42a3      	cmp	r3, r4
 8003d98:	6011      	str	r1, [r2, #0]
 8003d9a:	d1e0      	bne.n	8003d5e <_free_r+0x26>
 8003d9c:	681c      	ldr	r4, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	6053      	str	r3, [r2, #4]
 8003da2:	4421      	add	r1, r4
 8003da4:	6011      	str	r1, [r2, #0]
 8003da6:	e7da      	b.n	8003d5e <_free_r+0x26>
 8003da8:	d902      	bls.n	8003db0 <_free_r+0x78>
 8003daa:	230c      	movs	r3, #12
 8003dac:	6003      	str	r3, [r0, #0]
 8003dae:	e7d6      	b.n	8003d5e <_free_r+0x26>
 8003db0:	6825      	ldr	r5, [r4, #0]
 8003db2:	1961      	adds	r1, r4, r5
 8003db4:	428b      	cmp	r3, r1
 8003db6:	bf04      	itt	eq
 8003db8:	6819      	ldreq	r1, [r3, #0]
 8003dba:	685b      	ldreq	r3, [r3, #4]
 8003dbc:	6063      	str	r3, [r4, #4]
 8003dbe:	bf04      	itt	eq
 8003dc0:	1949      	addeq	r1, r1, r5
 8003dc2:	6021      	streq	r1, [r4, #0]
 8003dc4:	6054      	str	r4, [r2, #4]
 8003dc6:	e7ca      	b.n	8003d5e <_free_r+0x26>
 8003dc8:	b003      	add	sp, #12
 8003dca:	bd30      	pop	{r4, r5, pc}
 8003dcc:	20000124 	.word	0x20000124

08003dd0 <sbrk_aligned>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	4e0e      	ldr	r6, [pc, #56]	; (8003e0c <sbrk_aligned+0x3c>)
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	6831      	ldr	r1, [r6, #0]
 8003dd8:	4605      	mov	r5, r0
 8003dda:	b911      	cbnz	r1, 8003de2 <sbrk_aligned+0x12>
 8003ddc:	f000 fb7a 	bl	80044d4 <_sbrk_r>
 8003de0:	6030      	str	r0, [r6, #0]
 8003de2:	4621      	mov	r1, r4
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 fb75 	bl	80044d4 <_sbrk_r>
 8003dea:	1c43      	adds	r3, r0, #1
 8003dec:	d00a      	beq.n	8003e04 <sbrk_aligned+0x34>
 8003dee:	1cc4      	adds	r4, r0, #3
 8003df0:	f024 0403 	bic.w	r4, r4, #3
 8003df4:	42a0      	cmp	r0, r4
 8003df6:	d007      	beq.n	8003e08 <sbrk_aligned+0x38>
 8003df8:	1a21      	subs	r1, r4, r0
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 fb6a 	bl	80044d4 <_sbrk_r>
 8003e00:	3001      	adds	r0, #1
 8003e02:	d101      	bne.n	8003e08 <sbrk_aligned+0x38>
 8003e04:	f04f 34ff 	mov.w	r4, #4294967295
 8003e08:	4620      	mov	r0, r4
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	20000128 	.word	0x20000128

08003e10 <_malloc_r>:
 8003e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e14:	1ccd      	adds	r5, r1, #3
 8003e16:	f025 0503 	bic.w	r5, r5, #3
 8003e1a:	3508      	adds	r5, #8
 8003e1c:	2d0c      	cmp	r5, #12
 8003e1e:	bf38      	it	cc
 8003e20:	250c      	movcc	r5, #12
 8003e22:	2d00      	cmp	r5, #0
 8003e24:	4607      	mov	r7, r0
 8003e26:	db01      	blt.n	8003e2c <_malloc_r+0x1c>
 8003e28:	42a9      	cmp	r1, r5
 8003e2a:	d905      	bls.n	8003e38 <_malloc_r+0x28>
 8003e2c:	230c      	movs	r3, #12
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	2600      	movs	r6, #0
 8003e32:	4630      	mov	r0, r6
 8003e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e38:	4e2e      	ldr	r6, [pc, #184]	; (8003ef4 <_malloc_r+0xe4>)
 8003e3a:	f000 fbf5 	bl	8004628 <__malloc_lock>
 8003e3e:	6833      	ldr	r3, [r6, #0]
 8003e40:	461c      	mov	r4, r3
 8003e42:	bb34      	cbnz	r4, 8003e92 <_malloc_r+0x82>
 8003e44:	4629      	mov	r1, r5
 8003e46:	4638      	mov	r0, r7
 8003e48:	f7ff ffc2 	bl	8003dd0 <sbrk_aligned>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	4604      	mov	r4, r0
 8003e50:	d14d      	bne.n	8003eee <_malloc_r+0xde>
 8003e52:	6834      	ldr	r4, [r6, #0]
 8003e54:	4626      	mov	r6, r4
 8003e56:	2e00      	cmp	r6, #0
 8003e58:	d140      	bne.n	8003edc <_malloc_r+0xcc>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	4638      	mov	r0, r7
 8003e60:	eb04 0803 	add.w	r8, r4, r3
 8003e64:	f000 fb36 	bl	80044d4 <_sbrk_r>
 8003e68:	4580      	cmp	r8, r0
 8003e6a:	d13a      	bne.n	8003ee2 <_malloc_r+0xd2>
 8003e6c:	6821      	ldr	r1, [r4, #0]
 8003e6e:	3503      	adds	r5, #3
 8003e70:	1a6d      	subs	r5, r5, r1
 8003e72:	f025 0503 	bic.w	r5, r5, #3
 8003e76:	3508      	adds	r5, #8
 8003e78:	2d0c      	cmp	r5, #12
 8003e7a:	bf38      	it	cc
 8003e7c:	250c      	movcc	r5, #12
 8003e7e:	4629      	mov	r1, r5
 8003e80:	4638      	mov	r0, r7
 8003e82:	f7ff ffa5 	bl	8003dd0 <sbrk_aligned>
 8003e86:	3001      	adds	r0, #1
 8003e88:	d02b      	beq.n	8003ee2 <_malloc_r+0xd2>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	442b      	add	r3, r5
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	e00e      	b.n	8003eb0 <_malloc_r+0xa0>
 8003e92:	6822      	ldr	r2, [r4, #0]
 8003e94:	1b52      	subs	r2, r2, r5
 8003e96:	d41e      	bmi.n	8003ed6 <_malloc_r+0xc6>
 8003e98:	2a0b      	cmp	r2, #11
 8003e9a:	d916      	bls.n	8003eca <_malloc_r+0xba>
 8003e9c:	1961      	adds	r1, r4, r5
 8003e9e:	42a3      	cmp	r3, r4
 8003ea0:	6025      	str	r5, [r4, #0]
 8003ea2:	bf18      	it	ne
 8003ea4:	6059      	strne	r1, [r3, #4]
 8003ea6:	6863      	ldr	r3, [r4, #4]
 8003ea8:	bf08      	it	eq
 8003eaa:	6031      	streq	r1, [r6, #0]
 8003eac:	5162      	str	r2, [r4, r5]
 8003eae:	604b      	str	r3, [r1, #4]
 8003eb0:	4638      	mov	r0, r7
 8003eb2:	f104 060b 	add.w	r6, r4, #11
 8003eb6:	f000 fbbd 	bl	8004634 <__malloc_unlock>
 8003eba:	f026 0607 	bic.w	r6, r6, #7
 8003ebe:	1d23      	adds	r3, r4, #4
 8003ec0:	1af2      	subs	r2, r6, r3
 8003ec2:	d0b6      	beq.n	8003e32 <_malloc_r+0x22>
 8003ec4:	1b9b      	subs	r3, r3, r6
 8003ec6:	50a3      	str	r3, [r4, r2]
 8003ec8:	e7b3      	b.n	8003e32 <_malloc_r+0x22>
 8003eca:	6862      	ldr	r2, [r4, #4]
 8003ecc:	42a3      	cmp	r3, r4
 8003ece:	bf0c      	ite	eq
 8003ed0:	6032      	streq	r2, [r6, #0]
 8003ed2:	605a      	strne	r2, [r3, #4]
 8003ed4:	e7ec      	b.n	8003eb0 <_malloc_r+0xa0>
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	6864      	ldr	r4, [r4, #4]
 8003eda:	e7b2      	b.n	8003e42 <_malloc_r+0x32>
 8003edc:	4634      	mov	r4, r6
 8003ede:	6876      	ldr	r6, [r6, #4]
 8003ee0:	e7b9      	b.n	8003e56 <_malloc_r+0x46>
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	f000 fba4 	bl	8004634 <__malloc_unlock>
 8003eec:	e7a1      	b.n	8003e32 <_malloc_r+0x22>
 8003eee:	6025      	str	r5, [r4, #0]
 8003ef0:	e7de      	b.n	8003eb0 <_malloc_r+0xa0>
 8003ef2:	bf00      	nop
 8003ef4:	20000124 	.word	0x20000124

08003ef8 <__sfputc_r>:
 8003ef8:	6893      	ldr	r3, [r2, #8]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	b410      	push	{r4}
 8003f00:	6093      	str	r3, [r2, #8]
 8003f02:	da08      	bge.n	8003f16 <__sfputc_r+0x1e>
 8003f04:	6994      	ldr	r4, [r2, #24]
 8003f06:	42a3      	cmp	r3, r4
 8003f08:	db01      	blt.n	8003f0e <__sfputc_r+0x16>
 8003f0a:	290a      	cmp	r1, #10
 8003f0c:	d103      	bne.n	8003f16 <__sfputc_r+0x1e>
 8003f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f12:	f7ff bc31 	b.w	8003778 <__swbuf_r>
 8003f16:	6813      	ldr	r3, [r2, #0]
 8003f18:	1c58      	adds	r0, r3, #1
 8003f1a:	6010      	str	r0, [r2, #0]
 8003f1c:	7019      	strb	r1, [r3, #0]
 8003f1e:	4608      	mov	r0, r1
 8003f20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <__sfputs_r>:
 8003f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f28:	4606      	mov	r6, r0
 8003f2a:	460f      	mov	r7, r1
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	18d5      	adds	r5, r2, r3
 8003f30:	42ac      	cmp	r4, r5
 8003f32:	d101      	bne.n	8003f38 <__sfputs_r+0x12>
 8003f34:	2000      	movs	r0, #0
 8003f36:	e007      	b.n	8003f48 <__sfputs_r+0x22>
 8003f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f3c:	463a      	mov	r2, r7
 8003f3e:	4630      	mov	r0, r6
 8003f40:	f7ff ffda 	bl	8003ef8 <__sfputc_r>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d1f3      	bne.n	8003f30 <__sfputs_r+0xa>
 8003f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f4c <_vfiprintf_r>:
 8003f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f50:	460d      	mov	r5, r1
 8003f52:	b09d      	sub	sp, #116	; 0x74
 8003f54:	4614      	mov	r4, r2
 8003f56:	4698      	mov	r8, r3
 8003f58:	4606      	mov	r6, r0
 8003f5a:	b118      	cbz	r0, 8003f64 <_vfiprintf_r+0x18>
 8003f5c:	6983      	ldr	r3, [r0, #24]
 8003f5e:	b90b      	cbnz	r3, 8003f64 <_vfiprintf_r+0x18>
 8003f60:	f7ff fde4 	bl	8003b2c <__sinit>
 8003f64:	4b89      	ldr	r3, [pc, #548]	; (800418c <_vfiprintf_r+0x240>)
 8003f66:	429d      	cmp	r5, r3
 8003f68:	d11b      	bne.n	8003fa2 <_vfiprintf_r+0x56>
 8003f6a:	6875      	ldr	r5, [r6, #4]
 8003f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f6e:	07d9      	lsls	r1, r3, #31
 8003f70:	d405      	bmi.n	8003f7e <_vfiprintf_r+0x32>
 8003f72:	89ab      	ldrh	r3, [r5, #12]
 8003f74:	059a      	lsls	r2, r3, #22
 8003f76:	d402      	bmi.n	8003f7e <_vfiprintf_r+0x32>
 8003f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f7a:	f7ff fe75 	bl	8003c68 <__retarget_lock_acquire_recursive>
 8003f7e:	89ab      	ldrh	r3, [r5, #12]
 8003f80:	071b      	lsls	r3, r3, #28
 8003f82:	d501      	bpl.n	8003f88 <_vfiprintf_r+0x3c>
 8003f84:	692b      	ldr	r3, [r5, #16]
 8003f86:	b9eb      	cbnz	r3, 8003fc4 <_vfiprintf_r+0x78>
 8003f88:	4629      	mov	r1, r5
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f7ff fc46 	bl	800381c <__swsetup_r>
 8003f90:	b1c0      	cbz	r0, 8003fc4 <_vfiprintf_r+0x78>
 8003f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f94:	07dc      	lsls	r4, r3, #31
 8003f96:	d50e      	bpl.n	8003fb6 <_vfiprintf_r+0x6a>
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	b01d      	add	sp, #116	; 0x74
 8003f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa2:	4b7b      	ldr	r3, [pc, #492]	; (8004190 <_vfiprintf_r+0x244>)
 8003fa4:	429d      	cmp	r5, r3
 8003fa6:	d101      	bne.n	8003fac <_vfiprintf_r+0x60>
 8003fa8:	68b5      	ldr	r5, [r6, #8]
 8003faa:	e7df      	b.n	8003f6c <_vfiprintf_r+0x20>
 8003fac:	4b79      	ldr	r3, [pc, #484]	; (8004194 <_vfiprintf_r+0x248>)
 8003fae:	429d      	cmp	r5, r3
 8003fb0:	bf08      	it	eq
 8003fb2:	68f5      	ldreq	r5, [r6, #12]
 8003fb4:	e7da      	b.n	8003f6c <_vfiprintf_r+0x20>
 8003fb6:	89ab      	ldrh	r3, [r5, #12]
 8003fb8:	0598      	lsls	r0, r3, #22
 8003fba:	d4ed      	bmi.n	8003f98 <_vfiprintf_r+0x4c>
 8003fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fbe:	f7ff fe54 	bl	8003c6a <__retarget_lock_release_recursive>
 8003fc2:	e7e9      	b.n	8003f98 <_vfiprintf_r+0x4c>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc8:	2320      	movs	r3, #32
 8003fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fd2:	2330      	movs	r3, #48	; 0x30
 8003fd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004198 <_vfiprintf_r+0x24c>
 8003fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fdc:	f04f 0901 	mov.w	r9, #1
 8003fe0:	4623      	mov	r3, r4
 8003fe2:	469a      	mov	sl, r3
 8003fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fe8:	b10a      	cbz	r2, 8003fee <_vfiprintf_r+0xa2>
 8003fea:	2a25      	cmp	r2, #37	; 0x25
 8003fec:	d1f9      	bne.n	8003fe2 <_vfiprintf_r+0x96>
 8003fee:	ebba 0b04 	subs.w	fp, sl, r4
 8003ff2:	d00b      	beq.n	800400c <_vfiprintf_r+0xc0>
 8003ff4:	465b      	mov	r3, fp
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	f7ff ff93 	bl	8003f26 <__sfputs_r>
 8004000:	3001      	adds	r0, #1
 8004002:	f000 80aa 	beq.w	800415a <_vfiprintf_r+0x20e>
 8004006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004008:	445a      	add	r2, fp
 800400a:	9209      	str	r2, [sp, #36]	; 0x24
 800400c:	f89a 3000 	ldrb.w	r3, [sl]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80a2 	beq.w	800415a <_vfiprintf_r+0x20e>
 8004016:	2300      	movs	r3, #0
 8004018:	f04f 32ff 	mov.w	r2, #4294967295
 800401c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004020:	f10a 0a01 	add.w	sl, sl, #1
 8004024:	9304      	str	r3, [sp, #16]
 8004026:	9307      	str	r3, [sp, #28]
 8004028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800402c:	931a      	str	r3, [sp, #104]	; 0x68
 800402e:	4654      	mov	r4, sl
 8004030:	2205      	movs	r2, #5
 8004032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004036:	4858      	ldr	r0, [pc, #352]	; (8004198 <_vfiprintf_r+0x24c>)
 8004038:	f7fc f8d2 	bl	80001e0 <memchr>
 800403c:	9a04      	ldr	r2, [sp, #16]
 800403e:	b9d8      	cbnz	r0, 8004078 <_vfiprintf_r+0x12c>
 8004040:	06d1      	lsls	r1, r2, #27
 8004042:	bf44      	itt	mi
 8004044:	2320      	movmi	r3, #32
 8004046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800404a:	0713      	lsls	r3, r2, #28
 800404c:	bf44      	itt	mi
 800404e:	232b      	movmi	r3, #43	; 0x2b
 8004050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004054:	f89a 3000 	ldrb.w	r3, [sl]
 8004058:	2b2a      	cmp	r3, #42	; 0x2a
 800405a:	d015      	beq.n	8004088 <_vfiprintf_r+0x13c>
 800405c:	9a07      	ldr	r2, [sp, #28]
 800405e:	4654      	mov	r4, sl
 8004060:	2000      	movs	r0, #0
 8004062:	f04f 0c0a 	mov.w	ip, #10
 8004066:	4621      	mov	r1, r4
 8004068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800406c:	3b30      	subs	r3, #48	; 0x30
 800406e:	2b09      	cmp	r3, #9
 8004070:	d94e      	bls.n	8004110 <_vfiprintf_r+0x1c4>
 8004072:	b1b0      	cbz	r0, 80040a2 <_vfiprintf_r+0x156>
 8004074:	9207      	str	r2, [sp, #28]
 8004076:	e014      	b.n	80040a2 <_vfiprintf_r+0x156>
 8004078:	eba0 0308 	sub.w	r3, r0, r8
 800407c:	fa09 f303 	lsl.w	r3, r9, r3
 8004080:	4313      	orrs	r3, r2
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	46a2      	mov	sl, r4
 8004086:	e7d2      	b.n	800402e <_vfiprintf_r+0xe2>
 8004088:	9b03      	ldr	r3, [sp, #12]
 800408a:	1d19      	adds	r1, r3, #4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	9103      	str	r1, [sp, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	bfbb      	ittet	lt
 8004094:	425b      	neglt	r3, r3
 8004096:	f042 0202 	orrlt.w	r2, r2, #2
 800409a:	9307      	strge	r3, [sp, #28]
 800409c:	9307      	strlt	r3, [sp, #28]
 800409e:	bfb8      	it	lt
 80040a0:	9204      	strlt	r2, [sp, #16]
 80040a2:	7823      	ldrb	r3, [r4, #0]
 80040a4:	2b2e      	cmp	r3, #46	; 0x2e
 80040a6:	d10c      	bne.n	80040c2 <_vfiprintf_r+0x176>
 80040a8:	7863      	ldrb	r3, [r4, #1]
 80040aa:	2b2a      	cmp	r3, #42	; 0x2a
 80040ac:	d135      	bne.n	800411a <_vfiprintf_r+0x1ce>
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	1d1a      	adds	r2, r3, #4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	9203      	str	r2, [sp, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bfb8      	it	lt
 80040ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80040be:	3402      	adds	r4, #2
 80040c0:	9305      	str	r3, [sp, #20]
 80040c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80041a8 <_vfiprintf_r+0x25c>
 80040c6:	7821      	ldrb	r1, [r4, #0]
 80040c8:	2203      	movs	r2, #3
 80040ca:	4650      	mov	r0, sl
 80040cc:	f7fc f888 	bl	80001e0 <memchr>
 80040d0:	b140      	cbz	r0, 80040e4 <_vfiprintf_r+0x198>
 80040d2:	2340      	movs	r3, #64	; 0x40
 80040d4:	eba0 000a 	sub.w	r0, r0, sl
 80040d8:	fa03 f000 	lsl.w	r0, r3, r0
 80040dc:	9b04      	ldr	r3, [sp, #16]
 80040de:	4303      	orrs	r3, r0
 80040e0:	3401      	adds	r4, #1
 80040e2:	9304      	str	r3, [sp, #16]
 80040e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e8:	482c      	ldr	r0, [pc, #176]	; (800419c <_vfiprintf_r+0x250>)
 80040ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040ee:	2206      	movs	r2, #6
 80040f0:	f7fc f876 	bl	80001e0 <memchr>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	d03f      	beq.n	8004178 <_vfiprintf_r+0x22c>
 80040f8:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <_vfiprintf_r+0x254>)
 80040fa:	bb1b      	cbnz	r3, 8004144 <_vfiprintf_r+0x1f8>
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	3307      	adds	r3, #7
 8004100:	f023 0307 	bic.w	r3, r3, #7
 8004104:	3308      	adds	r3, #8
 8004106:	9303      	str	r3, [sp, #12]
 8004108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410a:	443b      	add	r3, r7
 800410c:	9309      	str	r3, [sp, #36]	; 0x24
 800410e:	e767      	b.n	8003fe0 <_vfiprintf_r+0x94>
 8004110:	fb0c 3202 	mla	r2, ip, r2, r3
 8004114:	460c      	mov	r4, r1
 8004116:	2001      	movs	r0, #1
 8004118:	e7a5      	b.n	8004066 <_vfiprintf_r+0x11a>
 800411a:	2300      	movs	r3, #0
 800411c:	3401      	adds	r4, #1
 800411e:	9305      	str	r3, [sp, #20]
 8004120:	4619      	mov	r1, r3
 8004122:	f04f 0c0a 	mov.w	ip, #10
 8004126:	4620      	mov	r0, r4
 8004128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800412c:	3a30      	subs	r2, #48	; 0x30
 800412e:	2a09      	cmp	r2, #9
 8004130:	d903      	bls.n	800413a <_vfiprintf_r+0x1ee>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0c5      	beq.n	80040c2 <_vfiprintf_r+0x176>
 8004136:	9105      	str	r1, [sp, #20]
 8004138:	e7c3      	b.n	80040c2 <_vfiprintf_r+0x176>
 800413a:	fb0c 2101 	mla	r1, ip, r1, r2
 800413e:	4604      	mov	r4, r0
 8004140:	2301      	movs	r3, #1
 8004142:	e7f0      	b.n	8004126 <_vfiprintf_r+0x1da>
 8004144:	ab03      	add	r3, sp, #12
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	462a      	mov	r2, r5
 800414a:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <_vfiprintf_r+0x258>)
 800414c:	a904      	add	r1, sp, #16
 800414e:	4630      	mov	r0, r6
 8004150:	f3af 8000 	nop.w
 8004154:	4607      	mov	r7, r0
 8004156:	1c78      	adds	r0, r7, #1
 8004158:	d1d6      	bne.n	8004108 <_vfiprintf_r+0x1bc>
 800415a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800415c:	07d9      	lsls	r1, r3, #31
 800415e:	d405      	bmi.n	800416c <_vfiprintf_r+0x220>
 8004160:	89ab      	ldrh	r3, [r5, #12]
 8004162:	059a      	lsls	r2, r3, #22
 8004164:	d402      	bmi.n	800416c <_vfiprintf_r+0x220>
 8004166:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004168:	f7ff fd7f 	bl	8003c6a <__retarget_lock_release_recursive>
 800416c:	89ab      	ldrh	r3, [r5, #12]
 800416e:	065b      	lsls	r3, r3, #25
 8004170:	f53f af12 	bmi.w	8003f98 <_vfiprintf_r+0x4c>
 8004174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004176:	e711      	b.n	8003f9c <_vfiprintf_r+0x50>
 8004178:	ab03      	add	r3, sp, #12
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	462a      	mov	r2, r5
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <_vfiprintf_r+0x258>)
 8004180:	a904      	add	r1, sp, #16
 8004182:	4630      	mov	r0, r6
 8004184:	f000 f880 	bl	8004288 <_printf_i>
 8004188:	e7e4      	b.n	8004154 <_vfiprintf_r+0x208>
 800418a:	bf00      	nop
 800418c:	080048f4 	.word	0x080048f4
 8004190:	08004914 	.word	0x08004914
 8004194:	080048d4 	.word	0x080048d4
 8004198:	08004934 	.word	0x08004934
 800419c:	0800493e 	.word	0x0800493e
 80041a0:	00000000 	.word	0x00000000
 80041a4:	08003f27 	.word	0x08003f27
 80041a8:	0800493a 	.word	0x0800493a

080041ac <_printf_common>:
 80041ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b0:	4616      	mov	r6, r2
 80041b2:	4699      	mov	r9, r3
 80041b4:	688a      	ldr	r2, [r1, #8]
 80041b6:	690b      	ldr	r3, [r1, #16]
 80041b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041bc:	4293      	cmp	r3, r2
 80041be:	bfb8      	it	lt
 80041c0:	4613      	movlt	r3, r2
 80041c2:	6033      	str	r3, [r6, #0]
 80041c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041c8:	4607      	mov	r7, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	b10a      	cbz	r2, 80041d2 <_printf_common+0x26>
 80041ce:	3301      	adds	r3, #1
 80041d0:	6033      	str	r3, [r6, #0]
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	0699      	lsls	r1, r3, #26
 80041d6:	bf42      	ittt	mi
 80041d8:	6833      	ldrmi	r3, [r6, #0]
 80041da:	3302      	addmi	r3, #2
 80041dc:	6033      	strmi	r3, [r6, #0]
 80041de:	6825      	ldr	r5, [r4, #0]
 80041e0:	f015 0506 	ands.w	r5, r5, #6
 80041e4:	d106      	bne.n	80041f4 <_printf_common+0x48>
 80041e6:	f104 0a19 	add.w	sl, r4, #25
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	6832      	ldr	r2, [r6, #0]
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	42ab      	cmp	r3, r5
 80041f2:	dc26      	bgt.n	8004242 <_printf_common+0x96>
 80041f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041f8:	1e13      	subs	r3, r2, #0
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	bf18      	it	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	0692      	lsls	r2, r2, #26
 8004202:	d42b      	bmi.n	800425c <_printf_common+0xb0>
 8004204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004208:	4649      	mov	r1, r9
 800420a:	4638      	mov	r0, r7
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d01e      	beq.n	8004250 <_printf_common+0xa4>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	68e5      	ldr	r5, [r4, #12]
 8004216:	6832      	ldr	r2, [r6, #0]
 8004218:	f003 0306 	and.w	r3, r3, #6
 800421c:	2b04      	cmp	r3, #4
 800421e:	bf08      	it	eq
 8004220:	1aad      	subeq	r5, r5, r2
 8004222:	68a3      	ldr	r3, [r4, #8]
 8004224:	6922      	ldr	r2, [r4, #16]
 8004226:	bf0c      	ite	eq
 8004228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800422c:	2500      	movne	r5, #0
 800422e:	4293      	cmp	r3, r2
 8004230:	bfc4      	itt	gt
 8004232:	1a9b      	subgt	r3, r3, r2
 8004234:	18ed      	addgt	r5, r5, r3
 8004236:	2600      	movs	r6, #0
 8004238:	341a      	adds	r4, #26
 800423a:	42b5      	cmp	r5, r6
 800423c:	d11a      	bne.n	8004274 <_printf_common+0xc8>
 800423e:	2000      	movs	r0, #0
 8004240:	e008      	b.n	8004254 <_printf_common+0xa8>
 8004242:	2301      	movs	r3, #1
 8004244:	4652      	mov	r2, sl
 8004246:	4649      	mov	r1, r9
 8004248:	4638      	mov	r0, r7
 800424a:	47c0      	blx	r8
 800424c:	3001      	adds	r0, #1
 800424e:	d103      	bne.n	8004258 <_printf_common+0xac>
 8004250:	f04f 30ff 	mov.w	r0, #4294967295
 8004254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004258:	3501      	adds	r5, #1
 800425a:	e7c6      	b.n	80041ea <_printf_common+0x3e>
 800425c:	18e1      	adds	r1, r4, r3
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	2030      	movs	r0, #48	; 0x30
 8004262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004266:	4422      	add	r2, r4
 8004268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800426c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004270:	3302      	adds	r3, #2
 8004272:	e7c7      	b.n	8004204 <_printf_common+0x58>
 8004274:	2301      	movs	r3, #1
 8004276:	4622      	mov	r2, r4
 8004278:	4649      	mov	r1, r9
 800427a:	4638      	mov	r0, r7
 800427c:	47c0      	blx	r8
 800427e:	3001      	adds	r0, #1
 8004280:	d0e6      	beq.n	8004250 <_printf_common+0xa4>
 8004282:	3601      	adds	r6, #1
 8004284:	e7d9      	b.n	800423a <_printf_common+0x8e>
	...

08004288 <_printf_i>:
 8004288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	7e0f      	ldrb	r7, [r1, #24]
 800428e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004290:	2f78      	cmp	r7, #120	; 0x78
 8004292:	4691      	mov	r9, r2
 8004294:	4680      	mov	r8, r0
 8004296:	460c      	mov	r4, r1
 8004298:	469a      	mov	sl, r3
 800429a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800429e:	d807      	bhi.n	80042b0 <_printf_i+0x28>
 80042a0:	2f62      	cmp	r7, #98	; 0x62
 80042a2:	d80a      	bhi.n	80042ba <_printf_i+0x32>
 80042a4:	2f00      	cmp	r7, #0
 80042a6:	f000 80d8 	beq.w	800445a <_printf_i+0x1d2>
 80042aa:	2f58      	cmp	r7, #88	; 0x58
 80042ac:	f000 80a3 	beq.w	80043f6 <_printf_i+0x16e>
 80042b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042b8:	e03a      	b.n	8004330 <_printf_i+0xa8>
 80042ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042be:	2b15      	cmp	r3, #21
 80042c0:	d8f6      	bhi.n	80042b0 <_printf_i+0x28>
 80042c2:	a101      	add	r1, pc, #4	; (adr r1, 80042c8 <_printf_i+0x40>)
 80042c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004335 	.word	0x08004335
 80042d0:	080042b1 	.word	0x080042b1
 80042d4:	080042b1 	.word	0x080042b1
 80042d8:	080042b1 	.word	0x080042b1
 80042dc:	080042b1 	.word	0x080042b1
 80042e0:	08004335 	.word	0x08004335
 80042e4:	080042b1 	.word	0x080042b1
 80042e8:	080042b1 	.word	0x080042b1
 80042ec:	080042b1 	.word	0x080042b1
 80042f0:	080042b1 	.word	0x080042b1
 80042f4:	08004441 	.word	0x08004441
 80042f8:	08004365 	.word	0x08004365
 80042fc:	08004423 	.word	0x08004423
 8004300:	080042b1 	.word	0x080042b1
 8004304:	080042b1 	.word	0x080042b1
 8004308:	08004463 	.word	0x08004463
 800430c:	080042b1 	.word	0x080042b1
 8004310:	08004365 	.word	0x08004365
 8004314:	080042b1 	.word	0x080042b1
 8004318:	080042b1 	.word	0x080042b1
 800431c:	0800442b 	.word	0x0800442b
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	1d1a      	adds	r2, r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	602a      	str	r2, [r5, #0]
 8004328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800432c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004330:	2301      	movs	r3, #1
 8004332:	e0a3      	b.n	800447c <_printf_i+0x1f4>
 8004334:	6820      	ldr	r0, [r4, #0]
 8004336:	6829      	ldr	r1, [r5, #0]
 8004338:	0606      	lsls	r6, r0, #24
 800433a:	f101 0304 	add.w	r3, r1, #4
 800433e:	d50a      	bpl.n	8004356 <_printf_i+0xce>
 8004340:	680e      	ldr	r6, [r1, #0]
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	2e00      	cmp	r6, #0
 8004346:	da03      	bge.n	8004350 <_printf_i+0xc8>
 8004348:	232d      	movs	r3, #45	; 0x2d
 800434a:	4276      	negs	r6, r6
 800434c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004350:	485e      	ldr	r0, [pc, #376]	; (80044cc <_printf_i+0x244>)
 8004352:	230a      	movs	r3, #10
 8004354:	e019      	b.n	800438a <_printf_i+0x102>
 8004356:	680e      	ldr	r6, [r1, #0]
 8004358:	602b      	str	r3, [r5, #0]
 800435a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800435e:	bf18      	it	ne
 8004360:	b236      	sxthne	r6, r6
 8004362:	e7ef      	b.n	8004344 <_printf_i+0xbc>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	6820      	ldr	r0, [r4, #0]
 8004368:	1d19      	adds	r1, r3, #4
 800436a:	6029      	str	r1, [r5, #0]
 800436c:	0601      	lsls	r1, r0, #24
 800436e:	d501      	bpl.n	8004374 <_printf_i+0xec>
 8004370:	681e      	ldr	r6, [r3, #0]
 8004372:	e002      	b.n	800437a <_printf_i+0xf2>
 8004374:	0646      	lsls	r6, r0, #25
 8004376:	d5fb      	bpl.n	8004370 <_printf_i+0xe8>
 8004378:	881e      	ldrh	r6, [r3, #0]
 800437a:	4854      	ldr	r0, [pc, #336]	; (80044cc <_printf_i+0x244>)
 800437c:	2f6f      	cmp	r7, #111	; 0x6f
 800437e:	bf0c      	ite	eq
 8004380:	2308      	moveq	r3, #8
 8004382:	230a      	movne	r3, #10
 8004384:	2100      	movs	r1, #0
 8004386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800438a:	6865      	ldr	r5, [r4, #4]
 800438c:	60a5      	str	r5, [r4, #8]
 800438e:	2d00      	cmp	r5, #0
 8004390:	bfa2      	ittt	ge
 8004392:	6821      	ldrge	r1, [r4, #0]
 8004394:	f021 0104 	bicge.w	r1, r1, #4
 8004398:	6021      	strge	r1, [r4, #0]
 800439a:	b90e      	cbnz	r6, 80043a0 <_printf_i+0x118>
 800439c:	2d00      	cmp	r5, #0
 800439e:	d04d      	beq.n	800443c <_printf_i+0x1b4>
 80043a0:	4615      	mov	r5, r2
 80043a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80043a6:	fb03 6711 	mls	r7, r3, r1, r6
 80043aa:	5dc7      	ldrb	r7, [r0, r7]
 80043ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043b0:	4637      	mov	r7, r6
 80043b2:	42bb      	cmp	r3, r7
 80043b4:	460e      	mov	r6, r1
 80043b6:	d9f4      	bls.n	80043a2 <_printf_i+0x11a>
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d10b      	bne.n	80043d4 <_printf_i+0x14c>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	07de      	lsls	r6, r3, #31
 80043c0:	d508      	bpl.n	80043d4 <_printf_i+0x14c>
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	6861      	ldr	r1, [r4, #4]
 80043c6:	4299      	cmp	r1, r3
 80043c8:	bfde      	ittt	le
 80043ca:	2330      	movle	r3, #48	; 0x30
 80043cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043d4:	1b52      	subs	r2, r2, r5
 80043d6:	6122      	str	r2, [r4, #16]
 80043d8:	f8cd a000 	str.w	sl, [sp]
 80043dc:	464b      	mov	r3, r9
 80043de:	aa03      	add	r2, sp, #12
 80043e0:	4621      	mov	r1, r4
 80043e2:	4640      	mov	r0, r8
 80043e4:	f7ff fee2 	bl	80041ac <_printf_common>
 80043e8:	3001      	adds	r0, #1
 80043ea:	d14c      	bne.n	8004486 <_printf_i+0x1fe>
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	b004      	add	sp, #16
 80043f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f6:	4835      	ldr	r0, [pc, #212]	; (80044cc <_printf_i+0x244>)
 80043f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043fc:	6829      	ldr	r1, [r5, #0]
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	f851 6b04 	ldr.w	r6, [r1], #4
 8004404:	6029      	str	r1, [r5, #0]
 8004406:	061d      	lsls	r5, r3, #24
 8004408:	d514      	bpl.n	8004434 <_printf_i+0x1ac>
 800440a:	07df      	lsls	r7, r3, #31
 800440c:	bf44      	itt	mi
 800440e:	f043 0320 	orrmi.w	r3, r3, #32
 8004412:	6023      	strmi	r3, [r4, #0]
 8004414:	b91e      	cbnz	r6, 800441e <_printf_i+0x196>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	f023 0320 	bic.w	r3, r3, #32
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	2310      	movs	r3, #16
 8004420:	e7b0      	b.n	8004384 <_printf_i+0xfc>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f043 0320 	orr.w	r3, r3, #32
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	2378      	movs	r3, #120	; 0x78
 800442c:	4828      	ldr	r0, [pc, #160]	; (80044d0 <_printf_i+0x248>)
 800442e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004432:	e7e3      	b.n	80043fc <_printf_i+0x174>
 8004434:	0659      	lsls	r1, r3, #25
 8004436:	bf48      	it	mi
 8004438:	b2b6      	uxthmi	r6, r6
 800443a:	e7e6      	b.n	800440a <_printf_i+0x182>
 800443c:	4615      	mov	r5, r2
 800443e:	e7bb      	b.n	80043b8 <_printf_i+0x130>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	6826      	ldr	r6, [r4, #0]
 8004444:	6961      	ldr	r1, [r4, #20]
 8004446:	1d18      	adds	r0, r3, #4
 8004448:	6028      	str	r0, [r5, #0]
 800444a:	0635      	lsls	r5, r6, #24
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	d501      	bpl.n	8004454 <_printf_i+0x1cc>
 8004450:	6019      	str	r1, [r3, #0]
 8004452:	e002      	b.n	800445a <_printf_i+0x1d2>
 8004454:	0670      	lsls	r0, r6, #25
 8004456:	d5fb      	bpl.n	8004450 <_printf_i+0x1c8>
 8004458:	8019      	strh	r1, [r3, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	6123      	str	r3, [r4, #16]
 800445e:	4615      	mov	r5, r2
 8004460:	e7ba      	b.n	80043d8 <_printf_i+0x150>
 8004462:	682b      	ldr	r3, [r5, #0]
 8004464:	1d1a      	adds	r2, r3, #4
 8004466:	602a      	str	r2, [r5, #0]
 8004468:	681d      	ldr	r5, [r3, #0]
 800446a:	6862      	ldr	r2, [r4, #4]
 800446c:	2100      	movs	r1, #0
 800446e:	4628      	mov	r0, r5
 8004470:	f7fb feb6 	bl	80001e0 <memchr>
 8004474:	b108      	cbz	r0, 800447a <_printf_i+0x1f2>
 8004476:	1b40      	subs	r0, r0, r5
 8004478:	6060      	str	r0, [r4, #4]
 800447a:	6863      	ldr	r3, [r4, #4]
 800447c:	6123      	str	r3, [r4, #16]
 800447e:	2300      	movs	r3, #0
 8004480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004484:	e7a8      	b.n	80043d8 <_printf_i+0x150>
 8004486:	6923      	ldr	r3, [r4, #16]
 8004488:	462a      	mov	r2, r5
 800448a:	4649      	mov	r1, r9
 800448c:	4640      	mov	r0, r8
 800448e:	47d0      	blx	sl
 8004490:	3001      	adds	r0, #1
 8004492:	d0ab      	beq.n	80043ec <_printf_i+0x164>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	079b      	lsls	r3, r3, #30
 8004498:	d413      	bmi.n	80044c2 <_printf_i+0x23a>
 800449a:	68e0      	ldr	r0, [r4, #12]
 800449c:	9b03      	ldr	r3, [sp, #12]
 800449e:	4298      	cmp	r0, r3
 80044a0:	bfb8      	it	lt
 80044a2:	4618      	movlt	r0, r3
 80044a4:	e7a4      	b.n	80043f0 <_printf_i+0x168>
 80044a6:	2301      	movs	r3, #1
 80044a8:	4632      	mov	r2, r6
 80044aa:	4649      	mov	r1, r9
 80044ac:	4640      	mov	r0, r8
 80044ae:	47d0      	blx	sl
 80044b0:	3001      	adds	r0, #1
 80044b2:	d09b      	beq.n	80043ec <_printf_i+0x164>
 80044b4:	3501      	adds	r5, #1
 80044b6:	68e3      	ldr	r3, [r4, #12]
 80044b8:	9903      	ldr	r1, [sp, #12]
 80044ba:	1a5b      	subs	r3, r3, r1
 80044bc:	42ab      	cmp	r3, r5
 80044be:	dcf2      	bgt.n	80044a6 <_printf_i+0x21e>
 80044c0:	e7eb      	b.n	800449a <_printf_i+0x212>
 80044c2:	2500      	movs	r5, #0
 80044c4:	f104 0619 	add.w	r6, r4, #25
 80044c8:	e7f5      	b.n	80044b6 <_printf_i+0x22e>
 80044ca:	bf00      	nop
 80044cc:	08004945 	.word	0x08004945
 80044d0:	08004956 	.word	0x08004956

080044d4 <_sbrk_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4d06      	ldr	r5, [pc, #24]	; (80044f0 <_sbrk_r+0x1c>)
 80044d8:	2300      	movs	r3, #0
 80044da:	4604      	mov	r4, r0
 80044dc:	4608      	mov	r0, r1
 80044de:	602b      	str	r3, [r5, #0]
 80044e0:	f7fd f924 	bl	800172c <_sbrk>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_sbrk_r+0x1a>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_sbrk_r+0x1a>
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	2000012c 	.word	0x2000012c

080044f4 <__sread>:
 80044f4:	b510      	push	{r4, lr}
 80044f6:	460c      	mov	r4, r1
 80044f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fc:	f000 f8a0 	bl	8004640 <_read_r>
 8004500:	2800      	cmp	r0, #0
 8004502:	bfab      	itete	ge
 8004504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004506:	89a3      	ldrhlt	r3, [r4, #12]
 8004508:	181b      	addge	r3, r3, r0
 800450a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800450e:	bfac      	ite	ge
 8004510:	6563      	strge	r3, [r4, #84]	; 0x54
 8004512:	81a3      	strhlt	r3, [r4, #12]
 8004514:	bd10      	pop	{r4, pc}

08004516 <__swrite>:
 8004516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451a:	461f      	mov	r7, r3
 800451c:	898b      	ldrh	r3, [r1, #12]
 800451e:	05db      	lsls	r3, r3, #23
 8004520:	4605      	mov	r5, r0
 8004522:	460c      	mov	r4, r1
 8004524:	4616      	mov	r6, r2
 8004526:	d505      	bpl.n	8004534 <__swrite+0x1e>
 8004528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452c:	2302      	movs	r3, #2
 800452e:	2200      	movs	r2, #0
 8004530:	f000 f868 	bl	8004604 <_lseek_r>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800453a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	4632      	mov	r2, r6
 8004542:	463b      	mov	r3, r7
 8004544:	4628      	mov	r0, r5
 8004546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800454a:	f000 b817 	b.w	800457c <_write_r>

0800454e <__sseek>:
 800454e:	b510      	push	{r4, lr}
 8004550:	460c      	mov	r4, r1
 8004552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004556:	f000 f855 	bl	8004604 <_lseek_r>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	bf15      	itete	ne
 8004560:	6560      	strne	r0, [r4, #84]	; 0x54
 8004562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800456a:	81a3      	strheq	r3, [r4, #12]
 800456c:	bf18      	it	ne
 800456e:	81a3      	strhne	r3, [r4, #12]
 8004570:	bd10      	pop	{r4, pc}

08004572 <__sclose>:
 8004572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004576:	f000 b813 	b.w	80045a0 <_close_r>
	...

0800457c <_write_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d07      	ldr	r5, [pc, #28]	; (800459c <_write_r+0x20>)
 8004580:	4604      	mov	r4, r0
 8004582:	4608      	mov	r0, r1
 8004584:	4611      	mov	r1, r2
 8004586:	2200      	movs	r2, #0
 8004588:	602a      	str	r2, [r5, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	f7fd f87d 	bl	800168a <_write>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_write_r+0x1e>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_write_r+0x1e>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	2000012c 	.word	0x2000012c

080045a0 <_close_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4d06      	ldr	r5, [pc, #24]	; (80045bc <_close_r+0x1c>)
 80045a4:	2300      	movs	r3, #0
 80045a6:	4604      	mov	r4, r0
 80045a8:	4608      	mov	r0, r1
 80045aa:	602b      	str	r3, [r5, #0]
 80045ac:	f7fd f889 	bl	80016c2 <_close>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_close_r+0x1a>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_close_r+0x1a>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	2000012c 	.word	0x2000012c

080045c0 <_fstat_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4d07      	ldr	r5, [pc, #28]	; (80045e0 <_fstat_r+0x20>)
 80045c4:	2300      	movs	r3, #0
 80045c6:	4604      	mov	r4, r0
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	602b      	str	r3, [r5, #0]
 80045ce:	f7fd f884 	bl	80016da <_fstat>
 80045d2:	1c43      	adds	r3, r0, #1
 80045d4:	d102      	bne.n	80045dc <_fstat_r+0x1c>
 80045d6:	682b      	ldr	r3, [r5, #0]
 80045d8:	b103      	cbz	r3, 80045dc <_fstat_r+0x1c>
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	bd38      	pop	{r3, r4, r5, pc}
 80045de:	bf00      	nop
 80045e0:	2000012c 	.word	0x2000012c

080045e4 <_isatty_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4d06      	ldr	r5, [pc, #24]	; (8004600 <_isatty_r+0x1c>)
 80045e8:	2300      	movs	r3, #0
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	f7fd f883 	bl	80016fa <_isatty>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_isatty_r+0x1a>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_isatty_r+0x1a>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	2000012c 	.word	0x2000012c

08004604 <_lseek_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4d07      	ldr	r5, [pc, #28]	; (8004624 <_lseek_r+0x20>)
 8004608:	4604      	mov	r4, r0
 800460a:	4608      	mov	r0, r1
 800460c:	4611      	mov	r1, r2
 800460e:	2200      	movs	r2, #0
 8004610:	602a      	str	r2, [r5, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	f7fd f87c 	bl	8001710 <_lseek>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_lseek_r+0x1e>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_lseek_r+0x1e>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	2000012c 	.word	0x2000012c

08004628 <__malloc_lock>:
 8004628:	4801      	ldr	r0, [pc, #4]	; (8004630 <__malloc_lock+0x8>)
 800462a:	f7ff bb1d 	b.w	8003c68 <__retarget_lock_acquire_recursive>
 800462e:	bf00      	nop
 8004630:	20000120 	.word	0x20000120

08004634 <__malloc_unlock>:
 8004634:	4801      	ldr	r0, [pc, #4]	; (800463c <__malloc_unlock+0x8>)
 8004636:	f7ff bb18 	b.w	8003c6a <__retarget_lock_release_recursive>
 800463a:	bf00      	nop
 800463c:	20000120 	.word	0x20000120

08004640 <_read_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4d07      	ldr	r5, [pc, #28]	; (8004660 <_read_r+0x20>)
 8004644:	4604      	mov	r4, r0
 8004646:	4608      	mov	r0, r1
 8004648:	4611      	mov	r1, r2
 800464a:	2200      	movs	r2, #0
 800464c:	602a      	str	r2, [r5, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	f7fc fffe 	bl	8001650 <_read>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_read_r+0x1e>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b103      	cbz	r3, 800465e <_read_r+0x1e>
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	2000012c 	.word	0x2000012c

08004664 <_init>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr

08004670 <_fini>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr
